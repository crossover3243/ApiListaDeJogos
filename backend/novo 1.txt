CREATE OR REPLACE PACKAGE BODY RB_REEMBOLSO is


/****************************************************************************************
    ALTERAÇÃO   : Inclusão da linha de produto.
    SOLICITANTE : PRJ0111627
    ANALISTA    : Fábio Ferreira
    FUNÇÃo      : GravaReembolso
    VERSÃO      : 09/07/2019 15:35 - Versão SPC 1.1  / BDY 1.205
****************************************************************************************/

 /*** MANUTENÇÕES ***********************************************************************
  ALTERAÇÃO   : PBI 144350 - Remover a mensagem Número de CPF...
  SOLICITANTE : Lidiane dos Santos
  DATA        : 25/11/2021
  ANALISTA    : Marcos Sousa
 **************************************************************************************
  ALTERAÇÃO   : PBI 146561 - Criar regra (1572) de geração de glosa para cpf executante =  cpf beneficiário
  SOLICITANTE : Lidiane dos Santos
  DATA        : 30/11/2021
  ANALISTA    : dalmiro (ajuste vscode)
 *************************************************************************/

/****************************************************************************************
    ALTERAÇÃO   : PBI 146560 - Criar regra (1573) de geração de glosa para cpf executante =  cpf favorecido
  SOLICITANTE : Lidiane dos Santos
  DATA        : 09/12/2021
  ANALISTA    : dalmiro
****************************************************************************************/

/****************************************************************************************
    ALTERAÇÃO   : PBI 146560 - Alterar regra da Glosa 1570 para considerar novos parâmetros
  SOLICITANTE : Lidiane dos Santos
  DATA        : 14/12/2021
  ANALISTA    : Adnré +
****************************************************************************************/

/****************************************************************************************
    ALTERAÇÃO   : PBI 180956 - Incluir regra para campos ocr
  SOLICITANTE : Lidiane dos Santos
  DATA        : 28/03/2022
  ANALISTA    : Dalmiro
****************************************************************************************/

/****************************************************************************************
    ALTERAÇÃO   : PBI 194682 - Tratar nova coluna ind_aguardando_documentacao
  SOLICITANTE : Lidiane dos Santos
  DATA        : 25/04/2022
  ANALISTA    : Dalmiro
****************************************************************************************/
/****************************************************************************************
    ALTERAÇÃO   : PBI 211073 - Incluir coluna de cod_tiss_unidade_medida
  SOLICITANTE : Lidiane dos Santos
  DATA        : 26/07/2022
  ANALISTA    : Dalmiro
****************************************************************************************/
/****************************************************************************************
    ALTERAÇÃO   : PBI 220103 - Incluir coluna de cod_tiss_unidade_medida_benef e consultas e inclusão
  SOLICITANTE : Lidiane dos Santos
  DATA        : 20/10/2022
  ANALISTA    : Alexsander
****************************************************************************************/
    --
    type param_xml_reg  is record ( nome     varchar2(50)
                                  , valor    varchar2(50)
                                  , tipo     varchar2(1)
                                  );
    --
    type param_xml_map  is table of param_xml_reg;
    --
    param_xml          param_xml_map := param_xml_map();
    --
    ----------------------------------------------------------------------------
    -- Retornar a versão da package no CVS
    ----------------------------------------------------------------------------
    function p_versao return Varchar2 is
    begin
        return 'Versão CVS Spec::1.37 - Body::1.205';
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um cursor vazio
    ----------------------------------------------------------------------------
    function  get_cursor_vazio return sys_refcursor
    --
    is
        c                         sys_refcursor;
    begin
        --
        open c
        for  select * from dual where 1 = 2;
        --
        return c;
        --
    exception
    when others then
        ts_log_execucao ( 'rb_reembolso'
                        , 10
                        , 'Erro-ORA: ' || ts_util.MsgErro || ' - ' || ts.top_utl_padrao.msgerro
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                  || chr(13) || 'Erro-ORA:'               || ts_util.MsgErro
                        , 'get_cursor_vazio' );
        --
        raise_application_error( -20001 , 'rb_reembolso.get_cursor_vazio - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro);
    end;
    procedure LiberaGrupoAnalise(p_num_reembolso in varchar2
                                 , p_cod_usuatio    in varchar2)
      is
      v_cod_tipo_usuario              usuario.cod_tipo_usuario%type;
      begin
        begin
            select cod_tipo_usuario
                into   v_cod_tipo_usuario
                from   usuario
                where  cod_usuario = p_cod_usuatio;
            exception
            when no_data_found then
                v_cod_tipo_usuario := 0;
            end;
            for C_item in ( select /* rb_reembolso.GravaReembolso */
                                   cod_grupo
                                 , num_seq_liberacao
                                 , rowid
                            from   pedido_reembolso_grupo
                            where  ind_situacao     = '1'
                            and    num_reembolso    = p_num_reembolso
                            and    cod_grupo        in ( select pgp.cod_grupo
                                                         from   reembolso_grupo_perfil pgp
                                                         where  exists        ( select cod_perfil
                                                                                from   ( select pu.cod_perfil
                                                                                         from   perfil_usuario pu
                                                                                         where  pu.cod_usuario = p_cod_usuatio
                                                                                         union
                                                                                         select ptu.cod_perfil
                                                                                         from   perfil_tipo_usuario ptu
                                                                                         where  ptu.cod_tipo_usuario = v_cod_tipo_usuario
                                                                                       ) x
                                                                                where  x.cod_perfil = pgp.cod_perfil
                                                                              )
                                                      )
                          )
            loop
                update /* rb_reembolso.GravaReembolso */
                       pedido_reembolso_grupo
                set    cod_usuario_liberacao     = p_cod_usuatio
                     , dt_liberacao              = sysdate
                     , ind_situacao              = '2'
                where  rowid                     = C_item.rowid;
            end loop;
      exception
        when others then
          ts_log_execucao ( 'RB_REEMBOLSO',
            1060,
            'Não foi possível liberar o pedido do grupo de análise. Erro: ' || Top_Utl_Padrao.MsgErro,
            '',
            'LIBERA_GRUPO_ANALISE');
    end;
    --
    ----------------------------------------------------------------------------
    -- Verifica se a glosa informada esta habilitada na data informada
    ----------------------------------------------------------------------------
    FUNCTION VerificaGlosa ( p_cod_critica             in varchar2
                           , p_dt_transacao            in varchar2
                           )
    return number
    is
        v_posicao           number;
        v_ind_uso           motivo_glosa.ind_uso_prb%type;
        v_ind_implementado  motivo_glosa.ind_implementado_prb%type;
        v_desc_msg          motivo_glosa.desc_reembolso%type;
        v_dt_ini_validade   motivo_glosa.dt_ini_prb%type;
        v_dt_fim_validade   motivo_glosa.dt_fim_prb%type;
        ------------------------------------------------------------------------
    BEGIN
        ----------------------------------------------------------------------
        --- Recupera a glosa informada
        ----------------------------------------------------------------------
        begin
            EXECUTE IMMEDIATE 'select ind_uso_rb, ind_implementado_rb, desc_reembolso, dt_ini_rb, dt_fim_rb
                               from   motivo_glosa
                               where  cod_motivo_glosa = :p_cod_critica'
            into  v_ind_uso,           v_ind_implementado,    v_desc_msg,
                  v_dt_ini_validade,   v_dt_fim_validade
            using p_cod_critica;
        exception
        when no_data_found then
            return 9;
        end;
        --
        --dbms_output.put_line(' verificando glosa =  ' || p_cod_critica || ' v_ind_uso = ' || v_ind_uso || ' v_ind_implementado = ' || v_ind_implementado || ' v_desc_msg = ' || v_desc_msg || ' v_dt_ini_validade = ' || v_dt_ini_validade ||  ' v_dt_fim_validade = '  || v_dt_fim_validade);
        --- verifica se a crítica está valida na data da transação
        if nvl(v_ind_implementado, 'N')  = 'S'  then
            if nvl(p_dt_transacao,trunc(sysdate)) between  nvl(v_dt_ini_validade,   nvl(p_dt_transacao,trunc(sysdate))) and nvl(v_dt_fim_validade,   nvl(p_dt_transacao,trunc(sysdate))) then
                --- verifica se a crítica está disponível para o tipo de crítica que está sendo realizada
                if nvl(v_ind_uso,'N') = 'S' /*and p_tipo_critica = 1*/ then
                    null;
                else
                    return 9;  --- crítica não habilitada
                end if;
            else
                return 9;    --- crítica não válida na data
            end if;
        else
            return 9;  --- crítica não habilitada
        end if;
        --
        return 0;
        --
    exception
    when others then
        return 9;
    end;
    --
    ----------------------------------------------------------------------------
    -- Gravar a glosa no reembolso
    ----------------------------------------------------------------------------
    procedure GravaGlosa ( p_num_reembolso        in number
                         , p_cod_motivo_glosa     in number
                         , p_num_seq_item         in number
                         , p_cod_procedimento     in varchar2
                         , p_dt_inclusao          in date
                         , p_cod_usuario_inclusao in varchar2
                         , p_txt_complemento      in varchar2
                         , p_cod_retorno          out number
                         , p_msg_retorno          out varchar2
                         )
    is
        v_posicao       number;
        v_item_vazio    varchar2(3) := '¿¿¿';
        v_desc_just_reembolso VARCHAR2(1010);
        CNES_INVALIDO   CONSTANT number:=340;

    begin
        v_posicao := 0;
        --
        if nvl(p_num_reembolso,0) = 0 then
            p_cod_retorno := 9;
            p_msg_retorno := 'Reembolso não informado';
            return;
        end if;
        --
        if NVL(p_cod_motivo_glosa,0) = 0 then
            p_cod_retorno := 9;
            p_msg_retorno := 'Critica não informada';
            return;
        end if;

		begin
			SELECT nvl(DESC_JUST_REEMBOLSO, v_item_vazio)
				INTO v_desc_just_reembolso
				FROM MOTIVO_GLOSA
				WHERE COD_MOTIVO_GLOSA = p_cod_motivo_glosa;
			exception
			when others then
				p_cod_retorno := 9;
				p_msg_retorno := 'Critica não encontrada';
				return;
        end;
		if v_desc_just_reembolso <> v_item_vazio then
			v_desc_just_reembolso := '###' || v_desc_just_reembolso;
		else
			v_desc_just_reembolso := null;
		end if;
        --
        --dbms_output.put_line('gravando glosa ' || p_cod_motivo_glosa  || ' p_num_seq_item = ' || p_num_seq_item  || '  p_num_reembolso  = '|| p_num_reembolso);
        begin
            insert into reembolso_glosa (
                    num_reembolso,                  cod_motivo_glosa,
                    num_seq_item,                   ind_analisado,
                    dt_inclusao,                    cod_usuario_inclusao,
                    txt_complemento)
           values  (p_num_reembolso,                p_cod_motivo_glosa,
                    NVL(p_num_seq_item,0),          'N',
                    NVL(p_dt_inclusao,sysdate),     p_cod_usuario_inclusao,
                    p_txt_complemento || '' || v_desc_just_reembolso);
        exception
        when dup_val_on_index then

            update reembolso_glosa
                set txt_complemento   = p_txt_complemento
                where num_reembolso     = p_num_reembolso
                and cod_motivo_glosa  = p_cod_motivo_glosa
                and num_seq_item      = NVL(p_num_seq_item,0);
        end;
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Adiciona procedimentos divisão proporcional
    ----------------------------------------------------------------------------
    procedure AdicionaProcDivisaoProp ( p_num_reembolso        in number
                                      , p_xml_procedimentos    in clob
                                      , p_cod_retorno          out number
                                      , p_msg_retorno          out varchar2
                                      )
    is
        v_posicao       number;
        v_item_vazio    varchar2(3) := '¿¿¿';

        cursor cur_p  (pXML in sys.XMLType)
        is
        select extractValue( VALUE(T) , '//CODIGO'  ) codigo
             , extractValue( VALUE(T) , '//IND_VIA' ) ind_via
             , extractValue( VALUE(T) , '//FUNCOES' ) funcoes
        from   table ( xmlsequence ( extract(pXML,'/DADOS/PROCEDIMENTO') ) ) T;
        --
        V_XML                           sys.XMLType;
        v_doc                           xmldom.DOMDocument;
        rsProcedimento                  procedimento_reembolso%rowtype;
        v_cod_retorno                   number;
        v_msg_retorno                   varchar2(2000);
        v_num_seq_item_aux              number;
    begin
        v_posicao := 0;
        --
        if nvl(p_num_reembolso,0) = 0 then
            v_cod_retorno := 9;
            v_msg_retorno := 'Reembolso não informado';
            return;
        end if;
        --
        if NVL(p_xml_procedimentos,'X') = 'X' then
            v_cod_retorno := 9;
            v_msg_retorno := 'Procedimentos não informados';
            return;
        end if;
        --
        V_XML := sys.XMLType.createXML( p_xml_procedimentos );
        --
        for rec_p in cur_p (V_XML) loop
            --
            begin
                select *
                  into rsProcedimento
                  from ts.procedimento_reembolso
                 where cod_procedimento_cm = rec_p.codigo
                   and num_reembolso       = p_num_reembolso
                   and nvl(ind_via,'X')    = nvl(rec_p.ind_via,'X')
                   and rownum = 1;
            exception
                when others then
                    v_cod_retorno := 9;
                    v_msg_retorno := 'Procedimento não encontrado.';
                    return;
            end;
            --
            -- limpa alguns campos antes de salvar
            rsProcedimento.val_informado := null;
            rsProcedimento.num_seq_item  := null;
            rsProcedimento.ind_funcao    := null;
            --
            delete from ts.procedimento_reembolso where cod_procedimento_cm = rec_p.codigo and nvl(ind_via,'X')    = nvl(rec_p.ind_via,'X') and num_reembolso = p_num_reembolso;
            --
            ts_cria_doc_xml(rec_p.funcoes, v_doc, v_cod_retorno, v_msg_retorno);
            --
            FOR i IN 0..12
            LOOP
                if ts_obtem_dados_xml(v_doc,'ITEM','FUNCAO_'||i) = 'S' then
                    --

                    select max(num_seq_item)+1
                      into v_num_seq_item_aux
                      from procedimento_reembolso
                     where num_reembolso = p_num_reembolso;

                    --
                    rsProcedimento.num_seq_item :=  nvl(v_num_seq_item_aux,1);
                    rsProcedimento.ind_funcao   :=  i;
                    --
                    insert into procedimento_reembolso
                    values rsProcedimento;
                    --
                end if;
            END LOOP;
            --
        end loop;
        --
        p_cod_retorno := v_cod_retorno;
        p_msg_retorno := v_msg_retorno;
    exception
        when others then
            p_cod_retorno := 9;
            p_msg_retorno := 'Erro na execução da divisão proporcional' || top_utl_padrao.msgerro;
    end;
    --
    ----------------------------------------------------------------------------
    -- Adiciona procedimentos divisão proporcional
    ----------------------------------------------------------------------------
    procedure CalculaDivisaoProporcional ( p_num_reembolso        in number
                                         , p_xml_procedimentos    in clob
                                         , p_ind_tipo_divisao     in varchar2 -- (VR) Valor Recibo - (VP) Valor procedimento
                                         , p_cod_retorno          out number
                                         , p_msg_retorno          out varchar2
                                         )
    is
        v_posicao       number;
        v_item_vazio    varchar2(3) := '¿¿¿';

        cursor cur_p  (pXML in sys.XMLType)
        is
        select extractValue( VALUE(T) , '//CODIGO'  ) codigo
             , extractValue( VALUE(T) , '//IND_VIA' ) ind_via
             , extractValue( VALUE(T) , '//VAL_INFORMADO' ) val_informado
        from   table ( xmlsequence ( extract(pXML,'/DADOS/PROCEDIMENTO') ) ) T;
        --
        V_XML                           sys.XMLType;
        v_doc                           xmldom.DOMDocument;
        rsProcedimento                  procedimento_reembolso%rowtype;
        v_cod_retorno                   number;
        v_msg_retorno                   varchar2(2000);
        v_num_seq_item_aux              number;

        valor_total_calc                number;
        valor_total_calc_proc           number;
        val_proc_recibo                 number;

        val_perc_funcao                 number;
        val_total_recibo                number;
        val_prop_proc                   number;

        val_funcao                      number;
    begin
        v_posicao := 0;
        --
        if nvl(p_num_reembolso,0) = 0 then
            v_cod_retorno := 9;
            v_msg_retorno := 'Reembolso não informado';
            return;
        end if;
        --
        if NVL(p_xml_procedimentos,'X') = 'X' then
            v_cod_retorno := 9;
            v_msg_retorno := 'Procedimentos não informados';
            return;
        end if;
        --
        V_XML := sys.XMLType.createXML( p_xml_procedimentos );
        --
        if p_ind_tipo_divisao = 'VR' then
            select val_informado
              into val_total_recibo
              from pedido_reembolso
             where num_reembolso = p_num_reembolso;
        end if;
        --
        select sum(val_calculado)
          into valor_total_calc
          from ts.procedimento_reembolso
         where num_reembolso       = p_num_reembolso;
        --
        for rec_p in cur_p (V_XML) loop
            --
            begin
                select sum(val_calculado)
                  into valor_total_calc_proc
                  from ts.procedimento_reembolso
                 where cod_procedimento_cm = rec_p.codigo
                   and nvl(ind_via,'X')    = nvl(rec_p.ind_via,'X')
                   and num_reembolso       = p_num_reembolso;
            exception
                when others then
                    v_cod_retorno := 9;
                    v_msg_retorno := 'Procedimento não encontrado.';
                    return;
            end;
            --
            -- valor do procedimento no recibo
            if p_ind_tipo_divisao = 'VR' then
                val_proc_recibo := ( valor_total_calc_proc / valor_total_calc ) * val_total_recibo;
            end if;
            --
            for f in ( select ind_funcao, val_calculado from procedimento_reembolso where num_reembolso = p_num_reembolso and cod_procedimento_cm = rec_p.codigo and nvl(ind_via,'X')    = nvl(rec_p.ind_via,'X') )
            loop

                if p_ind_tipo_divisao = 'VR' then
                    val_perc_funcao := ( f.val_calculado * 100 ) / valor_total_calc_proc;
                    val_funcao      := ( val_perc_funcao * val_proc_recibo ) / 100;
                elsif p_ind_tipo_divisao = 'VP' then
                    val_perc_funcao := ( f.val_calculado * 100 ) / valor_total_calc_proc;
                    val_funcao      := ( val_perc_funcao * ts_numero_web(rec_p.val_informado,2) ) / 100;
                end if;

                update procedimento_reembolso
                   set val_informado = val_funcao
                 where ind_funcao = f.ind_funcao
                   and cod_procedimento_cm = rec_p.codigo
                   and nvl(ind_via,'X')    = nvl(rec_p.ind_via,'X')
                   and num_reembolso = p_num_reembolso;

            end loop;
            --
        end loop;
        --
        p_cod_retorno := v_cod_retorno;
        p_msg_retorno := v_msg_retorno;
    exception
        when others then
            p_cod_retorno := 9;
            p_msg_retorno := 'Erro na execução da divisão proporcional' || top_utl_padrao.msgerro;
    end;
    --
    --
    -----------------------------------------------------------------
    procedure calcula_total_pedido     ( p_num_reembolso             in     number
                                       , p_ind_tipo_finalizacao      in     varchar2 default null)
    is
        v_val_reembolsado   pedido_reembolso.val_reembolsado%type;
        v_val_calculado     pedido_reembolso.val_calculado%type;
        v_val_glosa         pedido_reembolso.val_glosa%type;
        v_val_desc_copart   pedido_reembolso.val_desc_copart%type;
    begin
        --
        begin
          --Somar valor dos itens para colocar na cabeça
         select case when p_ind_tipo_finalizacao = 'R' then
                    sum(0)
                 else
                      sum(nvl(val_reembolsado,0))
                 end
             , sum(nvl(val_glosa,0) + nvl(val_glosa_man,0) + nvl(val_glosa_man_calc,0) )
             , sum(nvl(val_calculado,0))
             , sum(nvl(val_desc_copart,0))
         into   v_val_reembolsado
             ,  v_val_glosa
             ,  v_val_calculado
             ,  v_val_desc_copart
                from   procedimento_reembolso
                       where  num_reembolso = p_num_reembolso;
         --
         update pedido_reembolso
                set    val_reembolsado = v_val_reembolsado
                ,      val_glosa = v_val_glosa
                ,      val_calculado = v_val_calculado
                ,      val_desc_copart = v_val_desc_copart
          where  num_reembolso = p_num_reembolso;

          if p_ind_tipo_finalizacao = 'R' then

             UPDATE procedimento_reembolso
                SET val_reembolsado = v_val_reembolsado
                where  num_reembolso = p_num_reembolso;
          end if;

        exception
          when others then
             null;
        end;
        --
    exception
    when others then
        null;
    end;
    --
    ----------------------------------------------------------------------------
    -- Retornar um parametro da controle sistema
    ----------------------------------------------------------------------------
    procedure RetornaParametro (p_cod_parametro   in varchar2,
                                p_val_parametro  out varchar2,
                                p_val_default     in varchar2 default '')
    is
    begin
        --
        begin
            select val_parametro
            into   p_val_parametro
            from   controle_sistema
            where  cod_parametro = p_cod_parametro;
        exception
        when no_data_found then
            p_val_parametro := p_val_default;
        end;
        --
        return;
    end;
    --
    ----------------------------------------------------------------------------
    -- Adicionar XML no XML informado
    ----------------------------------------------------------------------------
    procedure add_xml ( p_xml_completo      in out nocopy clob
                      , p_xml_add           in clob
                      , p_no_inclusao       in varchar2
                      )
    is
        vTipoXML                xmlType;
        vXMLRetorno             clob;
    begin
        --
        if nvl(p_xml_add,'X') = 'X'     then    return;
        end if;
        --
        if nvl(p_no_inclusao,'X') = 'X' then    return;
        end if;
        --
        vTipoXML := xmlType.appendChildXML ( sys.XMLType ( p_xml_completo )
                                           , p_no_inclusao
                                           , sys.XMLType ( replace(p_xml_add,'<?xml version="1.0"?>','') )
                                           );
        --
        p_xml_completo := vTipoXML.getclobval();
        --
        return;
        --
    exception
        when others then
        ts_log_execucao ( 'RB_REEMBOLSO'
                        , 10
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                  || chr(13) || 'Erro-ORA:'     || ts_util.MsgErro
                                  || chr(13) || 'XML Completo:' || p_xml_completo
                                  || chr(13) || 'XML Add:'      || p_xml_add
                                  || chr(13) || 'p_no_inclusao:'|| p_no_inclusao
                        , 'add_xml' );
    end;
    ------------------------------------------------------------------------------
    -- Validar inclusão ou alteração do solicitante (duplicidade)
    ------------------------------------------------------------------------------
    function valida_gravacao_solicitante ( p_tab_parans  in top_utl_xml.tbl_fields )
    return pls_integer
    is
        str_sql         varchar2(4000);
        v_qtd           pls_integer;
    begin
        --
        --
        -- Validação de Inscrição + Conselho
        --
        str_sql :=  rtrim (' select count(*)                                              ')
                  ||rtrim (' from   solicitante                                           ')
                  ||rtrim (' where                                                        ');
        --
        if p_tab_parans('num_insc_fiscal').valor(1) is not null then
            str_sql := str_sql || rtrim (' num_insc_fiscal        = :num_insc_fiscal      ');
        else
            str_sql := str_sql || rtrim (' 1                      = :num_insc_fiscal      '); --Deve ser 1=0 mesmo para não achar e passar na validação
        end if;
        --
        execute immediate str_sql
                     into v_qtd
                    using to_number(nvl(p_tab_parans('num_insc_fiscal').valor(1),0));
        --
        if v_qtd > 0 then return 1;
        end if;
        --
        return 0; --Validação OK
        --
    exception
    when others then
        ts_log_execucao ('RBM_PROTOCOLO'
                        , NULL
                        , ts_util.MsgErro
                        , str_sql
                        , 'Erro'
                        ) ;
        return 1;
    end;


    ------------------------------------------------------------------------------
    -- Incluir o solicitante informado ( se não existir )
    ------------------------------------------------------------------------------
    procedure grava_solicitante     ( p_cod_retorno     out pls_integer
                                    , p_msg_retorno     out varchar2
                                    , p_xml_parametros  in  clob
                                    )
    is
        tab_parans              top_utl_xml.tbl_fields;
        str_sql                 varchar2(32000);
        v_cod_solicitante       solicitante.cod_solicitante%type;
        v_qtd                   pls_integer;
    begin
        --
        tab_parans := ts.top_utl_xml.toCollection( p_xml_parametros ); -- Retorna um MAP ( chave , valor ) com os nós do XML;
        --
        if valida_gravacao_solicitante ( tab_parans ) = 0 then
            --
            str_sql :=  rtrim (' insert into solicitante                        ')
                    ||rtrim ('         ( cod_solicitante                      ')
                    ||rtrim ('         , nome_solicitante                     ')
                    ||rtrim ('         , ind_tipo_pessoa                      ')
                    ||rtrim ('         , num_crm                              ')
                    ||rtrim ('         , num_insc_fiscal                      ')
                    ||rtrim ('         , sgl_uf_conselho                      ')
                    ||rtrim ('         , sigla_conselho                       ')
                    ||rtrim ('         , cod_municipio_execucao               ')
                    ||rtrim ('         , ind_situacao                         ')
                    ||rtrim ('         , txt_origem                           ')
                    ||rtrim ('         , dt_atu                               ')
                    ||rtrim ('         , cod_usuario_atu                      ')
                    ||rtrim (') values ( :cod_solicitante                     ')
                    ||rtrim ('         , :nome_solicitante                    ')
                    ||rtrim ('         , :ind_tipo_pessoa                     ')
                    ||rtrim ('         , :num_crm                             ')
                    ||rtrim ('         , :num_insc_fiscal                     ')
                    ||rtrim ('         , :sgl_uf_conselho                     ')
                    ||rtrim ('         , :sigla_conselho                      ')
                    ||rtrim ('         , :cod_municipio_execucao              ')
                    ||rtrim ('         , :ind_situacao                        ')
                    ||rtrim ('         , :txt_origem                          ')
                    ||rtrim ('         , :dt_atu                              ')
                    ||rtrim ('         , :cod_usuario_atu                     ')
                    ||rtrim ('         )                                      ');
            --
            select ts_solicitante_seq.nextval
            into   v_cod_solicitante
            from   dual;
            --
            execute immediate str_sql
                      using v_cod_solicitante
                          , tab_parans('nome_solicitante').valor(1)
                          , tab_parans('ind_tipo_pessoa').valor(1)
                          , tab_parans('num_crm').valor(1)
                          , tab_parans('num_insc_fiscal').valor(1)
                          , tab_parans('sgl_uf_conselho').valor(1)
                          , tab_parans('sigla_conselho').valor(1)
                          , tab_parans('cod_municipio_execucao').valor(1)
                          , 1
                          , 'WEB'
                          , sysdate
                          , tab_parans('cod_usuario').valor(1);
        else

                str_sql :=  rtrim (' update solicitante                                                       ')
                          ||rtrim ('        set nome_solicitante           = :nome_solicitante                ')
                          ||rtrim ('          , ind_tipo_pessoa            = :ind_tipo_pessoa                 ')
                          ||rtrim ('          , num_crm                    = :num_crm                         ')
                          ||rtrim ('          , sgl_uf_conselho            = :sgl_uf_conselho                 ')
                          ||rtrim ('          , sigla_conselho             = :sigla_conselho                  ')
                          ||rtrim ('          , cod_municipio_execucao     = :cod_municipio_execucao          ')
                          ||rtrim ('          , dt_atu                     = :dt_atu                          ')
                          ||rtrim ('          , cod_usuario_atu            = :cod_usuario_atu                 ')
                          ||rtrim (' where      num_insc_fiscal            = :num_insc_fiscal                 ');

                execute immediate str_sql
                      using tab_parans('nome_solicitante').valor(1)
                          , tab_parans('ind_tipo_pessoa').valor(1)
                          , tab_parans('num_crm').valor(1)
                          , tab_parans('sgl_uf_conselho').valor(1)
                          , tab_parans('sigla_conselho').valor(1)
                          , tab_parans('cod_municipio_execucao').valor(1)
                          , sysdate
                          , tab_parans('cod_usuario').valor(1)
                          , tab_parans('num_insc_fiscal').valor(1);


        end if;
        --
        p_cod_retorno := 0;
        p_msg_retorno := 'Operação realizada com sucesso';
        return;
        --
    exception
    when others then
        --
        ts_log_execucao ('RBM_PROTOCOLO'
                        , NULL
                        , 'Erro'
                        , p_xml_parametros || chr(13) || str_sql || chr(13) || ts_util.MsgErro || chr(13) || ts.top_utl_padrao.msgerro
                        , 'Erro'
                        ) ;

        p_cod_retorno := 9;
        p_msg_retorno := 'Erro: ' || ts.top_utl_padrao.msgerro ;
        return;
    end;
    ------------------------------------------------------------------------------
    -- Incluir o solicitante informado no reembolso
    ------------------------------------------------------------------------------
    procedure grava_solicitante_reembolso ( p_cod_solicitante out number
                                          , p_cod_retorno     out pls_integer
                                          , p_msg_retorno     out varchar2
                                          , p_xml_parametros  in  clob
                                          )
    is
        tab_parans              top_utl_xml.tbl_fields;
        str_sql                 varchar2(32000);
        v_cod_solicitante       solicitante.cod_solicitante%type;
        v_num_reembolso         number(15,0);
    begin
        --
        tab_parans := ts.top_utl_xml.toCollection( p_xml_parametros ); -- Retorna um MAP ( chave , valor ) com os nós do XML;
        --
        v_cod_solicitante := tab_parans('cod_solicitante').valor(1);
        v_num_reembolso   := tab_parans('num_reembolso').valor(1);
        --
        if v_cod_solicitante is null then
            --
            str_sql :=  rtrim (' insert into solicitante                      ')
                    ||rtrim ('         ( cod_solicitante                      ')
                    ||rtrim ('         , nome_solicitante                     ')
                    ||rtrim ('         , ind_tipo_pessoa                      ')
                    ||rtrim ('         , num_crm                              ')
                    ||rtrim ('         , num_insc_fiscal                      ')
                    ||rtrim ('         , sgl_uf_conselho                      ')
                    ||rtrim ('         , sigla_conselho                       ')
                    ||rtrim ('         , cod_municipio_execucao               ')
                    ||rtrim ('         , ind_situacao                         ')
                    ||rtrim ('         , txt_origem                           ')
                    ||rtrim ('         , dt_atu                               ')
                    ||rtrim ('         , cod_usuario_atu                      ')
                    ||rtrim (') values ( :cod_solicitante                     ')
                    ||rtrim ('         , :nome_solicitante                    ')
                    ||rtrim ('         , :ind_tipo_pessoa                     ')
                    ||rtrim ('         , :num_crm                             ')
                    ||rtrim ('         , :num_insc_fiscal                     ')
                    ||rtrim ('         , :sgl_uf_conselho                     ')
                    ||rtrim ('         , :sigla_conselho                      ')
                    ||rtrim ('         , :cod_municipio_execucao              ')
                    ||rtrim ('         , :ind_situacao                        ')
                    ||rtrim ('         , :txt_origem                          ')
                    ||rtrim ('         , :dt_atu                              ')
                    ||rtrim ('         , :cod_usuario_atu                     ')
                    ||rtrim ('         )                                      ');
            --
            select ts_solicitante_seq.nextval
            into   v_cod_solicitante
            from   dual;
            --
            execute immediate str_sql
                      using v_cod_solicitante
                          , tab_parans('nome_solicitante').valor(1)
                          , tab_parans('ind_tipo_pessoa').valor(1)
                          , tab_parans('num_crm').valor(1)
                          , tab_parans('num_insc_fiscal').valor(1)
                          , tab_parans('sgl_uf_conselho').valor(1)
                          , tab_parans('sigla_conselho').valor(1)
                          , tab_parans('cod_municipio_execucao').valor(1)
                          , 1
                          , 'WEB'
                          , sysdate
                          , tab_parans('cod_usuario').valor(1);

        else

                str_sql :=  rtrim (' update solicitante                                                       ')
                          ||rtrim ('        set nome_solicitante           = :nome_solicitante                ')
                          ||rtrim ('          , ind_tipo_pessoa            = :ind_tipo_pessoa                 ')
                          ||rtrim ('          , num_insc_fiscal            = :num_insc_fiscal                 ')
                          ||rtrim ('          , num_crm                    = :num_crm                         ')
                          ||rtrim ('          , sgl_uf_conselho            = :sgl_uf_conselho                 ')
                          ||rtrim ('          , sigla_conselho             = :sigla_conselho                  ')
                          ||rtrim ('          , cod_municipio_execucao     = :cod_municipio_execucao          ')
                          ||rtrim ('          , dt_atu                     = :dt_atu                          ')
                          ||rtrim ('          , cod_usuario_atu            = :cod_usuario_atu                 ')
                          ||rtrim (' where      cod_solicitante            = :cod_solicitante                 ');

                execute immediate str_sql
                      using tab_parans('nome_solicitante').valor(1)
                          , tab_parans('ind_tipo_pessoa').valor(1)
                          , tab_parans('num_insc_fiscal').valor(1)
                          , tab_parans('num_crm').valor(1)
                          , tab_parans('sgl_uf_conselho').valor(1)
                          , tab_parans('sigla_conselho').valor(1)
                          , tab_parans('cod_municipio_execucao').valor(1)
                          , sysdate
                          , tab_parans('cod_usuario').valor(1)
                          , tab_parans('cod_solicitante').valor(1);

        end if;
        --
        p_cod_solicitante := v_cod_solicitante;
        p_cod_retorno := 0;
        p_msg_retorno := 'Operação realizada com sucesso';
        return;
        --
    exception
    when others then
        --
        ts_log_execucao ('RBM_PROTOCOLO'
                        , NULL
                        , 'Erro'
                        , p_xml_parametros || chr(13) || str_sql || chr(13) || ts_util.MsgErro || chr(13) || ts.top_utl_padrao.msgerro
                        , 'Erro'
                        ) ;

        p_cod_retorno := 9;
        p_msg_retorno := 'Erro: ' || ts.top_utl_padrao.msgerro ;
        return;
    end;
    --
    --
    PROCEDURE    registra_utilizacao_item ( pNumReembolso      in     number,
                                            pNumSeqItem        in     number,
                                            p_msg_retorno      out    varchar2,
                                            p_cod_retorno      out    number,
                                            p_cod_participacao_ts in number   default null
                                           )   is

    v_posicao          number;
    v_cod_ts_tit       associado.cod_ts_tit%type;
    v_cod_cbo          number;
    begin

    v_posicao := 1;

    --
    --
    ----------------------------------------------------------------------------------------------------
    --- diárias
    ----------------------------------------------------------------------------------------------------
    v_posicao := 3;

    for c_reemb in
         (  select a.num_reembolso,                           b.cod_grupo_estatistico,
                   a.cod_ts,                                  a.num_associado,
                   a.num_internacao,                          sum(nvl(b.qtd_aprovada,0)) qtd_aprovada,
                   a.cod_tipo_alta,                           b.data_atendimento,
                   a.cod_cid,                                 a.cod_tratamento,
                   b.cod_participacao_ts,                     b.cod_cobertura_ts,
                   a.ind_carater,                             a.dt_pedido
              from pedido_reembolso a
                 , procedimento_reembolso b
             where a.num_reembolso    = b.num_reembolso
               and b.num_seq_item     = pNumSeqItem
               and ( a.cod_ts  is not null or a.num_associado is not null )
               and ( b.cod_grupo_estatistico in ( select g.cod_grupo_estatistico
                                                    from grupo_estatistico g
                                                   where g.cod_grupo_pai = 'DIA'
                                                )
                     or
                     b.cod_grupo_estatistico = 'DIA'
                   )
               and b.data_atendimento is not null
               and nvl(b.qtd_aprovada,0)    > 0
               and nvl(b.val_aprovado,0)    > 0
               and a.num_reembolso          = pNumReembolso
          group by a.num_reembolso,         b.cod_grupo_estatistico,
                   a.cod_ts,                a.num_associado,
                   a.num_internacao,        a.cod_tipo_alta,
                   b.data_atendimento,      a.cod_cid,
                   a.cod_tratamento,        a.dt_pedido,
                   b.cod_participacao_ts,   b.cod_cobertura_ts,
                   a.ind_carater
         )
    loop
    --
        v_posicao     := 4;
        --
        begin

         insert into ctm_diaria_realizada
           ( cod_grupo_estatistico,         cod_ts_sinistro,                    cod_ts,
             num_associado,                 qtd_utilizada,                      num_internacao,
             ind_tipo,                      cod_tipo_alta,                      dt_utilizacao,
             cod_prestador_ts,              cod_cid,                            cod_participacao_ts,
             cod_cobertura_ts,              ind_carater,                        mes_ano_ref
           )
         values
           ( c_reemb.cod_grupo_estatistico, c_reemb.num_reembolso,         c_reemb.cod_ts,
             c_reemb.num_associado,         c_reemb.qtd_aprovada,          c_reemb.num_internacao,
             'R',                           c_reemb.cod_tipo_alta,         c_reemb.data_atendimento,
             null,                          c_reemb.cod_cid,               coalesce(p_cod_participacao_ts, c_reemb.cod_participacao_ts,0),
             c_reemb.cod_cobertura_ts,      c_reemb.ind_carater,           trunc(c_reemb.dt_pedido,'month')
           );

        exception
           when dup_val_on_index then
              update ctm_diaria_realizada
                 set qtd_utilizada = nvl(qtd_utilizada,0) + c_reemb.qtd_aprovada
              where  cod_ts_sinistro       = c_reemb.num_reembolso         and
                     dt_utilizacao         = c_reemb.data_atendimento      and
                     cod_grupo_estatistico = c_reemb.cod_grupo_estatistico and
                     cod_participacao_ts   = coalesce(p_cod_participacao_ts, c_reemb.cod_participacao_ts,0);
        end;
    --
    end loop;
    ----------------------------------------------------------------------------------------------------
    --- procedimento / consulta
    ----------------------------------------------------------------------------------------------------
    for c_reemb in
         ( select a.num_reembolso,                                      b.cod_procedimento_cm,
                  a.cod_ts,                                             a.num_associado,
                  a.cod_cbo,                                            a.num_internacao,
                  b.data_atendimento,                                   nvl(b.ind_funcao,0) ind_funcao,
                  sum(nvl(b.qtd_aprovada,0)) qtd_aprovada,              nvl(a.sigla_conselho,'CRM') sgl_crm,
                  nvl(a.num_crm,99999) num_crm,                         a.uf_conselho uf_crm,
                  nvl(b.cod_especialidade,'0110') cod_especialidade,    b.cod_grupo_estatistico,
                  a.cod_cid,                                            null cod_prestador_ts,
                  a.cod_tratamento,                                     b.cod_participacao_ts,
                  b.cod_cobertura_ts,                                   a.ind_carater,
                  a.dt_pedido
             from pedido_reembolso a
                , procedimento_reembolso b
            where a.num_reembolso       = pNumReembolso
              and b.num_seq_item        = pNumSeqItem
              and a.num_reembolso       = b.num_reembolso
              and ( a.cod_ts            is not null or a.num_associado is not null )
              and nvl(qtd_aprovada,0)   > 0
              and cod_procedimento_cm   is not null
              and nvl(b.val_aprovado,0) > 0
              and nvl(b.cod_grupo_estatistico,'XXX') not in ( select g.cod_grupo_estatistico
                                                                from grupo_estatistico g
                                                               where g.cod_grupo_pai = 'DIA' or g.cod_grupo_estatistico = 'DIA'
                                                             )
         group by   a.num_reembolso,                     b.cod_procedimento_cm,
                    b.cod_procedimento,
                    a.cod_ts,                            a.num_associado,
                    a.cod_cbo,                           a.num_internacao,
                    b.data_atendimento,                  nvl(b.ind_funcao,0),
                    a.cod_cid,                           a.cod_tratamento,
                    nvl(a.sigla_conselho,'CRM'),         nvl(a.num_crm,99999),
                    a.uf_conselho,                       b.cod_especialidade,
                    b.cod_grupo_estatistico,             b.cod_participacao_ts,
                    b.cod_cobertura_ts,                  a.ind_carater,
                    a.dt_pedido
         )
    loop
    --
        v_posicao     := 7;
        --
        begin
           v_cod_cbo := to_number(c_reemb.cod_cbo);
        exception
           when others then
              v_cod_cbo := null;
        end;
        --
        v_posicao     := 70;
        --
        v_cod_ts_tit:= c_reemb.cod_ts;
        if c_reemb.cod_ts is not null then
           begin
              select cod_ts_tit
                into v_cod_ts_tit
                from associado
               where cod_ts = c_reemb.cod_ts;
            exception
                when no_data_found then
                     null;
            end;
        end if;
        --
        v_posicao     := 71;
        --
        if c_reemb.cod_grupo_estatistico = 'CEL'  then
            begin
            v_posicao     := 81;

            insert into ctm_consulta_realizada
              ( cod_procedimento,               cod_ts_sinistro,                                                    cod_ts,
                num_associado,                  qtd_utilizada,                                                      dt_atendimento,
                cod_funcao,                     cod_prestador_ts,                                                   cod_grupo_estatistico,
                cod_cid,                        cod_especialidade,                                                  sgl_cr,
                num_cr,                         sgl_uf_cr,                                                          num_ap,
                cod_tratamento,                 cod_participacao_ts,                                                cod_cbo,
                cod_cobertura_ts,               ind_tipo,                                                           ind_carater,
                cod_ts_tit,                     mes_ano_ref
              )
            values
             ( c_reemb.cod_procedimento_cm,     c_reemb.num_reembolso,                                              c_reemb.cod_ts,
               c_reemb.num_associado,           c_reemb.qtd_aprovada,                                               c_reemb.data_atendimento,
               0,                               c_reemb.cod_prestador_ts,                                           c_reemb.cod_grupo_estatistico,
               c_reemb.cod_cid,                 c_reemb.cod_especialidade,                                          c_reemb.sgl_crm,
               c_reemb.num_crm,                 c_reemb.uf_crm,                                                     c_reemb.num_internacao,
               c_reemb.cod_tratamento,          coalesce(p_cod_participacao_ts, c_reemb.cod_participacao_ts,0),     v_cod_cbo,
               c_reemb.cod_cobertura_ts,        'R',                                                                c_reemb.ind_carater,
               v_cod_ts_tit,                    trunc(c_reemb.dt_pedido,'month')
             );
           exception
              when dup_val_on_index then
                   update ctm_consulta_realizada
                      set qtd_utilizada = nvl(qtd_utilizada,0) + c_reemb.qtd_aprovada
                    where cod_ts_sinistro    = c_reemb.num_reembolso        and
                          cod_procedimento    = c_reemb.cod_procedimento_cm and
                          num_associado       = c_reemb.num_associado       and
                          dt_atendimento      = c_reemb.data_atendimento    and
                          cod_especialidade   = c_reemb.cod_especialidade   and
                          num_cr              = c_reemb.num_crm             and
                          cod_funcao          = 0                           and
                          cod_participacao_ts = coalesce(p_cod_participacao_ts, c_reemb.cod_participacao_ts,0) ;

           end;
         else
           begin
               v_posicao     := 91;
               --
               insert into ctm_procedimento_realizado
                 ( cod_procedimento,                        cod_ts_sinistro,                                                 cod_ts,
                   num_associado,                           qtd_utilizada,                                                   num_internacao,
                   ind_tipo,                                dt_utilizacao,                                                   cod_funcao,
                   cod_prestador_ts,                        cod_grupo_estatistico,                                           cod_cid,
                   cod_tratamento,                          cod_participacao_ts,                                             cod_cbo,
                   cod_cobertura_ts,                        ind_carater,                                                     cod_ts_tit,
                   mes_ano_ref
                 )
               values
                 ( c_reemb.cod_procedimento_cm,             c_reemb.num_reembolso,                                           c_reemb.cod_ts,
                   c_reemb.num_associado,                   c_reemb.qtd_aprovada,                                            c_reemb.num_internacao,
                   'R',                                     c_reemb.data_atendimento,                                        c_reemb.ind_funcao,
                   c_reemb.cod_prestador_ts,                c_reemb.cod_grupo_estatistico,                                   c_reemb.cod_cid,
                   c_reemb.cod_tratamento,                  coalesce(p_cod_participacao_ts, c_reemb.cod_participacao_ts,0),  v_cod_cbo,
                   c_reemb.cod_cobertura_ts,                c_reemb.ind_carater,                                             v_cod_ts_tit,
                   trunc(c_reemb.dt_pedido,'month')
                 );
                --
           exception
             when dup_val_on_index then
              update ctm_procedimento_realizado
                 set qtd_utilizada = nvl(qtd_utilizada,0) + c_reemb.qtd_aprovada
               where cod_procedimento    = c_reemb.cod_procedimento_cm  and
                     cod_funcao          = c_reemb.ind_funcao           and
                     cod_ts_sinistro     = c_reemb.num_reembolso        and
                     num_associado       = c_reemb.num_associado        and
                     dt_utilizacao       = c_reemb.data_atendimento     and
                     cod_participacao_ts = coalesce(p_cod_participacao_ts, c_reemb.cod_participacao_ts,0);
           end;
         end if;

    end loop;
    --
    v_posicao     := 8;
    ----------------------------------------------------------------------------------------------------
    p_cod_retorno := 0;
    p_msg_retorno := 'OK';
    exception
        when others then
            p_cod_retorno := 9;
            p_msg_retorno := 'RB_REGISTRA_UTILIZACAO_ITEM-' || v_posicao || ': ' || ts_util.MsgErro;
    end;

    FUNCTION    CM_CONVERTE_AMB_CBHPM_S(p_cod_procedimento in varchar2
                                           ,p_dt_atendimento   in date
                                           ,p_cod_padrao       in varchar2
                                           ,p_tipo_de_para     in varchar2
                                           )
            return varchar2 is
            v_qtd_existe number;
            v_cod_procedimento itens_medicos.item_medico%type;
            v_msg_retorno varchar2(4000);
            v_cod_retorno number;
            v_ind_padrao_operadora   tipo_depara.ind_padrao_operadora%type;
            v_ind_padrao_intercambio tipo_depara.ind_padrao_intercambio%type;
            v_cod_tipo_depara        tipo_depara.cod_tipo_depara%type;
            v_dt_ini_vigencia        ctm_converte_cbhpm_amb.dt_ini_vigencia%type;
    begin
            ----------------------------------------
            if p_tipo_de_para = 'O' then
                v_ind_padrao_operadora   := 'S';
                v_ind_padrao_intercambio := 'N';
                --- obtém o tipo de-para
                begin
                    select cod_tipo_depara
                    into   v_cod_tipo_depara
                    from   tipo_depara
                    where  nvl(ind_padrao_operadora, 'N') = 'S'
                    and    rownum < 2;
                exception
                    when no_data_found then
                        return p_cod_procedimento;
                end;
            else
                v_ind_padrao_operadora   := 'N';
                v_ind_padrao_intercambio := 'S';
                --- obtém o tipo de-para
                begin
                    select cod_tipo_depara
                    into   v_cod_tipo_depara
                    from   tipo_depara
                    where  nvl(ind_padrao_intercambio, 'N') = 'S'
                    and    rownum < 2;
                exception
                    when no_data_found then
                        return p_cod_procedimento;
                end;
            end if;
            --
            if p_cod_padrao = 'AMB' then
                -- Destino AMB
                -- obtém a data de vigência do de-para
                select max(dt_ini_vigencia)
                into   v_dt_ini_vigencia
                from   ctm_converte_cbhpm_amb
                where  cod_tipo_depara = v_cod_tipo_depara
                and    p_dt_atendimento between dt_ini_vigencia and
                       nvl(dt_fim_vigencia, p_dt_atendimento);
                -- Verifico se tem mais que uma incidência na tabela
                select count(*)
                into   v_qtd_existe
                from   ctm_converte_cbhpm_amb
                where  cbhpm = p_cod_procedimento
                and    cod_tipo_depara = v_cod_tipo_depara
                and    dt_ini_vigencia = v_dt_ini_vigencia;
                if v_qtd_existe >= 1 then
                    -- Se houver
                    begin
                        -- verifico se tem algum mandatório e pego o primeiro
                        select amb
                        into   v_cod_procedimento
                        from   ctm_converte_cbhpm_amb
                        where  cbhpm = p_cod_procedimento
                        and    cod_tipo_depara = v_cod_tipo_depara
                        and    dt_ini_vigencia = v_dt_ini_vigencia
                        and    nvl(ind_referencia, 'N') = 'S'
                        and    rownum < 2;
                        return v_cod_procedimento;
                    exception
                        when no_data_found then
                            -- senão houver mandatório, pego o primeiro que tiver
                            begin
                                select amb
                                into   v_cod_procedimento
                                from   ctm_converte_cbhpm_amb
                                where  cbhpm = p_cod_procedimento
                                and    cod_tipo_depara = v_cod_tipo_depara
                                and    dt_ini_vigencia = v_dt_ini_vigencia
                                and    rownum < 2;
                                return v_cod_procedimento;
                            exception
                                when no_data_found then
                                    return p_cod_procedimento;
                            end;
                    end;
                else
                    return p_cod_procedimento;
                end if;
            else
                -- Destino CBHPM
                -- obtém a data de vigência do de-para
                select max(dt_ini_vigencia)
                into   v_dt_ini_vigencia
                from   ctm_converte_amb_cbhpm
                where  cod_tipo_depara = v_cod_tipo_depara
                and    p_dt_atendimento between dt_ini_vigencia and
                       nvl(dt_fim_vigencia, p_dt_atendimento);
                -- Verifico se tem mais que uma incidência na tabela
                select count(*)
                into   v_qtd_existe
                from   ctm_converte_amb_cbhpm
                where  amb = p_cod_procedimento
                and    cod_tipo_depara = v_cod_tipo_depara
                and    dt_ini_vigencia = v_dt_ini_vigencia;
                if v_qtd_existe >= 1 then
                    -- Se houver
                    begin
                        -- verifico se tem algum mandatório e pego o primeiro
                        select cbhpm
                        into   v_cod_procedimento
                        from   ctm_converte_amb_cbhpm
                        where  amb = p_cod_procedimento
                        and    cod_tipo_depara = v_cod_tipo_depara
                        and    dt_ini_vigencia = v_dt_ini_vigencia
                        and    nvl(ind_referencia, 'N') = 'S'
                        and    rownum < 2;
                        return v_cod_procedimento;
                    exception
                        when no_data_found then
                            -- senão houver mandatório, pego o primeiro que tiver
                            select cbhpm
                            into   v_cod_procedimento
                            from   ctm_converte_amb_cbhpm
                            where  amb = p_cod_procedimento
                            and    cod_tipo_depara = v_cod_tipo_depara
                            and    dt_ini_vigencia = v_dt_ini_vigencia
                            and    rownum < 2;
                            return v_cod_procedimento;
                    end;
                else
                    return p_cod_procedimento;
                end if;
                return nvl(v_cod_procedimento, p_cod_procedimento);
            end if;
    exception
            when others then
                return p_cod_procedimento;
    end;
    --
    PROCEDURE    rb_dup_reexec_geral ( p_cod_procedimento  in  varchar2,
                                       p_dt_atendimento    in  date,
                                       p_qtd_utilizada     in  number,
                                       p_cod_funcao        in  number,
                                       p_cod_ts            in  number,
                                       p_num_reembolso     in  number,
                                       p_num_seq_item      in  number,
                                       p_rowid             in  rowid,
                                       p_cod_ts_sinistro   in  number,
                                       p_num_associado     in  varchar2,
                                       p_dt_pedido         in  date,
                                       p_cod_usuario       in  varchar2,
                                       p_cod_motivo_glosa  out number,
                                       p_msg_retorno       out varchar2,
                                       p_cod_retorno       out number )   is
    ------------------------------------------------------------------------------
    v_quantidade                number;
    v_ind_tipo_pessoa           prestador_servico.ind_tipo_pessoa%type;
    v_cod_ts_sinistro_dup       ctm_itens_contas.cod_ts_item%type;
    v_qtd_dias_periodo          itens_medicos.qtd_dias_periodo%type;
    v_qtd_limite                itens_medicos.qtd_limite%type;
    v_cod_grupo_estatistico     itens_medicos.cod_grupo_estatistico%type;
    v_cod_padrao                itens_medicos.cod_padrao%type;
    v_cod_padrao_dest           itens_medicos.cod_padrao%type;
    v_cod_procedimento          ctm_itens_contas.cod_procedimento_cm%type;
    v_qtd_limite_int            itens_medicos.qtd_limite%type;
    v_qtd_dias_periodo_int      itens_medicos.qtd_dias_periodo%type;
    v_qtd_int_pdia              itens_medicos.qtd_int_pdia%type;
    v_qtd_nao_int_pdia          itens_medicos.qtd_nao_int_pdia%type;
    v_qtd_dia                   itens_medicos.qtd_nao_int_pdia%type;
    v_qtd_utilizada             ctm_consulta_realizada.qtd_utilizada%type;
    v_ind_internado             tipo_tratamento.ind_internado%type;
    v_msg_retorno               varchar2(200);
    v_qtd_aprovada              number;
    v_cod_retorno               number;
    v_posicao                   number;
    v_cod_motivo_glosa          number;
    rsReembolso                 pedido_reembolso%rowtype;
    v_sql                       varchar2(32760);
    v_num_insc_fiscal           pedido_reembolso.num_insc_fiscal%type;
    v_txt_complemento           varchar2(1520);
    ------------------------------------------------------------------------
    BEGIN
     p_msg_retorno := null;
     p_cod_retorno := 0;
     --- criticas básicas de parametros
     if p_dt_atendimento is null then
        p_msg_retorno := 'Data do atendimento não informada.';
        p_cod_retorno := 1;
        return;
     end if;
     begin
        select *
        into   rsReembolso
        from   pedido_reembolso
        where  num_reembolso = p_num_reembolso;
     exception
        when no_data_found then
            p_cod_retorno := 9;
            p_msg_retorno := 'Reembolso não encontrado (' || p_num_reembolso ||')';
            return;
     end;
    ----------------------------------------------------------------------------------------
    v_posicao := 1;
    select nvl(ind_insc_fiscal,'F'),  nvl(ind_internado,'N'), a.num_insc_fiscal
        into v_ind_tipo_pessoa,        v_ind_internado, v_num_insc_fiscal
           from pedido_reembolso a,   tipo_tratamento b
             where num_reembolso    = p_num_reembolso
               and a.cod_tratamento = b.cod_tratamento (+);
    ----------------------------------------------------------------------------------------
    v_posicao := 2;
    begin
         select  qtd_dias_periodo,        cod_grupo_estatistico,   qtd_limite,
                 qtd_dias_periodo_int,    qtd_limite_int,
                 qtd_int_pdia,            qtd_nao_int_pdia,        cod_padrao
           into  v_qtd_dias_periodo,      v_cod_grupo_estatistico, v_qtd_limite,
                 v_qtd_dias_periodo_int,  v_qtd_limite_int,
                 v_qtd_int_pdia,          v_qtd_nao_int_pdia,      v_cod_padrao
             from itens_medicos
               where item_medico = p_cod_procedimento;



         if v_ind_internado = 'S' then
            v_qtd_dias_periodo := v_qtd_dias_periodo_int;
            v_qtd_limite       := v_qtd_limite_int;
            v_qtd_dia          := v_qtd_int_pdia;
         else
            v_qtd_dia          := v_qtd_nao_int_pdia;
         end if;


         if nvl(v_qtd_dias_periodo,0) > 0 and v_qtd_dia is null then
               v_qtd_dia          := 1;
         end if;



       if v_cod_grupo_estatistico <> 'CEL' then
          null;
       else
          p_msg_retorno := ' ';
          p_cod_retorno := 0;
          return;
       end if;

    exception
        when no_data_found then
             p_msg_retorno := ' ';
             p_cod_retorno := 0;
             return;
    end;

    begin
       if v_cod_padrao = 'AMB' then
          v_cod_padrao_dest := 'CBHPM';
       else
          v_cod_padrao_dest := 'AMB';
       end if;
       v_cod_procedimento := cm_converte_amb_cbhpm_s(p_cod_procedimento,p_dt_atendimento,v_cod_padrao_dest,'O');
    exception
       when others then
       v_cod_procedimento := p_cod_procedimento;
    end;
    ----------------------------------------------------------------------------------------
    v_posicao := 3;
    begin
        --
        v_sql := '  select
                           /*TS.RB_REEMBOLSO.rb_dup_reexec_geral*/
                           /*+ index (a idx_ctm_proc_real_idx_99 ) */
                           max(a.cod_ts_sinistro)
                         , sum(qtd_utilizada)
                      from ts.ctm_procedimento_realizado a
                         , ts.tipo_tratamento            c
                     where a.num_associado            = :p_num_associado
                       and a.cod_tratamento           = c.cod_tratamento
                       and nvl(c.ind_internado,''N'') = :v_ind_internado
                       and a.cod_funcao               = :p_cod_funcao
                       and a.cod_procedimento        in (:p_cod_procedimento,:v_cod_procedimento)
                       and trunc(a.dt_utilizacao) between trunc(:p_dt_atendimento - :v_qtd_dias_periodo)
                                                      and trunc(:p_dt_atendimento - 1)
                 ';
        --
          execute
        immediate v_sql
             into v_cod_ts_sinistro_dup
                , v_qtd_utilizada
            using p_num_associado
                , v_ind_internado
                , p_cod_funcao
                , p_cod_procedimento
                , v_cod_procedimento
                , p_dt_atendimento
                , v_qtd_dias_periodo
                , p_dt_atendimento;
        --
        if (NVL(v_qtd_utilizada,0)  +  p_qtd_utilizada)  >  v_qtd_limite then
            v_qtd_aprovada :=    v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada);
            if v_qtd_aprovada  < 0 then
               v_qtd_aprovada := 0;
            end if;
            v_cod_motivo_glosa := 983;
            if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                 GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                 if p_cod_retorno = 9 then
                    return;
                 end if;
                 update procedimento_reembolso
                    set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
                        qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
                        dt_atu              = sysdate,
                        cod_usuario_atu     = ts_read_client_info
                 where rowid = p_rowid;
            end if;
        end if;
        --
    end;
    ---------------------------------------------------------------------------------------
    if v_qtd_limite is null and v_qtd_dias_periodo is null then
       v_qtd_dias_periodo := 1;
       v_qtd_limite       := 1;
       v_qtd_dia          := 1;
    end if;


   v_posicao := 4;
   begin

    select max(a.cod_ts_sinistro), sum(qtd_utilizada), 'Duplicidade com o pedido ' || LISTAGG(p.num_reembolso, ', ' on overflow truncate) WITHIN GROUP (ORDER BY a.dt_utilizacao)
    into v_cod_ts_sinistro_dup, v_qtd_utilizada, v_txt_complemento
    from ctm_procedimento_realizado a, tipo_tratamento c, pedido_reembolso p
    where a.num_associado         = p_num_associado                               and
      a.cod_funcao              = nvl(p_cod_funcao,0)                           and
      a.cod_tratamento          = c.cod_tratamento                              and
      nvl(c.ind_internado,'N')  = v_ind_internado                               and
      a.cod_procedimento       in (p_cod_procedimento,v_cod_procedimento)       and
      trunc(a.dt_utilizacao)    = trunc(p_dt_atendimento)                       and
      a.cod_ts_sinistro        <> p_num_reembolso                               and
      a.cod_ts_sinistro         = p.num_reembolso                               and
          p.ind_situacao            not in (16,26,39)                               and
      p.num_insc_fiscal         = v_num_insc_fiscal;

      if NVL(v_qtd_utilizada,0) > 0 then

        v_qtd_aprovada :=    v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada);
            if v_qtd_aprovada  < 0 then
                v_qtd_aprovada := 0;
            end if;

        v_cod_motivo_glosa := 982;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
          GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
        if p_cod_retorno = 9 then return; end if;
          update procedimento_reembolso
          set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
            qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
            dt_atu              = sysdate,
            cod_usuario_atu     = ts_read_client_info
          where rowid = p_rowid;
        end if;

    else

        select    max(a.cod_ts_sinistro),     sum(qtd_utilizada), 'Duplicidade com o pedido ' || LISTAGG(p.num_reembolso, ', ' on overflow truncate) WITHIN GROUP (ORDER BY a.dt_utilizacao)
            into v_cod_ts_sinistro_dup,      v_qtd_utilizada, v_txt_complemento
            from ctm_procedimento_realizado a, tipo_tratamento c, pedido_reembolso p
            where a.num_associado          = p_num_associado                               and
                  a.cod_funcao             = nvl(p_cod_funcao,0)                           and
                  a.cod_tratamento         = c.cod_tratamento                              and
                  nvl(c.ind_internado,'N') = v_ind_internado                               and
                  a.cod_procedimento      in (p_cod_procedimento,v_cod_procedimento)       and
                  trunc(a.dt_utilizacao)   = trunc(p_dt_atendimento)                       and
                  a.cod_ts_sinistro         = p.num_reembolso                              and
                  p.ind_situacao            not in (16,26,39)                             and
                  a.cod_ts_sinistro        <> p_num_reembolso;

          if nvl(v_qtd_dia,0) > 0 and nvl(v_qtd_utilizada,0) > 0 then
                if (nvl(v_qtd_utilizada,0)  +  p_qtd_utilizada)  >  v_qtd_dia then

                   v_qtd_aprovada :=    v_qtd_dia   -  (v_qtd_utilizada  +  p_qtd_utilizada);

                   if v_qtd_aprovada  < 0 then
                      v_qtd_aprovada := 0;
                   end if;

                    v_cod_motivo_glosa := 982;
                    if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                       GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                        if p_cod_retorno = 9 then return; end if;
                            update procedimento_reembolso
                                set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
                                    qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
                                    dt_atu              = sysdate,
                                    cod_usuario_atu     = ts_read_client_info
                            where rowid = p_rowid;
                        end if;
                    end if;
                end if;
            end if;

        end;
    ---------------------------------------------------------------------------------------------
    --- verifica se existe alguma conta com o mesmo procedimento, mesmo dia, mesma função
    --- mesmo beneficiário, se existir então glosa
    ---------------------------------------------------------------------------------------------

        begin
            select    max(a.cod_ts_sinistro),     sum(qtd_utilizada), case when max(p.num_reembolso) is not null then 'Duplicidade com o pedido ' || LISTAGG(p.num_reembolso, ', ' on overflow truncate) WITHIN GROUP (ORDER BY a.dt_utilizacao) else null end
                 into v_cod_ts_sinistro_dup,      v_qtd_utilizada, v_txt_complemento
                 from ctm_procedimento_realizado a, pedido_reembolso p
                where a.cod_ts_sinistro        = p.num_reembolso (+)                     and
                      a.num_associado          = p_num_associado                         and
                      a.cod_funcao             =  nvl(p_cod_funcao,0)                    and
                      a.cod_procedimento      in (p_cod_procedimento,v_cod_procedimento) and
                      trunc(a.dt_utilizacao)   =  trunc(p_dt_atendimento)                and
                      a.ind_tipo               = 'C';

               if v_qtd_utilizada  > 0 then
                   v_cod_motivo_glosa := 882;
                   if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

                         GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                         if p_cod_retorno = 9 then return; end if;
                         update procedimento_reembolso
                            set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
                                qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
                                dt_atu              = sysdate,
                                cod_usuario_atu     = ts_read_client_info
                          where rowid = p_rowid;
                  end if;
              end if;
        end;
    --------------------------------------------------------------------------------

    v_posicao     := 5;
    p_cod_retorno := 0;
    p_msg_retorno := ' ';

    exception
      when others then
           p_msg_retorno := 'RB_DUP_REEXEC_GERAL-' || v_posicao || ': ' || ts_util.MsgErro;
           p_cod_retorno := 9;
           return;
    end;
    --
    PROCEDURE    rb_dup_reexec_geral_con ( p_cod_especialidade in  varchar2,
                                           p_cod_procedimento  in  varchar2,
                                           p_dt_atendimento    in  date,
                                           p_qtd_utilizada     in  number,
                                           p_cod_ts            in  number,
                                           p_num_reembolso     in  number,
                                           p_num_seq_item      in  number,
                                           p_rowid             in  rowid,
                                           p_num_crm           in  varchar2,
                                           p_sigla_conselho    in  varchar2,
                                           p_uf_conselho       in  varchar2,
                                           p_cod_ts_sinistro   in  number,
                                           p_num_associado     in  varchar2,
                                           p_dt_pedido         in  date,
                                           p_cod_usuario       in  varchar2,
                                           p_cod_motivo_glosa  out number,
                                           p_msg_retorno       out varchar2,
                                           p_cod_retorno       out number)   is

    ------------------------------------------------------------------------------
    v_quantidade            number;
    v_ind_tipo_pessoa       prestador_servico.ind_tipo_pessoa%type;

    v_cod_ts_sinistro_dup   ctm_itens_contas.cod_ts_item%type;

    v_qtd_dias_periodo      itens_medicos.qtd_dias_periodo%type;
    v_qtd_limite            itens_medicos.qtd_limite%type;

    v_qtd_dias_periodo_int  itens_medicos.qtd_dias_periodo%type;
    v_qtd_limite_int        itens_medicos.qtd_limite%type;

    v_qtd_int_pdia              itens_medicos.qtd_int_pdia%type;
    v_qtd_nao_int_pdia          itens_medicos.qtd_nao_int_pdia%type;
    v_qtd_dia                   itens_medicos.qtd_nao_int_pdia%type;

    v_cod_padrao                itens_medicos.cod_padrao%type;
    v_cod_padrao_dest           itens_medicos.cod_padrao%type;
    v_cod_procedimento          ctm_itens_contas.cod_procedimento_cm%type;

    v_ind_internado         tipo_tratamento.ind_internado%type;

    v_cod_grupo_estatistico itens_medicos.cod_grupo_estatistico%type;

    v_qtd_utilizada         ctm_consulta_realizada.qtd_utilizada%type;


    v_msg_retorno           varchar2(200);
    v_qtd_aprovada          number;
    v_cod_retorno           number;
    v_posicao               number;

    v_operadora_ts          controle_sistema.cod_parametro%type;
    v_cod_motivo_glosa      number;
    rsReembolso             pedido_reembolso%rowtype;
    v_txt_complemento       varchar2(1520);
    ------------------------------------------------------------------------------
    BEGIN
      --- criticas básicas de parametros

      if p_dt_atendimento is null then
         p_msg_retorno := 'Data do atendimento não informada.';
         p_cod_retorno := 1;
         return;
      end if;
     --
     begin
        select *
        into   rsReembolso
        from   pedido_reembolso
        where  num_reembolso = p_num_reembolso;
     exception
        when no_data_found then
            p_cod_retorno := 9;
            p_msg_retorno := 'Reembolso não encontrado (' || p_num_reembolso ||')';
            return;
     end;
     --
    v_posicao := 1;

    select nvl(ind_insc_fiscal,'F'),  nvl(ind_internado,'N')
        into v_ind_tipo_pessoa,        v_ind_internado
           from pedido_reembolso a,   tipo_tratamento b
             where num_reembolso    = p_num_reembolso
               and a.cod_tratamento = b.cod_tratamento (+);


    ----------------------------------------------------------------------------------------
    v_posicao := 2;
    begin

         select  qtd_dias_periodo,        cod_grupo_estatistico,   qtd_limite,
                 qtd_dias_periodo_int,    qtd_limite_int,
                 qtd_int_pdia,            qtd_nao_int_pdia,        cod_padrao
           into  v_qtd_dias_periodo,      v_cod_grupo_estatistico, v_qtd_limite,
                 v_qtd_dias_periodo_int,  v_qtd_limite_int,
                 v_qtd_int_pdia,          v_qtd_nao_int_pdia,      v_cod_padrao
             from itens_medicos
               where item_medico = p_cod_procedimento;


         if v_ind_internado = 'S' then
            v_qtd_dias_periodo := v_qtd_dias_periodo_int;
            v_qtd_limite       := v_qtd_limite_int;
            v_qtd_dia          := v_qtd_int_pdia;
         else
            v_qtd_dia          := v_qtd_nao_int_pdia;
         end if;


         if nvl(v_qtd_dias_periodo,0) > 0 and v_qtd_dia is null then
               v_qtd_dia          := 1;
         end if;

         if v_qtd_limite = 0 then
            p_msg_retorno := ' ';
            p_cod_retorno := 0;
            return;
         end if;


       v_posicao := 3;
       if v_cod_grupo_estatistico =  'CEL' then
          null;
       else
          p_msg_retorno := ' ';
          p_cod_retorno := 0;
          return;
       end if;

      exception
        when no_data_found then
             p_msg_retorno := ' ';
             p_cod_retorno := 0;
             return;
      end;

     ----------------------------------------------------------------------------------------
      v_posicao := 3;
      begin
         if v_cod_padrao = 'AMB' then
            v_cod_padrao_dest := 'CBHPM';
         else
            v_cod_padrao_dest := 'AMB';
         end if;
         v_cod_procedimento := cm_converte_amb_cbhpm_s(p_cod_procedimento,p_dt_atendimento,v_cod_padrao_dest,'O');
      exception
         when others then
         v_cod_procedimento := p_cod_procedimento;
      end;

         v_posicao := 4;
         --- verifica a cobrança de mais de uma consulta para o mesmo paciente
         --- no mesmo prestador em menos de 30 dias na mesma especialidade
         --- a opção de não incluir o dia foi para permitir que se pegue as possíveis
         --- duplicatas de consultas

          begin
               select max(a.cod_ts_sinistro),     sum(nvl(qtd_utilizada,0))
                 into v_cod_ts_sinistro_dup,      v_qtd_utilizada
                 from ctm_consulta_realizada a
                where a.num_associado                 = p_num_associado                                         and
                      NVL(a.cod_especialidade,'0110') = nvl(p_cod_especialidade,'0110')                         and
                      a.cod_procedimento    in      (p_cod_procedimento,v_cod_procedimento)                     and
                      a.num_cr              =        nvl(p_num_crm,'99999')                                     and
                      a.sgl_cr              =        nvl(p_sigla_conselho,'CRM')                                and
                      trunc(a.dt_atendimento)      between  trunc(p_dt_atendimento - v_qtd_dias_periodo + 1)    and
                                                   trunc(p_dt_atendimento)                                      and
                      a.cod_ts_sinistro    <>        p_cod_ts_sinistro;

               v_posicao := 5;

               if (v_qtd_utilizada  +  p_qtd_utilizada)  >  v_qtd_limite then

                   v_qtd_aprovada :=    v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada);

                   if v_qtd_aprovada  < 0 then
                      v_qtd_aprovada := 0;
                   end if;

                   v_cod_motivo_glosa := 883;
                   if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                         GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                         if p_cod_retorno = 9 then return; end if;
                         update procedimento_reembolso
                            set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
                                qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
                                dt_atu              = sysdate,
                                cod_usuario_atu     = ts_read_client_info
                          where rowid = p_rowid;
                      end if;
              end if;

         end;

         ---------------------------------------------------------------------------------------
         v_posicao := 6;
         begin

      select    max(a.cod_ts_sinistro),     sum(qtd_utilizada), case when max(p.num_reembolso) is not null then 'Duplicidade com o pedido ' || LISTAGG(p.num_reembolso, ', ' on overflow truncate) WITHIN GROUP (ORDER BY a.dt_atendimento) else null end
      into v_cod_ts_sinistro_dup,      v_qtd_utilizada, v_txt_complemento
      from ctm_consulta_realizada a, pedido_reembolso p
      where  a.cod_ts_sinistro            = p.num_reembolso  (+)            and
          a.num_associado                 = p_num_associado                 and
          nvl(a.cod_especialidade,'0110') = nvl(p_cod_especialidade,'0110') and
          a.cod_procedimento   in (p_cod_procedimento,v_cod_procedimento)   and
          a.num_cr              = nvl(p_num_crm,'99999')                    and
          a.sgl_cr              = nvl(p_sigla_conselho,'CRM')               and
          trunc(a.dt_atendimento)  = trunc(p_dt_atendimento)                and
          a.cod_ts_sinistro    <> p_cod_ts_sinistro;

      --- if (v_qtd_utilizada  +  p_qtd_utilizada)  >  v_qtd_limite then

      if v_qtd_utilizada   >  0 then

      ---    v_qtd_aprovada :=    v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada);

      if v_qtd_aprovada  < 0 then
        v_qtd_aprovada := 0;
      end if;

      v_cod_motivo_glosa := 882;
      if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);

        if p_cod_retorno = 9 then return; end if;
          update procedimento_reembolso
            set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
              qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
              dt_atu              = sysdate,
              cod_usuario_atu     = ts_read_client_info
          where rowid = p_rowid;
         end if;

      end if;

         end;
    -----------------------------------------------------------------------------------------

    v_posicao     := 7;
    p_cod_retorno := 0;
    p_msg_retorno := ' ';

    exception
      when others then
           p_msg_retorno := 'RB_DUP_REEXEC_GERAL_CON' || v_posicao || ': ' || ts_util.MsgErro;
           p_cod_retorno := 9;
           return;
    end;
    --
    PROCEDURE    rb_dup_reexec_no_pedido_con( p_cod_especialidade in  varchar2,
                                              p_cod_procedimento  in  varchar2,
                                              p_dt_atendimento    in  date,
                                              p_qtd_utilizada     in  number,
                                              p_cod_ts            in  number,
                                              p_num_reembolso     in  number,
                                              p_num_seq_item      in  number,
                                              p_rowid             in  rowid,
                                              p_cod_ts_sinistro   in  number,
                                              p_cod_usuario       in  varchar2,
                                              p_cod_motivo_glosa  out number,
                                              p_msg_retorno       out varchar2,
                                              p_cod_retorno       out number)   is

    ------------------------------------------------------------------------------
    v_quantidade            number;
    v_ind_tipo_pessoa       prestador_servico.ind_tipo_pessoa%type;

    v_cod_ts_sinistro_dup   ctm_itens_contas.cod_ts_item%type;

    v_qtd_dias_periodo      itens_medicos.qtd_dias_periodo%type;
    v_qtd_limite            itens_medicos.qtd_limite%type;

    v_qtd_dias_periodo_int  itens_medicos.qtd_dias_periodo%type;
    v_qtd_limite_int        itens_medicos.qtd_limite%type;

    v_qtd_int_pdia              itens_medicos.qtd_int_pdia%type;
    v_qtd_nao_int_pdia          itens_medicos.qtd_nao_int_pdia%type;
    v_qtd_dia                   itens_medicos.qtd_nao_int_pdia%type;


    v_cod_grupo_estatistico itens_medicos.cod_grupo_estatistico%type;
    v_qtd_utilizada         number;
    v_qtd_aprovada          number;
    v_msg_retorno           varchar2(200);
    v_posicao               number;
    v_cod_retorno           number;
    v_usuario_liberacao     procedimento_reembolso.usuario_liberacao%type;
    v_ind_internado         tipo_tratamento.ind_internado%type;
    v_operadora_ts          controle_sistema.cod_parametro%type;
    rsReembolso             pedido_reembolso%rowtype;
    v_cod_motivo_glosa      number;
    v_txt_complemento       varchar2(1520);
    --------------------------------------------------------------------------------------

    BEGIN
      p_msg_retorno := null;
      p_cod_retorno := 0;

      --- criticas básicas de parametros

      if p_dt_atendimento is null then
         p_msg_retorno := 'Data do atendimento não informada.';
         p_cod_retorno := 1;
         return;
      end if;
     --
     begin
        select *
        into   rsReembolso
        from   pedido_reembolso
        where  num_reembolso = p_num_reembolso;
     exception
        when no_data_found then
            p_cod_retorno := 9;
            p_msg_retorno := 'Reembolso não encontrado (' || p_num_reembolso ||')';
            return;
     end;
     --
      v_posicao := 1;
    ----------------------------------------------------------------------------------------
     select nvl(ind_insc_fiscal,'F'),  nvl(ind_internado,'N')
        into v_ind_tipo_pessoa,        v_ind_internado
           from pedido_reembolso a,   tipo_tratamento b
             where num_reembolso    = p_num_reembolso
               and a.cod_tratamento = b.cod_tratamento (+);

    ----------------------------------------------------------------------------------------

      begin

         select  qtd_dias_periodo,        cod_grupo_estatistico,   qtd_limite,
                 qtd_dias_periodo_int,    qtd_limite_int,
                 qtd_int_pdia,            qtd_nao_int_pdia
           into  v_qtd_dias_periodo,      v_cod_grupo_estatistico, v_qtd_limite,
                 v_qtd_dias_periodo_int,  v_qtd_limite_int,
                 v_qtd_int_pdia,          v_qtd_nao_int_pdia
             from itens_medicos
               where item_medico = p_cod_procedimento;


         if v_ind_internado = 'S' then
            v_qtd_dias_periodo := v_qtd_dias_periodo_int;
            v_qtd_limite       := v_qtd_limite_int;
            v_qtd_dia          := v_qtd_int_pdia;
         else
            v_qtd_dia          := v_qtd_nao_int_pdia;
         end if;


         if nvl(v_qtd_dias_periodo,0) > 0 and v_qtd_dia is null then
               v_qtd_dia          := 1;
         end if;

         if v_qtd_limite = 0 then
            p_msg_retorno := ' ';
            p_cod_retorno := 0;
            return;
         end if;

       if v_cod_grupo_estatistico = 'CEL' then
          null;
       else
          p_msg_retorno := ' ';
          p_cod_retorno := 0;
          return;
       end if;

      exception
        when no_data_found then
             p_msg_retorno := ' ';
             p_cod_retorno := 0;
             return;
      end;

     ----------------------------------------------------------------------------------------

     v_posicao := 4;



         v_posicao := 5;

         --- verifica a cobrança de mais de uma consulta para o mesmo paciente
         --- no mesmo prestador em menos de 30 dias na mesma especialidade
         --- a opção de não incluir o dia foi para permitir que se pegue as possíveis
         --- duplicatas de consultas

          begin

               v_posicao := 6;

               select max(a.num_reembolso),   sum(nvl(qtd_informado,0))
                 into v_cod_ts_sinistro_dup,  v_qtd_utilizada
                 from pedido_reembolso a,  procedimento_reembolso b
                where a.num_reembolso                   = p_num_reembolso                              and
                      a.num_reembolso                   = b.num_reembolso                              and
                      nvl(b.cod_especialidade,'0110')   = nvl(p_cod_especialidade,'0110')              and
                      b.cod_ts_sinistro_dup             is null                                        and
                      b.cod_procedimento                = p_cod_procedimento                           and

                      b.rowid                           <> p_rowid                                     and
                  --  b.val_reembolsado   > 0                                                          and
                      not EXISTS (select 1
                                    from reembolso_glosa rg
                                   where rg.num_reembolso = p_num_reembolso            and
                                         b.num_seq_item   = rg.num_seq_item            and
                                         rg.cod_motivo_glosa in (883,882,982,983) )                    and

                      b.data_atendimento  between p_dt_atendimento - v_qtd_dias_periodo + 1
                                              and p_dt_atendimento;

               v_posicao := 7;



               if (nvl(v_qtd_utilizada,0)  +  p_qtd_utilizada)  >  v_qtd_limite then

                   v_qtd_aprovada :=    v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada);

                   if v_qtd_aprovada  < 0 then
                      v_qtd_aprovada := 0;
                   end if;

                   v_cod_motivo_glosa := 883;
                   if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                    --  if (rsReembolso.num_insc_fiscal is null AND rsReembolso.num_crm is null) OR rsReembolso.nome_prestador is null then
                         GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                         if p_cod_retorno = 9 then return; end if;
                         update procedimento_reembolso
                            set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
                                qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
                                dt_atu              = sysdate,
                                cod_usuario_atu     = ts_read_client_info
                          where rowid = p_rowid;
                    --  end if;
                   end if;
               end if;

             end;
        ----------------------------------------------------------------------------------------
             v_posicao := 9;

             begin

               select max(a.num_reembolso),   sum(nvl(qtd_informado,0)),'Duplicidade com o pedido ' || LISTAGG(a.num_reembolso, ', ' on overflow truncate) WITHIN GROUP (ORDER BY b.data_atendimento)
                 into v_cod_ts_sinistro_dup,  v_qtd_utilizada, v_txt_complemento
                 from pedido_reembolso a,  procedimento_reembolso b
                where a.num_reembolso                   = p_num_reembolso                              and
                      a.num_reembolso                   = b.num_reembolso                              and
                      nvl(b.cod_especialidade,'0110')   = nvl(p_cod_especialidade,'0110')              and
                      b.cod_procedimento                = p_cod_procedimento                           and
                      b.cod_ts_sinistro_dup             is null                                        and
                      b.rowid                           <> p_rowid                                     and
                     -- b.val_reembolsado   > 0                                                          and
                      trunc(b.data_atendimento)          = trunc(p_dt_atendimento);



               v_posicao := 10;

                  if nvl(v_qtd_utilizada,0)  > 0  then
                     v_posicao := 11;

                     v_qtd_aprovada := 0;

                   v_cod_motivo_glosa := 882;
                   if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                         GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                         if p_cod_retorno = 9 then return; end if;

                         update procedimento_reembolso
                            set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
                                qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
                                dt_atu              = sysdate,
                                cod_usuario_atu     = ts_read_client_info
                          where rowid = p_rowid;
                  end if;
           end if;

        end;
    ----------------------------------------------------------------------------------------


    v_posicao := 14;
    p_cod_retorno := 0;
    p_msg_retorno := ' ';

    exception
      when others then
           p_msg_retorno := 'RB_DUP_REEXEC_NO_PEDIDO_CON- ' || v_posicao || ': ' || ts_util.MsgErro;
           p_cod_retorno := 9;
           return;
    end;
    --
    PROCEDURE    RB_DUP_REEXEC_NO_PEDIDO_GER ( p_cod_procedimento  in  varchar2,
                                               p_dt_atendimento    in  date,
                                               p_qtd_utilizada     in  number,
                                               p_cod_funcao        in  varchar2,
                                               p_cod_ts            in  number,
                                               p_num_reembolso     in  number,
                                               p_num_seq_item      in  number,
                                               p_rowid             in  rowid,
                                               p_cod_ts_sinistro   in  number,
                                               p_cod_usuario       in  varchar2,
                                               p_cod_motivo_glosa  out number,
                                               p_msg_retorno       out varchar2,
                                               p_cod_retorno       out number)   is

    ------------------------------------------------------------------------------
    v_quantidade       number;
    v_ind_tipo_pessoa  prestador_servico.ind_tipo_pessoa%type;

    v_cod_ts_sinistro_dup   ctm_itens_contas.cod_ts_item%type;

    v_qtd_dias_periodo      itens_medicos.qtd_dias_periodo%type;
    v_qtd_limite            itens_medicos.qtd_limite%type;


    v_qtd_dias_periodo_int  itens_medicos.qtd_dias_periodo%type;
    v_qtd_limite_int        itens_medicos.qtd_limite%type;

    v_qtd_int_pdia          itens_medicos.qtd_int_pdia%type;
    v_qtd_nao_int_pdia      itens_medicos.qtd_nao_int_pdia%type;
    v_qtd_dia               itens_medicos.qtd_nao_int_pdia%type;
    v_ind_cirurgia          itens_medicos.ind_cirurgia%type;
    v_pct_cirurgia_multipla number := 100;
    v_ind_acesso_multiplo   number := 1;

    v_ind_internado         tipo_tratamento.ind_internado%type;

    v_cod_grupo_estatistico itens_medicos.cod_grupo_estatistico%type;
    v_qtd_utilizada         number;
    v_qtd_aprovada          number;
    v_msg_retorno           varchar2(200);

    v_cod_retorno           number;
    v_usuario_liberacao     procedimento_reembolso.usuario_liberacao%type;
    v_posicao               number;
    rsReembolso             pedido_reembolso%rowtype;
    v_cod_motivo_glosa      number;
    v_txt_complemento       varchar2(1520);

    --------------------------------------------------------------------------------------

    BEGIN

     p_msg_retorno := null;
     p_cod_retorno := 0;

     --- criticas básicas de parametros

     if p_dt_atendimento is null then
        p_msg_retorno := 'Data do atendimento não informada.';
        p_cod_retorno := 1;
        return;
     end if;
     --
     begin
        select *
        into   rsReembolso
        from   pedido_reembolso
        where  num_reembolso = p_num_reembolso;
     exception
        when no_data_found then
            p_cod_retorno := 9;
            p_msg_retorno := 'Reembolso não encontrado (' || p_num_reembolso ||')';
            return;
     end;
     --
    v_posicao := 1;

    select nvl(ind_insc_fiscal,'F'),  nvl(ind_internado,'N')
        into v_ind_tipo_pessoa,        v_ind_internado
           from pedido_reembolso a,   tipo_tratamento b
             where num_reembolso = p_num_reembolso
               and a.cod_tratamento = b.cod_tratamento (+);


    ----------------------------------------------------------------------------------------

    begin

       v_posicao := 2;

         select  qtd_dias_periodo,        cod_grupo_estatistico,   qtd_limite,
                 qtd_dias_periodo_int,    qtd_limite_int,
                 qtd_int_pdia,            qtd_nao_int_pdia,
                 nvl(ind_cirurgia,'N')
           into  v_qtd_dias_periodo,      v_cod_grupo_estatistico, v_qtd_limite,
                 v_qtd_dias_periodo_int,  v_qtd_limite_int,
                 v_qtd_int_pdia,          v_qtd_nao_int_pdia,
                 v_ind_cirurgia
             from itens_medicos
               where item_medico = p_cod_procedimento;


         if v_ind_internado = 'S' then
            v_qtd_dias_periodo := v_qtd_dias_periodo_int;
            v_qtd_limite       := v_qtd_limite_int;
            v_qtd_dia          := v_qtd_int_pdia;
         else
            v_qtd_dia          := v_qtd_nao_int_pdia;
         end if;


         if nvl(v_qtd_dias_periodo,0) > 0 and v_qtd_dia is null then
               v_qtd_dia          := 1;
         end if;


       v_posicao := 3;

       if v_cod_grupo_estatistico <> 'CEL' then
           null;
       else
          p_msg_retorno := ' ';
          p_cod_retorno := 0;
          return;
       end if;

      exception
        when no_data_found then
             p_msg_retorno := ' ';
             p_cod_retorno := 0;
             return;
      end;

      if v_ind_cirurgia = 'S' then
         begin
            select nvl(a.pct_cirurgia_multipla,100) into v_pct_cirurgia_multipla
              from procedimento_reembolso a
              where rowid = p_rowid;
            if nvl(v_pct_cirurgia_multipla,100) <> 100 then
               v_ind_acesso_multiplo := 2;
            end if;
         exception
            when others then
               null;
         end;
      end if;

     ----------------------------------------------------------------------------------------
      v_posicao := 4;
      begin
                 select  max(a.num_reembolso),   sum(nvl(qtd_informado,0) - nvl(qtd_glosa_man,0)) -- subtrair qtd_glosa man
                    into v_cod_ts_sinistro_dup,  v_qtd_utilizada
                        from pedido_reembolso a,  procedimento_reembolso b
                          where a.num_reembolso       = p_num_reembolso                                  and
                                a.num_reembolso       = b.num_reembolso                                  and
                                b.cod_ts_sinistro_dup is null                                            and
                                b.rowid               <> p_rowid                                         and
                                b.cod_procedimento    = p_cod_procedimento                               and
                                nvl(b.ind_funcao,'0') = nvl(p_cod_funcao,'0')                            and
                                decode(nvl(pct_cirurgia_multipla,100),100, 1, 2) = v_ind_acesso_multiplo and
                              --  b.val_reembolsado   > 0                                                  and
                                not EXISTS (select 1
                                     from reembolso_glosa rg
                                    where rg.num_reembolso = p_num_reembolso            and
                                          b.num_seq_item   = rg.num_seq_item            and
                                          rg.cod_motivo_glosa in (883,882,982,983) )                    and
                                b.data_atendimento  between p_dt_atendimento - v_qtd_dias_periodo +  1   and
                                                            p_dt_atendimento;


               v_posicao := 5;
               if (nvl(v_qtd_utilizada,0)  +  p_qtd_utilizada)  >  v_qtd_limite then

                   v_qtd_aprovada :=    v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada);

                   if v_qtd_aprovada  < 0 then
                      v_qtd_aprovada := 0;
                   end if;

                   v_cod_motivo_glosa := 983;
                   if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                      if (rsReembolso.num_insc_fiscal is null AND rsReembolso.num_crm is null) OR rsReembolso.nome_prestador is null then
                         GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                         if p_cod_retorno = 9 then return; end if;
                         update procedimento_reembolso
                            set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
                                qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
                                dt_atu              = sysdate,
                                cod_usuario_atu     = ts_read_client_info
                          where rowid = p_rowid;
                      end if;
                   end if;
               end if;

             end;
        ----------------------------------------------------------------------------------------
             v_posicao := 6;

            if v_qtd_limite is null and v_qtd_dias_periodo is null then
               v_qtd_dias_periodo := 1;
               v_qtd_limite       := 1;
               v_qtd_dia          := 1;
            end if;


             begin
                 select  max(a.num_reembolso),    sum(nvl(qtd_informado,0) - nvl(qtd_glosa_man,0)), 'Duplicidade com o pedido ' || LISTAGG(a.num_reembolso, ', ' on overflow truncate) WITHIN GROUP (ORDER BY a.num_reembolso)
                    into v_cod_ts_sinistro_dup,   v_qtd_utilizada, v_txt_complemento
                        from pedido_reembolso a,  procedimento_reembolso b
                          where a.num_reembolso       = p_num_reembolso                                  and
                                a.num_reembolso       = b.num_reembolso                                  and
                                b.cod_ts_sinistro_dup is null                                            and
                                b.rowid               <> p_rowid                                         and
                                b.cod_procedimento    = p_cod_procedimento                               and
                                nvl(b.ind_funcao,'0') = nvl(p_cod_funcao,'0')                            and
                                decode(nvl(pct_cirurgia_multipla,100),100, 1, 2) = v_ind_acesso_multiplo and
                               -- b.val_reembolsado   > 0                                                  and
                                not EXISTS (select 1
                                    from reembolso_glosa rg
                                   where rg.num_reembolso = p_num_reembolso            and
                                         b.num_seq_item   = rg.num_seq_item            and
                                         rg.cod_motivo_glosa in (883,882,982,983) )                    and
                                b.data_atendimento       = trunc(p_dt_atendimento);

               if (nvl(v_qtd_utilizada,0)  +  p_qtd_utilizada)  >  v_qtd_limite and nvl(v_qtd_utilizada,0) > 0   then

                   v_qtd_aprovada :=    v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada);

                   if v_qtd_aprovada  < 0 then
                      v_qtd_aprovada := 0;
                   end if;

                   v_cod_motivo_glosa := 982;
                   if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                         GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                         if p_cod_retorno = 9 then return; end if;
                         update procedimento_reembolso
                            set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
                                qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
                                dt_atu              = sysdate,
                                cod_usuario_atu     = ts_read_client_info
                          where rowid = p_rowid;
                   end if;
              else
                 if nvl(v_qtd_dia,0) > 0 and nvl(v_qtd_utilizada,0) > 0 then
                    if (nvl(v_qtd_utilizada,0)  +  p_qtd_utilizada)  >  v_qtd_dia then

                       v_qtd_aprovada :=    v_qtd_dia   -  (v_qtd_utilizada  +  p_qtd_utilizada);

                       if v_qtd_aprovada  < 0 then
                          v_qtd_aprovada := 0;
                       end if;

                       v_cod_motivo_glosa := 982;
                       if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

                            GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                            if p_cod_retorno = 9 then return; end if;
                            update procedimento_reembolso
                               set cod_ts_sinistro_dup = v_cod_ts_sinistro_dup,
                                   qtd_aprovada        = v_qtd_limite   -  (v_qtd_utilizada  +  p_qtd_utilizada),
                                   dt_atu              = sysdate,
                                   cod_usuario_atu     = ts_read_client_info
                            where rowid = p_rowid;
                          end if;


                    end if;

                 end if;
              end if;

        end;

    ----------------------------------------------------------------------------------------
    v_posicao     := 7;
    p_cod_retorno := 0;
    p_msg_retorno := ' ';

    exception
      when others then
           p_msg_retorno := 'RB_DUP_REEXEC_NO_PEDIDO_GER-' || v_posicao || ': ' || ts_util.MsgErro;
           p_cod_retorno := 9;
           return;
    end;
    --
    PROCEDURE   rb_dup_reexec_geral_cont_con ( p_cod_especialidade in  varchar2,
                                               p_cod_procedimento  in  varchar2,
                                               p_cod_funcao        in number,
                                               p_dt_atendimento    in  date,
                                               p_qtd_utilizada     in  number,
                                               p_cod_ts            in  number,
                                               p_num_reembolso     in  number,
                                               p_num_seq_item      in  number,
                                               p_rowid             in  rowid,
                                               p_num_crm           in  varchar2,
                                               p_sigla_conselho    in  varchar2,
                                               p_uf_conselho       in  varchar2,
                                               p_cod_ts_sinistro   in  number,
                                               p_cod_cobertura     in  number,
                                               p_cod_usuario       in  varchar2,
                                               p_cod_procedimeto_cm in  varchar2,
                                               p_cod_motivo_glosa  out number,
                                               p_msg_retorno       out varchar2,
                                               p_cod_retorno       out number)   is

    ------------------------------------------------------------------------------
    v_quantidade            number;

    v_qtd_dias_periodo              itens_medicos.qtd_dias_periodo%type;
    v_qtd_limite                    itens_medicos.qtd_limite%type;
    v_cod_ts_tit                    associado.cod_ts_tit%type;
    v_qtd_utilizada                 ctm_consulta_realizada.qtd_utilizada%type;
    v_qtd_utilizada_sec             ctm_consulta_realizada.qtd_utilizada%type;
    v_cod_ts_contrato               associado.cod_ts_contrato%type;
    v_ind_tipo_periodo              cobertura_grupo.ind_tipo_periodo%type;
    v_ind_tipo_limite               cobertura_grupo.ind_tipo_limite%type;
    v_ind_tipo_periodo_contrato     contrato_adesao_plano.ind_tipo_periodo%type;
    v_dt_ini_contrato               contrato_adesao_plano.dt_ini_vigencia%type;
    v_cod_grupo_cobertura_contrato  contrato_adesao_plano.cod_grupo_cobertura%type;
    v_ind_controle_cobertura        cobertura_grupo.ind_controle_cobertura%type;
    v_existe                        number;
    v_qtd_aprovada                  number;
    v_cod_cid                       pedido_reembolso.cod_cid%type;
    v_dt_ini_vigencia               contrato_adesao_plano.dt_ini_vigencia%type;
    v_dt_ini_limite                 contrato_adesao_plano.dt_ini_vigencia%type;
    v_mes                           number;
    v_mes_atd                       number;
    v_dt_inclusao                   associado.data_inclusao%type;

    v_msg_retorno                   varchar2(200);
    v_cod_retorno                   number;
    v_posicao                       number;
    v_tipo_cobertura                controle_sistema.val_parametro%type;
    v_operadora_ts                  controle_sistema.val_parametro%type;
    v_achou                         varchar2(3);
    v_cod_grupo_estatistico         itens_medicos.cod_grupo_estatistico%type;
    rsReembolso                     pedido_reembolso%rowtype;
    rsItemReembolso                 procedimento_reembolso%rowtype;
    v_cod_motivo_glosa              number;
    v_cod_cobertura                 cobertura_contrato.cod_cobertura%type;
    v_qtd_prazo_pgto_aut            number;
    v_ind_controle_cbo              number;
    v_data_contrato                 date;
    v_contador                      number;

    v_cod_cobertura_ts_proc         cobertura_contrato.cod_cobertura%type;
    v_cod_cobertura_ts_grupo        cobertura_contrato.cod_cobertura%type;
    v_qtd_limite_proc               number;
    v_qtd_limite_grupo              number;
    ------------------------------------------------------------------------------
    BEGIN
      p_cod_retorno := 0;
      p_msg_retorno := ' ';

      --- criticas básicas de parametros

      if p_cod_ts is null then
         p_msg_retorno := 'Credenciado não informado.';
         p_cod_retorno := 1;
         return;
      end if;

      if p_dt_atendimento is null then
         p_msg_retorno := 'Data do atendimento não informada.';
         p_cod_retorno := 1;
         return;
      end if;
     --
     begin
        select *
        into   rsReembolso
        from   pedido_reembolso
        where  num_reembolso = p_num_reembolso;
     exception
        when no_data_found then
            p_cod_retorno := 9;
            p_msg_retorno := 'Reembolso não encontrado (' || p_num_reembolso ||')';
            return;
     end;
     --
     begin
        select *
        into   rsItemReembolso
        from   procedimento_reembolso
        where  num_reembolso = p_num_reembolso
          and  cod_procedimento_cm = p_cod_procedimeto_cm
          and  num_seq_item = p_num_seq_item;
     exception
        when no_data_found then
            p_cod_retorno := 9;
            p_msg_retorno := 'Procedimento Reembolso não encontrado (' || p_cod_procedimeto_cm ||')';
            return;
     end;
     --
     -- Verifica limite se for procedimento
       v_posicao := 55;

       begin
           select cm_obtem_ge_pai(cod_grupo_estatistico) into v_cod_grupo_estatistico
             from itens_medicos
            where item_medico = p_cod_procedimento ;
       exception
          when no_data_found then
               return;
       end;

       if v_cod_grupo_estatistico <>  'CON' then
          return;
       end if;
       v_posicao := 56;
      ----------------------------------------------------------------------------------------

      begin
         select val_parametro
           into v_tipo_cobertura
           from controle_sistema
          where cod_parametro = 'TIPO_COBERTURA';
      exception
         when no_data_found then
            v_tipo_cobertura := 'N';
      end;

      v_posicao := 57;
      ----------------------------------------------------------------------------------------
      -- Verifica a cobertura do contrato no plano na vigência do atendimento
      ----------------------------------------------------------------------------------------

      v_achou              := 'nao';

      begin

         select ca.cod_grupo_cobertura,         ca.dt_ini_vigencia, ca.cod_ts_contrato, a.cod_ts_tit, ca.ind_tipo_periodo
           into v_cod_grupo_cobertura_contrato, v_dt_ini_vigencia,  v_cod_ts_contrato , v_cod_ts_tit, v_ind_tipo_periodo_contrato  -- SAC 20660 Seguros
           from contrato_adesao_plano ca, associado a
          where ca.dt_ini_vigencia  = (select max(ce.dt_ini_vigencia)
                                         from contrato_adesao_plano ce
                                        where ca.cod_ts_contrato =  ce.cod_ts_contrato    and
                                              ca.cod_plano       =  ce.cod_plano          and
                                              p_dt_atendimento  >=  ce.dt_ini_vigencia    and
                                              p_dt_atendimento between ce.dt_ini_validade and nvl(ce.dt_fim_validade,p_dt_atendimento ) )
            and ca.cod_plano       = a.cod_plano
            and ca.cod_ts_contrato = a.cod_ts_contrato
            and a.cod_ts           = p_cod_ts
            and rownum < 2 ;

      exception
         when no_data_found then
              -- Não tem vigência com os critérios acima
              return;
      end;
      --
      IF p_cod_cobertura IS NULL THEN
        -- Verificando se existe cobertura por procedimento
        BEGIN
            SELECT cod_cobertura, c.qtd_limite
              INTO v_cod_cobertura_ts_proc, v_qtd_limite_proc
              FROM cobertura_contrato c, associado a
             WHERE c.cod_plano = a.cod_plano
               and c.dt_ini_vigencia     = (select max(dt_ini_vigencia)
                                                 from contrato_adesao_plano ce
                                                where c.cod_ts_contrato =  ce.cod_ts_contrato and
                                                      c.cod_plano       =  ce.cod_plano       and
                                                      p_dt_atendimento  >=  dt_ini_vigencia     and
                                                      p_dt_atendimento between dt_ini_validade and nvl(dt_fim_validade,p_dt_atendimento ) )
               AND c.cod_ts_contrato = a.cod_ts_contrato
               AND a.cod_ts = p_cod_ts
               AND c.cod_cobertura = rsItemReembolso.Cod_Procedimento_Cm
               AND rownum < 2;
        EXCEPTION
           WHEN OTHERS THEN
              v_cod_cobertura_ts_proc := 0;
              v_qtd_limite_proc       := 0;
         END;
         -- Verificando se existe cobertura por Grupo
              BEGIN
             SELECT c.cod_cobertura, c.qtd_limite
             INTO v_cod_cobertura_ts_grupo, v_qtd_limite_grupo
                  FROM cobertura_contrato c, associado a, grupo_cobertura gc
                 WHERE c.cod_plano = a.cod_plano
                   and c.cod_cobertura = gc.cod_cobertura_ts
                   and c.dt_ini_vigencia     = (select max(dt_ini_vigencia)
                                                     from contrato_adesao_plano ce
                                                    where c.cod_ts_contrato =  ce.cod_ts_contrato and
                                                          c.cod_plano       =  ce.cod_plano       and
                                                          p_dt_atendimento  >=  dt_ini_vigencia     and
                                                          p_dt_atendimento between dt_ini_validade and nvl(dt_fim_validade,p_dt_atendimento ) )
                   AND c.cod_ts_contrato = a.cod_ts_contrato
                   AND gc.cod_cobertura = rsItemReembolso.Cod_Procedimento_Cm
                   AND a.cod_ts = p_cod_ts
         AND rownum < 2;
        EXCEPTION
             WHEN OTHERS THEN
               v_cod_cobertura_ts_grupo := 0;
               v_qtd_limite_grupo       := 0;
        END;
        --
          --Verificando se tem limite e qual é o maior
          IF v_cod_cobertura_ts_proc = 0 AND v_cod_cobertura_ts_grupo = 0 THEN
             NULL;
          ELSIF v_qtd_limite_proc >= v_qtd_limite_grupo THEN
             v_cod_cobertura := v_cod_cobertura_ts_proc;
          ELSE
            v_cod_cobertura := v_cod_cobertura_ts_grupo;
          END IF;
        --
      ELSE
        --
        v_cod_cobertura := p_cod_cobertura;
        --
      END IF;
      --
      -----------------------------------------------------------------------------------------------
      -- Verifica limite procedimento
      -----------------------------------------------------------------------------------------------

         if  v_tipo_cobertura in ('A','M') then

           begin
              --
              v_posicao := 5;
              --
              select c.qtd_limite,        ind_tipo_periodo,       ind_periodo_limite,
                     ind_tipo_limite,     NVL(ind_controle_cobertura,'B')
                into v_qtd_limite,        v_ind_tipo_periodo,     v_qtd_dias_periodo,
                     v_ind_tipo_limite,   v_ind_controle_cobertura
                from cobertura_grupo c
               where nvl(c.qtd_limite,0)   <> 0
                 and c.cod_grupo_cobertura = v_cod_grupo_cobertura_contrato
                 and c.cod_cobertura_ts    = v_cod_cobertura
                 and rownum < 2;

              v_achou              := 'sim';

           exception
               when no_data_found then
                    if v_tipo_cobertura =  'M' then
                       null; -- continua
                       v_achou := 'nao';
                    else
                       -- Não tem limite
                       return;
                    end if;
           end;
         end if;

         if v_tipo_cobertura in ('N','M') and v_achou = 'nao' then
            begin
               --
               v_posicao := 6;
               --
               select distinct c.qtd_limite,       ind_tipo_limite ,      ind_periodo_limite,
                      ind_tipo_limite,    NVL(ind_controle_cob,'B')
                 into v_qtd_limite,       v_ind_tipo_periodo,    v_qtd_dias_periodo,
                      v_ind_tipo_limite,  v_ind_controle_cobertura
                 from cobertura_contrato c, associado a
                where nvl(c.qtd_limite,0)   <> 0
                  and c.cod_cobertura    = v_cod_cobertura
                  and c.dt_ini_vigencia  = (select max(dt_ini_vigencia)
                                              from contrato_adesao_plano ce
                                             where c.cod_ts_contrato =  ce.cod_ts_contrato  and
                                                   c.cod_plano       =  ce.cod_plano        and
                                                   p_dt_atendimento  >=  dt_ini_vigencia    and
                                                   p_dt_atendimento between dt_ini_validade and nvl(dt_fim_validade,p_dt_atendimento ) )
                  and c.cod_plano          = a.cod_plano
                  and c.cod_ts_contrato    = a.cod_ts_contrato
                  and a.cod_ts             = p_cod_ts;
               --
               v_achou              := 'sim';
               --
            exception
               when no_data_found then
                    -- Não tem limite
                    return;
            end;
         end if;

      if   v_achou = 'nao' then

           return; -- não tem limite

      end if;

       -- Tipo de Período
       -- 1- Aniversário do Contrato
       -- 2- Aniversario de inclusao do beneficiario

       -- SAC 20660 Seguros : acertos de período
       if v_ind_tipo_periodo_contrato is not null then
          v_ind_tipo_periodo   := v_ind_tipo_periodo_contrato;
       end if;

       v_posicao := 8;
       if nvl(v_ind_tipo_periodo,'1') = '1' then
           v_posicao := 81;


           if v_operadora_ts = '30' then

              begin

                 select a.data_inicio_vigencia into v_dt_ini_contrato
                   from contrato_empresa a
                     where a.cod_ts_contrato = v_cod_ts_contrato;
              exception
              when others then
                 v_dt_ini_contrato := v_dt_ini_vigencia;
              end;

              -- SAC 25932 Seguros :  data relativa ao aniversário do contrato
              v_dt_ini_limite := CM_RET_VIGENCIA_CONTRATO(v_dt_ini_contrato,p_dt_atendimento);

           else

             if v_dt_ini_vigencia > p_dt_atendimento - nvl(v_qtd_dias_periodo,0) or nvl(v_qtd_dias_periodo,0) = 0 then
                v_posicao := 82;
                v_dt_ini_limite := v_dt_ini_vigencia;
             else
                v_posicao := 83;
                v_dt_ini_limite := p_dt_atendimento - v_qtd_dias_periodo;
             end if;
           end if;

       elsif nvl(v_ind_tipo_periodo,'1') = 4 then -- Ano Civil

           v_dt_ini_limite := trunc(p_dt_atendimento,'year');

       else
           begin

           select data_inclusao
             into v_dt_inclusao
              from associado
                 where cod_ts = p_cod_ts;

           if v_dt_inclusao is not null then
              v_posicao := 84;
              v_mes     := to_number(to_char(v_dt_inclusao,'mm'));
              v_posicao := 85;
              v_mes_atd := to_number(to_char(p_dt_atendimento,'mm'));
              v_posicao := 86;
              -- SAC 25690 Floripa - problema do 29/02/
              begin
                v_dt_inclusao := to_date ( to_char(v_dt_inclusao,'dd/mm') || '/'|| to_char( p_dt_atendimento, 'yyyy') ,'dd/mm/yyyy');
              exception
                when others then
                   v_dt_inclusao := to_date ( to_char(v_dt_inclusao-1,'dd/mm') || '/'|| to_char( p_dt_atendimento, 'yyyy') ,'dd/mm/yyyy');
              end;
              v_posicao := 87;
              if v_mes >= v_mes_atd then
                 v_posicao     := 88;
                 v_dt_inclusao := add_months(v_dt_inclusao,-12);
              end if;
              v_posicao := 89;
              if v_dt_inclusao > p_dt_atendimento - nvl(v_qtd_dias_periodo,0) or
                 nvl(v_qtd_dias_periodo,0) = 0 then
                 v_posicao       := 90;
                 v_dt_ini_limite := v_dt_inclusao;
              else
                 v_posicao       := 91;
                 v_dt_ini_limite := p_dt_atendimento - v_qtd_dias_periodo;
              end if;
            end if;
           exception
              when no_data_found then
                   null;
           end;

        end if;

        v_posicao := 9;

       -- Tipo de Limite
       -- 1- Por Procedimento
       -- 2- Por Cobertura
       -- 3- Pro cobertura e Cid

        if nvl(v_ind_tipo_limite,'1') = '1' then --Por  P R O C E D I M E N T O

            v_posicao := 10;

            if v_ind_controle_cobertura IN ('C','2') then --CONTROLE DE COBERTURA POR  -  C O N T R A T O

                select sum(qtd_utilizada)
                    into v_qtd_utilizada
                       from ctm_consulta_realizada a
                        where --a.cod_ts              IN (select a1.cod_ts from ts.associado a1 where a1.cod_ts_contrato = v_cod_ts_contrato) and
                              a.cod_funcao          =         nvl(p_cod_funcao,0)       and
                              a.cod_ts_sinistro     <>        p_cod_ts_sinistro         and
                              a.cod_procedimento    =         p_cod_procedimento        and
                              a.dt_atendimento      between   v_dt_ini_limite           and
                                                              v_dt_ini_limite + 365     and
                             exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_contrato = v_cod_ts_contrato
                                      );

            elsif v_ind_controle_cobertura IN ('F','3') then --CONTROLE DE COBERTURA POR  -  F A M I L I A

                select sum(qtd_utilizada)
                    into v_qtd_utilizada
                       from ctm_consulta_realizada a
                        where --a.cod_ts              IN (select cod_ts from ts.associado where cod_ts_tit = v_cod_ts_tit) and
                              a.cod_funcao          =         nvl(p_cod_funcao,0)       and
                              a.cod_ts_sinistro     <>        p_cod_ts_sinistro         and
                              a.cod_procedimento    =         p_cod_procedimento        and
                              a.dt_atendimento      between   v_dt_ini_limite           and
                                                              v_dt_ini_limite + 365     and
                             exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_tit = v_cod_ts_tit
                                      );

            else --CONTROLE DE COBERTURA POR  -  B E N E F I C I A R I O

                select sum(qtd_utilizada)
                    into v_qtd_utilizada
                       from ctm_consulta_realizada a
                        where a.cod_ts              =         p_cod_ts                  and
                              a.cod_funcao          =         nvl(p_cod_funcao,0)       and
                              a.cod_ts_sinistro     <>        p_cod_ts_sinistro         and
                              a.cod_procedimento    =         p_cod_procedimento        and
                              a.dt_atendimento      between   v_dt_ini_limite           and
                                                              v_dt_ini_limite + 365 ;
            end if;

        elsif v_ind_tipo_limite = '2' then --Por  C O B E R T U R A

            v_posicao := 11;

            if v_ind_controle_cobertura IN ('C','2') then --CONTROLE DE COBERTURA POR  -  C O N T R A T O

                select sum(qtd_utilizada)
                   into v_qtd_utilizada
                     from ctm_consulta_realizada a
                        where --a.cod_ts              IN (select a1.cod_ts from ts.associado a1 where a1.cod_ts_contrato = v_cod_ts_contrato) and
                            a.cod_funcao          =         nvl(p_cod_funcao,0)         and
                            a.cod_ts_sinistro     <>        p_cod_ts_sinistro           and
                            a.cod_cobertura_ts    =         v_cod_cobertura             and
                            a.dt_atendimento       between  v_dt_ini_limite             and
                                                            v_dt_ini_limite + 365       and
                             exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_contrato = v_cod_ts_contrato
                                      );

            elsif v_ind_controle_cobertura IN ('F','3') then --CONTROLE DE COBERTURA POR  -  F A M I L I A

                select sum(qtd_utilizada)
                   into v_qtd_utilizada
                     from ctm_consulta_realizada a
                      where --a.cod_ts              IN (select cod_ts from ts.associado where cod_ts_tit = v_cod_ts_tit) and
                            a.cod_funcao          =         nvl(p_cod_funcao,0)         and
                            a.cod_ts_sinistro     <>        p_cod_ts_sinistro           and
                            a.cod_cobertura_ts    =         v_cod_cobertura          and
                            a.dt_atendimento       between  v_dt_ini_limite             and
                                                            v_dt_ini_limite + 365       and
                            exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_tit = v_cod_ts_tit
                                      );


            else --CONTROLE DE COBERTURA POR  -  B E N E F I C I A R I O

                select sum(qtd_utilizada)
                   into v_qtd_utilizada
                     from ctm_consulta_realizada a
                      where a.cod_ts              =         p_cod_ts                    and
                            a.cod_funcao          =         nvl(p_cod_funcao,0)         and
                            a.cod_ts_sinistro     <>        p_cod_ts_sinistro           and
                            a.cod_cobertura_ts    =         v_cod_cobertura             and
                            a.dt_atendimento       between  v_dt_ini_limite             and
                                                            v_dt_ini_limite + 365 ;
            end if;

        else --Por  C O B E R T U R A   E   C I D

            v_posicao := 13;

            if v_ind_controle_cobertura IN ('C','2') then --CONTROLE DE COBERTURA POR  -  C O N T R A T O

                select sum(qtd_utilizada)
                   into v_qtd_utilizada
                     from ctm_consulta_realizada a
                        where --a.cod_ts              IN (select a1.cod_ts from ts.associado a1 where a1.cod_ts_contrato = v_cod_ts_contrato) and
                            a.cod_funcao           =        nvl(p_cod_funcao,0)         and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro           and
                            a.cod_cobertura_ts     =        v_cod_cobertura             and
                            a.cod_cid              =        v_cod_cid                   and
                            a.dt_atendimento       between  v_dt_ini_limite             and
                                                            v_dt_ini_limite + 365       and
                             exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_contrato = v_cod_ts_contrato
                                      );

            elsif v_ind_controle_cobertura IN ('F','3') then --CONTROLE DE COBERTURA POR  -  F A M I L I A

                select sum(qtd_utilizada)
                   into v_qtd_utilizada
                     from ctm_consulta_realizada a
                      where --a.cod_ts               IN (select cod_ts from ts.associado where cod_ts_tit = v_cod_ts_tit) and
                            a.cod_funcao           =        nvl(p_cod_funcao,0)         and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro           and
                            a.cod_cobertura_ts     =        v_cod_cobertura             and
                            a.cod_cid              =        v_cod_cid                   and
                            a.dt_atendimento       between  v_dt_ini_limite             and
                                                            v_dt_ini_limite + 365       and
                            exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_tit = v_cod_ts_tit
                                      );

            else --CONTROLE DE COBERTURA POR  -  B E N E F I C I A R I O

                select sum(qtd_utilizada)
                   into v_qtd_utilizada
                     from ctm_consulta_realizada a
                      where a.cod_ts               =        p_cod_ts                    and
                            a.cod_funcao           =        nvl(p_cod_funcao,0)         and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro           and
                            a.cod_cobertura_ts     =        v_cod_cobertura             and
                            a.cod_cid              =        v_cod_cid                   and
                            a.dt_atendimento       between  v_dt_ini_limite             and
                                                            v_dt_ini_limite + 365 ;
            end if;
        end if;
        --
       if v_ind_controle_cobertura IN ('C','2') then
          v_ind_controle_cbo       := 2;
       elsif v_ind_controle_cobertura IN ('F','3') then
          v_ind_controle_cbo       := 3;
       elsif v_ind_controle_cobertura IN ('B','1') then
          v_ind_controle_cbo       := 1;
       else
          v_ind_controle_cbo       := v_ind_controle_cobertura;
       end if;
       --
       if v_ind_controle_cbo = 2 then
         --
        select max(dt_ini_validade) dt_inicio_contrato
          into v_data_contrato
          from ts.contrato_adesao_plano
         where cod_ts_contrato = rsReembolso.Cod_Ts_Contrato
           and cod_plano = rsReembolso.Cod_Plano;
          --
          v_contador := 0;
          --
          while v_contador = 0
            LOOP
               --
                if v_data_contrato <= rsItemReembolso.data_atendimento then
                    v_dt_ini_limite := v_data_contrato;
                    v_data_contrato := v_data_contrato + 365;
                else
                    v_contador := 1;
                end if;
         --
            END LOOP;
       else
          v_data_contrato := v_dt_ini_limite + 365;
       end if;
       --
   ts.rb_calcula_reembolso.rb_calcula_prazo_pgto_aut(rsItemReembolso.cod_procedimento,
                                                     rsItemReembolso.cod_procedimento_cm,
                                                     rsReembolso.num_associado,
                                                     v_dt_ini_limite,
                                                     v_data_contrato,
                                                     v_ind_controle_cbo,
                                                     v_qtd_prazo_pgto_aut,
                                                     p_msg_retorno,
                                                     p_cod_retorno);
        --
        v_posicao := 15;
        if (nvl(v_qtd_utilizada,0) +  p_qtd_utilizada + nvl(v_qtd_prazo_pgto_aut,0))  >  v_qtd_limite then
            v_qtd_aprovada :=    v_qtd_limite   -  (nvl(v_qtd_utilizada,0)  +  p_qtd_utilizada);
            if v_qtd_aprovada  < 0 then
                v_qtd_aprovada := 0;
            end if;

            v_posicao := 16;

            v_cod_motivo_glosa := 587;
            if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
               GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
               if p_cod_retorno = 9 then return; end if;
               update procedimento_reembolso
                  set qtd_aprovada        = v_qtd_limite   -  (nvl(v_qtd_utilizada,0) +  p_qtd_utilizada),
                      dt_atu              = sysdate,
                      cod_usuario_atu     = ts_read_client_info
                where rowid = p_rowid;

            end if;

        end if;

    v_posicao     := 17;
    p_cod_retorno := 0;
    p_msg_retorno := ' ';

    exception
      when others then
           p_msg_retorno := 'RB_DUP_REEXEC_GERAL_CONT_CON-' || v_posicao || ': ' || ts_util.MsgErro;
           p_cod_retorno := 9;
           return;
    end;
    --

    PROCEDURE    rb_dup_reexec_geral_contrato ( p_cod_procedimento  in  varchar2,
                                                p_dt_atendimento    in  date,
                                                p_qtd_utilizada     in  number,
                                                p_cod_funcao        in  number,
                                                p_cod_ts            in  number,
                                                p_num_reembolso     in  number,
                                                p_num_seq_item      in  number,
                                                p_rowid             in  rowid,
                                                p_cod_ts_sinistro   in  number,
                                                p_cod_cobertura_ts  in  number,
                                                p_cod_usuario       in  varchar2,
                                                p_cod_procedimeto_cm in varchar2,
                                                p_cod_motivo_glosa  out number,
                                                p_msg_retorno       out varchar2,
                                                p_cod_retorno       out number )   is

    ------------------------------------------------------------------------------

    v_qtd_dias_periodo              itens_medicos.qtd_dias_periodo%type;
    v_qtd_limite                    itens_medicos.qtd_limite%type;
    v_qtd_utilizada                 ctm_consulta_realizada.qtd_utilizada%type;
    v_ind_tipo_periodo              cobertura_grupo.ind_tipo_periodo%type;
    v_ind_tipo_limite               cobertura_grupo.ind_tipo_limite%type;
    v_ind_tipo_periodo_contrato     contrato_adesao_plano.ind_tipo_periodo%type;
    v_cod_grupo_cobertura_contrato  contrato_adesao_plano.cod_grupo_cobertura%type;
    v_cod_cid                       cid.cod_cid%type;
    v_dt_ini_contrato               contrato_adesao_plano.dt_ini_vigencia%type;
    v_dt_ini_vigencia               contrato_adesao_plano.dt_ini_vigencia%type;
    v_dt_ini_limite                 contrato_adesao_plano.dt_ini_vigencia%type;
    v_dt_inclusao                   associado.data_inclusao%type;
    v_operadora_ts                  controle_sistema.val_parametro%type;
    v_tipo_cobertura                controle_sistema.val_parametro%type;
    v_ind_controle_cobertura        cobertura_grupo.ind_controle_cobertura%type;
    v_msg_retorno                   varchar2(400);
    v_cod_retorno                   number;
    v_posicao                       number;
    v_mes                           number;
    v_mes_atd                       number;
    v_existe                        number;
    v_qtd_aprovada                  number;
    v_quantidade                    number;
    v_achou                         varchar2(3);
    v_cod_ts_contrato               associado.cod_ts_contrato%type;
    v_cod_ts_tit                    associado.cod_ts_tit%type;
    rsReembolso                     pedido_reembolso%rowtype;
    rsReembolsoProc                 procedimento_reembolso%rowtype;
    v_cod_motivo_glosa              number;
    v_cod_cobertura_ts                 cobertura_contrato.cod_cobertura%type;
    v_qtd_prazo_pgto_aut            number;
    v_ind_controle_cbo              number;
    v_data_contrato                 date;
    v_contador                      number;

    v_cod_cobertura_ts_proc         cobertura_contrato.cod_cobertura%type;
    v_cod_cobertura_ts_grupo        cobertura_contrato.cod_cobertura%type;
    v_qtd_limite_proc               number;
    v_qtd_limite_grupo              number;
    ------------------------------------------------------------------------
    BEGIN

      p_cod_retorno := 0;
      p_msg_retorno := ' ';

      if p_cod_ts is null then
         p_msg_retorno := 'Beneficiário não informado.';
         p_cod_retorno := 1;
         return;
      end if;

      if p_dt_atendimento is null then
         p_msg_retorno := 'Data do atendimento não informada.';
         p_cod_retorno := 1;
         return;
      end if;
      --
      begin
         select *
         into   rsReembolso
         from   pedido_reembolso
         where  num_reembolso = p_num_reembolso;
      exception
         when no_data_found then
             p_cod_retorno := 9;
             p_msg_retorno := 'Reembolso não encontrado (' || p_num_reembolso ||')';
             return;
      end;
     --
     begin
         select *
         into   rsReembolsoProc
         from   procedimento_reembolso
         where  num_reembolso = p_num_reembolso
           and  cod_procedimento_cm = p_cod_procedimeto_cm
           and  rownum <2;
      exception
         when no_data_found then
             p_cod_retorno := 9;
             p_msg_retorno := 'Reembolso não encontrado (' || p_cod_procedimeto_cm ||')';
             return;
      end;
      --
      v_posicao := 2;

      begin
         select val_parametro
           into v_tipo_cobertura
           from controle_sistema
          where cod_parametro = 'TIPO_COBERTURA';
      exception
         when no_data_found then
            v_tipo_cobertura := 'N';
      end;

      v_posicao := 3;

      v_qtd_limite                := null;
      v_ind_tipo_periodo          := null;
      v_ind_tipo_periodo_contrato := null;
      v_qtd_dias_periodo          := null;
      v_ind_tipo_limite           := null;
      v_achou                     := 'nao';



    --  if v_tipo_cobertura  in ( 'A', 'M' )  then

        begin

          select  ca.cod_grupo_cobertura,          ca.dt_ini_vigencia, ca.cod_ts_contrato,  a.cod_ts_tit, ca.ind_tipo_periodo
             into v_cod_grupo_cobertura_contrato,  v_dt_ini_vigencia,  v_cod_ts_contrato ,  v_cod_ts_tit, v_ind_tipo_periodo_contrato  -- SAC 20660 Seguros
             from contrato_adesao_plano ca, associado a
            where ca.dt_ini_vigencia  = (select max(ce.dt_ini_vigencia)
                                           from contrato_adesao_plano ce
                                          where ca.cod_ts_contrato =  ce.cod_ts_contrato    and
                                                ca.cod_plano       =  ce.cod_plano          and
                                                p_dt_atendimento  >=  ce.dt_ini_vigencia    and
                                                p_dt_atendimento between ce.dt_ini_validade and nvl(ce.dt_fim_validade,p_dt_atendimento ) )
              and  ca.cod_plano       = a.cod_plano
              and  ca.cod_ts_contrato = a.cod_ts_contrato
              and  a.cod_ts           = p_cod_ts;

           -- v_achou              := 'sim';

        exception
           when no_data_found then
              -- Não tem vigência com os critérios acima
              return;
        end;

    --  end if;
     --
     IF p_cod_cobertura_ts IS NULL THEN
        -- Verificando se existe cobertura por procedimento
        BEGIN
            SELECT cod_cobertura, c.qtd_limite
              INTO v_cod_cobertura_ts_proc, v_qtd_limite_proc
              FROM cobertura_contrato c, associado a
             WHERE c.cod_plano = a.cod_plano
               and c.dt_ini_vigencia     = (select max(dt_ini_vigencia)
                                                 from contrato_adesao_plano ce
                                                where c.cod_ts_contrato =  ce.cod_ts_contrato and
                                                      c.cod_plano       =  ce.cod_plano       and
                                                      p_dt_atendimento  >=  dt_ini_vigencia     and
                                                      p_dt_atendimento between dt_ini_validade and nvl(dt_fim_validade,p_dt_atendimento ) )
               AND c.cod_ts_contrato = a.cod_ts_contrato
               AND a.cod_ts = p_cod_ts
               AND c.cod_cobertura = rsReembolsoProc.Cod_Procedimento_Cm
               AND rownum < 2;
        EXCEPTION
           WHEN OTHERS THEN
              v_cod_cobertura_ts_proc := 0;
              v_qtd_limite_proc       := 0;
         END;
         -- Verificando se existe cobertura por Grupo
             BEGIN
             SELECT c.cod_cobertura, c.qtd_limite
             INTO v_cod_cobertura_ts_grupo, v_qtd_limite_grupo
                  FROM cobertura_contrato c, associado a, grupo_cobertura gc
                 WHERE c.cod_plano = a.cod_plano
                   and c.cod_cobertura = gc.cod_cobertura_ts
                   and c.dt_ini_vigencia     = (select max(dt_ini_vigencia)
                                                     from contrato_adesao_plano ce
                                                    where c.cod_ts_contrato =  ce.cod_ts_contrato and
                                                          c.cod_plano       =  ce.cod_plano       and
                                                          p_dt_atendimento  >=  dt_ini_vigencia     and
                                                          p_dt_atendimento between dt_ini_validade and nvl(dt_fim_validade,p_dt_atendimento ) )
                   AND c.cod_ts_contrato = a.cod_ts_contrato
                   AND gc.cod_cobertura = rsReembolsoProc.Cod_Procedimento_Cm
                   AND a.cod_ts = p_cod_ts
         AND rownum < 2;
        EXCEPTION
             WHEN OTHERS THEN
               v_cod_cobertura_ts_grupo := 0;
               v_qtd_limite_grupo       := 0;
        END;
          --
          --Verificando se tem limite e qual é o maior
          IF v_cod_cobertura_ts_proc = 0 AND v_cod_cobertura_ts_grupo = 0 THEN
             NULL;
          ELSIF v_qtd_limite_proc >= v_qtd_limite_grupo THEN
             v_cod_cobertura_ts := v_cod_cobertura_ts_proc;
          ELSE
             v_cod_cobertura_ts := v_cod_cobertura_ts_grupo;
          END IF;
        --
      ELSE
        --
        v_cod_cobertura_ts := p_cod_cobertura_ts;
        --
      END IF;
      --

      v_posicao := 4;

      -----------------------------------------------------------------------------------------------
      -- Verifica limite procedimento
      -----------------------------------------------------------------------------------------------




         if  v_tipo_cobertura in ('A','M') then

           begin

              v_posicao := 5;

              select c.qtd_limite,        ind_tipo_periodo,       ind_periodo_limite,
                     ind_tipo_limite,     NVL(ind_controle_cobertura,'B')
                into v_qtd_limite,        v_ind_tipo_periodo,     v_qtd_dias_periodo,
                     v_ind_tipo_limite,   v_ind_controle_cobertura
                from cobertura_grupo c
               where nvl(c.qtd_limite,0)   <> 0
                 and c.cod_grupo_cobertura = v_cod_grupo_cobertura_contrato
                 and c.cod_cobertura_ts    = v_cod_cobertura_ts
                 and rownum < 2;

              v_achou              := 'sim';

           exception
               when no_data_found then
                    if v_tipo_cobertura =  'M' then
                       null; -- continua
                       v_achou := 'nao'; -- incluido. 23/06
                    else
                       -- Não tem limite
                       return;
                    end if;
           end;
         end if;

         if v_tipo_cobertura in ('N','M') and v_achou = 'nao' then
            begin

               v_posicao := 6;

               select distinct c.qtd_limite,       ind_tipo_limite,      ind_periodo_limite,
                      ind_tipo_limite,    NVL(ind_controle_cob,'B')
                 into v_qtd_limite,       v_ind_tipo_periodo,    v_qtd_dias_periodo,
                      v_ind_tipo_limite,  v_ind_controle_cobertura
                 from cobertura_contrato c, associado a
                where nvl(c.qtd_limite,0)   <> 0
                  and c.cod_cobertura       = v_cod_cobertura_ts
                  and c.dt_ini_vigencia     = (select max(dt_ini_vigencia)
                                                 from contrato_adesao_plano ce
                                                where c.cod_ts_contrato =  ce.cod_ts_contrato and
                                                      c.cod_plano       =  ce.cod_plano       and
                                                      p_dt_atendimento  >=  dt_ini_vigencia     and
                                                      p_dt_atendimento between dt_ini_validade and nvl(dt_fim_validade,p_dt_atendimento ) )
                  and c.cod_plano          = a.cod_plano
                  and c.cod_ts_contrato    = a.cod_ts_contrato
                  and a.cod_ts             = p_cod_ts;

               v_achou              := 'sim';


            exception
               when no_data_found then
                    -- Não tem limite
                    return;
            end;
         end if;

      if   v_achou = 'nao' or NVL(v_qtd_limite,0) = 0  then
           return; -- não tem limite
      end if;

       v_posicao := 10;

       -- Tipo de Período
       -- 1- Aniversário do Contrato - default
       -- 2- Aniversario de inclusao do beneficiario

       -- SAC 20660 Seguros : acertos de período
        if v_ind_tipo_periodo_contrato is not null then  -- SAC 20660 Seguros
           v_ind_tipo_periodo   := v_ind_tipo_periodo_contrato;
        end if;


        if nvl(v_ind_tipo_periodo,'1') = 1 then

           -- Calcula data limite em relação ao aniversário do Contrato

           v_posicao := 61;

           -- SAC 25932 Seguros
           begin
              select val_parametro
                  into v_operadora_ts
                     from controle_sistema
                        where cod_parametro = 'OPERADORA_TS';
           exception
              when no_data_found then
                   v_operadora_ts := '00';
           end;

           if v_operadora_ts = '30' then

              begin

                 select a.data_inicio_vigencia into v_dt_ini_contrato
                   from contrato_empresa a
                     where a.cod_ts_contrato = v_cod_ts_contrato;
              exception
              when others then
                 v_dt_ini_contrato := v_dt_ini_vigencia;
              end;
              -- SAC 25932 Seguros :  data relativa ao aniversário do contrato
              v_dt_ini_limite := CM_RET_VIGENCIA_CONTRATO(v_dt_ini_contrato,p_dt_atendimento);

           else
              if v_dt_ini_vigencia > (p_dt_atendimento - nvl(v_qtd_dias_periodo,0)) or nvl(v_qtd_dias_periodo,0) = 0 then
                 v_dt_ini_limite := v_dt_ini_vigencia;
              else
                 v_dt_ini_limite := p_dt_atendimento - v_qtd_dias_periodo;
              end if;
           end if;

        elsif nvl(v_ind_tipo_periodo,'1') = 4 then -- Ano Civil
           v_dt_ini_limite := trunc(p_dt_atendimento,'year');

        else

           -- Calcula data limite em relação ao aniversario de inclusao do beneficiario

           select data_inclusao into v_dt_inclusao from associado where cod_ts = p_cod_ts;

           v_posicao := 62;
           v_mes     := to_number(to_char(v_dt_inclusao,'mm'));

           v_posicao := 63;
           v_mes_atd := to_number(to_char(p_dt_atendimento,'mm'));

           v_posicao := 64;
           -- SAC 25690 Floripa - problema do 29/02/
           begin
             v_dt_inclusao := to_date ( to_char(v_dt_inclusao,'dd/mm') || '/'|| to_char( p_dt_atendimento, 'yyyy') ,'dd/mm/yyyy');
           exception
             when others then
                v_dt_inclusao := to_date ( to_char(v_dt_inclusao-1,'dd/mm') || '/'|| to_char( p_dt_atendimento, 'yyyy') ,'dd/mm/yyyy');
           end;

           v_posicao := 65;

           if v_mes > v_mes_atd then
              v_dt_inclusao := add_months(v_dt_inclusao,-12);
           end if;

           v_posicao := 66;

           if v_dt_inclusao > p_dt_atendimento - nvl(v_qtd_dias_periodo,0) or nvl(v_qtd_dias_periodo,0) = 0 then
              v_dt_ini_limite := v_dt_inclusao;
           else
              v_dt_ini_limite := p_dt_atendimento - v_qtd_dias_periodo;
           end if;

        end if;

        v_posicao := 70;

       -- Tipo de Limite
       -- 1- Por Procedimento
       -- 2- Por Cobertura
       -- 3- Pro Cobertura e Cid

       if nvl(v_ind_tipo_limite,'1') = '1' then

          -- Limite por procedimento

          if v_ind_controle_cobertura IN ('C','2') then --CONTROLE DE COBERTURA POR  -  C O N T R A T O

              select sum(qtd_utilizada)
                 into v_qtd_utilizada
                   from ctm_procedimento_realizado a
                      where --a.cod_ts              IN (select a1.cod_ts from ts.associado a1 where a1.cod_ts_contrato = v_cod_ts_contrato) and
                            a.cod_funcao          =        nvl(p_cod_funcao,0)  and
                            a.cod_procedimento    =        p_cod_procedimento   and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro   and
                            a.dt_utilizacao       between  v_dt_ini_limite      and v_dt_ini_limite + 365
                            and exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_contrato = v_cod_ts_contrato
                                      );

          elsif v_ind_controle_cobertura IN ('F','3') then --CONTROLE DE COBERTURA POR  -  F A M I L I A

              select sum(qtd_utilizada)
                 into v_qtd_utilizada
                   from ctm_procedimento_realizado a
                      where --a.cod_ts              IN (select cod_ts from ts.associado where cod_ts_tit = v_cod_ts_tit) and
                            a.cod_funcao          =        nvl(p_cod_funcao,0)  and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro   and
                            a.cod_procedimento    =        p_cod_procedimento   and
                            a.dt_utilizacao       between  v_dt_ini_limite      and v_dt_ini_limite + 365 and
                            exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_tit = v_cod_ts_tit
                                      );

          else --CONTROLE DE COBERTURA POR  -  B E N E F I C I A R I O

              select sum(qtd_utilizada)
                 into v_qtd_utilizada
                   from ctm_procedimento_realizado a
                      where a.cod_ts              =        p_cod_ts             and
                            a.cod_funcao          =        nvl(p_cod_funcao,0)  and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro   and
                            a.cod_procedimento    =        p_cod_procedimento   and
                            a.dt_utilizacao       between  v_dt_ini_limite      and v_dt_ini_limite + 365;
          end if;

       elsif v_ind_tipo_limite = '2' then

          -- Limite por cobertura

          if v_ind_controle_cobertura IN ('C','2') then --CONTROLE DE COBERTURA POR  -  C O N T R A T O

              select sum(qtd_utilizada)
                 into v_qtd_utilizada
                   from ctm_procedimento_realizado a
                      where --a.cod_ts              IN (select a1.cod_ts from ts.associado a1 where a1.cod_ts_contrato = v_cod_ts_contrato) and
                            a.cod_funcao          =        nvl(p_cod_funcao,0) and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro  and
                            a.cod_cobertura_ts    =        v_cod_cobertura_ts  and
                            a.dt_utilizacao       between  v_dt_ini_limite and v_dt_ini_limite + 365 and
                             exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_contrato = v_cod_ts_contrato
                                      );

          elsif v_ind_controle_cobertura IN ('F','3') then --CONTROLE DE COBERTURA POR  -  F A M I L I A

              select sum(qtd_utilizada)
                 into v_qtd_utilizada
                   from ctm_procedimento_realizado a
                      where --a.cod_ts              IN (select cod_ts from ts.associado where cod_ts_tit = v_cod_ts_tit) and
                            a.cod_funcao          =        nvl(p_cod_funcao,0) and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro  and
                            a.cod_cobertura_ts    =        v_cod_cobertura_ts  and
                            a.dt_utilizacao       between  v_dt_ini_limite and v_dt_ini_limite + 365 and
                            exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_tit = v_cod_ts_tit
                                      );

          else --CONTROLE DE COBERTURA POR  -  B E N E F I C I A R I O

              select sum(qtd_utilizada)
                 into v_qtd_utilizada
                   from ctm_procedimento_realizado a
                      where a.cod_ts              =        p_cod_ts            and
                            a.cod_funcao          =        nvl(p_cod_funcao,0) and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro  and
                            a.cod_cobertura_ts    =        v_cod_cobertura_ts  and
                            a.dt_utilizacao       between  v_dt_ini_limite and v_dt_ini_limite + 365 ;
          end if;
       else

          -- Limite por cobertura / CID

          if v_ind_controle_cobertura IN ('C','2') then --CONTROLE DE COBERTURA POR  -  C O N T R A T O

              select sum(qtd_utilizada)
                 into v_qtd_utilizada
                   from ctm_procedimento_realizado a
                      where --a.cod_ts               IN (select a1.cod_ts from ts.associado a1 where a1.cod_ts_contrato = v_cod_ts_contrato) and
                            a.cod_funcao           =        nvl(p_cod_funcao,0)                    and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro                      and
                            a.cod_cobertura_ts     =        v_cod_cobertura_ts                     and
                            a.cod_cid              =        v_cod_cid                              and
                            a.dt_utilizacao       between  v_dt_ini_limite and v_dt_ini_limite + 365 and
                             exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_contrato = v_cod_ts_contrato
                                      );

          elsif v_ind_controle_cobertura IN ('F','3') then --CONTROLE DE COBERTURA POR  -  F A M I L I A

              select sum(qtd_utilizada)
                 into v_qtd_utilizada
                   from ctm_procedimento_realizado a
                      where --a.cod_ts               IN (select cod_ts from ts.associado where cod_ts_tit = v_cod_ts_tit) and
                            a.cod_funcao           =        nvl(p_cod_funcao,0)                    and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro                      and
                            a.cod_cobertura_ts     =        v_cod_cobertura_ts                     and
                            a.cod_cid              =        v_cod_cid                              and
                            a.dt_utilizacao       between  v_dt_ini_limite and v_dt_ini_limite + 365 and
                            exists (select 1
                                      from ts.beneficiario a1
                                     where a.cod_ts = a1.cod_ts
                                       and a1.cod_ts_tit = v_cod_ts_tit
                                      );

          else --CONTROLE DE COBERTURA POR  -  B E N E F I C I A R I O

              select sum(qtd_utilizada)
                 into v_qtd_utilizada
                   from ctm_procedimento_realizado a
                      where a.cod_ts               =        p_cod_ts                               and
                            a.cod_funcao           =        nvl(p_cod_funcao,0)                    and
                            a.cod_ts_sinistro      <>       p_cod_ts_sinistro                      and
                            a.cod_cobertura_ts     =        v_cod_cobertura_ts                     and
                            a.cod_cid              =        v_cod_cid                              and
                            a.dt_utilizacao       between  v_dt_ini_limite and v_dt_ini_limite + 365 ;
          end if;
          end if;
       --
       if v_ind_controle_cobertura IN ('C','2') then
          v_ind_controle_cbo       := 2;
       elsif v_ind_controle_cobertura IN ('F','3') then
          v_ind_controle_cbo       := 3;
       elsif v_ind_controle_cobertura IN ('B','1') then
          v_ind_controle_cbo       := 1;
       else
          v_ind_controle_cbo       := v_ind_controle_cobertura;
       end if;
       --
       if v_ind_controle_cbo = 2 then
         --
        select max(dt_ini_validade) dt_inicio_contrato
          into v_data_contrato
          from ts.contrato_adesao_plano
         where cod_ts_contrato = rsReembolso.Cod_Ts_Contrato
           and cod_plano = rsReembolso.Cod_Plano;
          --
          v_contador := 0;
          --
          while v_contador = 0
            LOOP
               --
                if v_data_contrato <= rsReembolsoProc.data_atendimento then
                    v_dt_ini_limite := v_data_contrato;
                    v_data_contrato := v_data_contrato + 365;
                else
                    v_contador := 1;
                end if;
         --
            END LOOP;
        else
          v_data_contrato := v_dt_ini_limite + 365;
       end if;
       --
       ts.rb_calcula_reembolso.rb_calcula_prazo_pgto_aut(rsReembolsoProc.cod_procedimento,
                                                     rsReembolsoProc.cod_procedimento_cm,
                                                     rsReembolso.num_associado,
                                                     v_dt_ini_limite,
                                                     v_data_contrato,
                                                     v_ind_controle_cbo,
                                                     v_qtd_prazo_pgto_aut,
                                                     p_msg_retorno,
                                                     p_cod_retorno);

       --
       v_posicao := 80;

         if (nvl(v_qtd_utilizada,0) +  nvl(p_qtd_utilizada,0) + nvl(v_qtd_prazo_pgto_aut,0))  >  nvl(v_qtd_limite,0) then

              v_qtd_aprovada :=    nvl(v_qtd_limite,0)   -  (nvl(v_qtd_utilizada,0) +  nvl(p_qtd_utilizada,0));

              if v_qtd_aprovada  < 0 then
                 v_qtd_aprovada := 0;
              end if;

              v_posicao := 90;

            v_cod_motivo_glosa := 587;
            if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
               GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,p_num_seq_item,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
               if p_cod_retorno = 9 then return; end if;
              update procedimento_reembolso
                 set qtd_aprovada = v_qtd_aprovada
               where rowid = p_rowid;
            end if;
         end if;


       v_posicao := 110;
       p_cod_retorno := 0;
       p_msg_retorno := ' ';

    exception
      when others then
           p_msg_retorno := 'RB_DUP_REEXEC_GERAL_CONTRATO-' || v_posicao || ': ' || ts_util.MsgErro;
           p_cod_retorno := 9;
           return;
    end;
    --
     ----------------------------------------------------------------------------
    -- Adicionar XML no XML informado
    ----------------------------------------------------------------------------
    procedure AdicionaProrocolo  ( rsReembolso                pedido_reembolso%rowtype
                                 , p_cod_usuario       in     varchar2
                                 , p_cod_retorno          out number
                                 , p_msg_retorno          out varchar2
                                 , p_num_protocolo     in out varchar2
                                 , p_ind_commit        in varchar2 default 'S'
                                 )
    is
    --
    p_xml_protocolo              CLOB;
    v_num_protocolo_antigo       number;
    --
    begin
        --

        if p_num_protocolo is null then
             getProtocolo( p_cod_operadora_atd => rsReembolso.Cod_Operadora_Contrato
                         , p_cod_usuario_atd   => rsReembolso.Cod_Usuario_Inclusao
                         , p_cod_ts_atd        => rsReembolso.Cod_Ts
                         , p_cod_retorno       => p_cod_retorno
                         , p_msg_retorno       => p_msg_retorno
                         , p_num_protocolo     => p_num_protocolo
                         , p_ind_commit        => p_ind_commit
                           ) ;
            --
            select ts_sinistro_seq.nextval
            into   v_num_protocolo_antigo
            from   dual;
            --
        end if;
        --
        begin
            insert into protocolo_reembolso (
                        NUM_PROTOCOLO_ANS                           , NUM_ASSOCIADO
                      , NOME_ASSOCIADO                              , NUM_FAVORECIDO
                      , COD_TS                                      , IND_TIPO_FAVORECIDO
                      , NOME_FAVORECIDO
                      , NUM_CPF_TITULAR                             , IND_FORMA_PGTO
                      , COD_BANCO                                   , COD_AGENCIA
                      , NUM_CONTA_CORRENTE                          , NUM_DV_AGENCIA
                      , NUM_DV_CC                                   , DT_PREVISTA_PGTO
                      , DT_PEDIDO                                   , COD_USUARIO_PROTOCOLO
                      , DT_ATU                                      , COD_USUARIO_ATU
                      , NUM_ENVELOPE                                , DT_ENVELOPE
                      , VAL_PROTOCOLO                               , IND_SITUACAO
                      , COD_ORIGEM                                  , COD_MOTIVO_REEMBOLSO
                      , COD_OPERADORA_CONTRATO                      , COD_INSPETORIA_TS_ABERTURA
                      , COD_INSPETORIA_TS_CONTRATO                  , IND_ACAO_JUDICIAL
                      , NUM_ACAO_JUDICIAL                           , TXT_OBS_ACAO_JUDICIAL
                      , SGL_AREA_ABERTURA                           , COD_MARCA_CONTRATO
                      , IND_ORIGEM_ASSOCIADO                        , TIPO_PESSOA_CONTRATO
                      , NOME_TITULAR                                , NUM_TITULAR
                      , NOME_CONTRATO                               , COD_PLANO
                      , IND_REGULAMENTADO                           , NUM_CPF_FAVORECIDO
                      , NUM_CPF_ASSOCIADO                           , DT_SITUACAO_PEDIDO
                      , NUM_CONTRATO                                , COD_BAIRRO
                      , NOME_BAIRRO                                 , NOME_MUNICIPIO
                      , IND_INTERNACIONAL                           , NOM_LOGRADOURO
                      , SGL_UF                                      , COD_MUNICIPIO
                      , NUM_ENDERECO                                , TXT_COMPLEMENTO
                      , COD_TIPO_LOGR                               , IND_UTILIZA_COURRIER
                      , COD_TIPO_CONTRATO                           , IND_TIPO_PRECO
                      , DDD_RESIDENCIAL                             , TEL_RESIDENCIAL
                      , DDD_COMERCIAL                               , TEL_COMERCIAL
                      , DDD_CELULAR                                 , TEL_CELULAR
                      , TXT_CONTATO_COURRIER                        , NUM_CEP
                      , NUM_PROTOCOLO                               , IND_TIPO_CONTA_REEMB
              )
              values  (
                        p_num_protocolo                             , rsReembolso.num_associado
                      , rsReembolso.nome_associado                  , rsReembolso.num_favorecido
                      , rsReembolso.cod_ts                          , rsReembolso.ind_tipo_favorecido
                      , rsReembolso.nome_favorecido
                      , rsReembolso.num_cpf_titular                 , rsReembolso.ind_forma_pgto
                      , rsReembolso.cod_banco                       , rsReembolso.cod_agencia
                      , rsReembolso.num_conta_corrente              , rsReembolso.num_dv_agencia
                      , rsReembolso.num_dv_cc                       , null /*rsReembolso.dt_prevista_pgto*/
                      , sysdate                                     , p_cod_usuario
                      , sysdate                                     , p_cod_usuario
                      , null /*num_envelope*/                       , sysdate
                      , rsReembolso.val_informado                   , rsReembolso.ind_situacao
                      , rsReembolso.cod_origem                      , rsReembolso.cod_motivo_reembolso
                      , rsReembolso.cod_operadora_contrato          , rsReembolso.cod_inspetoria_ts_abertura
                      , rsReembolso.cod_inspetoria_ts_contrato      , rsReembolso.ind_acao_judicial
                      , rsReembolso.num_acao_judicial               , rsReembolso.txt_obs_acao_judicial
                      , rsReembolso.sgl_area_abertura               , rsReembolso.cod_marca_contrato
                      , rsReembolso.ind_origem_associado            , rsReembolso.tipo_pessoa_contrato
                      , rsReembolso.nome_titular                    , rsReembolso.num_titular
                      , rsReembolso.nome_contrato                   , rsReembolso.cod_plano
                      , rsReembolso.ind_regulamentado               , rsReembolso.num_cpf_favorecido
                      , rsReembolso.num_cpf_associado               , trunc(sysdate)
                      , rsReembolso.num_contrato                    , rsReembolso.cod_bairro
                      , rsReembolso.nome_bairro                     , rsReembolso.nome_municipio
                      , rsReembolso.ind_internacional               , rsReembolso.nom_logradouro
                      , rsReembolso.sgl_uf                          , rsReembolso.cod_municipio
                      , rsReembolso.num_endereco                    , rsReembolso.txt_complemento
                      , rsReembolso.cod_tipo_logr                   , rsReembolso.ind_utiliza_courrier
                      , rsReembolso.cod_tipo_contrato               , rsReembolso.ind_tipo_preco
                      , rsReembolso.ddd_residencial                 , rsReembolso.tel_residencial
                      , rsReembolso.ddd_comercial                   , rsReembolso.tel_comercial
                      , rsReembolso.ddd_celular                     , rsReembolso.tel_celular
                      , rsReembolso.txt_contato_courrier            , rsReembolso.num_cep
                      , nvl(v_num_protocolo_antigo,rsReembolso.Num_Protocolo), rsReembolso.Ind_Tipo_Conta_Reemb
              );
        exception
        when others then
            p_cod_retorno := 9;
            p_msg_retorno := 'Erro ao incluir protocolo de reembolso: ' || ts_util.MsgErro;
            return;
        end;
        --
        return;
        --
    exception
        when others then
        ts_log_execucao ( 'RB_REEMBOLSO'
                        , 10
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                  || chr(13) || 'Erro-ORA:'     || ts_util.MsgErro
                                  || chr(13) || 'p_num_reembolso:' || rsReembolso.num_reembolso
                        , 'adiciona_protocolo' );
    end;
    --
    --

    procedure AtualizaProtocoloEReembolsos  ( rsReembolso                pedido_reembolso%rowtype
                                             , p_cod_usuario       in     varchar2
                                             , p_cod_retorno          out number
                                             , p_msg_retorno          out varchar2
                                             )
    is
    --
        v_ind_tipo_reembolso  pedido_reembolso.ind_tipo_reembolso%type;
        v_val_protocolo       procedimento_reembolso.val_informado%type;
        v_dt_prevista_pgto    pedido_reembolso.dt_prevista_pgto%type;
    begin
        --
            select max(dt_prevista_pgto)
                 , sum(val_informado)
              into
                   v_dt_prevista_pgto
                 , v_val_protocolo
              from pedido_reembolso
             where num_protocolo = rsReembolso.num_protocolo
          group by rsReembolso.num_protocolo;
        --
        begin
            update protocolo_reembolso
            SET NUM_ASSOCIADO                           = rsReembolso.num_associado
              , NOME_ASSOCIADO                          = rsReembolso.nome_associado
              , NUM_CPF_TITULAR                         = rsReembolso.num_cpf_titular
              , NUM_FAVORECIDO                          = rsReembolso.num_favorecido
              , NOME_FAVORECIDO                         = rsReembolso.nome_favorecido
              , IND_TIPO_FAVORECIDO                     = rsReembolso.ind_tipo_favorecido
              , NUM_CPF_FAVORECIDO                      = rsReembolso.num_cpf_favorecido
              , IND_FORMA_PGTO                          = rsReembolso.ind_forma_pgto
              , COD_BANCO                               = rsReembolso.cod_banco
              , COD_AGENCIA                             = rsReembolso.cod_agencia
              , NUM_CONTA_CORRENTE                      = rsReembolso.num_conta_corrente
              , NUM_DV_AGENCIA                          = rsReembolso.num_dv_agencia
              , NUM_DV_CC                               = rsReembolso.num_dv_cc
              , DT_PREVISTA_PGTO                        = v_dt_prevista_pgto
              , VAL_PROTOCOLO                           = v_val_protocolo
              , COD_OPERADORA_CONTRATO                  = rsReembolso.cod_operadora_contrato
              , COD_INSPETORIA_TS_CONTRATO              = rsReembolso.cod_inspetoria_ts_contrato
              , COD_MARCA_CONTRATO                      = rsReembolso.cod_marca_contrato
              , IND_ORIGEM_ASSOCIADO                    = rsReembolso.ind_origem_associado
              , TIPO_PESSOA_CONTRATO                    = rsReembolso.tipo_pessoa_contrato
              , NOME_TITULAR                            = rsReembolso.nome_titular
              , NUM_TITULAR                             = rsReembolso.num_titular
              , NOME_CONTRATO                           = rsReembolso.nome_contrato
              , COD_PLANO                               = rsReembolso.cod_plano
              , IND_REGULAMENTADO                       = rsReembolso.ind_regulamentado
              , NUM_CPF_ASSOCIADO                       = rsReembolso.num_cpf_associado
              , NUM_CONTRATO                            = rsReembolso.num_contrato
              , COD_BAIRRO                              = rsReembolso.cod_bairro
              , NOME_BAIRRO                             = rsReembolso.nome_bairro
              , NOME_MUNICIPIO                          = rsReembolso.nome_municipio
              , IND_INTERNACIONAL                       = rsReembolso.ind_internacional
              , NOM_LOGRADOURO                          = rsReembolso.nom_logradouro
              , SGL_UF                                  = rsReembolso.sgl_uf
              , COD_MUNICIPIO                           = rsReembolso.cod_municipio
              , NUM_ENDERECO                            = rsReembolso.num_endereco
              , TXT_COMPLEMENTO                         = rsReembolso.txt_complemento
              , COD_TIPO_LOGR                           = rsReembolso.cod_tipo_logr
              , IND_UTILIZA_COURRIER                    = rsReembolso.ind_utiliza_courrier
              , COD_TIPO_CONTRATO                       = rsReembolso.cod_tipo_contrato
              , IND_TIPO_PRECO                          = rsReembolso.ind_tipo_preco
              , DDD_RESIDENCIAL                         = rsReembolso.ddd_residencial
              , TEL_RESIDENCIAL                         = rsReembolso.tel_residencial
              , DDD_COMERCIAL                           = rsReembolso.ddd_comercial
              , TEL_COMERCIAL                           = rsReembolso.tel_comercial
              , DDD_CELULAR                             = rsReembolso.ddd_celular
              , TEL_CELULAR                             = rsReembolso.tel_celular
              , TXT_CONTATO_COURRIER                    = rsReembolso.txt_contato_courrier
              , NUM_CEP                                 = rsReembolso.num_cep
              , IND_TIPO_CONTA_REEMB                    = rsReembolso.ind_tipo_conta_reemb
           where num_protocolo = rsReembolso.num_protocolo;

        exception
        when others then
            p_cod_retorno := 9;
            p_msg_retorno := 'Erro ao atualizar protocolo de reembolso: ' || ts_util.MsgErro;
            return;
        end;
        --
        begin
            --for p in (select num_reembolso from pedido_reembolso where num_protocolo = rsReembolso.num_protocolo and num_reembolso = rsReembolso.num_reembolso) loop

                update pedido_reembolso
                SET NUM_ASSOCIADO                           = rsReembolso.num_associado
                  , NOME_ASSOCIADO                          = rsReembolso.nome_associado
                  , NUM_CPF_TITULAR                         = rsReembolso.num_cpf_titular
                  , COD_OPERADORA_CONTRATO                  = rsReembolso.cod_operadora_contrato
                  , COD_INSPETORIA_TS_CONTRATO              = rsReembolso.cod_inspetoria_ts_contrato
                  , COD_MARCA_CONTRATO                      = rsReembolso.cod_marca_contrato
                  , IND_ORIGEM_ASSOCIADO                    = rsReembolso.ind_origem_associado
                  , TIPO_PESSOA_CONTRATO                    = rsReembolso.tipo_pessoa_contrato
                  , NOME_TITULAR                            = rsReembolso.nome_titular
                  , NUM_TITULAR                             = rsReembolso.num_titular
                  , NOME_CONTRATO                           = rsReembolso.nome_contrato
                  , COD_EMPRESA                             = rsReembolso.cod_empresa
                  , COD_PLANO                               = rsReembolso.cod_plano
                  , IND_REGULAMENTADO                       = rsReembolso.ind_regulamentado
                  , NUM_CPF_ASSOCIADO                       = rsReembolso.num_cpf_associado
                  , NUM_CONTRATO                            = rsReembolso.num_contrato
                  , COD_TIPO_CONTRATO                       = rsReembolso.cod_tipo_contrato
                  , IND_TIPO_PRECO                          = rsReembolso.ind_tipo_preco
                  , DDD_RESIDENCIAL                         = rsReembolso.ddd_residencial
                  , TEL_RESIDENCIAL                         = rsReembolso.tel_residencial
                  , DDD_COMERCIAL                           = rsReembolso.ddd_comercial
                  , TEL_COMERCIAL                           = rsReembolso.tel_comercial
                  , DDD_CELULAR                             = rsReembolso.ddd_celular
                  , TEL_CELULAR                             = rsReembolso.tel_celular
                  , VAL_PROTOCOLADO                         = v_val_protocolo
                  , NUM_REEMBOLSO_PREVIA                    = rsReembolso.Num_Reembolso_Previa
               where num_protocolo = rsReembolso.num_protocolo
                 and ind_situacao not in (34,35,36,37,38,46);
            --end loop;

        exception
        when others then
            p_cod_retorno := 9;
            p_msg_retorno := 'Erro ao atualizar reembolsos do protocolo: ' || ts_util.MsgErro;
            return;
        end;
        --
        return;
        --
    exception
        when others then
        ts_log_execucao ( 'RB_REEMBOLSO'
                        , 10
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                  || chr(13) || 'Erro-ORA:'     || ts_util.MsgErro
                                  || chr(13) || 'p_num_reembolso:' || rsReembolso.num_reembolso
                        , 'adiciona_protocolo' );
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Gerar XML do SQL / parametros informados
    ----------------------------------------------------------------------------
    function gerar_xml ( p_sql               in varchar2
                       , p_nome_cabecalho    in varchar2
                       , p_nome_coluna       in varchar2
                       , p_qtd_max_linhas    in number     default 0
                       )
    return clob
    is
        qryCtx                  DBMS_XMLGEN.ctxHandle;
        vXML                    clob;
        idx                     pls_integer := 0;
        i                       pls_integer := 0;
        v_cod_retorno           pls_integer := 0;
        v_msg_retorno           varchar2(4000);
    begin
        --
        ts_util.ValidarSQL ( p_cod_retorno  => v_cod_retorno
                           , p_msg_retorno  => v_msg_retorno
                           , stringSql      => p_sql
                           );
        --
        if v_cod_retorno != 0 then
            ts_log_execucao ( 'RB_REEMBOSLO'
                            , 999
                            , 'Erro ao ValidarSQL'
                            , 'Erro:' || chr(13) || v_msg_retorno
                                      || chr(13) || 'SQL:' || p_sql
                            , 'gerar_xml'
                            );

            return '';
        end if;
        --
        qryCtx := dbms_xmlgen.newContext     ( p_sql );
        -- Colocar os parametros
        idx := param_xml.first;
        while idx is not null loop
            --
            if param_xml ( idx ).tipo = 'D' then
                --
                dbms_xmlgen.setBindValue         ( qryCtx
                                                 , param_xml ( idx ).nome
                                                 , to_date(param_xml ( idx ).valor, case length( trim(param_xml ( idx ).valor) )
                                                                                                when 6  then 'yyyymm'
                                                                                                when 7  then 'mm/yyyy'
                                                                                                when 8  then 'ddmmyyyy'
                                                                                                when 10 then 'dd/mm/yyyy'
                                                                                                        else 'dd/mm/yyyy hh24:mi:ss'
                                                                                             end)
                                                 );
                --
                /*
            elsif param_xml ( idx ).tipo = 'DH' then
                --
                dbms_xmlgen.setBindValue         ( qryCtx
                                                 , param_xml ( idx ).nome
                                                 , to_date(param_xml ( idx ).valor, 'dd/mm/yyyy hh24:mi:ss')
                                                 );
                --
                */
            else
                --
                dbms_xmlgen.setBindValue         ( qryCtx
                                                 , param_xml ( idx ).nome
                                                 , param_xml ( idx ).valor
                                                 );
                --
            end if;
            --
            idx := param_xml.next               ( idx );
        end loop;
        --
        param_xml.delete;
        --
        dbms_xmlgen.setRowSetTag                ( qryCtx , p_nome_cabecalho );
        dbms_xmlgen.setRowTag                   ( qryCtx , p_nome_coluna);
        --
        if p_qtd_max_linhas > 0 then
            dbms_xmlgen.setMaxRows              ( qryCtx , to_number(p_qtd_max_linhas));
        end if;
        --
        dbms_xmlgen.setCheckInvalidChars        ( qryCtx , TRUE );
        dbms_xmlgen.useNullAttributeIndicator   ( qryCtx , TRUE  );
        dbms_xmlgen.setConvertSpecialChars      ( qryCtx , TRUE );
        --dbms_xmlgen.setMaxRows(ctx IN ctxHandle, maxRows IN NUMBER);
        --dbms_xmlgen.setXSLT(ctx IN ctxType, name  IN VARCHAR2, value IN VARCHAR2);
        vXML := dbms_xmlgen.getXML              ( qryCtx );
        i := dbms_xmlgen.getNumRowsProcessed    ( qryCtx );
        dbms_xmlgen.closeContext                ( qryCtx );
        --
        -- Retirar xsi:nil = "true" pois dá erro ao gerar um cursor
        vXML := replace(vXML, ' xsi:nil = "true"', '');
        --
        return vXML;
        --
    exception
    when others then
        ts_log_execucao ( 'RB_REEMBOSLO'
                        , 10
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro || ' - ' || ts_util.MsgErro
                                  || chr(13) || 'SQL:' || p_sql
                        , 'gerar_xml' );
        return '';
    end;
    ----------------------------------------------------------------------------
    -- Add o parametro para geração do XML
    ----------------------------------------------------------------------------
    procedure add_parametro_sql ( p_nome_parametro      in varchar2
                                , p_valor_parametro     in varchar2
                                , p_tipo_parametro      in varchar2 default 'S'
                                )
    is
    begin
        param_xml.extend;
        param_xml(param_xml.count).tipo  := p_tipo_parametro;
        param_xml(param_xml.count).nome  := p_nome_parametro;
        param_xml(param_xml.count).valor := p_valor_parametro;
    end;
    --
    FUNCTION  cm_converte_amb_cbhpm_s( p_cod_procedimento in varchar2
                                     , p_dt_atendimento   in date
                                     , p_cod_padrao       in varchar2)
    return varchar2 is

    v_qtd_existe              number;
    v_cod_procedimento        itens_medicos.item_medico%type;
    v_msg_retorno             varchar2(4000);
    v_cod_retorno             number;
    v_ind_padrao_operadora    tipo_depara.ind_padrao_operadora%type;
    v_ind_padrao_intercambio  tipo_depara.ind_padrao_intercambio%type;
    v_cod_tipo_depara         tipo_depara.cod_tipo_depara%type;
    v_dt_ini_vigencia         ctm_converte_cbhpm_amb.dt_ini_vigencia%type;
    begin
    ----------------------------------------

       --- obtém o tipo de-para
        begin
             select cod_tipo_depara
             into   v_cod_tipo_depara
             from   tipo_depara
             where  nvl(ind_padrao_operadora, 'N') = 'S'
             and    rownum < 2;
        exception
             when no_data_found then
                  return p_cod_procedimento;
        end;

        --
        if p_cod_padrao = 'AMB' then
            -- Destino AMB
            -- obtém a data de vigência do de-para
            select max(dt_ini_vigencia)
            into   v_dt_ini_vigencia
            from   ctm_converte_cbhpm_amb
            where  cod_tipo_depara = v_cod_tipo_depara
            and    p_dt_atendimento between dt_ini_vigencia and
                   nvl(dt_fim_vigencia, p_dt_atendimento);
            -- Verifico se tem mais que uma incidência na tabela
            select count(*)
            into   v_qtd_existe
            from   ctm_converte_cbhpm_amb
            where  cbhpm = p_cod_procedimento
            and    cod_tipo_depara = v_cod_tipo_depara
            and    dt_ini_vigencia = v_dt_ini_vigencia;
            if v_qtd_existe >= 1 then
                -- Se houver
                begin
                    -- verifico se tem algum mandatório e pego o primeiro
                    select amb
                    into   v_cod_procedimento
                    from   ctm_converte_cbhpm_amb
                    where  cbhpm                    = p_cod_procedimento
                    and    cod_tipo_depara          = v_cod_tipo_depara
                    and    dt_ini_vigencia          = v_dt_ini_vigencia
                    and    nvl(ind_referencia, 'N') = 'S'
                    and    rownum < 2;
                    return v_cod_procedimento;
                exception
                    when no_data_found then
                        -- senão houver mandatório, é obtido o primeiro que tiver
                        begin
                            select amb
                            into   v_cod_procedimento
                            from   ctm_converte_cbhpm_amb
                            where  cbhpm            = p_cod_procedimento
                            and    cod_tipo_depara  = v_cod_tipo_depara
                            and    dt_ini_vigencia  = v_dt_ini_vigencia
                            and    rownum           < 2;
                            return v_cod_procedimento;
                        exception
                            when no_data_found then
                                return p_cod_procedimento;
                        end;
                end;
            else
                return p_cod_procedimento;
            end if;
        else
            -- Destino CBHPM
            -- obtém a data de vigência do de-para
            select max(dt_ini_vigencia)
            into   v_dt_ini_vigencia
            from   ctm_converte_amb_cbhpm
            where  cod_tipo_depara  = v_cod_tipo_depara
            and    p_dt_atendimento between dt_ini_vigencia and  nvl(dt_fim_vigencia, p_dt_atendimento);

            -- Verifico se tem mais que uma incidência na tabela

            select count(*)
            into   v_qtd_existe
            from   ctm_converte_amb_cbhpm
            where  amb             = p_cod_procedimento
            and    cod_tipo_depara = v_cod_tipo_depara
            and    dt_ini_vigencia = v_dt_ini_vigencia;

            if v_qtd_existe >= 1 then
                -- Se houver
                begin
                    -- verifico se tem algum mandatório e pego o primeiro
                    select cbhpm
                    into   v_cod_procedimento
                    from   ctm_converte_amb_cbhpm
                    where  amb                      = p_cod_procedimento
                    and    cod_tipo_depara          = v_cod_tipo_depara
                    and    dt_ini_vigencia          = v_dt_ini_vigencia
                    and    nvl(ind_referencia, 'N') = 'S'
                    and    rownum                   < 2;
                    return v_cod_procedimento;
                exception
                    when no_data_found then
                        -- senão houver mandatório, pego o primeiro que tiver
                        select cbhpm
                        into   v_cod_procedimento
                        from   ctm_converte_amb_cbhpm
                        where  amb             = p_cod_procedimento
                        and    cod_tipo_depara = v_cod_tipo_depara
                        and    dt_ini_vigencia = v_dt_ini_vigencia
                        and    rownum          < 2;
                        return v_cod_procedimento;
                end;
            else
                return p_cod_procedimento;
            end if;
            return nvl(v_cod_procedimento, p_cod_procedimento);
        end if;
    exception
        when others then
            return p_cod_procedimento;
    end;
    --
    --

    -----------------------------------
    -- Validar a regra de reembolso tipo Cobranca
    -----------------------------------
    procedure ValidaRegraCobranca    ( p_cod_ts_contrato            in       VARCHAR2
                                     , p_cod_operadora_contrato     in       VARCHAR2
                                     , p_cod_inspetoria_ts_contrato in       VARCHAR2
                                     , p_cod_plano                  in       VARCHAR2
                                     , p_cod_rede                   in       VARCHAR2
                                     , p_num_associado              in       VARCHAR2
                                     , p_ind_tipo_reembolso         in       VARCHAR2
                                     , p_qtd_dias_reembolso         in       VARCHAR2
                                     , p_ind_regra                  out      VARCHAR2
                                     , p_cod_retorno                out      number
                                     , p_msg_retorno                out      varchar2
                                     )

        is
    --
        v_hoje                date;


        v_nao_critica         varchar2(1);
        v_num_contrato        contrato_empresa.num_contrato%type;
        v_qtd_valida          pls_integer;

        v_qtd_plano           NUMBER DEFAULT 0;
        v_qtd_rede            NUMBER DEFAULT 0;
        v_qtd_contrato        NUMBER DEFAULT 0;
        v_qtd_benef           NUMBER DEFAULT 0;
        v_qtd_tipo            NUMBER DEFAULT 0;
        v_qtd_prazo           NUMBER DEFAULT 0;

        v_plano               BOOLEAN DEFAULT FALSE;
        v_rede                BOOLEAN DEFAULT FALSE;
        v_contrato            BOOLEAN DEFAULT FALSE;
        v_benef               BOOLEAN DEFAULT FALSE;
        v_tipo                BOOLEAN DEFAULT FALSE;
        v_prazo               BOOLEAN DEFAULT FALSE;


        v_utiliza_plano       VARCHAR2(1);
        v_utiliza_rede        VARCHAR2(1);
        v_utiliza_contrato    VARCHAR2(1);
        v_utiliza_benef       VARCHAR2(1);
        v_utiliza_tipo        VARCHAR2(1);
        v_utiliza_prazo       VARCHAR2(1);

        v_total               NUMBER DEFAULT 0;
        v_qtd_loop            NUMBER;
        v_cod_tipo            VARCHAR2(30);
        v_ind_tipo            VARCHAR2(30);
        v_total_ant           NUMBER;
        v_ok                  BOOLEAN;
        ----------------------------------------------------
        -- Listar todas as regras de autorização habilitadas
        ----------------------------------------------------
        cursor cur_grupo
        is
        select *
        from   rb_tpcobranca_regra
        order by 1 ;
        --
        r_grupo                     cur_grupo%rowtype;
        --
        ----------------------------------------------------
        -- Listar a composição da regra informada
        ----------------------------------------------------
        cursor cur_composicao ( p_cod_grupo pls_integer )
        is
        select *
        from   rb_tpcobranca_composicao
        where  cod_grupo = 4;
        --
        r_composicao                     cur_composicao%rowtype;
        --
        rReembolso                       pedido_reembolso%rowtype;
        --
        -------------------------------------------------------------------------------------------
        /*
        1 - Plano
        2 - Rede
        3 - Contrato
        4 - Beneficiário
        5 - Modalidade reembolso
        6 - Prazo
        */
        -------------------------------------------------------------------------------------------
        -- Inicio da rotina de validação da regra na autorização
        -------------------------------------------------------------------------------------------
        v_cod_plano VARCHAR2(30);
        v_cod_grupo VARCHAR2(30);
    BEGIN
        p_cod_retorno := 0;
        p_msg_retorno := NULL;
        --
        p_ind_regra :='N';
        --


        if nvl(p_cod_ts_contrato,0) > 0 then
            begin
                select num_contrato
                into   v_num_contrato
                from   contrato_empresa
                where  cod_ts_contrato    = p_cod_ts_contrato;
                --
            exception
            when no_data_found then
                 v_num_contrato  := null;
            end;
        end if;
        --
        v_hoje := trunc (sysdate);
        --
        for r_grupo in cur_grupo
        loop
            --

            v_nao_critica := 'N';

            v_plano             := FALSE;
            v_rede              := FALSE;
            v_contrato          := FALSE;
            v_benef             := FALSE;
            v_tipo              := FALSE;
            v_prazo             := FALSE;
            v_ok                := FALSE;

            v_utiliza_plano     := 'N';
            v_utiliza_rede      := 'N';
            v_utiliza_contrato  := 'N';
            v_utiliza_benef     := 'N';
            v_utiliza_tipo      := 'N';
            v_utiliza_prazo     := 'N';

            v_total             := 0;

            --
            ---------------------
            -- Validar OPERADORA
            ---------------------
            if v_nao_critica = 'N' and nvl(r_grupo.ind_todas_operadoras,'N') != 'S' then
                select  count(*)
                into    v_qtd_valida
                from    rb_tpcobranca_operadora
                where   cod_grupo               = r_grupo.cod_grupo
                and     cod_operadora           = p_cod_operadora_contrato;
                --
                if v_qtd_valida = 0 then v_nao_critica := 'S'; -- não criticar, Operadora diferente das cadastradas na regra
                end if;
                --
            end if;

            -------------------------
            -- Validar UNIDADE/FILIAL
            -------------------------
            if v_nao_critica = 'N' and nvl(r_grupo.ind_todas_filiais,'N') != 'S' then
                select  count(*)
                into    v_qtd_valida
                from    rb_tpcobranca_filial_unid
                where   cod_grupo               = r_grupo.cod_grupo
                and     cod_inspetoria_ts       = p_cod_inspetoria_ts_contrato;
                --
                if v_qtd_valida = 0 then v_nao_critica := 'S'; -- não criticar, Unidade diferente das cadastradas na regra
                end if;
                --
            end if;
            --
            -------------------------
            -- Validar Composição
            -------------------------
            if v_nao_critica = 'N' then
                select  count(*)
                into    v_qtd_valida
                from    rb_tpcobranca_composicao
                where   cod_grupo            = r_grupo.cod_grupo;
                --
                if v_qtd_valida = 0 then v_nao_critica := 'S'; -- não criticar, Não existe grupo de composição, a crítica é manual
                end if;
                --
            end if;

            --
            if v_nao_critica = 'N' then
                --
                --
                v_cod_grupo :=r_grupo.cod_grupo;
                for r_composicao in cur_composicao ( r_grupo.cod_grupo )
                loop
                    v_cod_tipo := r_composicao.cod_tipo;
                    v_ind_tipo := r_composicao.ind_tipo;
                    --
                    --
                    --------------------
                    --- Verifica PLANO
                    --------------------
                    if r_composicao.ind_tipo = '1' then
                        v_utiliza_plano := 'S';
                        IF p_cod_plano = r_composicao.cod_tipo THEN
                           v_plano := true;
                        END IF;
                    end if;

                    ---------------
                    --Verifica REDE
                    ---------------
                    if r_composicao.ind_tipo = '2' then
                        v_utiliza_rede :='S';
                        IF p_cod_rede = r_composicao.cod_tipo THEN
                           v_rede := TRUE;
                        END IF;
                    end if;

                    ----------------------
                    -- Número do contrato
                    ----------------------
                    if r_composicao.ind_tipo = '3' then
                        v_utiliza_contrato := 'S';
                        IF v_num_contrato = r_composicao.cod_tipo THEN
                           v_contrato := true;
                        END IF;
                    end if;

                    --
                    -------------------------------
                    ---- Beneficiário
                    -------------------------------
                    if r_composicao.ind_tipo = '4' then
                        v_utiliza_benef := 'S';
                        IF p_num_associado = r_composicao.cod_tipo THEN
                           v_benef := true;
                        END IF;
                    end if;

                    --
                    -----------------------
                    -- Modalidade reembolso
                    -----------------------
                    if r_composicao.ind_tipo = '5'then
                        v_utiliza_tipo := 'S';
                        IF p_ind_tipo_reembolso = r_composicao.cod_tipo THEN
                            v_tipo := TRUE;
                        END IF;
                    end if;
                    --
                    ------------------------
                    -- Prazo
                    ------------------------
                    if r_composicao.ind_tipo = '6' and v_qtd_prazo = 0 then
                        v_utiliza_prazo := 'S';
                        IF p_qtd_dias_reembolso  >= r_composicao.qtd_1 AND
                           p_qtd_dias_reembolso  <= r_composicao.qtd_2  THEN
                           v_prazo := true;
                        END IF;
                    end if;
                    --
                end loop;
                --
                ---
                ---
                -- PLANO
                IF v_utiliza_plano = 'S' THEN
                    IF v_plano = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- REDE
                IF v_utiliza_rede = 'S' THEN
                    IF v_rede = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- BENEFICIÁRIO
                IF v_utiliza_benef = 'S' THEN
                    IF v_benef = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- MODALIDADE
                IF v_utiliza_tipo = 'S' THEN
                    IF v_tipo = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- CONTRATO
                IF v_utiliza_contrato = 'S' THEN
                    IF v_contrato = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- PRAZO
                IF v_utiliza_prazo = 'S' THEN
                    IF v_prazo = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;
                --
                --
                if v_total = 0 and v_ok = TRUE then
                    p_ind_regra :='S';
                end if;
      end if;
      --
      end loop;
      --
      --commit; -- Comentado pois estava gerando reembolsos duplicados no protocolo em caso de erro em um dos reembolso
      -- Não vi a necessidade da execução deste commit.     -- Marcos Luiz 01/10/2013
      --
    exception
    when others then
        p_cod_retorno := 9;
        p_msg_retorno := 'Ocorreu um erro não previsto ao executar validação da regra de reembolso :' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || chr(13) || p_msg_retorno;
    end;
    --
    --
    -----------------------------------
    -- Validar a regra de reembolso
    -----------------------------------
    procedure ValidaRegra    ( p_num_reembolso     in      number
                             , p_cod_usuario       in      varchar2
                             , p_cod_retorno      out      number
                             , p_msg_retorno      out      varchar2
                             , p_origem_processo   in      varchar2 default null
                             )
        is
    --
        v_hoje                date;


        v_nao_critica         varchar2(1);
        v_num_contrato        contrato_empresa.num_contrato%type;
    v_tipo_empresa        contrato_empresa.tipo_empresa%type;
        v_qtd_valida          pls_integer;
        v_cod_solicitante     VARCHAR2(15);
        v_tem_regra           number;

        v_qtd_plano           NUMBER DEFAULT 0;
        v_qtd_rede            NUMBER DEFAULT 0;
        v_qtd_contrato        NUMBER DEFAULT 0;
    v_qtd_porte_contrato  NUMBER DEFAULT 0;
        v_qtd_benef           NUMBER DEFAULT 0;
        v_qtd_tipo            NUMBER DEFAULT 0;
        v_qtd_prazo           NUMBER DEFAULT 0;
        v_qtd_conselho        NUMBER DEFAULT 0;
        v_qtd_especialidade   NUMBER DEFAULT 0;
        v_qtd_origem          NUMBER DEFAULT 0;
        v_qtd_filial_abertura NUMBER DEFAULT 0;
        v_qtd_executante      NUMBER DEFAULT 0;
        v_qtd_procedimento    NUMBER DEFAULT 0;
        v_qtd_motivo_reembolso	NUMBER DEFAULT 0;
    v_qtd_documento         NUMBER DEFAULT 0;

        v_plano               BOOLEAN DEFAULT FALSE;
        v_rede                BOOLEAN DEFAULT FALSE;
        v_contrato            BOOLEAN DEFAULT FALSE;
		    v_porte_contrato	    BOOLEAN DEFAULT FALSE;
        v_benef               BOOLEAN DEFAULT FALSE;
        v_tipo                BOOLEAN DEFAULT FALSE;
        v_prazo               BOOLEAN DEFAULT FALSE;
        v_conselho            BOOLEAN DEFAULT FALSE;
        v_especialidade       BOOLEAN DEFAULT FALSE;
        v_origem              BOOLEAN DEFAULT FALSE;
        v_filial_abertura     BOOLEAN DEFAULT FALSE;
        v_executante          BOOLEAN DEFAULT FALSE;
        v_procedimento        BOOLEAN DEFAULT FALSE;
        v_motivo_reembolso    BOOLEAN DEFAULT FALSE;
		    v_documento			      BOOLEAN DEFAULT FALSE;
        v_anexo				        BOOLEAN DEFAULT FALSE;
        v_campo_ocr_diferente BOOLEAN DEFAULT FALSE;
        v_campos_ocr_igual	  BOOLEAN DEFAULT TRUE;
        v_campos_ocr_dif	    BOOLEAN DEFAULT FALSE;
		    v_banco               BOOLEAN DEFAULT FALSE;
        v_vld_biometrica      BOOLEAN DEFAULT FALSE;

        v_utiliza_plano       	    VARCHAR2(1);
        v_utiliza_rede        	    VARCHAR2(1);
        v_utiliza_contrato    	    VARCHAR2(1);
        v_utiliza_porte_contrato    VARCHAR2(1);
        v_utiliza_benef       	    VARCHAR2(1);
        v_utiliza_tipo        	    VARCHAR2(1);
        v_utiliza_prazo       	    VARCHAR2(1);
        v_utiliza_conselho          VARCHAR2(1);
        v_utiliza_especialidade     VARCHAR2(1);
        v_utiliza_origem            VARCHAR2(1);
        v_utiliza_filial_abertura   VARCHAR2(1);
        v_utiliza_executante        VARCHAR2(1);
        v_utiliza_procedimento      VARCHAR2(1);
        v_utiliza_motivo_reembolso  VARCHAR2(1);
		    v_utiliza_documento 		    VARCHAR2(1);
		    v_utiliza_anexo				      VARCHAR2(1);
        v_utiliza_campos_ocr_igual  VARCHAR2(1);
        v_utiliza_campos_ocr_dif	  VARCHAR2(1);
        v_procedimento_aux          VARCHAR2(1);

        v_total                     NUMBER DEFAULT 0;
        v_qtd_loop                  NUMBER;
        v_cod_tipo                  VARCHAR2(30);
        v_ind_tipo                  VARCHAR2(30);
        v_total_ant                 NUMBER;
        v_ok                        BOOLEAN;

        v_posicao                   NUMBER;
        v_dt_pedido                 DATE;
        v_dt_ini                    DATE;
        v_dt_fim                    DATE;
        v_SQL                       varchar2(32700);
        v_item_procedimento         VARCHAR2(1);
        v_qtd_dias                  NUMBER;
        v_ind_original              VARCHAR2(1) := 'N';
        v_cod_inicial               NUMBER;
        v_cod_final                 NUMBER;
        v_tem_proc                  NUMBER;
        v_tem_ocr                   NUMBER;
        v_item_reg_ocr              BOOLEAN := TRUE;
		    v_utiliza_banco             VARCHAR2(1) := 'N';
        v_utiliza_vld_biometrica    VARCHAR2(1);

        -------------------------------------------
        ---------
        -- Listar todas as regras de reembolso habilitadas
        ----------------------------------------------------
        cursor cur_grupo
        is
        select *
        from   reembolso_regra_grupo
        order by 1 ;
        --
        r_grupo                     cur_grupo%rowtype;
        --
        ----------------------------------------------------
        -- Listar a composição da regra informada
        ----------------------------------------------------
        cursor cur_composicao ( p_cod_grupo pls_integer )
        is
        select *
        from   reembolso_grupo_composicao
        where  cod_grupo = p_cod_grupo;
        --
        r_composicao                     cur_composicao%rowtype;
        --
        ---------------------------
        --Recuperar dados dos procedimentos do pedido
        ---------------------------
        cursor cur_proceReembolso
        is
        select *
        from   procedimento_reembolso
        where  num_reembolso = p_num_reembolso;
        --
        r_procedimento                   cur_proceReembolso%rowtype;
        rReembolso                       pedido_reembolso%rowtype;
        rReembolsoProced                 procedimento_reembolso%rowtype;
        rOcrDocumento                    rbm_ocr_documento%rowtype;
        --

        -------------------------------------------------------------------------------------------
        /*
        1 - Plano
        2 - Rede
        3 - Contrato
        4 - Beneficiário
        5 - Modalidade reembolso
        6 - Prazo
        7 - CONSELHO
        8 - ESPECIALIDADE
        9 - ORIGEM
        10- FILIAL ABERTURA
        11- EXECUTANTE
        */
        -------------------------------------------------------------------------------------------
        -- Inicio da rotina de validação da regra na autorização
        -------------------------------------------------------------------------------------------
        v_cod_plano VARCHAR2(30);
        v_cod_grupo VARCHAR2(30);
    BEGIN
        p_cod_retorno := 0;
        p_msg_retorno := NULL;
        v_item_procedimento:= 'S';
        --
         ts_log_execucao ('VALIDA_REGRA'
                 , NULL
                 , null
                 , null
                 , 'INICIO'
                 ) ;
        ---------------------------
        --Recuperar dados ocr
        ---------------------------
        BEGIN
        select COUNT(*)
        into   v_tem_ocr
        from   rbm_ocr_documento
        where  num_reembolso = p_num_reembolso AND NVL(TXT_ERRO_INTEGRACAO, '$#') = '$#';
        EXCEPTION
          WHEN OTHERS THEN
            v_item_reg_ocr := FALSE;
        END;
        IF v_tem_ocr = 0 THEN
      v_item_reg_ocr := FALSE;
        END IF;

        ---------------------------
        --Recuperar dados do pedido
        ---------------------------
        select *
        into   rReembolso
        from   pedido_reembolso
        where  num_reembolso = p_num_reembolso;
        --
        ---------------------------
        --Recuperar dados do pedido
        ---------------------------
        BEGIN
        select COUNT(*)
        into   v_tem_proc
        from   procedimento_reembolso
        where  num_reembolso = p_num_reembolso;
        EXCEPTION
          WHEN OTHERS THEN
            v_item_procedimento := 'N';
        END;
        --
        IF v_tem_proc = 0 THEN
          v_item_procedimento := 'N';
        END IF;
        --
        if nvl(rReembolso.cod_ts_contrato,0) > 0 then
            begin
                 select
          num_contrato, tipo_empresa
                    into v_num_contrato, v_tipo_empresa
                from   contrato_empresa
                where  cod_ts_contrato    = rReembolso.cod_ts_contrato;
            exception
            when no_data_found then
                 v_num_contrato  := null;
                 v_tipo_empresa  := null;
            end;
        end if;
        --
        v_hoje := trunc (sysdate);
        --
        for r_grupo in cur_grupo
        loop
            --
            v_nao_critica := 'N';
            --
            if r_grupo.cod_tipo_reembolso = 3 then
               --

               for c_anexo in ( select * from ts.reembolso_anexo where num_reembolso = p_num_reembolso)
               loop
                  IF nvl(c_anexo.ind_nota_original,'N') = 'S' THEN
                     v_ind_original := 'S';
                  END IF;
               end loop;
               --
               --
               if rReembolso.Cod_Origem in(11,20) then
                 if ( (nvl(rReembolso.Ind_Opt_In,'N') = 'S') or (rReembolso.Ind_Tipo_Comprovante = 'N') or (v_ind_original = 'S')) then
                    v_nao_critica := 'N';
                 else
                   v_nao_critica := 'S';
                 end if;
               end if;
               --
               if v_nao_critica = 'N' then
                  IF ((nvl(v_ind_original,'N') = 'N') and (rReembolso.Cod_Origem not in (11,20) ))THEN
                     v_nao_critica := 'S';
                  END IF;
               end if;
               --
               if  rReembolso.Ind_Situacao = 25 then
                  v_nao_critica := 'N';
               end if;
               --
               if v_item_procedimento = 'N' then
                 v_nao_critica := 'S';
               end if;
               -- Se for inclusão ou alteração de protocolo
               if p_origem_processo = 'PR' then
                  v_nao_critica := 'S';
               end if;
               --

            end if;
            --
            v_posicao:=1;
            v_plano             		:= FALSE;
            v_rede              		:= FALSE;
            v_contrato          		:= FALSE;
			      v_porte_contrato        := FALSE;
            v_benef             		:= FALSE;
            v_tipo              		:= FALSE;
            v_prazo             		:= FALSE;
            v_ok                		:= FALSE;
            v_conselho          		:= FALSE;
            v_especialidade     		:= FALSE;
            v_origem            		:= FALSE;
            v_filial_abertura   		:= FALSE;
            v_executante        		:= FALSE;
            v_procedimento      		:= FALSE;
            v_motivo_reembolso  		:= FALSE;
			      v_documento         		:= FALSE;
			      v_anexo             		:= FALSE;
            v_campos_ocr_igual      := TRUE;
            v_campos_ocr_dif        := FALSE;
            v_banco                 := FALSE;
            v_vld_biometrica        := FALSE;

            v_utiliza_plano            	:= 'N';
            v_utiliza_rede             	:= 'N';
            v_utiliza_contrato         	:= 'N';
            v_utiliza_porte_contrato    := 'N';
            v_utiliza_benef            	:= 'N';
            v_utiliza_tipo      	   	:= 'N';
            v_utiliza_prazo     	   	:= 'N';
            v_utiliza_conselho         	:= 'N';
            v_utiliza_especialidade    	:= 'N';
            v_utiliza_origem           	:= 'N';
            v_utiliza_filial_abertura  	:= 'N';
            v_utiliza_executante       	:= 'N';
            v_utiliza_procedimento     	:= 'N';
            v_utiliza_motivo_reembolso 	:= 'N';
			v_utiliza_documento        	:= 'N';
			v_utiliza_anexo            	:= 'N';
            v_utiliza_campos_ocr_igual 	:= 'N';
            v_utiliza_campos_ocr_dif   	:= 'N';
            v_total                    	:= 0;
			      v_utiliza_banco             := 'N';
            v_utiliza_vld_biometrica    := 'N';

            --
            ---------------------
            -- Validar OPERADORA
            ---------------------
            if v_nao_critica = 'N' then
                select  count(*)
                into    v_qtd_valida
                from    reembolso_grupo_operadora
                where   cod_grupo               = r_grupo.cod_regra_grupo
                and     cod_operadora           = rReembolso.cod_operadora_contrato;
                --
                if v_qtd_valida = 0 then v_nao_critica := 'S'; -- não criticar, Operadora diferente das cadastradas na regra
                end if;
                --
            end if;
            v_posicao:=2;

            --
            ---------------------
            -- Validar LINHA DE PRODUTO
            ---------------------
            if v_nao_critica = 'N' then
               select count(*)
               into v_qtd_valida
               from ts.operadora_marca om
               where om.cod_operadora = rReembolso.cod_operadora_contrato;
            end if;
            --Operadoras tem que ter marca(s) para validar Linha de Produto(Ex.: regra 9 OneHealth)
            if v_nao_critica = 'N' and v_qtd_valida > 0 then
                select count(*)
                  into v_qtd_valida
                  from reembolso_grupo_linha_produto
                 where cod_grupo = r_grupo.cod_regra_grupo
                   and cod_marca = rReembolso.cod_marca_contrato;
                --
                if v_qtd_valida = 0 then
                   v_nao_critica := 'S'; -- não criticar, Linha de Produto diferente das cadastradas na regra
                end if;
                --
            end if;
            v_posicao:=2;

            TS_LOG_EXECUCAO ( 'RB_REEMBOLSO.GravaReembolso', v_posicao, 'Info', 'cod_regra_grupo: ' || r_grupo.cod_regra_grupo || ' - cod_marca_contrato: ' || rReembolso.cod_marca_contrato || ' - v_qtd_valida: ' || v_qtd_valida || ' - v_nao_critica: ' || v_nao_critica , 'ValidaRegra');

            -------------------------
            -- Validar UNIDADE/FILIAL
            -------------------------
            if v_nao_critica = 'N' and nvl(r_grupo.ind_todas_filiais,'N') != 'S' then
                select  count(*)
                into    v_qtd_valida
                from    reembolso_grupo_filial_unid
                where   cod_grupo               = r_grupo.cod_regra_grupo
                and     cod_inspetoria_ts       = rReembolso.cod_inspetoria_ts_contrato;
                --
                if v_qtd_valida = 0 then v_nao_critica := 'S'; -- não criticar, Unidade diferente das cadastradas na regra
                end if;
                --
            end if;
            -------------------------
            -- Validar Vigência
            -------------------------
            v_posicao:=3;
            if v_nao_critica = 'N' then
                --
                v_dt_pedido := trunc(sysdate);
                --
              select count(*)
                into v_qtd_valida
                from reembolso_regra_grupo r
               where r.cod_regra_grupo = r_grupo.cod_regra_grupo
                 and v_dt_pedido between r.dt_ini_validade and r.dt_fim_validade;
                --
                if v_qtd_valida = 0 then
                   v_nao_critica := 'S'; -- não criticar, Reembolso fora da vigência da regra
                else
                   v_nao_critica := 'N';
                end if;
                --
            end if;
            --
            -------------------------
            -- Validar Valor de Reembolso
            -------------------------
            v_posicao:=4;
            if v_nao_critica = 'N' and r_grupo.val_limite_inicial is not null and  r_grupo.val_limite_final is not null  then
                --

                if NVL(r_grupo.ind_tipo_valor, 'A') = 'A' then

                  if ((rReembolso.Val_Moeda_Estrangeira < r_grupo.val_limite_inicial) or (rReembolso.Val_Moeda_Estrangeira > r_grupo.val_limite_final))then
                     v_qtd_valida := 0;
                  end if;

                else

                  if ((rReembolso.Val_Reembolsado < r_grupo.val_limite_inicial) or (rReembolso.Val_Reembolsado > r_grupo.val_limite_final))then
                     v_qtd_valida := 0;
                  end if;

                end if;
                --
                if v_qtd_valida = 0 then v_nao_critica := 'S'; -- não criticar, Unidade diferente das cadastradas na regra
                end if;
                --
            end if;
            --
            -------------------------
            -- Validar Frequencia de Reembolso
            -------------------------
            v_posicao:=4.1;
            if v_nao_critica = 'N' and r_grupo.cod_tipo_reembolso = 2 and r_grupo.ind_incidencia_ocorrencia_1 is not null then

               FOR rReembolsoProced IN ( SELECT * FROM TS.PROCEDIMENTO_REEMBOLSO WHERE num_reembolso = p_num_reembolso )
                LOOP

                  IF v_nao_critica = 'S' THEN
                    EXIT;
                  END IF;

                  IF r_grupo.qtd_dias_ocorrencias = 1 THEN
                    v_qtd_dias := 0;
                  ELSE
                    v_qtd_dias := r_grupo.qtd_dias_ocorrencias;
                  END IF;
                  --
                  v_SQL := '';
                  --

                      --
                      if r_grupo.ind_tipo_validacao = 'F' then
                        v_SQL := ' select  count(1) ';
                      else
                        if r_grupo.ind_tipo_valor = 'A' then
                           v_SQL := ' select  sum(pr.val_informado) ';
                        else
                          v_SQL := ' select  sum(pr.val_reembolsado) ';
                        end if;
                      end if;
                      --
                      v_SQL := v_SQL || '
                              from ts.pedido_reembolso pr
                                 , ts.procedimento_reembolso prr
                             where pr.num_reembolso   = prr.num_reembolso
                               and pr.ind_situacao not in (''11'',''26'',''33'',''39'')';

                     -- TIPO REEMBOLSO
                     if r_grupo.ind_tipo_reembolso = 1 then
                         v_SQL := v_SQL || ' and pr.ind_tipo_reembolso = 1 ';
                     elsif r_grupo.ind_tipo_reembolso = 2 then
                         v_SQL := v_SQL || ' and pr.ind_tipo_reembolso = 2 ';
                     elsif r_grupo.ind_tipo_reembolso = 3 then
                         v_SQL := v_SQL || ' and pr.ind_tipo_reembolso = 3 ';
                     end if;

                 -- CONTROLADO POR
                 if r_grupo.ind_incidencia_ocorrencia_1 = 'B' then
                    v_SQL := v_SQL || ' and pr.num_associado = :pNumAssociado ';
                 elsif r_grupo.ind_incidencia_ocorrencia_1 = 'F' then
                    v_SQL := v_SQL || ' and pr.cod_ts_tit = :pCodTsTit ';
                 elsif r_grupo.ind_incidencia_ocorrencia_1 = 'P' then
                    v_SQL := v_SQL || ' and pr.num_associado   = :pNUmAssociado
                                        and pr.num_insc_fiscal = :pInscFiscal';
                 elsif r_grupo.ind_incidencia_ocorrencia_1 = 'G' then
                    v_SQL := v_SQL || ' and pr.cod_ts_tit = :pCodTsTit
                                        and pr.num_insc_fiscal = :pInscFiscal';
                 end if;

                 -- CONTATO POR
                 if v_item_procedimento = 'S' and v_qtd_dias is not null then
                       v_SQL := v_SQL || ' and trunc(prr.data_atendimento) between :pDtIni and :pDtFim ';
                       v_dt_ini := trunc(rReembolsoProced.Data_Atendimento) - v_qtd_dias;
                       v_dt_fim := trunc(rReembolsoProced.Data_Atendimento) + v_qtd_dias;
                 end if;

                     --PROCEDIMENTO
                     IF r_grupo.cod_procedimento_inicial IS NOT NULL AND r_grupo.cod_procedimento_final IS NOT NULL THEN
                        v_SQL := v_SQL || ' and prr.cod_procedimento_cm between :pCodInicial and :pCodFinal';
                        v_cod_inicial := r_grupo.cod_procedimento_inicial;
                        v_cod_final:= r_grupo.cod_procedimento_final;
                     ELSE
                       v_SQL := v_SQL || ' and :pCodInicial = :pCodFinal';
                        v_cod_inicial := 1;
                        v_cod_final:= 1;
                     END IF;
                 --
                 if r_grupo.ind_incidencia_ocorrencia_1 = 'B' then
                      execute
                    immediate v_SQL
                         into v_qtd_valida
                        using rReembolso.Num_Associado
                            , v_dt_ini
                                , v_dt_fim
                                , v_cod_inicial
                                , v_cod_final;
                 elsif r_grupo.ind_incidencia_ocorrencia_1 = 'F' then
                    execute
                    immediate v_SQL
                         into v_qtd_valida
                        using rReembolso.Cod_Ts_Tit
                            , v_dt_ini
                                , v_dt_fim
                                , v_cod_inicial
                                , v_cod_final;
                 elsif r_grupo.ind_incidencia_ocorrencia_1 = 'P' then
                    execute
                    immediate v_SQL
                         into v_qtd_valida
                        using rReembolso.Num_Associado
                            , rReembolso.Num_Insc_Fiscal
                            , v_dt_ini
                                , v_dt_fim
                                , v_cod_inicial
                                , v_cod_final;
                 elsif r_grupo.ind_incidencia_ocorrencia_1 = 'G' then
                    execute
                    immediate v_SQL
                         into v_qtd_valida
                        using rReembolso.Cod_Ts_Tit
                            , rReembolso.Num_Insc_Fiscal
                            , v_dt_ini
                                , v_dt_fim
                                , v_cod_inicial
                                , v_cod_final;
                 else
                    execute
                    immediate v_SQL
                         into v_qtd_valida
                            using v_cod_inicial
                                , v_cod_final;
                 end if;
                 --
                 if (nvl(v_qtd_valida,0)  <= nvl(r_grupo.qtd_ocorrencias,0))  then
                    v_nao_critica := 'S';
                 end if;                 --

               END LOOP;

               IF v_item_procedimento = 'N' AND v_nao_critica = 'N' THEN
                 v_nao_critica := 'S';
               END IF;
            end if;
            --
            v_posicao:=4.2;


            -------------------------
            -- Validar Composição
            -------------------------
            if v_nao_critica = 'N' then
                select  count(*)
                into    v_qtd_valida
                from    reembolso_grupo_composicao
                where   cod_grupo            = r_grupo.cod_regra_grupo;
                --
                if v_qtd_valida = 0 then v_nao_critica := 'S'; -- não criticar, Não existe grupo de composição, a crítica é manual
                end if;
                --
            end if;
            v_posicao:=5;

            --
            if v_nao_critica = 'N' then
                --
                --
                v_cod_grupo :=r_grupo.cod_regra_grupo;
                for r_composicao in cur_composicao ( r_grupo.cod_regra_grupo )
                loop
                    v_cod_tipo := r_composicao.cod_tipo;
                    v_ind_tipo := r_composicao.ind_tipo;
                    --
                    --
                    --------------------
                    --- Verifica PLANO
                    --------------------
                    if r_composicao.ind_tipo = '1' then
                        v_utiliza_plano := 'S';
                        IF rReembolso.cod_plano = r_composicao.cod_tipo THEN
                           v_plano := true;
                        END IF;
                    end if;
                    --
                    --
                    v_posicao:=6;
                    -------------------------------
                    ---- Beneficiário
                    -------------------------------
                    if r_composicao.ind_tipo = '4' then
                        v_utiliza_benef := 'S';
                        IF rReembolso.num_associado = r_composicao.cod_tipo THEN
                           v_benef := true;
                        END IF;
                    end if;
                    --
                    --
                    v_posicao:=7;
                    -----------------------
                    -- Modalidade reembolso
                    -----------------------
                    if r_composicao.ind_tipo = '5'then
                        v_utiliza_tipo := 'S';
                        IF rReembolso.ind_tipo_reembolso = r_composicao.cod_tipo THEN
                            v_tipo := TRUE;
                        END IF;
                    end if;
                    --
                    --
                    v_posicao:=8;
                    ---------------
                    --Verifica Conselho do Prestador
                    ---------------
                    if r_composicao.ind_tipo = '7' then
                        v_utiliza_conselho :='S';
                        IF rReembolso.Uf_Conselho = r_composicao.cod_tipo THEN
                           v_conselho := TRUE;
                        END IF;
                    end if;
                    v_posicao:=9;
                    ----------------------
                    -- Verifica Especialidade
                    ----------------------
                    if r_composicao.ind_tipo = '8' then
                        v_utiliza_especialidade := 'S';
                        --
                        for r_procedimento in cur_proceReembolso
                        loop
                            IF r_procedimento.cod_especialidade = r_composicao.cod_tipo THEN
                               v_especialidade := true;
                            END IF;
                            --
                            --
                        end loop;
                    end if;
                    --
                    --
                    v_posicao:=11;
                    ------------------------
                    -- Origem
                    ------------------------
                    if r_composicao.ind_tipo = '9' then
                        v_utiliza_origem := 'S';
                        IF rReembolso.Cod_Origem  = r_composicao.cod_tipo THEN
                           v_origem := true;
                        END IF;
                    end if;
                    --
                    --
                    v_posicao:= 12;
                    ----------------------
                    -- Número do contrato
                    ----------------------
                    if r_composicao.ind_tipo = '3' then
                        v_utiliza_contrato := 'S';
                        IF v_num_contrato = r_composicao.cod_tipo THEN
                           v_contrato := true;
                        END IF;
                    end if;
                    --
                    --
                    v_posicao:= 17;
                    ----------------------
                    -- Número do porte do contrato
                    ----------------------
                    if r_composicao.ind_tipo = '17' then
                        v_utiliza_porte_contrato := 'S';
                        IF v_tipo_empresa = r_composicao.cod_tipo THEN
                           v_porte_contrato := true;
                        END IF;
                    end if;
                    --
                    -- Banco ---
                    v_posicao:= 13;

                    IF r_composicao.ind_tipo = '20' THEN
                        v_utiliza_banco := 'S';
                        IF rReembolso.cod_banco  = r_composicao.cod_tipo THEN
                            v_banco := true;
                        End IF;
                    END IF;
					--
                    v_posicao:=22;
                    ------------------------
                    -- Filial Abertura
                    ------------------------
                    if r_composicao.ind_tipo = '10' then
                        v_utiliza_filial_abertura := 'S';
                        IF rReembolso.Cod_Inspetoria_Ts_Abertura  = r_composicao.cod_tipo THEN
                           v_filial_abertura := true;
                        END IF;
                    end if;
                    --
                    --
                    v_posicao:=33;
                    ------------------------
                    -- Executante
                    ------------------------
                    if r_composicao.ind_tipo = '11' then
                        v_utiliza_executante := 'S';
                        --
                        BEGIN
                          select count(1)
                            into v_qtd_valida
                            from solicitante s
                           where UPPER(s.nome_solicitante) = upper(rReembolso.Nome_Prestador)
                             and s.ind_tipo_pessoa = rReembolso.Ind_Insc_Fiscal
                             and nvl(s.num_insc_fiscal,rReembolso.num_insc_fiscal)= rReembolso.num_insc_fiscal
                             and cod_solicitante = r_composicao.cod_tipo;
                        EXCEPTION
                          WHEN OTHERS THEN
                            null;
                        END;
                        --
                        IF v_qtd_valida > 0 THEN
                           v_executante := true;
                        END IF;
                    end if;
                    --
                    v_posicao:=35;
                    ------------------------
                    -- Motivo Reembolso
                    ------------------------
                    if r_composicao.ind_tipo = '12' then
                        v_utiliza_motivo_reembolso := 'S';
                        IF rReembolso.Cod_Motivo_Reembolso  = r_composicao.cod_tipo THEN
                           v_motivo_reembolso := true;
                        END IF;
                    end if;
                    --
                    --
                    v_posicao:=44;
                    --------------------------------
                    -- Procedimento
                    --------------------------------
                    --
                   SELECT CASE WHEN EXISTS (
                        SELECT 1 FROM TS.GRUPO_REEMBOLSO_INTERVALO GRI
                        WHERE GRI.cod_regra_grupo = r_grupo.cod_regra_grupo
                    )
                    THEN 'S' ELSE 'N' END
                    INTO v_utiliza_procedimento
                    FROM DUAL;

                    IF v_utiliza_procedimento = 'S' THEN
                        SELECT CASE WHEN EXISTS (
                                SELECT 1
                                FROM TS.PROCEDIMENTO_REEMBOLSO PR
                                WHERE PR.NUM_REEMBOLSO = p_num_reembolso
                                AND NOT EXISTS (
                                    SELECT 1
                                    FROM TS.GRUPO_REEMBOLSO_INTERVALO GRI
                                    WHERE PR.cod_procedimento_cm BETWEEN GRI.item_medico_ini AND GRI.item_medico_fim
                                    AND GRI.cod_regra_grupo = r_grupo.cod_regra_grupo
                                )
                        )
                        THEN 'N' ELSE 'S' END
                        INTO v_procedimento_aux
                        FROM dual;

                        IF v_procedimento_aux = 'S' THEN
                            v_procedimento := TRUE;
                        ELSE
                            v_procedimento := FALSE;
                        END IF;
                    END IF;

                    v_posicao:=55;
          --
          --------------------------------
                    -- Documento
                    --------------------------------
          if r_composicao.ind_tipo = '13' then
                        v_utiliza_documento := 'S';
                        IF (case when rReembolso.ind_tipo_comprovante = 'R' then 2 else 1 end)  = r_composicao.cod_tipo THEN -- R para Recibo
                           v_documento := true;
                        END IF;
                    end if;
          --
                    --------------------------------
                    -- Anexo
                    --------------------------------
          if r_composicao.ind_tipo = '14' then
            v_utiliza_anexo := 'S';
                        for anexo in (select distinct ra.cod_tipo_anexo from ts.reembolso_anexo ra where ra.num_reembolso = rReembolso.num_reembolso)
                        loop
                            if anexo.cod_tipo_anexo = r_composicao.cod_tipo then
                                v_anexo := true;
                            end if;
                        end loop;
                    end if;
          --
                    --------------------------------
                    -- Campos Ocr
                    --------------------------------
                    v_posicao:=57;
          if r_composicao.ind_tipo = '15' and v_item_reg_ocr then
            v_utiliza_campos_ocr_igual := 'S';
                    end if;
          if r_composicao.ind_tipo = '16' and v_item_reg_ocr then
            v_utiliza_campos_ocr_dif := 'S';
                    end if;

          if v_utiliza_campos_ocr_igual = 'S' OR v_utiliza_campos_ocr_dif = 'S' then
                        ---------------------------
                        --Recuperar dados do OCR
                        ---------------------------
                        select *
                            into   rOcrDocumento
                            from   rbm_ocr_documento
                            where  num_reembolso = p_num_reembolso;

            v_campo_ocr_diferente := FALSE;
                        CASE r_composicao.cod_tipo
              WHEN 'DT_RBM' THEN
                if nvl(TO_CHAR(rOcrDocumento.DT_COMPROVANTE_OCR, 'DD/MM/YYYY'), '$#') <> nvl(TO_CHAR(rReembolso.DT_COMPROVANTE, 'DD/MM/YYYY'), '$#') then
                  v_campo_ocr_diferente := TRUE;
                end if;
              WHEN 'MOEDA' THEN
                if nvl(rOcrDocumento.VAL_MOEDA_ESTRANGEIRA_OCR,0) <> nvl(rReembolso.VAL_MOEDA_ESTRANGEIRA,0) then
                  v_campo_ocr_diferente := TRUE;
                end if;
              WHEN 'INSCFSC' THEN
                if nvl(rOcrDocumento.NUM_INSCRICAO_FISCAL_OCR,0) <> nvl(rReembolso.NUM_INSC_FISCAL,0) then
                  v_campo_ocr_diferente := TRUE;
                end if;
              WHEN 'NOMPRST' THEN
                if nvl(rOcrDocumento.NOM_PRESTADOR_OCR,'$#') <> nvl(rReembolso.NOME_PRESTADOR,'$#') then
                  v_campo_ocr_diferente := TRUE;
                end if;
              WHEN 'SGLCONS' THEN
                if nvl(rOcrDocumento.SGL_CONSELHO_OCR,'$#') <> nvl(rReembolso.SIGLA_CONSELHO,'$#') then
                  v_campo_ocr_diferente := TRUE;
                end if;
              WHEN 'NUMCONS' THEN
                if nvl(rOcrDocumento.NUM_CRM_OCR,'$#') <> nvl(rReembolso.NUM_CRM,'$#') then
                  v_campo_ocr_diferente := TRUE;
                end if;
              WHEN 'SGLUF' THEN
                if nvl(rOcrDocumento.UF_CONSELHO_OCR,'$#') <> nvl(rReembolso.UF_CONSELHO,'$#') then
                  v_campo_ocr_diferente := TRUE;
                end if;
              WHEN 'NUMCPF' THEN
                if nvl(rOcrDocumento.NUM_CPF_ASSOCIADO_OCR,0) <> nvl(rReembolso.NUM_CPF_ASSOCIADO,0) then
                  v_campo_ocr_diferente := TRUE;
                end if;
              ELSE null;
                        END CASE;

            if r_composicao.ind_tipo = '15' AND v_campo_ocr_diferente then
              v_campos_ocr_igual := FALSE;
            end if;
            if r_composicao.ind_tipo = '16' AND v_campo_ocr_diferente then
              v_campos_ocr_dif := TRUE;
            end if;
          end if;
          --
                    --------------------------------
                    -- Validação Biométria
                    --------------------------------
                    --
                    if r_composicao.ind_tipo = '21' then
                        v_utiliza_vld_biometrica := 'S'; --Tipo ação: 1 - Encaminhamento; 2 - Análise de Fraude; 3 LIberação Automática
                        if (r_grupo.cod_tipo_reembolso = 3 and nvl(rReembolso.Val_Confiab_Valid_Biometrica, 0) >= to_number(r_composicao.cod_tipo, '99999D99','NLS_NUMERIC_CHARACTERS='',.''')) or
                           (r_grupo.cod_tipo_reembolso in (1, 2) and nvl(rReembolso.Val_Confiab_Valid_Biometrica, 1) < to_number(r_composicao.cod_tipo, '99999D99','NLS_NUMERIC_CHARACTERS='',.''')) then
                           v_vld_biometrica := true;
                        END IF;
                    end if;
                    --
                end loop;
                --
                -- PLANO
                IF v_utiliza_plano = 'S' THEN
                    IF v_plano = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- BENEFICIÁRIO
                IF v_utiliza_benef = 'S' THEN
                    IF v_benef = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- MODALIDADE
                IF v_utiliza_tipo = 'S' THEN
                    IF v_tipo = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- CONSELHO
                IF v_utiliza_conselho = 'S' THEN
                    IF v_conselho = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;
                --
                -- CONTRATO
                IF v_utiliza_contrato = 'S' THEN
                    IF v_contrato = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;
                --
                -- PORTE DE CONTRATO
                IF v_utiliza_porte_contrato = 'S' THEN
                    IF v_porte_contrato = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;
                --
				-- Banco
                IF v_utiliza_banco = 'S' THEN
                    if v_banco = true then
                         v_ok := TRUE;
                    else
                      v_ok := FALSE;
                      v_total := 1;
                   End if;
                Else
                     v_ok := TRUE;
                END IF;
				--
                -- ESPECIALIDADE
                IF v_utiliza_especialidade = 'S' THEN
                    IF v_especialidade = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- ORIGEM
                IF v_utiliza_origem = 'S' THEN
                    IF v_origem = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- FILIAL ABERTURA
                IF v_utiliza_filial_abertura = 'S' THEN
                    IF v_filial_abertura = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- EXECUTANTE
                IF v_utiliza_executante = 'S' THEN
                    IF v_executante = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- MOTIVO REEMBOLSO
                IF v_utiliza_motivo_reembolso = 'S' THEN
                    IF v_motivo_reembolso = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                -- FAIXA PROCEDIMENTO
                IF v_utiliza_procedimento = 'S' THEN
                    IF v_procedimento = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;
                --
        -- DOCUMENTO
                IF v_utiliza_documento = 'S' THEN
                    IF v_documento = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;
        --
        -- ANEXO
                IF v_utiliza_anexo = 'S' THEN
                    IF v_anexo = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;
                -- CAMPOS OCR
                IF v_utiliza_campos_ocr_igual = 'S' THEN
                    IF v_campos_ocr_igual THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;

                IF v_utiliza_campos_ocr_dif = 'S' THEN
                    IF v_campos_ocr_dif THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;
                --
                -- Validação Biométria
                IF v_utiliza_vld_biometrica = 'S' THEN
                    IF v_vld_biometrica = true THEN
                        v_ok := TRUE;
                    ELSE
                        v_ok := FALSE;
                        v_total := 1;
                    END IF;
                ELSE
                    v_ok := TRUE;
                END IF;
                --
                if v_total = 0 and v_ok = TRUE then
                  begin
                   begin
                     --
                     insert into pedido_reembolso_regra ( cod_regra
                                                        , num_reembolso
                                                        , dt_atu
                                                        , cod_usuario_atu
                                                        , cod_grupo
                                                        , Ind_Tipo_Acao)
                                                  values( r_grupo.cod_regra_grupo
                                                        , p_num_reembolso
                                                        , v_hoje
                                                        , p_cod_usuario
                                                        , r_grupo.cod_grupo_encaminha
                                                        , r_grupo.cod_tipo_reembolso
                                                        );
                     --
                   exception
                     when others then
                       null;
                   end;
                   --
                   insert into pedido_reembolso_grupo ( cod_grupo         , num_reembolso
                                                      , dt_atu            , cod_usuario_atu
                                                      , num_seq_liberacao , dt_encaminhamento
                                                      , cod_usuario_encam , ind_situacao
                                                      , cod_regra         , ind_tipo_acao)
                                               values ( r_grupo.cod_grupo_encaminha , p_num_reembolso
                                                      , v_hoje            , p_cod_usuario
                                                      , 1                 , v_hoje
                                                      , p_cod_usuario     , '1'
                                                      , r_grupo.cod_regra_grupo , r_grupo.cod_tipo_reembolso
                                                      );

                    exception
                     when dup_val_on_index then
                      DELETE FROM pedido_reembolso_grupo
                      WHERE NUM_REEMBOLSO = p_num_reembolso
                        AND COD_GRUPO = r_grupo.cod_grupo_encaminha;

                      insert into pedido_reembolso_grupo  ( cod_grupo         , num_reembolso
                                                          , dt_atu            , cod_usuario_atu
                                                          , num_seq_liberacao , dt_encaminhamento
                                                          , cod_usuario_encam , ind_situacao
                                                          , cod_regra         , ind_tipo_acao)
                                                   values ( r_grupo.cod_grupo_encaminha , p_num_reembolso
                                                          , v_hoje            , p_cod_usuario
                                                          , 1                 , v_hoje
                                                          , p_cod_usuario     , '1'
                                                          , r_grupo.cod_regra_grupo , r_grupo.cod_tipo_reembolso
                                                          );

                    end;
                else
                    DELETE FROM pedido_reembolso_grupo
                      WHERE NUM_REEMBOLSO = p_num_reembolso
                      --  AND COD_GRUPO = r_grupo.cod_grupo_encaminha
                        AND COD_REGRA = r_grupo.cod_regra_grupo;
                      --
                    DELETE FROM pedido_reembolso_regra
                      WHERE NUM_REEMBOLSO = p_num_reembolso
                      --  AND COD_GRUPO = r_grupo.cod_grupo_encaminha
                        AND COD_REGRA = r_grupo.cod_regra_grupo;
                end if;
             --
            else
               DELETE FROM pedido_reembolso_grupo
                WHERE NUM_REEMBOLSO = p_num_reembolso
               --   AND COD_GRUPO = r_grupo.cod_grupo_encaminha
                  AND COD_REGRA = r_grupo.cod_regra_grupo;
               --
               DELETE FROM pedido_reembolso_regra
                WHERE NUM_REEMBOLSO = p_num_reembolso
               --   AND COD_GRUPO = r_grupo.cod_grupo_encaminha
                  AND COD_REGRA = r_grupo.cod_regra_grupo;
                  --
              p_msg_retorno := 'Reembolso não criticado';
      end if;
      --
      end loop;
      --
      select count (*)
       INTO  v_tem_regra
        FROM ts.pedido_reembolso_regra prg
       WHERE prg.num_reembolso = p_num_reembolso
         AND prg.ind_tipo_acao = 2;
      --
      IF v_tem_regra > 0 then
        --
        DELETE FROM pedido_reembolso_regra
              WHERE NUM_REEMBOLSO = p_num_reembolso
                AND ind_tipo_acao <> 2;

        -- Apaga os grupos que nao forem Fraude
        DELETE FROM pedido_reembolso_grupo
          WHERE NUM_REEMBOLSO = p_num_reembolso
            AND ind_tipo_acao <> 2;
      else
        SELECT count (*)
          INTO  v_tem_regra
          FROM ts.pedido_reembolso_regra prg
         WHERE prg.num_reembolso = p_num_reembolso
           AND prg.ind_tipo_acao = 3;
           --
           IF v_tem_regra > 0 then
             --
              DELETE FROM pedido_reembolso_regra
                    WHERE NUM_REEMBOLSO = p_num_reembolso
                      AND ind_tipo_acao <> 3;
             --
             -- Apaga os grupos que nao forem Fraude
              DELETE FROM pedido_reembolso_grupo
                WHERE NUM_REEMBOLSO = p_num_reembolso
                  AND ind_tipo_acao <> 3;
             --
           END IF;
      end if;
      --
      SELECT count(*)
        INTO v_tem_regra
        FROM ts.pedido_reembolso_regra prg
       WHERE prg.num_reembolso = p_num_reembolso;
      --r_grupo
      if v_tem_regra = 0 then
        for reg in ( select r.cod_grupo, r.ind_consulta, r.ind_exames, r.ind_internacao from reembolso_grupo_regra r )
        loop
          v_ok := FALSE;
          --
          if rReembolso.ind_tipo_reembolso = 1 then
             if nvl(reg.ind_consulta,'N') = 'S' then
                v_ok := TRUE;
             end if;

          elsif rReembolso.Ind_Tipo_Reembolso = 2 then
              if nvl(reg.ind_exames,'N') = 'S' then
                v_ok := TRUE;
             end if;

          else
              if nvl(reg.ind_internacao,'N') = 'S' then
                v_ok := TRUE;
             end if;
          end if;
          --
          if v_ok = TRUE then
            begin

                   insert into pedido_reembolso_grupo ( cod_grupo         , num_reembolso
                                                      , dt_atu            , cod_usuario_atu
                                                      , num_seq_liberacao , dt_encaminhamento
                                                      , cod_usuario_encam , ind_situacao
                                                      , cod_regra         , ind_tipo_acao)
                                               values ( reg.cod_grupo , p_num_reembolso
                                                      , v_hoje            , p_cod_usuario
                                                      , 1                 , v_hoje
                                                      , p_cod_usuario     , '1'
                                                      , null              , 999
                                                      );

            exception
                when dup_val_on_index then
                DELETE FROM pedido_reembolso_grupo
                WHERE NUM_REEMBOLSO = p_num_reembolso
                  AND COD_GRUPO = reg.cod_grupo
                  AND COD_REGRA is null;

                  insert into pedido_reembolso_grupo  ( cod_grupo         , num_reembolso
                                                      , dt_atu            , cod_usuario_atu
                                                      , num_seq_liberacao , dt_encaminhamento
                                                      , cod_usuario_encam , ind_situacao
                                                      , cod_regra         , ind_tipo_acao)
                                               values ( reg.cod_grupo     , p_num_reembolso
                                                      , v_hoje            , p_cod_usuario
                                                      , 1                 , v_hoje
                                                      , p_cod_usuario     , '2'
                                                      , null              , 999
                                                      );

             end;
          end if;
        end loop;
      end if;
      --commit; -- Comentado pois estava gerando reembolsos duplicados no protocolo em caso de erro em um dos reembolso
      -- Não vi a necessidade da execução deste commit.     -- Marcos Luiz 01/10/2013
      --
    exception
    when others then
        p_cod_retorno := 9;
        p_msg_retorno := 'Ocorreu um erro não previsto ao executar validação da regra de reembolso :' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || chr(13) || p_msg_retorno || ' - ' || v_posicao;
    end;
    --
    --


    -----------------------------------
    -- Validar as glosas de reembolso
    -----------------------------------
    procedure ValidaReembolso ( p_num_reembolso        in number
                              , p_cod_usuario          in varchar2
                              , p_cod_retorno          out number
                              , p_msg_retorno          out varchar2
                              )
    is
        v_item_vazio                    varchar2(3) := '¿¿¿';
        v_cod_motivo_glosa              motivo_glosa.cod_motivo_glosa%type;
        v_ind_internado                 tipo_tratamento.ind_internado%type;
        v_ind_utilizacao                tipo_tratamento.ind_utilizacao%type;
        v_ind_tipo                      tipo_tratamento.ind_tipo%type;
        v_data_teste                    date;
        v_ind_cobertura_procedimento    varchar2(1);
        v_ind_tem_cobertura             varchar2(1);
        v_ind_tem_carencia              varchar2(1);
        v_ind_reembolso                 varchar2(1);
        v_tipo_item                     varchar2(1);
        v_ind_sexo_proc                 varchar2(1);
        v_ind_acomodacao                varchar2(1);
        v_cod_procedimento_principal    procedimento_reembolso.cod_procedimento%type;
        v_ind_rol_procedimentos         itens_medicos.ind_rol_procedimentos%type;
        v_cod_acomodacao_plano          plano_medico.cod_acomodacao%type;
        v_ind_tipo_acomodacao_plano     plano_medico.ind_acomodacao%type;
        v_sigla_tabela_hosp_reembolso   plano_medico.sigla_tabela_hosp_reembolso%type;
        v_sigla_tabela_reembolso        plano_medico.sigla_tabela_reembolso%type;
        v_cod_grupo_estatistico_pai     itens_medicos.cod_grupo_estatistico%type;
        v_quantidade                    number;
        v_ind_erro_out                  varchar2(10);
        v_msg_retorno_out               varchar2(300);
        v_ind_situacao_sur              varchar2(2);
        v_cod_padrao                    itens_medicos.cod_padrao%type;
        v_ind_limite_idade_ate          itens_medicos.ind_limite_idade_ate%type;
        v_ind_limite_idade              itens_medicos.ind_limite_idade%type;
        v_qtd_valida                    number;
        rsReembolso                     pedido_reembolso%rowtype;
        v_num_reembolso_nf              pedido_reembolso.num_reembolso%type;
        txt_carencia                    clob;
        --
        v_ind_situacao                  varchar2(1);
        v_data_exclusao                 date;
        v_data_inclusao                 date;
        v_count                         number;
        c_proc                          procedimento_reembolso%rowtype;
        v_posicao                       pls_integer;
        v_sql                           varchar2(32730);
        v_existe                        number;
        v_existe_credenciado            number;
        v_existe_prestador              number;
        v_val_estimado                  number(14,2);
        -----------------------------------------

        v_cod_retorno       number;
        v_msg_retorno       varchar2(600);
        v_tipo                          varchar2(1);
        v_qtd_vezes_permitida           number;
        v_qtd_vezes_permitida_int       number;
        ---
        v_ind_cobertura                 itens_medicos.ind_cobertura%type;
        v_ind_autorizacao               itens_medicos.ind_autorizacao%type;
        v_dt_ini_ap                     itens_medicos.data_ini_ap%type;
        v_ind_centro_cirurgico          varchar2(1);
        v_ind_emergencia                varchar2(1);
        v_ind_internacao                varchar2(1);
        v_ind_day_hospital              varchar2(1);
        v_sem_acrescimo_emergencia      itens_medicos.ind_nao_emergencia%type;

        v_qtd_nao_int_pdia              itens_medicos.qtd_nao_int_pdia%type;
        v_qtd_int_pdia                  itens_medicos.qtd_int_pdia%type;

        v_ind_material                  itens_medicos.ind_material%type;
        v_ind_taxa                      itens_medicos.ind_taxa%type;
        v_ind_residencia                varchar2(1);
        v_ind_medicamento               itens_medicos.ind_medicamento%type;
        v_ind_gasoterapia               itens_medicos.ind_gasoterapia%type;

        --- somente em pacotes
        v_ind_diarias                   varchar2(1);
        v_ind_remocao                   varchar2(1);

        ---  contem cobranca, só para pacotes

        v_cc_ind_material               varchar2(1);
        v_cc_ind_taxa                   varchar2(1);
        v_cc_ind_honorarios             varchar2(1);
        v_cc_ind_gasoterapia            varchar2(1);

        ---
        v_ind_nao_internado             varchar2(1);
        v_ind_sexo                      itens_medicos.ind_sexo%type;

        --- quantidades

        v_qtd_sessoes                   itens_medicos.qtd_sessoes%type;
        v_qtd_limite                    itens_medicos.qtd_limite%type;
        v_qtd_dias_periodo              itens_medicos.qtd_dias_periodo%type;
        v_qtd_limite_int                itens_medicos.qtd_limite_int%type;
        v_qtd_dias_periodo_int          itens_medicos.qtd_dias_periodo_int%type;
        v_qtd_dias_validade             number;
        v_qtd_reembolso                 number;
        --- para itens médicos (ind_procedimento_especial) e para pacotes (ind_pacote_especial)

        v_ind_especial                  itens_medicos.ind_procedimento_especial%type;
        v_ind_autorizacao_pos           itens_medicos.ind_autorizacao%type;
        v_qtd_autorizador_dia_pos       itens_medicos.qtd_autorizador_dia%type;


        --- apenas para pacotes

        v_cobranca_isolada              pacotes.ind_cobranca_isolada%type;
        v_cod_grupo_estatistico         itens_medicos.cod_grupo_estatistico%type;         --- itens médicos e pacotes
        v_cod_especialidade_amb         itens_medicos.cod_especialidade_amb%type;         --- itens médicos
        v_cod_subgrupo_amb              itens_medicos.cod_subgrupo_amb%type;              --- itens médicos

        v_ind_cirurgia                  itens_medicos.ind_cirurgia%type;
        v_cod_capitulo_amb              itens_medicos.cod_capitulo%type;

        v_ind_controle_por              itens_medicos.ind_controle_por%type;
        v_ind_critica_em                itens_medicos.ind_critica_em%type;
        v_item_medico_valida            procedimento_reembolso.cod_procedimento%type;
        v_cod_prestador_ts              prestador_servico.cod_prestador_ts%type;
        v_ind_tipo_pessoa               prestador_servico.ind_tipo_pessoa%type;
        v_ind_utiliza_concessao         varchar2(1);
        v_num_crm                       pedido_reembolso.num_crm%type;
        v_qtd_limite_reembolso          number;
        v_txt_complemento               VARCHAR2(500);
        v_qtd_cid                       number;
        v_existe_cnes                   integer;

        --variaveis da regra da glosa 1200
        v_exists             number;
    --
        v_num_protocolo_atendimento     varchar2(25);
        v_num_reembolso_dup             varchar2(150);
        v_txt_obs_glosa_765             varchar2(1000);

    begin
        --
        v_posicao := 10;
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'Debug', 'rsReembolso.Num_Reembolso: ' || rsReembolso.Num_Reembolso  || ' - rsReembolso.dt_pedido: ' || rsReembolso.dt_pedido || ' - rsReembolso.cod_operadora_contrato: ' ||
                          rsReembolso.cod_operadora_contrato || ' - rsReembolso.ind_tipo_reembolso: ' || rsReembolso.ind_tipo_reembolso , 'ValidaReembolso' );
        --
        v_posicao := 20;
        --
        if nvl(p_num_reembolso,0) = 0 then
            p_cod_retorno := 9;
            p_msg_retorno := 'Reembolso não informado';
            return;
        end if;
        --
        v_posicao := 30;
        --
        begin
            select *
            into   rsReembolso
            from   pedido_reembolso
            where  num_reembolso = p_num_reembolso;
        exception
        when no_data_found then
            p_cod_retorno := 9;
            p_msg_retorno := 'Reembolso não encontrado (' || p_num_reembolso ||')';
            return;
        end;
        --
        v_posicao := 40;
        ------------------------------------------------------------------
        ---- Recuperar informações do Tratamento
        ------------------------------------------------------------------
        begin
            select tt.ind_internado,     tt.ind_utilizacao,  tt.ind_tipo
            into   v_ind_internado,      v_ind_utilizacao,   v_ind_tipo
            from   tipo_tratamento       tt
            where  cod_tratamento        = rsReembolso.cod_tratamento;
        exception
        when no_data_found then
            null;
        end;
        --
        v_posicao := 50;
        ------------------------------------------------------------------
        ---- Recuperar informações do Tratamento
        ------------------------------------------------------------------
        begin
            select ind_tipo
            into   v_ind_acomodacao
            from   tipo_acomodacao
            where  cod_acomodacao = rsReembolso.cod_acomodacao;
        exception
        when no_data_found then
            null;
        end;
        --
        v_posicao := 60;
        ------------------------------------------------------------------
        ---- Recuperar informações do Associado
        ------------------------------------------------------------------
        begin
            select a.ind_situacao
                 , a.data_exclusao
                 , nvl(least(a.data_adesao,a.data_inclusao),a.data_inclusao) dt_inclusao
            into v_ind_situacao
                 , v_data_exclusao
                 , v_data_inclusao
            from ts.associado a
            where a.num_associado = rsReembolso.num_associado;
        exception
        when no_data_found then
            null;
        end;
        v_posicao := 61;
        -------------------------------------------------------------
        --- Glosa: 501 - Beneficiário Não Elegível - Excluído Antes Do Atendimento
        -------------------------------------------------------------
        v_cod_motivo_glosa := 501;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            --
            v_count := 0;
            --
            for c_proc in (select pc.data_atendimento from ts.procedimento_reembolso pc where pc.num_reembolso = rsReembolso.num_reembolso )
              loop
                if v_ind_situacao = 'E' and c_proc.data_atendimento > v_data_exclusao then
                   v_count := v_count + 1;
                end if;
              end loop;

              if v_count >= 1 then
                   GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                   if p_cod_retorno = 9 then return; end if;
                end if;
        end if;

		 v_posicao := 62;
        --
        -------------------------------------------------------------
        --- Glosa: 1200 - Beneficiário Suspenso
        -------------------------------------------------------------

       v_cod_motivo_glosa  := 1200;

       if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            --
          v_count := 0;
            --
        for c_proc in (select pc.data_atendimento from ts.procedimento_reembolso pc where pc.num_reembolso = rsReembolso.num_reembolso )
          loop

       v_exists :=0;

        begin

          select  count(1)
           into v_exists
           from cobranca co
              ,  fatura fa
           where co.cod_ts_contrato = fa.cod_ts_contrato
           and co.cod_ts is null
           and co.ind_estado_cobranca in ('0','1')
           and fa.cod_ts_contrato = rsReembolso.Cod_Ts_Contrato
           and fa.num_seq_fatura_ts = co.num_seq_fatura_ts
           and c_proc.data_atendimento between fa.dt_ini_periodo and fa.dt_fim_periodo
           and (case when decode ( co.ind_estado_cobranca,'1',null,'6', null,
            case when trunc (sysdate) > nvl (co.dt_limite_liberacao_juros, nvl(co.dt_vencimento_orig,co.dt_vencimento))
                      then trunc(sysdate) - nvl(co.dt_vencimento_orig,co.dt_vencimento)
                      else trunc (sysdate)- nvl (co.dt_limite_liberacao_juros, nvl(co.dt_vencimento_orig,co.dt_vencimento))
                       end) > 0
                      then decode ( co.ind_estado_cobranca,'1',null,'6',null,
            case when trunc (sysdate) > nvl (co.dt_limite_liberacao_juros, nvl(co.dt_vencimento_orig,co.dt_vencimento))
                      then trunc (sysdate) - nvl(co.dt_vencimento_orig,co.dt_vencimento)
                      else trunc (sysdate) - nvl (co.dt_limite_liberacao_juros, nvl(co.dt_vencimento_orig,co.dt_vencimento))
                       end)
                      else to_char (co.qtd_dias_atraso)
            end) > 10;

       exception
         when no_data_found then
            null;
       end;

          if v_exists > 0 then
               v_count := v_count + 1;
            end if;
          end loop;

          if v_count > 0 then
               GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
               if p_cod_retorno = 9 then return; end if;
            end if;

        end if;

        --
        -------------------------------------------------------------
        --- Glosa: 502 - Beneficiário Não Elegível - Incluído Após o Atendimento
        -------------------------------------------------------------
        v_cod_motivo_glosa := 502;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            --
            v_count := 0;
            --
            for c_proc in (select pc.data_atendimento from ts.procedimento_reembolso pc where pc.num_reembolso = rsReembolso.num_reembolso )
              loop
                if v_ind_situacao = 'A' and c_proc.data_atendimento < v_data_inclusao then
                   v_count := v_count + 1;
                end if;
              end loop;

              if v_count >= 1 then
                   GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                   if p_cod_retorno = 9 then return; end if;
                end if;
        end if;
        --
        v_posicao := 70;
        --
        ------------------------------------------------------------------
        ---- Glosa: 181 - Prestador executante inválido
        ------------------------------------------------------------------
        v_cod_motivo_glosa := 181;
        v_posicao := 75;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            if rsReembolso.Ind_Insc_Fiscal = 'F' AND rsReembolso.Sigla_Conselho = 'CRM' then

               IF SUBSTR(REPLACE(REPLACE(rsReembolso.Num_Crm,'-',''),'.',''),1,2) = '52' AND rsReembolso.Uf_Conselho = 'RJ' THEN
                 v_num_crm := TO_CHAR(TO_NUMBER(SUBSTR(REPLACE(REPLACE(rsReembolso.Num_Crm,'-',''),'.',''),3)));
               ELSE
                 v_num_crm := rsReembolso.Num_Crm;
               END IF;


                BEGIN
                  SELECT COUNT(*)
                    INTO v_existe
                    FROM ts.solicitante s
                   WHERE s.ind_tipo_pessoa = 'F'
                     AND s.sigla_conselho  = rsReembolso.Sigla_Conselho
                --     AND s.num_insc_fiscal = rsReembolso.Num_Insc_Fiscal
                     AND s.num_crm         = v_num_crm
                     AND s.sgl_uf_conselho = rsReembolso.Uf_Conselho
                     AND s.txt_origem      = 'CARGA'
                     AND s.ind_situacao    = 1;
                EXCEPTION
                  when others then
                       v_existe := 0;
                END;
                --
                if v_existe = 0 then
                  GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                  if p_cod_retorno = 9 then
                     return;
                  end if;
                end if;
            end if;
        end if;
        --
        ------------------------------------------------------------------
        ---- Glosa: 511 - Ausência Dos Dados Do Executante
        ------------------------------------------------------------------
        v_cod_motivo_glosa := 511;
        v_posicao := 80;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            if (rsReembolso.num_insc_fiscal is null AND rsReembolso.num_crm is null) OR rsReembolso.nome_prestador is null then

                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then
                   return;
                end if;
            end if;
        end if;
        --
        ------------------------------------------------------------------
        ---- Glosa: 340 - CNES do executante inválido
        ------------------------------------------------------------------
        v_cod_motivo_glosa := 340;
        v_posicao := 90;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            if rsReembolso.cnes is not null and ts_valida_cnes(rsReembolso.cnes) = 'NOK' then

                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,'Número do CNES inválido (DV)',p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
            end if;
             /*** PBI - 221615 - Validação do CNES no Reembolso ***/
            select count(1)
              into v_existe_prestador
              from entidade_sistema es
             inner join prestador_servico ps on ps.cod_entidade_ts = es.cod_entidade_ts
             where ((es.num_cgc = rsReembolso.num_insc_fiscal) or (es.num_cpf = rsReembolso.num_insc_fiscal))
               and rownum = 1;

            if (v_existe_prestador > 0 and rsReembolso.ind_tipo_reembolso in (1, 2, 3)) then
                if (rsReembolso.cnes is null or nvl(trim(rsReembolso.cnes), '0') = '0') then
                    GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,'Número do CNES em Branco ou Vazio',p_cod_retorno,p_msg_retorno);
                else
                    select count(1)
                      into v_existe_cnes
                      from endereco_prestador ep
                     where ep.cod_prestador_ts = rsReembolso.cod_prestador_ts
                       and ep.num_cnes = rsReembolso.cnes
                       and ep.seq_endereco = rsReembolso.seq_endereco;

                        if v_existe_cnes = 0 then
                            GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,'Número do CNES inválido',p_cod_retorno,p_msg_retorno);
                        end if;
                end if;
            end if;
            /*****************************************************/
        end if;
        --
        --------------------------------------------------------------------
        ---- Glosa: 415 - Executante informado faz parte da rede credenciada
        --------------------------------------------------------------------
        v_cod_motivo_glosa := 415;
        --
        v_posicao := 100;

        v_data_teste := coalesce(rsReembolso.dt_ini_atendimento,rsReembolso.dt_pedido,trunc(sysdate));
        --
        v_posicao := 110;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
           --
            if nvl(rsReembolso.num_insc_fiscal,0) <> 0 then
                --Procurar pelo CPF ou CGC
                if rsReembolso.ind_insc_fiscal = 'F' then
                    v_posicao := 120;

                    select count (*)
                    into   v_qtd_valida
                    from   prestador_servico ps
                         , entidade_sistema es
                    where  ps.cod_entidade_ts = es.cod_entidade_ts
                    and    es.ind_tipo_pessoa = rsReembolso.ind_insc_fiscal
                    and    es.num_cpf         = rsReembolso.num_insc_fiscal;
                else
                    v_posicao := 130;

                    select count (*)
                    into   v_qtd_valida
                    from   prestador_servico ps
                         , entidade_sistema es
                    where  ps.cod_entidade_ts = es.cod_entidade_ts
                    and    es.ind_tipo_pessoa = rsReembolso.ind_insc_fiscal
                    and    es.num_cgc         = rsReembolso.num_insc_fiscal;
                end if;
                --
            end if;
            --
            v_posicao := 140;

            if nvl(rsReembolso.num_crm,v_item_vazio) <> v_item_vazio AND NVL(v_qtd_valida,0) = 0 then
                --Procurar pelo CRM
                select count (*)
                into   v_qtd_valida
                from   prestador_servico ps
                where  ps.num_crm         = rsReembolso.num_crm
                and    ps.sigla_conselho  = nvl(rsReembolso.sigla_conselho,ps.sigla_conselho)
                and    ps.sgl_uf_conselho = nvl(rsReembolso.uf_conselho,ps.sgl_uf_conselho);
            end if;
            --
            v_posicao := 150;

            if NVL(v_qtd_valida,0) > 0 then

                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then
                    return;
                end if;
            end if;
        end if;
        --
        v_posicao := 160;

        ------------------------------------------------------------------
        ---- Glosa: 723 - Tratamento ausente ou inválido
        ------------------------------------------------------------------
        v_cod_motivo_glosa := 723;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            if nvl(rsReembolso.cod_tratamento,0) = 0 then
                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
            end if;
        end if;
        --
        v_posicao := 170;

        ------------------------------------------------------------------
        ---- Glosa: 724 - Acomodação ausente ou inválida
        ------------------------------------------------------------------
        v_cod_motivo_glosa := 724;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            if v_ind_internado = 'S' then
                if v_ind_utilizacao <> 7 then
                    if nvl(rsReembolso.cod_acomodacao,'0') = '0'  then

                        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                        if p_cod_retorno = 9 then return; end if;
                    end if;
                end if;
            end if;
        end if;
        --
        v_posicao := 180;

        ------------------------------------------------------------------
        ---- Verifica acomodação informada com a do beneficiário
        ------------------------------------------------------------------
        if v_ind_internado = 'S'  and  v_ind_utilizacao <> 7 then
            begin
                v_posicao := 190;

                select distinct ind_acomodacao,         cod_acomodacao
                into   v_ind_tipo_acomodacao_plano,     v_cod_acomodacao_plano
                from   plano_medico
                where  cod_plano = rsReembolso.cod_plano
                and    rownum    < 2;
            exception
            when no_data_found then
                v_posicao := 200;

                if rsReembolso.cod_plano is null then
                    null;
                else
                   p_cod_retorno := 9;
                   p_msg_retorno := 'Acomodação do plano inexistente.' || rsReembolso.cod_plano;
                   return;
                end if;
            when others then
                p_cod_retorno := 9;
                p_msg_retorno := 'Erro na obtenção da acomodação: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                return;
            end;
            --
            v_posicao := 210;

            if v_ind_tipo_acomodacao_plano = 'E' and v_ind_acomodacao = 'A' then
                ------------------------------------------------------------------
                ---- 731 - Acomodacao inferior com plano beneficiario
                ------------------------------------------------------------------
                v_cod_motivo_glosa := 731;
                v_posicao := 220;

                if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

                    GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                    if p_cod_retorno = 9 then return; end if;
                end if;
            else
                ------------------------------------------------------------------
                ---- 730 - Acomodacao superior com plano beneficiario
                ------------------------------------------------------------------
                v_cod_motivo_glosa := 730;
                v_posicao := 230;

                if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                    if v_ind_tipo_acomodacao_plano = 'A'  and  v_ind_acomodacao = 'E' then

                        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                        if p_cod_retorno = 9 then return; end if;
                    end if;
                end if;
            end if;
        end if;
        --
        v_posicao := 240;

        ---------------------------------------------------------------------------
        ---- 750 - Plano/contrato sem cobertura para o tipo de atendimento
        ---------------------------------------------------------------------------
        v_cod_motivo_glosa := 750;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            if rsReembolso.cod_ts is not null then
                -- verifica se tem cobertura
                v_posicao := 250;

                crt_utl_base.CR_VER_TRATAMENTO_COBERTURA ( rsReembolso.cod_tratamento,      rsReembolso.ind_sexo
                                                         , rsReembolso.cod_plano,           rsReembolso.cod_ts_contrato
                                                         , rsReembolso.dt_pedido,           v_ind_tem_cobertura
                                                         , p_msg_retorno,                   p_cod_retorno
                                                         );
                if p_cod_retorno = 9 then return;
                elsif v_ind_tem_cobertura = 'N' then
                    v_posicao := 260;

                    GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                    if p_cod_retorno = 9 then return; end if;
                end if;
             end if;
        end if;
        --
        -------------------------------------------------------------
        ------- criticas de carências
        -------------------------------------------------------------
        -------------------------------------------------------------
        --- Glosa: 503 - beneficiário com carência de CPT
        -------------------------------------------------------------
        v_cod_motivo_glosa := 503;
        v_posicao := 270;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

            crt_utl_base.CR_VERIFICA_CPT(  rsReembolso.dt_pedido, p_msg_retorno, p_cod_retorno);

            if    p_cod_retorno  = 9 then
                return;
            elsif p_cod_retorno <> 0 then
                v_posicao := 280;

                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
            end if;
        end if;
        --
        -- verifica se beneficário tem alguma carência
        v_posicao := 290;

        crt_utl_base.CR_VER_CARENCIA ( rsReembolso.cod_ts,        null
                                     , rsReembolso.dt_pedido,     v_ind_tem_carencia
                                     , p_msg_retorno,             p_cod_retorno
                                     );

        if p_cod_retorno = 9   then
           return;
        elsif v_ind_tem_carencia = 'S' then
            -------------------------------------------------------------
            ------- Glosa: 760 - beneficiário com carência não cumprida
            -------------------------------------------------------------
            v_cod_motivo_glosa := 760;
            v_posicao := 300;

            if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                v_posicao := 310;

                crt_utl_base.CR_VALIDA_CARENCIA ( rsReembolso.cod_ts,           rsReembolso.dt_pedido
                                                , null,                         null
                                                , rsReembolso.cod_tratamento,   null
                                                , p_msg_retorno,                p_cod_retorno
                                                );
                if p_cod_retorno = 9  then
                   return;
                elsif p_cod_retorno <> 0 then
                    v_posicao := 320;

                    GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                    if p_cod_retorno = 9 then return; end if;
                end if;
            end if;
            --
            ------------------------------------------------------------------------
            ------- Glosa: 761 - beneficiário com carência de acomodação superior
            ------------------------------------------------------------------------
            v_cod_motivo_glosa := 761;
            v_posicao := 330;

            if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                if rsReembolso.cod_acomodacao is not null and v_ind_internado = 'S' then
                    v_posicao := 340;

                    crt_utl_base.CR_VALIDA_CARENCIA_ACOMODACAO( rsReembolso.cod_ts,      rsReembolso.dt_pedido,
                                                                v_cod_acomodacao_plano,  rsReembolso.cod_acomodacao,
                                                                p_msg_retorno,           p_cod_retorno);

                    if p_cod_retorno = 9 then return;
                    elsif p_cod_retorno <> 0 then
                        v_posicao := 350;

                        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                        if p_cod_retorno = 9 then return; end if;
                    end if;
                end if;
            end if;
        end if;
        ----- fim verificação de carências
        ------------------------------------------------------------------------
        ------- Glosa: 408 - plano sem cobertura para reembolso
        ------------------------------------------------------------------------
        v_cod_motivo_glosa := 408;
        v_posicao := 360;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            v_posicao := 370;

            crt_utl_base.CR_PLANO_REEMBOLSO (rsReembolso.cod_plano,      v_sigla_tabela_hosp_reembolso,
                                             v_sigla_tabela_reembolso,   v_ind_reembolso,
                                             p_msg_retorno,              p_cod_retorno) ;

            if p_cod_retorno = 9 then
                return;
            elsif p_cod_retorno <> 0 then
                v_posicao := 380;

                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
            end if;
        end if;

        ------------------------------------------------------------------------
        ------- Glosa: 995 - verifica se a nota fiscal cadastrada já esta sendo usado para com o mesmo executante em outro reembolso
        ------------------------------------------------------------------------
        v_cod_motivo_glosa := 995;
        v_posicao := 390;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            --
            v_num_reembolso_nf := null;
            --
            begin
                --
                v_posicao := 400;
                --
                v_sql := ' select num_reembolso
                             from ts.pedido_reembolso
                            where num_nota_fiscal         = :p_num_nota_fiscal
                              and nvl(num_insc_fiscal,0)  = nvl(:p_num_insc_fiscal,0)
                              and ind_situacao not in (27,33,39,40,41,13,16,26)
                              and ind_tipo_comprovante    = ''N''
                              and num_reembolso          <> :p_num_reembolso
                              and rownum                  = 1';
                --
                --
                execute
              immediate v_sql
                   into v_num_reembolso_nf
                  using rsReembolso.num_nota_fiscal
                      , rsReembolso.num_insc_fiscal
                      , rsReembolso.num_reembolso;
                --
            exception
                when others then
                    v_num_reembolso_nf := null;
            end;
            --
            if nvl(v_num_reembolso_nf,0) != 0 then
                v_posicao := 410;

                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,'Nota fiscal cadastrada no reembolso: ' || v_num_reembolso_nf,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
            end if;
        end if;

        ------------------------------------------------------------------------
        ------- Glosa: 1570 - Limite diário de reembolso ultrapassado
        ------------------------------------------------------------------------
        v_cod_motivo_glosa := 1570;
        v_posicao := 390;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            if ts.rb_trata_glosa.ValidaQtdLimiteReembolso(rsReembolso.Ind_Tipo_Reembolso, rsReembolso.Cod_Ts_Tit, rsReembolso.Cod_Ts, rsReembolso.Num_Reembolso, rsReembolso.Dt_Pedido, v_txt_complemento) = 0 then
                GravaGlosa(rsReembolso.Num_Reembolso,v_cod_motivo_glosa,c_proc.num_seq_item,c_proc.cod_procedimento_cm,SYSDATE,p_cod_usuario, v_txt_complemento,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
            end if;
        end if;

		    ------------------------------------------------------------------------
        ------- Glosa: 9033 - Biometria invalida /Suspeita
        ------------------------------------------------------------------------
		    v_cod_motivo_glosa := 9033;
        v_posicao := 395;

        if rsReembolso.val_confiab_valid_biometrica is not null and
          VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
          if ts.rb_trata_glosa.ValidaConfiabBiometria(rsReembolso.Ind_Tipo_Reembolso, rsReembolso.Cod_Operadora_Contrato, rsReembolso.dt_pedido, rsReembolso.val_informado, rsReembolso.val_confiab_valid_biometrica) = 0 then
              GravaGlosa(rsReembolso.Num_Reembolso,v_cod_motivo_glosa,c_proc.num_seq_item,c_proc.cod_procedimento_cm,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                    if p_cod_retorno = 9 then return; end if;
            end if;
        end if;
		------------------------------------------------------------------------
        ------- Glosa: 9034 - Geolocalização Suspeita
        ------------------------------------------------------------------------
		v_cod_motivo_glosa := 9034;
        v_posicao := 395;

		if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
			if ts.rb_trata_glosa.ValidaGeoBlacklist(rsReembolso.num_reembolso, v_txt_complemento) = 0 then
			    GravaGlosa(rsReembolso.Num_Reembolso,v_cod_motivo_glosa,c_proc.num_seq_item,c_proc.cod_procedimento_cm,SYSDATE,p_cod_usuario, v_txt_complemento,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
		    end if;
		end if;

        ------------------------------------------------------------------------
        ------- Glosa: 1572 - CPF do executante x CPF do beneficiário titular\dependente
        ------------------------------------------------------------------------
        v_cod_motivo_glosa := 1572;
        v_posicao := 400;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            if ts.rb_trata_glosa.ValidaCpfExecBenef(rsReembolso.Cod_Ts_Tit,rsReembolso.Cod_Ts,rsReembolso.num_insc_fiscal) = 0 then
                GravaGlosa(rsReembolso.Num_Reembolso,v_cod_motivo_glosa,c_proc.num_seq_item,c_proc.cod_procedimento_cm,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
            end if;
        end if;

        ------------------------------------------------------------------------
        ------- Glosa: 1573 - CPF do executante igual ao CPF do favorecido
        ------------------------------------------------------------------------
        v_cod_motivo_glosa := 1573;
        v_posicao := 401;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            if ts.rb_trata_glosa.ValidaCpfExecFavorecido(rsReembolso.num_insc_fiscal,rsReembolso.num_cpf_favorecido) = 0 then
                GravaGlosa(rsReembolso.Num_Reembolso,v_cod_motivo_glosa,c_proc.num_seq_item,c_proc.cod_procedimento_cm,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
            end if;
        end if;

        ------------------------------------------------------------------------
        ------- Glosa: 1575 - Verifica se o documento lido pelo OCR é válido
        ------------------------------------------------------------------------
        v_cod_motivo_glosa := 1575;
        v_posicao := 402;
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'Debug', 'rsReembolso.Num_Reembolso: ' || rsReembolso.Num_Reembolso  || ' - rsReembolso.dt_pedido: ' || rsReembolso.dt_pedido || ' - rsReembolso.cod_operadora_contrato: ' ||
                          rsReembolso.cod_operadora_contrato || ' - rsReembolso.ind_tipo_reembolso: ' || rsReembolso.ind_tipo_reembolso , 'ValidaReembolso' );
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            v_posicao := 403;
            TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'Debug', 'rsReembolso.Num_Reembolso: ' || rsReembolso.Num_Reembolso  || ' - rsReembolso.dt_pedido: ' || rsReembolso.dt_pedido || ' - rsReembolso.cod_operadora_contrato: ' ||
                          rsReembolso.cod_operadora_contrato || ' - rsReembolso.ind_tipo_reembolso: ' || rsReembolso.ind_tipo_reembolso , 'ValidaReembolso' );
            if ts.rb_trata_glosa.ValidaDocumentoOCR(rsReembolso.Num_Reembolso, rsReembolso.dt_pedido, rsReembolso.cod_operadora_contrato,rsReembolso.ind_tipo_reembolso) = 0 then
                GravaGlosa(rsReembolso.Num_Reembolso,v_cod_motivo_glosa,c_proc.num_seq_item,c_proc.cod_procedimento_cm,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
            end if;
        end if;
        --------------------------------------------------------------------------
        ------- Glosa: 1576 - Verifica se o documento lido pelo OCR está duplicado
        --------------------------------------------------------------------------
        v_cod_motivo_glosa := 1576;
        v_posicao := 404;
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'Debug', 'rsReembolso.Num_Reembolso: ' || rsReembolso.Num_Reembolso  || ' - rsReembolso.dt_pedido: ' || rsReembolso.dt_pedido || ' - rsReembolso.cod_operadora_contrato: ' ||
                          rsReembolso.cod_operadora_contrato || ' - rsReembolso.ind_tipo_reembolso: ' || rsReembolso.ind_tipo_reembolso , 'ValidaReembolso' );
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            v_posicao := 405;
            TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'Debug', 'rsReembolso.Num_Reembolso: ' || rsReembolso.Num_Reembolso  || ' - rsReembolso.dt_pedido: ' || rsReembolso.dt_pedido || ' - rsReembolso.cod_operadora_contrato: ' ||
                          rsReembolso.cod_operadora_contrato || ' - rsReembolso.ind_tipo_reembolso: ' || rsReembolso.ind_tipo_reembolso , 'ValidaReembolso' );
            if ts.rb_trata_glosa.ValidaDocOCRDup(rsReembolso.Num_Reembolso, rsReembolso.dt_pedido, rsReembolso.cod_operadora_contrato,rsReembolso.ind_tipo_reembolso, v_txt_complemento) = 0 then
                v_posicao := 406;
                TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'Debug', 'rsReembolso.Num_Reembolso: ' || rsReembolso.Num_Reembolso  || ' - rsReembolso.dt_pedido: ' || rsReembolso.dt_pedido || ' - rsReembolso.cod_operadora_contrato: ' ||
                          rsReembolso.cod_operadora_contrato || ' - rsReembolso.ind_tipo_reembolso: ' || rsReembolso.ind_tipo_reembolso || '- v_txt_complemento: ' || v_txt_complemento, 'ValidaReembolso' );
                GravaGlosa(rsReembolso.Num_Reembolso,v_cod_motivo_glosa,c_proc.num_seq_item,c_proc.cod_procedimento_cm,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then
                  return;
                end if;
            end if;
        end if;

        ------------------------------------------------------------------
        ---- Glosa: 765 - Duplicidade Protocolo Atendimento
        ------------------------------------------------------------------
        v_cod_motivo_glosa := 765;
        --
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
           begin
              select rbc.num_protocolo_atendimento
                into v_num_protocolo_atendimento
                from reembolso_carta_autorizacao rbc
               where rbc.num_reembolso = rsReembolso.Num_Reembolso;
           exception
              when no_data_found then
                 v_num_protocolo_atendimento := null;
           end;
           --
           if nvl(v_num_protocolo_atendimento,'XXXXXXXXX')!= 'XXXXXXXXX' then
              --
              v_num_reembolso_dup := null;
              for pedidos in (select pr.num_reembolso
                             from reembolso_carta_autorizacao rbc
                                , pedido_reembolso            pr
                            where pr.ind_situacao in (34,36,37)
                              and pr.num_reembolso = rbc.num_reembolso
                              and pr.num_reembolso != rsReembolso.Num_Reembolso
                              and rbc.num_protocolo_atendimento = v_num_protocolo_atendimento)
                 loop
                   if nvl(v_num_reembolso_dup,'XXX') = 'XXX' then
                     v_num_reembolso_dup := pedidos.num_reembolso;
                   else
                     v_num_reembolso_dup := v_num_reembolso_dup||';'||pedidos.num_reembolso;
                   end if;
              end loop;
              if v_num_reembolso_dup is not null then
                 v_txt_obs_glosa_765 := 'Duplicidade com o(s) pedido(s) '||v_num_reembolso_dup;
                 GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,v_txt_obs_glosa_765,p_cod_retorno,p_msg_retorno);
                 if p_cod_retorno = 9 then
                    return;
                 end if;
              end if;
           end if;
        end if;
        --
        ------------------------------------------------------------------
        ---- Glosa: 9040 - Valor Estimado divergente do Valor Solicitado
        ------------------------------------------------------------------
        v_cod_motivo_glosa := 9040;
        --
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
              begin
                select ca.val_estimado
                into v_val_estimado
                from ts.reembolso_carta_autorizacao ca where ca.num_reembolso = rsReembolso.Num_Reembolso;
              exception
                   when others then
                     v_val_estimado := 0;
              end;

              if v_val_estimado < rsReembolso.Val_Informado and v_val_estimado > 0 then
                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,null,null,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then return; end if;
              end if;

        end if;
        --
        v_posicao := 180;

        --------------------------------------------------------------------------
        ------- Glosa: 1592 - Codigo Verificador em duplicidade
        --------------------------------------------------------------------------
        v_cod_motivo_glosa := 1592;
        v_posicao := 407;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            v_posicao := 408;
            if ts.rb_trata_glosa.ValidaCodVerifDup(rsReembolso.Num_Reembolso, v_txt_complemento) = 0 then
                v_posicao := 409;
                GravaGlosa(rsReembolso.Num_Reembolso,v_cod_motivo_glosa,c_proc.num_seq_item,c_proc.cod_procedimento_cm,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then
                  return;
                end if;
            end if;
        end if;

        ------------------------------------------------------------------------
        --- VALIDAR OS PROCEDIMENTOS
        ------------------------------------------------------------------------
        v_posicao := 420;

        v_cod_motivo_glosa := 599;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            for c_proc in (select ce.ind_regulamentado,
                                  im.ind_rol_nreg,
                                  pc.num_seq_item,
                                  pc.cod_procedimento_cm
                           from ts.procedimento_reembolso pc,
                                ts.pedido_reembolso pr,
                                ts.itens_medicos im,
                                ts.contrato_empresa ce
                           where pc.num_reembolso = rsReembolso.Num_Reembolso
                           and   pc.num_reembolso = pr.num_reembolso
                           and   pc.cod_procedimento_cm = im.item_medico
                           and   ce.ind_regulamentado != 'S'
                           and   ce.data_adaptacao is null
                           and ce.cod_ts_contrato = pr.cod_ts_contrato
                           and not exists (select 1 from contrato_beneficio cb
                                       where cb.cod_ts_contrato = ce.cod_ts_contrato
                                       and cb.cod_aditivo = 238))
              loop
                if nvl(c_proc.ind_regulamentado, 'N') = 'N' and nvl(c_proc.ind_rol_nreg, 'N') != 'S' then
                   GravaGlosa(rsReembolso.Num_Reembolso,v_cod_motivo_glosa,c_proc.num_seq_item,c_proc.cod_procedimento_cm,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                   if p_cod_retorno = 9 then return; end if;
                end if;
              end loop;
        end if;

        v_posicao := 421;
        for c_itens
        in ( select distinct cod_procedimento,     num_seq_item
                  , cod_procedimento_cm,           val_aprovado
                  , cod_grupo_estatistico,         ind_tipo_composicao
                  , cod_reembolso,				   val_calculado
                  , ind_negociacao_prest
                  , data_atendimento
                  , cod_especialidade
             from   procedimento_reembolso
             where  num_reembolso          = p_num_reembolso
             and    nvl(ind_situacao,'A')  not in ('N','C')
           )
        loop
            v_posicao := 430;

            if nvl(c_itens.ind_negociacao_prest,'N') = 'N' then
                ------------------------------------------------------------------------
                --- Glosa: 180 - Beneficiário excluído com data de atendimento anterior a exclusão
                ------------------------------------------------------------------------
                    v_cod_motivo_glosa := 180;
                    v_posicao := 431;

                    if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

                    if ((v_ind_situacao = 'E') and (c_itens.data_atendimento >= (v_data_exclusao - 365) and c_itens.data_atendimento <= v_data_exclusao)) then

                        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa, null,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                        if p_cod_retorno = 9 then
                          return;
                        end if;
                    end if;
                end if;
                ------------------------------------------------------------------------
                --- Glosa: 182 - Procedimento realizado na rede credenciada
                ------------------------------------------------------------------------
                --
                   v_cod_motivo_glosa := 182;
                   v_posicao := 431;
                   v_existe_credenciado:= null;
                   if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                   --
                   begin
                     select cod_prestador_ts
                       into v_cod_prestador_ts
                       from ts.entidade_sistema  es
                              , ts.prestador_servico ps
                      where ((es.num_cgc = rsReembolso.Num_Insc_Fiscal) or (es.num_cpf = rsReembolso.Num_Insc_Fiscal))
                        and es.cod_entidade_ts   = ps.cod_entidade_ts
                     ;
                   exception
                      when no_data_found then
                         goto nao_valida_182;
                   end;
                   --
                   crt_utl_base.cr_obtem_procedimento
                            ( c_itens.data_atendimento,
                              null,                       c_itens.cod_procedimento,   v_tipo,
                              v_ind_cobertura,            v_ind_autorizacao,          v_dt_ini_ap,
                              v_ind_emergencia,           v_ind_internacao,           v_ind_day_hospital,
                              v_sem_acrescimo_emergencia, v_cod_padrao,
                              v_ind_material,             v_ind_taxa,                 v_ind_residencia,
                              v_ind_medicamento,          v_ind_gasoterapia,          v_ind_diarias,
                              v_ind_remocao,              v_ind_cirurgia,             v_ind_centro_cirurgico,
                              v_cc_ind_material,          v_cc_ind_taxa,
                              v_cc_ind_honorarios,        v_cc_ind_gasoterapia,       v_ind_nao_internado,
                              v_ind_sexo,                 v_ind_limite_idade,         v_ind_limite_idade_ate,
                              v_qtd_sessoes,              v_qtd_limite,               v_qtd_dias_periodo,
                              v_qtd_limite_int,           v_qtd_dias_periodo_int,     v_qtd_dias_validade,
                              v_ind_especial,             v_cobranca_isolada,
                              v_cod_grupo_estatistico,    v_cod_grupo_estatistico_pai,
                              v_cod_especialidade_amb,    v_cod_subgrupo_amb,         v_cod_capitulo_amb,
                              v_qtd_vezes_permitida,      v_qtd_vezes_permitida_int,
                              v_ind_autorizacao_pos,      v_qtd_autorizador_dia_pos,  v_qtd_nao_int_pdia,
                              v_qtd_int_pdia,             v_ind_controle_por,         v_ind_critica_em,
                              v_msg_retorno,              v_cod_retorno);
                   --
                   if v_cod_retorno = 0 and v_tipo = 'P' then
                      begin
                         select ip.item_medico
                           into v_item_medico_valida
                           from itens_pacotes_dependentes ip
                          where ip.cod_pacote = c_itens.cod_procedimento
                         ;
                      exception
                        when others then
                            v_item_medico_valida := c_itens.cod_procedimento;
                      end;
                   else
                      v_item_medico_valida := c_itens.cod_procedimento;
                   end if;
                   --
                   if c_itens.cod_especialidade is null then
                        CRT_UTL_BASE.CR_HABILITACAO_ESPECIALIDADE ( v_cod_prestador_ts,
                                                                    rsReembolso.Cod_Plano,
                                                                    rsReembolso.Cod_Rede,
                                                                    rsReembolso.Cod_Operadora_Contrato,
                                                                    v_item_medico_valida,
                                                                    c_itens.data_atendimento,
                                                                    v_ind_internado,
                                                                    rsReembolso.Ind_Carater,
                                                                    v_msg_retorno,
                                                                    v_cod_retorno);
                      --
                   else
                        CRT_UTL_BASE.CR_HAB_ESPECIALIDADE_COD_ESP ( v_cod_prestador_ts,
                                            rsReembolso.Cod_Plano,
                                            rsReembolso.Cod_Rede,
                                            rsReembolso.Cod_Operadora_Contrato,
                                            v_item_medico_valida,
                                            c_itens.cod_especialidade,
                                            c_itens.data_atendimento,
                                            v_ind_internado,
                                            rsReembolso.Ind_Carater,
                                            v_msg_retorno,
                                            v_cod_retorno);
                      --
                   end if;
                   --
                  if v_cod_retorno = 9 then
                     p_cod_retorno := 9;
                     p_msg_retorno := v_msg_retorno;
                     return;
                  elsif v_cod_retorno = 0 then
                        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa, c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                     if p_cod_retorno = 9 then
                        return;
                      end if;
                  elsif v_cod_retorno != 0 then
                     --
                     begin
                        select c.val_parametro
                          into v_ind_utiliza_concessao
                          from ts.controle_sistema c
                         where c.cod_parametro = 'IND_UTILIZACAO_CONCESSAO'
                        ;
                     exception
                        when no_data_found then
                            v_ind_utiliza_concessao := 'S';
                     end;
                       --
                     if v_ind_utiliza_concessao = 'S' then
                        --------------------
                        -- Validar Concessao
                        --------------------
                        crt_utl_base.cr_hab_especialidade_concessao  ( p_cod_prestador_ts   => v_cod_prestador_ts
                                                                     , p_cod_plano          => rsReembolso.Cod_Plano
                                                                     , p_cod_rede           => rsReembolso.Cod_Rede
                                                                     , p_cod_operadora      => rsReembolso.Cod_Operadora_Contrato
                                                                     , p_num_contrato       => rsReembolso.num_contrato
                                                                     , p_cod_procedimento   => v_item_medico_valida
                                                                     , p_dt_atendimento     => c_itens.data_atendimento
                                                                     , p_msg_retorno        => v_msg_retorno
                                                                     , p_cod_retorno        => v_cod_retorno
                                                                     );
                      --
                        if v_cod_retorno = 9 then
                           p_cod_retorno := 9;
                           p_msg_retorno := v_msg_retorno;
                           return;
                        elsif v_cod_retorno = 0 then
                        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa, c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                           if p_cod_retorno = 9 then
                              return;
                           end if;
                      end if;
                    end if;
                  --
                  end if; --elsif v_cod_retorno != 0 then
                end if;
               <<nao_valida_182>>
                ------------------------------------------------------------------------
                --- Glosa: 341 - Cobertura Reembolso
                ------------------------------------------------------------------------
                if NVL(c_itens.cod_reembolso,0) = 0 then
                    v_cod_motivo_glosa := 341;
                    v_posicao := 440;

                    if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

                        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa, c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                        if p_cod_retorno = 9 then return; end if;
                    end if;
                end if;
                ------------------------------------------------------------------------
                --- Glosa: 435 - Serviço inexistente
                ------------------------------------------------------------------------
                v_cod_motivo_glosa := 435;
                v_posicao := 450;

                if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                    select count(*)
                    into   v_qtd_valida
                    from   itens_medicos
                    where  item_medico = c_itens.cod_procedimento_cm;
                    --
                    if v_qtd_valida = 0 then
                        --
                        v_posicao := 460;

                        select count(*)
                        into   v_qtd_valida
                        from   itens_medicos
                        where  item_medico = c_itens.cod_procedimento;
                        --
                        if v_qtd_valida = 0 then
                            --
                            v_posicao := 470;

                            select count(*)
                            into   v_qtd_valida
                            from   itens_servicos
                            where  item_servico = c_itens.cod_procedimento_cm;
                            --
                            if v_qtd_valida = 0 then
                                v_posicao := 480;

                                select count(*)
                                into   v_qtd_valida
                                from   itens_servicos
                                where  item_servico = c_itens.cod_procedimento;
                --
                                if v_qtd_valida = 0 then
                                   v_posicao := 481;

                                   select count(*)
                                     into v_qtd_valida
                                     from item_mat_med
                                    where cod_item_mat_med = c_itens.cod_procedimento_cm;
                                   --
                                   if v_qtd_valida = 0 then
                                      v_posicao := 482;

                                      select count(*)
                                        into v_qtd_valida
                                        from item_mat_med
                                       where cod_item_mat_med = c_itens.cod_procedimento;
                                      --
                                   end if;
                                end if;
                            end if;
                        end if;
                    end if;
                    --
                    if v_qtd_valida = 0 then
                        v_posicao := 490;

                        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                        if p_cod_retorno = 9 then return; end if;
                    end if;
                end if;
                --
                ------------------------------------------------------------------------
                --- verifica se contrato estava inadimplente na data do atendimento
                --- de algum procedimento que tenha valor aprovado
                --- Glosa: 762
                ------------------------------------------------------------------------
                v_cod_motivo_glosa := 762;
                v_posicao := 500;

                if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                    if rsReembolso.dt_pedido is not null then
                        v_posicao := 510;

                        SUR_VERIFICA_INADIM_ASSOC (rsReembolso.cod_ts,
                                                   rsReembolso.dt_pedido,
                                                   v_ind_situacao_sur, -- A - Ativo / -- I - Inadimplente
                                                   v_ind_erro_out,
                                                   v_msg_retorno_out);

                        if v_ind_erro_out <> '0'  then
                            p_cod_retorno     := v_ind_erro_out;
                            p_msg_retorno     := v_msg_retorno_out;
                            return;
                        end if;
                        --
                        if v_ind_situacao_sur = 'I'  then
                            v_posicao := 520;

                            GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                            if p_cod_retorno = 9 then return; end if;
                        end if;
                        --
                    end if;
                end if;
                --
                ------------------------------------------------------------------------
                --- Glosa: 616 - serviço / procedimento não codificado
                ------------------------------------------------------------------------
                v_cod_motivo_glosa := 616;
                v_posicao := 530;

                if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                    if (c_itens.cod_procedimento_cm is null) or (c_itens.cod_procedimento_cm = '00000000') then
                        v_posicao := 540;

                        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                        if p_cod_retorno = 9 then return; end if;
                    end if;
                end if;
                --
                ------------------------------------------------------------------------
                --- Glosa: 760 - beneficiário em carência
                ------------------------------------------------------------------------
                v_cod_motivo_glosa := 760;
                v_posicao := 550;

                if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                    --------------------------------------------------------------------------------
                    --- Recuperar Grupo Estatistico PAI
                    --------------------------------------------------------------------------------
                    v_cod_grupo_estatistico_pai  := CM_OBTEM_GE_PAI(c_itens.cod_grupo_estatistico);
                    if nvl(v_cod_grupo_estatistico_pai,v_item_vazio) = v_item_vazio then
                        v_cod_grupo_estatistico_pai := c_itens.cod_grupo_estatistico;
                    end if;
                    --
                    --- verifica carência para realização do procedimento
                    v_posicao := 560;

                    crt_utl_base.cr_valida_carencia  ( rsReembolso.cod_ts,         c_itens.data_atendimento,
                                                       c_itens.cod_procedimento_cm,   v_cod_grupo_estatistico_pai,
                                                       rsReembolso.cod_tratamento, null,
                                                       p_msg_retorno,              p_cod_retorno
                                                       );

                    if p_cod_retorno = 9 then return;
                    elsif p_cod_retorno <> 0 then
                        v_posicao := 570;

                        GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                        if p_cod_retorno = 9 then return; end if;
                    end if;
                    --
                    ---- verifica com o grupo estatístico do procedimento
                    if c_itens.cod_grupo_estatistico <> v_cod_grupo_estatistico_pai then
                        v_posicao := 580;

                        crt_utl_base.cr_valida_carencia  ( rsReembolso.cod_ts,         rsReembolso.dt_pedido,
                                                           c_itens.cod_procedimento,   c_itens.cod_grupo_estatistico,
                                                           rsReembolso.cod_tratamento, null,
                                                           p_msg_retorno,              p_cod_retorno
                                                           );

                        if p_cod_retorno = 9 then
                            return;
                        elsif p_cod_retorno <> 0 then
                            v_posicao := 590;

                            GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                            if p_cod_retorno = 9 then return; end if;
                        end if;
                    end if;
                end if;
                --
                v_posicao := 600;

                --
                begin
                    ------------------------------------------------------------------------
                    --- Recuperar informações do item
                    ------------------------------------------------------------------------
                    select ind_sexo,        ind_limite_idade_ate,    ind_limite_idade,   tipo_item
                    into   v_ind_sexo_proc, v_ind_limite_idade_ate,  v_ind_limite_idade, v_tipo_item
                    from   vwm_procedimento
                    where item_medico = c_itens.cod_procedimento;
                    --
                    ------------------------------------------------------------------------
                    --- Glosa: 586 - Procedimento sem cobertura pela operadora
                    ------------------------------------------------------------------------
                    v_cod_motivo_glosa := 586;
                    v_posicao := 610;

                    if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                        begin
                           select nvl(ind_cobertura,'N'),       nvl(ind_rol_procedimentos,'N')
                                    into v_ind_cobertura_procedimento, v_ind_rol_procedimentos
                               from itens_medicos
                                    where item_medico = c_itens.cod_procedimento;
                        exception
                            when no_data_found then
                                begin
                                    select  'S','S'
                                    into    v_ind_cobertura_procedimento, v_ind_rol_procedimentos
                                    from    item_mat_med
                                    where   cod_item_mat_med = c_itens.cod_procedimento
                                    and      ind_tipo_mat_med in ('1','2');
                                exception
                                    when others then
                                         v_ind_cobertura_procedimento := 'N';
                                end;
                            when others then
                                v_ind_cobertura_procedimento := 'N';

                        end;

                        if nvl(v_ind_cobertura_procedimento,'N') = 'N' and nvl(v_ind_rol_procedimentos,'N') = 'N'  then
                            v_posicao := 620;

                            GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                            if p_cod_retorno = 9 then return; end if;
                        end if;
                    end if;
                    ------------------------------------------------------------------------
                    --- Verificar Sexo
                    ------------------------------------------------------------------------
                    v_posicao := 630;

                    crt_utl_base.cr_valida_sexo (rsReembolso.ind_sexo,      c_itens.cod_Procedimento,
                                                 v_ind_sexo_proc,           rsReembolso.cod_tratamento,
                                                 p_msg_retorno,             p_cod_retorno);

                    if p_cod_retorno = 9 then return;
                    elsif p_cod_retorno <> 0 AND p_cod_retorno <> 1 then
                        if p_cod_retorno = 3 then
                            ------------------------------------------------------------------------
                            --- 567 - Sexo beneficiário incompativel com especialidade/procedimento
                            ------------------------------------------------------------------------
                            v_cod_motivo_glosa := 567;
                            v_posicao := 640;

                            if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                                if p_cod_retorno = 9 then return; end if;
                            end if;
                        else
                            ------------------------------------------------------------------------
                            --- 566 - Tipo de tratamento incompatível com sexo do beneficiário
                            ------------------------------------------------------------------------
                            v_cod_motivo_glosa := 566;
                            if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                                v_posicao := 650;

                                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                                if p_cod_retorno = 9 then return; end if;
                            end if;
                        end if;
                    end if;
                    ------------------------------------------------------------------------
                    --- verifica limites de idade
                    ------------------------------------------------------------------------
                    v_posicao := 660;

                    if rsReembolso.data_nascimento is not null then
                        v_posicao := 670;

                        crt_utl_base.cr_valida_idade (rsReembolso.data_nascimento,  v_ind_limite_idade,
                                                      v_ind_limite_idade_ate,       c_itens.cod_procedimento,
                                                      p_msg_retorno,                p_cod_retorno);

                        if p_cod_retorno in(1,9) then return;
                        elsif p_cod_retorno <> 0 then
                            if p_cod_retorno = 2 then
                                ------------------------------------------------------------------------
                                --- 554 - Idade inferior ao permitido para o procedimento
                                ------------------------------------------------------------------------
                                v_cod_motivo_glosa := 554;
                                v_posicao := 680;

                                if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                                    v_posicao := 690;

                                    GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                                    if p_cod_retorno = 9 then
                                        return;
                                    end if;
                                end if;
                            else
                                ------------------------------------------------------------------------
                                --- 555 - Idade superior ao permitido para o procedimento
                                ------------------------------------------------------------------------
                                v_cod_motivo_glosa := 555;
                                v_posicao := 700;

                                if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                                    v_posicao := 710;

                                    GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                                    if p_cod_retorno = 9 then return; end if;
                                end if;
                            end if;
                        end if;
                    end if;
                    --
                    ------------------------------------------------------------------------
                    --- 600 - Verifica se procedimento consta no ROL da ANS
                    ------------------------------------------------------------------------
                    v_posicao := 710;

                    v_cod_motivo_glosa := 600;
                    if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
                        if v_tipo_item = 'I' then
                            begin
                                select nvl(ind_rol_procedimentos,'N')
                                into   v_ind_rol_procedimentos
                                from   itens_medicos
                                where  item_medico = c_itens.cod_procedimento;
                            exception
                            when no_data_found then
                                v_ind_rol_procedimentos := 'N';
                            end;
                            --
                            v_posicao := 720;

                            if v_ind_rol_procedimentos = 'N' then
                                v_posicao := 730;

                                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
                                if p_cod_retorno = 9 then return; end if;
                            end if;
                        end if;
                    end if;
                    --
                exception
                when no_data_found then
                    NULL;
                end;
                --
            end if;
			------------------------------------------------------------------------
			------- Glosa: 1571 - Valida atendimentos superiores a 1 ano (365 dias)
			------------------------------------------------------------------------
			v_cod_motivo_glosa := 1571;
			v_posicao := 750;
			--
			if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
			  if ts.rb_trata_glosa.ValidaPrazoAtendimentoUmAno(c_itens.data_atendimento) = 0 then
				  GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,c_itens.num_seq_item,c_itens.cod_procedimento,SYSDATE,p_cod_usuario,null,p_cod_retorno,p_msg_retorno);
				if p_cod_retorno = 9 then return; end if;
			  end if;
			end if;
			--
        end loop;
        --
        ------------------------------------------------------------------------
        --- VALIDAR OS CIDS
        ------------------------------------------------------------------------
        v_posicao          := 740;
        v_cod_motivo_glosa := 360;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 and rsReembolso.ind_situacao <> '32' then
           /*
             Existem CIDs lançados para o Pedido Recebimento Procedimento CID
             que não existem na tabela de cadastro de Procedimentos X CID,
           */

            FOR ITEM IN  (select pr.cod_procedimento_cm, pr.num_seq_item
                                     from   procedimento_reembolso pr inner join itens_medicos im on im.item_medico  = pr.cod_procedimento_cm
                                                                                                  and im.ind_diretriz = 'S'
                                     where  pr.num_reembolso = p_num_reembolso
                                     and exists (select prpc.item_medico
                                                 from   PROCEDIMENTO_REEMBOLSO_CID prpc
                                                  where prpc.item_medico = pr.cod_procedimento_cm
                                                 )
                                     union
                                     select pr.cod_procedimento cod_procedimento_cm, pr.num_seq_item
                                     from   procedimento_reembolso pr inner join itens_medicos im on im.item_medico  = pr.cod_procedimento
                                                                                                  and im.ind_diretriz = 'S'
                                     where  pr.num_reembolso = p_num_reembolso
                                     and exists (select prpc.item_medico
                                                 from   PROCEDIMENTO_REEMBOLSO_CID prpc
                                                  where prpc.item_medico = pr.cod_procedimento
                                                 )

                                      )
             LOOP
                 v_qtd_cid := 0;
                 begin
                 select count(*)
                       into v_qtd_cid
                 from    pedido_reemb_proc_cid prp , PROCEDIMENTO_REEMBOLSO_CID prpc
                 where   prp.item_medico =  prpc.item_medico
                         and prp.cod_cid = prpc.cod_cid
                         and prp.num_reembolso = p_num_reembolso
                         and prpc.item_medico  = ITEM.COD_PROCEDIMENTO_CM;

                exception
                    when OTHERS then
                        v_qtd_cid := 0;
                end;

                if v_qtd_cid = 0 then
                   v_txt_complemento := '';
                   GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,ITEM.num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                    if p_cod_retorno = 9 then
                       return;
                    end if;
                end if;

             END LOOP;

        end if;

        ------------------------------------------------------------------------
        --- VALIDAR CADASTRO NA ESPECIALIDADE INCORRETA
        ------------------------------------------------------------------------
        v_posicao          := 780;
        v_cod_motivo_glosa := 1583;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

            for item in  ( select pr.cod_procedimento_cm, pr.num_seq_item, pr.data_atendimento, pr.cod_especialidade
                             from procedimento_reembolso pr
                             join ts.pedido_reembolso a on pr.num_reembolso = a.num_reembolso
                            where pr.cod_procedimento_cm = '10101012'
                              and pr.cod_especialidade in (70,45,87)
                              and pr.num_reembolso = p_num_reembolso
                              and a.ind_sexo = 'M'
                           )
             loop
                v_txt_complemento := '';
                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,ITEM.num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then
                    return;
                end if;

             end loop;

        end if;

        ------------------------------------------------------------------------
        --- VALIDAR CONSULTAS INFERIORES A 15 DIAS Nutricionista  50000560 / 60101016
        ------------------------------------------------------------------------
        v_posicao          := 745;
        v_cod_motivo_glosa := 1590;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0  then

           for item in  (select pr.cod_procedimento_cm, pr.num_seq_item
                            from procedimento_reembolso pr
                           where pr.num_reembolso = p_num_reembolso
                             and pr.cod_procedimento_cm in('50000560','60101016')
                             and exists ( select 1
                                            from ts.pedido_reembolso a, ts.situacao_reembolso s
                                           where a.ind_situacao = s.cod_situacao
                                             and a.num_associado = rsReembolso.num_associado
                                             and a.num_reembolso <> p_num_reembolso
                                             and exists (select 1 from procedimento_reembolso b
                                                          where b.num_reembolso = a.num_reembolso
                                                            and b.cod_procedimento_cm in('50000560','60101016')
                                                            and s.cod_situacao  in (34, 37, 36)
                                                            and b.data_atendimento between pr.data_atendimento - 15 and pr.data_atendimento + 15
                                        )
                                        )
                        )
             loop
                v_txt_complemento := '';
                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,ITEM.num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then
                    return;
                end if;
             end loop;
        end if;
        ------------------------------------------------------------------------
        --- VALIDAR CONSULTAS INFERIORES A 30 DIAS
        ------------------------------------------------------------------------
        v_posicao          := 750;
        v_cod_motivo_glosa := 1580;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

            for item in  (select pr.cod_procedimento_cm, pr.num_seq_item
                            from procedimento_reembolso pr
                           where pr.num_reembolso = p_num_reembolso
                             and pr.cod_procedimento_cm = '10101012'
                             and pr.cod_especialidade not in (10, 70, 45, 12)
                             and exists ( select 1
                                            from ts.pedido_reembolso a, ts.situacao_reembolso s
                                           where a.ind_situacao = s.cod_situacao
                                             and a.num_associado = rsReembolso.num_associado
                                             and a.num_reembolso <> p_num_reembolso
                                             and s.alias_status_reembolso in ('PAGAMENTO_LIBERADO')
                                             and (a.num_insc_fiscal = rsReembolso.num_insc_fiscal
                                                  or (    a.num_crm = rsReembolso.num_crm
                                                      and a.sigla_conselho = rsReembolso.sigla_conselho
                                                      and a.uf_conselho = rsReembolso.uf_conselho )
                                              )
                                             and exists (select 1 from procedimento_reembolso b
                                                          where b.num_reembolso = a.num_reembolso
                                                            and b.cod_procedimento_cm = '10101012'
                                                            and b.cod_especialidade = pr.cod_especialidade
                                                            and b.data_atendimento between pr.data_atendimento - 30 and pr.data_atendimento + 30
                                                        )
                                        )
                        )
             loop
                v_txt_complemento := '';
                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,ITEM.num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then
                    return;
                end if;

             end loop;

        end if;

        --
        --
    ------------------------------------------------------------------------
    --- VALIDAR IDADE ACIMA DE 60 PARA ESPECIALIDADE DE GERIATRIA
    ------------------------------------------------------------------------
        v_posicao          := 760;

        v_cod_motivo_glosa := 1581;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

            v_posicao          := 765;

             for item in  ( select pr.cod_procedimento_cm, pr.num_seq_item, pr.data_atendimento, pr.cod_especialidade
                              from procedimento_reembolso pr
                             join ts.pedido_reembolso a on pr.num_reembolso = a.num_reembolso
                               where pr.cod_procedimento_cm = '10101012'
                               and pr.cod_especialidade = 5
                               and pr.num_reembolso = p_num_reembolso
                               and(ts.ts_calcula_idade(a.data_nascimento, pr.data_atendimento, 'A') < 60)
                           )
             loop

                v_txt_complemento := '';
                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,ITEM.num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);

                if p_cod_retorno = 9 then
                    return;
                end if;

             end loop;

        end if;
        --
        --
        ------------------------------------------------------------------------
        --- VALIDAR IDADE BAIXO DE 18 PARA ESPECIALIDADE DE PEDIATRIA
        ------------------------------------------------------------------------
        v_posicao          := 770;

        v_cod_motivo_glosa := 1582;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

            v_posicao          := 775;

             for item in  ( select pr.cod_procedimento_cm, pr.num_seq_item, pr.data_atendimento, pr.cod_especialidade
                              from procedimento_reembolso pr
                             join ts.pedido_reembolso a on pr.num_reembolso = a.num_reembolso
                               where pr.cod_procedimento_cm = '10101012'
                               and pr.cod_especialidade = 10
                               and pr.num_reembolso = p_num_reembolso
                               and(ts.ts_calcula_idade(a.data_nascimento, pr.data_atendimento, 'A') >= 18)
                           )
             loop

                v_txt_complemento := '';
                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,ITEM.num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);

                if p_cod_retorno = 9 then
                    return;
                end if;

             end loop;

        end if;

        ------------------------------------------------------------------------
        --- VALIDAR CONSULTAS REALIZADAS NO DOMINGO / FERIADO NACIONAL
        ------------------------------------------------------------------------
        v_posicao          := 780;

        v_cod_motivo_glosa := 1584;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

            v_posicao          := 785;

             for item in  ( select pr.cod_procedimento_cm, pr.num_seq_item, pr.data_atendimento
                              from procedimento_reembolso pr
                              join ts.pedido_reembolso a on pr.num_reembolso = a.num_reembolso
                             where pr.cod_procedimento_cm = '10101012'
                               and pr.num_reembolso = p_num_reembolso
                               AND (EXISTS (
                                     SELECT 1
                                       FROM ts.feriado_sur
                                      WHERE ind_tipo_feriado = 'N'
                                        AND dt_feriado = pr.data_atendimento)
                               OR TO_CHAR(pr.data_atendimento, 'D' ) = 1)
                           )
             loop

                v_txt_complemento := '';
                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,ITEM.num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);

                if p_cod_retorno = 9 then
                    return;
                end if;

             end loop;

        end if;
		------------------------------------------------------------------------
        --- VALIDAR IDADE ABAIXO DE 4 PARA ESPECIALIDADE DE ACUPUNTURA
        ------------------------------------------------------------------------
        v_posicao          := 800;

        v_cod_motivo_glosa := 1591;
        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then

            v_posicao          := 805;

             for item in  ( select pr.cod_procedimento_cm, pr.num_seq_item, pr.data_atendimento, pr.cod_especialidade
                              from procedimento_reembolso pr
                              join ts.pedido_reembolso a on pr.num_reembolso = a.num_reembolso
                             where pr.cod_procedimento_cm = '31601014'
                               and pr.num_reembolso = p_num_reembolso
                               and(ts.ts_calcula_idade(a.data_nascimento, pr.data_atendimento, 'A') < 4)
                           )
             loop

                v_txt_complemento := '';
                GravaGlosa(p_num_reembolso,v_cod_motivo_glosa,ITEM.num_seq_item,null,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);

                if p_cod_retorno = 9 then
                    return;
                end if;

             end loop;

        end if;
        --
        --
        ------------------------------------------------------------------------
        --- Glosa: 1593 - VALIDAR ATENDIMENTO COM DATA E HORÁRIO EM DUPLICIDADE
        ------------------------------------------------------------------------
        v_cod_motivo_glosa := 1593;
        v_posicao := 806;

        if VerificaGlosa(v_cod_motivo_glosa, rsReembolso.dt_pedido) = 0 then
            v_posicao := 807;
                for consultas in (
                    SELECT PRE.data_atendimento,
                           NVL2(PRE.hora_atendimento, SUBSTR(PRE.hora_atendimento, 1, 2) || ':' || SUBSTR(PRE.hora_atendimento, 3, 4), PRE.hora_atendimento) hora_atendimento,
                           NVL2(PRE.hora_alta, SUBSTR(PRE.hora_alta, 1, 2) || ':' || SUBSTR(PRE.hora_alta, 3, 4), PRE.hora_alta) hora_alta,
                           PRE.cod_procedimento_cm,
                           PRE.num_seq_item,
                           PDR.num_associado,
                           nvl(PRE.hora_atendimento, 0) hora_atendimento_2,
                           nvl(PRE.hora_alta,0) hora_alta_2
                    FROM ts.pedido_reembolso PDR,
                         ts.procedimento_reembolso PRE
                    WHERE PRE.num_reembolso = PDR.num_reembolso
                      AND (PRE.ind_dhe is null or PRE.ind_dhe = 'N')
                      AND PDR.num_reembolso = p_num_reembolso
                )
                loop
                    SELECT count(1)
                    INTO
                    v_qtd_reembolso
                    FROM ts.pedido_reembolso PDR,
                         ts.procedimento_reembolso PRE
                    WHERE PRE.num_reembolso = PDR.num_reembolso
                      AND PDR.num_associado = consultas.num_associado
                      AND PRE.data_atendimento = consultas.data_atendimento
                      AND (PRE.ind_dhe is null or PRE.ind_dhe = 'N')
                      AND PDR.IND_SITUACAO IN (34,36,37)
                      AND PDR.num_reembolso <> p_num_reembolso
                      AND ((PRE.hora_atendimento = consultas.hora_atendimento_2 OR PRE.hora_alta = consultas.hora_alta_2)
                           OR
                           consultas.hora_atendimento between NVL2(PRE.hora_atendimento, SUBSTR(PRE.hora_atendimento, 1, 2) || ':' || SUBSTR(PRE.hora_atendimento, 3, 4), PRE.hora_atendimento) and NVL2(PRE.hora_alta, SUBSTR(PRE.hora_alta, 1, 2) || ':' || SUBSTR(PRE.hora_alta, 3, 4), PRE.hora_alta)
                           OR
                           consultas.hora_alta between NVL2(PRE.hora_atendimento, SUBSTR(PRE.hora_atendimento, 1, 2) || ':' || SUBSTR(PRE.hora_atendimento, 3, 4), PRE.hora_atendimento) and NVL2(PRE.hora_alta, SUBSTR(PRE.hora_alta, 1, 2) || ':' || SUBSTR(PRE.hora_alta, 3, 4), PRE.hora_alta));

            if v_qtd_reembolso >= 1 then
                v_posicao := 808;
                GravaGlosa(rsReembolso.Num_Reembolso,v_cod_motivo_glosa,consultas.num_seq_item,consultas.cod_procedimento_cm,SYSDATE,p_cod_usuario,v_txt_complemento,p_cod_retorno,p_msg_retorno);
                if p_cod_retorno = 9 then
                  return;
                end if;
            end if;
            end loop;
        end if;
        --
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
    exception
    when others then
        p_cod_retorno := 9;
        p_msg_retorno := 'RB_REEMBOLSO::ValidaReembolso -> ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'Erro não previsto', 'Erro:' || chr(13) || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || chr(13) || 'p_num_reembolso:' || chr(13) || p_num_reembolso || ' p_cod_usuario: ' || p_cod_usuario , 'ValidaReembolso' );
    end ValidaReembolso;
    --
    --
    ----------------------------------------------------------------------------
    -- Chamar WebService para envio de FAX (Somente Maritima)
    ----------------------------------------------------------------------------
    procedure EnviarFax (p_num_reembolso    in number,
                         p_arq_aprovado     in varchar2,
                         p_arq_negado       in varchar2,
                         p_txt_depto        in varchar2,
                         p_txt_ddd          in varchar2,
                         p_txt_tel          in varchar2,
                         p_txt_ramal        in varchar2,
                         p_cod_retorno      out number,
                         p_msg_retorno      out varchar2)
    is
        --
        v_XML                   CLOB;
        v_resultado             varchar2(4000);
        v_wsdl_url              controle_sistema.val_parametro%type;
        --
    begin
        --
        --Montar XML para chamada do WebService
        v_XML := '<m:DadosFax xmlns:m="http://tempuri.org/WSTeledata/recepcaofax">';
        v_XML := v_XML || '<m:Depto>' || p_txt_depto || '</m:Depto>';
        v_XML := v_XML || '<m:DDD>' || p_txt_ddd || '</m:DDD>';
        v_XML := v_XML || '<m:Tel>' || p_txt_tel || '</m:Tel>';
        v_XML := v_XML || '<m:Ramal>' || p_txt_ramal || '</m:Ramal>';
        v_XML := v_XML || '<m:CodSolicita>2' || p_num_reembolso || '</m:CodSolicita>';
        --
        if NVL(p_arq_aprovado,'X') <> 'X' AND NVL(p_arq_negado,'X') <> 'X' then
            v_XML := v_XML || '<m:QdeDocs>02</m:QdeDocs>';
        else
            v_XML := v_XML || '<m:QdeDocs>01</m:QdeDocs>';
        end if;
        --
        if NVL(p_arq_aprovado,'X') <> 'X' AND NVL(p_arq_negado,'X') <> 'X' then
            v_XML := v_XML || '<m:Patch>' || p_arq_aprovado || ';' || p_arq_negado || '</m:Patch>';
            v_XML := v_XML || '<m:Orientacao>1;1</m:Orientacao>';
        elsif NVL(p_arq_aprovado,'X') <> 'X' then
            v_XML := v_XML || '<m:Patch>' || p_arq_aprovado || '</m:Patch>';
            v_XML := v_XML || '<m:Orientacao>1</m:Orientacao>';
        elsif NVL(p_arq_negado,'X') <> 'X' then
            v_XML := v_XML || '<m:Patch>' || p_arq_negado || '</m:Patch>';
            v_XML := v_XML || '<m:Orientacao>1</m:Orientacao>';
        end if;
        --
        v_XML := v_XML || '<m:Sistema>TOPSAUDE</m:Sistema>';
        v_XML := v_XML || '</m:DadosFax>';
        --
        ------------------------------------------------------------------------
        -- RECUPERAR A URL DO WSDL
        ------------------------------------------------------------------------
        RetornaParametro ('TS_WSDL_URL_FAX', v_wsdl_url, 'http://10.1.1.149/recepcaofax.WSDL');
        --
        --Chamar o WebService do FAX
        CALL_WS(v_wsdl_url,
                'http://tempuri.org/WSTeledata/recepcaofax/',
                'recepcaofax',
                'recepcaofaxSoap',
                'DadosFax',
                v_XML,
                v_resultado,
                p_cod_retorno,
                p_msg_retorno);
        --
    exception
        when others then
            raise_application_error( -20001 , 'EnviarFax - Ocorreu o seguinte erro: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')');
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar a data atual do sistema
    ----------------------------------------------------------------------------
    procedure RetornaData (p_cod_formato in varchar2, p_data out varchar2)
    is

    begin

        begin
            SELECT TO_CHAR(SYSDATE, NVL(p_cod_formato,'DD/MM/YYYY')) into p_data
              FROM dual;
        exception
            when OTHERS then
                p_data := null;
        end;

        return;
    end;
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com as informações das Ocorrências
    ----------------------------------------------------------------------------
    procedure RetornaOcorrencia(p_num_reembolso in  number, p_xml_retorno out clob)
    is
        --Declarações:
        v_SQL                   varchar2(4000);
    begin
        --Validação
        IF NVL(p_num_reembolso,0) = 0 THEN
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<OCORRENCIA><DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Número do reembolso não informado</MSG_RETORNO>';
            p_xml_retorno := p_xml_retorno || '</DADOS></OCORRENCIA>';
            return;
        END IF;
        --
        --Monta XML das participações
        v_SQL :=  trim (' SELECT DISTINCT a.cod_tipo_ocorrencia                                     ')
              || rtrim ('      , a.cod_usuario                                                      ')
              || rtrim ('      , nvl(u.nom_usuario,a.cod_usuario) nome_usuario                      ')
              || rtrim ('      , a.txt_obs                                                          ')
              || rtrim ('      , a.txt_obs_reembolso                                                ')
              || rtrim ('      , b.nom_tipo_ocorrencia                                              ')
              || rtrim ('      , a.dt_ocorrencia dt_ocorrencia_ordem                                ')
              || rtrim ('      , to_char(a.dt_ocorrencia,''DD/MM/YYYY HH24:MI'') dt_ocorrencia      ')
              || rtrim (' from   reembolso_ocorrencia        a                                      ')
              || rtrim ('      , reembolso_tipo_ocorrencia   b                                      ')
              || rtrim ('      , usuario                     u                                      ')
              || rtrim (' where a.num_reembolso              = :num_reembolso                       ')
              || rtrim (' and a.cod_tipo_ocorrencia          = b.cod_tipo_ocorrencia                ')
              || rtrim (' and a.cod_usuario                  = u.cod_usuario (+)                    ')
              || rtrim (' order by dt_ocorrencia_ordem desc, cod_tipo_ocorrencia                    ');
        --
        add_parametro_sql ( p_nome_parametro => 'num_reembolso' , p_valor_parametro => p_num_reembolso );
        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'OCORRENCIA'
                                   , p_nome_coluna    => 'DADOS'
                                   );
        --
        return;
        --
    EXCEPTION
    WHEN OTHERS THEN
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<OCORRENCIA><DADOS>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
        p_xml_retorno := p_xml_retorno || '</DADOS></OCORRENCIA>';
        return;
    END;
    ----------------------------------------------------------------------------
    -- Gerar ocorrência do reembolso informada
    ----------------------------------------------------------------------------
    PROCEDURE GeraOcorrencia(p_num_reembolso         in   number,
                             p_cod_ocorrencia        in   number,
                             p_txt_obs               in   varchar2,
                             p_txt_reembolso         in   varchar2,
                             p_cod_usuario           in   varchar2,
                             p_cod_retorno           out  number,
                             p_msg_retorno           out  varchar2,
                             p_num_seq_item          in   number DEFAULT 0) is
    begin
        --
        if nvl(p_num_reembolso,0) = 0 then
            p_cod_retorno := 1;
            p_msg_retorno := 'Reembolso não informado';
            return;
        end if;
        --
        if nvl(p_cod_ocorrencia,0) = 0 then
            p_cod_retorno := 1;
            p_msg_retorno := 'Tipo de ocorrência não informado';
            return;
        end if;
        --
        begin
            insert into reembolso_ocorrencia
                            (num_reembolso,       dt_ocorrencia,           cod_tipo_ocorrencia,
                             cod_usuario,         txt_obs,                 txt_obs_reembolso
                             --,
                             --num_seq_item
                             )
                 values     (p_num_reembolso,     sysdate,                 p_cod_ocorrencia,
                             p_cod_usuario,       p_txt_obs,               p_txt_reembolso
                             --,
                             --NVL(p_num_seq_item,0)
                             );
        exception
        when dup_val_on_index then
             null;
        end;
        --
        p_cod_retorno := 0;
        p_msg_retorno := null;
        --
    exception
    when others then
         p_cod_retorno := 9;
         p_msg_retorno := 'GeraOcorrencia - ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
         --rollback;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar RecordSet com o último número da sequência dos itens para um
    -- reembolso informada
    ----------------------------------------------------------------------------
    function RetornaUltimoSeqItem (p_num_reembolso  in number) return sys_refcursor
    is

    c   sys_refcursor;

    begin
        --
        open c
        for  select max(num_seq_item)
             from   procedimento_reembolso
             where  num_reembolso = p_num_reembolso;
        --
        return c;
    end;
    --
    --

    -----------------------------------------------------------------------------------
    -- Retornar se já houve Reembolso solicitado evitando a duplicidade de solicitacao
    -----------------------------------------------------------------------------------
    procedure RetornaDuplicidade (p_num_associado     in ts.pedido_reembolso.num_associado%type
                                 ,p_val_informado     in ts.pedido_reembolso.val_informado%type
                                 ,p_dt_comprovante    in ts.pedido_reembolso.dt_comprovante%type
                                 ,p_num_insc_fiscal   in ts.pedido_reembolso.num_insc_fiscal%type
                                 ,p_num_crm           in ts.pedido_reembolso.num_crm%type
                                 ,p_cod_especialidade in ts.procedimento_reembolso.cod_especialidade%type default null
                                 ,p_num_reembolso     in ts.pedido_reembolso.num_reembolso%type
                                 ,p_protocolos       out varchar2
                                 ,p_qtd_reemb        out number
                                )
    is

    v_reembolso_duplicado varchar2(3000);
    v_protocolo           varchar2(2000);
    v_qtd_reemb           number;

    begin
      --
      v_reembolso_duplicado := null;
      v_protocolo           := null;
      v_qtd_reemb           := 0;

      if (p_cod_especialidade is not null) then

        FOR protocolo IN (
          select count(1), p.num_protocolo_ans
                    from pedido_reembolso p
                        ,procedimento_reembolso pr
                   where p.num_associado = p_num_associado
                     and p.val_informado = p_val_informado
                     and nvl(p.num_insc_fiscal, null) = p_num_insc_fiscal
                     and (p.num_crm = nvl(p_num_crm,p.num_crm) or p.num_crm is null)
                     and trunc(p.dt_comprovante) between trunc(sysdate -365) and trunc(sysdate)
                     and trunc(p.dt_comprovante) = trunc(p_dt_comprovante)
                     and p.num_reembolso = pr.num_reembolso(+)
                     and (pr.cod_especialidade = nvl(p_cod_especialidade,pr.cod_especialidade) or pr.cod_especialidade is null)
                     and p.ind_tipo_reembolso = 1
                     and p.ind_situacao not in (33,39,26,27)
                     and p.num_reembolso <> p_num_reembolso
                group by p.num_protocolo_ans
        )
        LOOP
          v_qtd_reemb := v_qtd_reemb + 1;
          v_protocolo := nvl(v_protocolo,'') || nvl(protocolo.num_protocolo_ans,'') || ' ' ;
        END LOOP;

      else

        FOR protocolo IN (
           select count(1), p.num_protocolo_ans
              from pedido_reembolso p
             where p.num_associado = p_num_associado
               and p.val_informado = p_val_informado
               and nvl(p.num_insc_fiscal, null) = p_num_insc_fiscal
               and (p.num_crm = nvl(p_num_crm,p.num_crm) or p.num_crm is null)
               and trunc(p.dt_comprovante) between trunc(sysdate -365) and trunc(sysdate)
               and trunc(p.dt_comprovante) = trunc(p_dt_comprovante)
              --and p.ind_tipo_reembolso in (2,3)
               and p.ind_situacao not in (33,39,26,27)
               and p.num_reembolso <> p_num_reembolso
          group by p.num_protocolo_ans )
        LOOP
          v_qtd_reemb := v_qtd_reemb + 1;
          v_protocolo := nvl(v_protocolo,'') || nvl(protocolo.num_protocolo_ans,'') || ' ' ;
        END LOOP;

      end if;
      --
      v_reembolso_duplicado := 'Reembolso já solicitado, no(s) seguinte(s) protocolo(s): ' || v_protocolo;

      p_protocolos := v_reembolso_duplicado;
      p_qtd_reemb  := v_qtd_reemb;

    end;

    procedure getNumReembProtocolo ( p_num_protocolo  in varchar2
                                  , p_qtd_reembolsos  out number
                                  , p_num_reembolso  out number
                                  , p_cod_situacao   in number default null
                                  )
    is
    v_num_protocolo         varchar2(20);
    v_tamanho_reembolso     number;
        --
    begin
        p_qtd_reembolsos := 0;
        p_num_reembolso  := null;
        --
        select length(p_num_protocolo)
          into v_tamanho_reembolso
          from dual;
        --
        if v_tamanho_reembolso > 15 then
          select p.num_protocolo
            into v_num_protocolo
            from ts.protocolo_reembolso p
           where p.num_protocolo_ans = p_num_protocolo;
        else
          v_num_protocolo := p_num_protocolo;
        end if;
        --
        begin
            if p_cod_situacao is null then
                select count(*)
                into   p_qtd_reembolsos
                from   pedido_reembolso
                where  num_protocolo = v_num_protocolo;
            else
                select count(*)
                into   p_qtd_reembolsos
                from   pedido_reembolso
                where  num_protocolo = v_num_protocolo
                  and  ind_situacao  = p_cod_situacao;
            end if;
        exception
            when others then
                p_qtd_reembolsos := 0;
        end;
        --
        if p_qtd_reembolsos = 1 then
            begin
                if p_cod_situacao is null then
                    select num_reembolso
                    into   p_num_reembolso
                    from   pedido_reembolso
                    where  num_protocolo = v_num_protocolo;
                else
                    select num_reembolso
                    into   p_num_reembolso
                    from   pedido_reembolso
                    where  num_protocolo = v_num_protocolo
                      and  ind_situacao  = p_cod_situacao;
                end if;
            exception
                when others then
                    p_num_reembolso := 0;
            end;
        end if;
        --
        return;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar dados do associado
    ----------------------------------------------------------------------------
    procedure RetornaDadosAssociado( p_num_associado          in  varchar2
                                   , p_data_solicitacao       in  date
                                   , p_xml_retorno            out clob
                                   , p_cod_ts                 in  number default null)
    is
        --Declarações:
        v_posicao               number;
        v_parametro             varchar2(4000);
        v_SQL                   varchar2(32000);
        v_item_vazio            varchar2(3) := '¿¿¿';
        v_cod_ts                associado.cod_ts%type;
        v_cod_entidade_ts       associado.cod_entidade_ts%type;
        v_data_exclusao         associado.data_exclusao%type;
        v_ind_situacao          associado.ind_situacao%type;
        v_cod_ts_destino        associado.cod_ts_destino%type;
        v_cod_tipo_contrato     contrato_empresa.cod_tipo_contrato%type;
        v_cod_titular_contrato  contrato_empresa.cod_titular_contrato%type;
        v_cod_empresa           associado.cod_empresa%type;
        v_cod_retorno           number;
        v_msg_retorno           varchar2(4000);
        qryCtx                  DBMS_XMLGEN.ctxHandle;
        v_cod_entidade_ts_tit   associado.cod_entidade_ts_tit%type;
        qtd_contato             number;
        --
        xml_contato clob;
        num_ddd_tel     beneficiario_contato.num_ddd%type;
        num_tel         beneficiario_contato.num_telefone%type;
        num_ddd_cel     beneficiario_contato.num_ddd%type;
        num_cel         beneficiario_contato.num_telefone%type;
        num_ddd_fax     beneficiario_contato.num_ddd%type;
        num_fax         beneficiario_contato.num_telefone%type;
        end_email       beneficiario_contato.end_email%type;
    begin
        --Início
        v_posicao := 0;
        v_parametro := 'p_num_associado = ' || p_num_associado;
        v_parametro := v_parametro || CHR(13) || 'p_cod_ts = ' || p_cod_ts;
        v_parametro := v_parametro || CHR(13) || 'p_data_solicitacao = ' || p_data_solicitacao;

        if NVL(p_cod_ts,0) = 0 then --Recuperar o COD-TS
            v_posicao := 1;
            --Validação
            IF NVL(p_num_associado,v_item_vazio) = v_item_vazio THEN
                v_msg_retorno := 'Número do Beneficiário não informado';
                goto trata_retorno_erro;
            END IF;

            v_posicao := 2;
            --Recuperar os parametros
            v_posicao := 3;
            --Recuperar o COD_TS
            begin
                begin
                    select cod_ts, cod_entidade_ts, cod_entidade_ts_tit
                    into   v_cod_ts, v_cod_entidade_ts, v_cod_entidade_ts_tit
                    from  associado beneficiario
                    where num_associado = p_num_associado;
                exception
                when no_data_found then
                    null;
                end;
            end;
        else
            v_cod_ts := p_cod_ts;
        end if;
        --
        IF NVL(v_cod_ts,0) = 0 THEN
            v_msg_retorno := 'Beneficiário não encontrado';
            goto trata_retorno_erro;
        END IF;
        --
        v_posicao := 10;
        --Recuperar os dados do associado
        --
        BEGIN
            --Recuperar cod_tipo_contrato e cod_titular_contrato e cod_empresa
            select cod_entidade_ts,cod_entidade_ts_tit
            into   v_cod_entidade_ts,v_cod_entidade_ts_tit
            from   associado
            where  cod_ts     = v_cod_ts;
            --
            v_posicao := 11;
            --
            v_SQL :=  trim (' select 0 cod_retorno                                                                                     ')
                  || rtrim ('      , trunc(sysdate) data_atual                                                                         ')
                  || rtrim ('      , a.num_associado                                                                                   ')
                  || rtrim ('      , c.num_contrato                                                                                    ')
                  || rtrim ('      , a.cod_plano                                                                                       ')
                  || rtrim ('      , a.nome_associado                                                                                  ')
                  || rtrim ('      , a.ind_situacao                                                                                    ')
                  || rtrim ('      , a.tipo_associado                                                                                  ')
                  || rtrim ('      , a.cod_ts                                                                                          ')
                  || rtrim ('      , d.ind_sexo                                                                                        ')
                  || rtrim ('      , a.cod_ts_contrato                                                                                 ')
                  || rtrim ('      , a.cod_empresa                                                                                     ')
                  || rtrim ('      , atit.nome_associado nome_associado_tit                                                            ')
                  || rtrim ('      , TO_CHAR(estit.num_cpf) num_cpf_tit                                                                ')
                  || rtrim ('      , NVL (c.ind_retroatividade, ''N'') ind_retroatividade                                              ')
                  || rtrim ('      , c.cod_tipo_contrato                                                                               ')
                  || rtrim ('      , c.cod_titular_contrato                                                                            ')
                  || rtrim ('      , d.nome_entidade nome_associado /*emp.nome_entidade null nome_empresa*/                            ')
                  || rtrim ('      , sa.nom_situacao nom_situacao_associado                                                            ')
                  || rtrim ('      , p.nome_plano                                                                                      ')
                  || rtrim ('      , p.cod_marca                                                                                       ')
                  || rtrim ('      , TO_CHAR(d.num_cpf) num_cpf                                                                        ')
                  || rtrim ('      , a.cod_lotacao_ts                                                                                  ')
                  || rtrim ('      , a.cod_dependencia                                                                                 ')
                  || rtrim ('      , p.ind_acomodacao                                                                                  ')
                  || rtrim ('      , TO_CHAR (a.data_inclusao, ''DD/MM/YYYY'') data_inclusao                                           ')
                  || rtrim ('      , TO_CHAR (a.data_exclusao, ''DD/MM/YYYY'') data_exclusao                                           ')
                  || rtrim ('      , TO_CHAR (a.data_admissao, ''DD/MM/YYYY'') data_admissao                                           ')
                  || rtrim ('      , TO_CHAR (d.data_nascimento, ''DD/MM/YYYY'') data_nascimento                                       ')
                  || rtrim ('      , a.cod_situacao_esp                                                                                ')
                  || rtrim ('      , se.nome_situacao_esp                                                                              ')
                  || rtrim ('      , se.nom_imagem                                                                                     ')
                  || rtrim ('      , re.ind_classificacao                                                                              ')
                  --DADOS BANCÁRIOS ASSOCIADO
                  || rtrim ('      , ba.nome_banco                                                                                     ')
                  || rtrim ('      , a.cod_banco_reemb             cod_banco                                                           ')
                  || rtrim ('      , a.cod_agencia_reemb           cod_agencia_bancaria                                                ')
                  || rtrim ('      , a.num_dv_agencia_reemb        num_dv_agencia                                                      ')
                  || rtrim ('      , a.num_conta_corrente_reemb    num_cco                                                             ')
                  || rtrim ('      , a.num_dv_cc_reemb             num_cco_dv                                                          ')
                  --DADOS BANCÁRIOS TITULAR
                  || rtrim ('      , ba_tit.nome_banco             nome_banco_tit                                                      ')
                  || rtrim ('      , atit.cod_banco_reemb          cod_banco_tit                                                       ')
                  || rtrim ('      , atit.cod_agencia_reemb        cod_agencia_bancaria_tit                                            ')
                  || rtrim ('      , atit.num_dv_agencia_reemb     num_dv_agencia_tit                                                  ')
                  || rtrim ('      , atit.num_conta_corrente_reemb num_cco_tit                                                         ')
                  || rtrim ('      , atit.num_dv_cc_reemb          num_cco_dv_tit                                                      ')
                  --
                  || rtrim ('      , to_char (c.data_inicio_vigencia, ''DD/MM/YYYY'') data_inicio_vigencia                             ')
                  || rtrim ('      , ts_calcula_idade (d.data_nascimento,TRUNC (SYSDATE),''A'') idade_associado                        ')
                  || rtrim ('      , re.nome_tipo_empresa                                                                              ')
                  || rtrim ('      , ge.nome_grupo_empresa                                                                             ')
                  || rtrim ('      , con.nome_entidade nome_contrato                                                                   ')
                  || rtrim ('      , NULL ind_consulta_encaminhamento                                                                  ')
                  || rtrim ('      , NULL nome_tipo_contrato                                                                           ')
                  || rtrim ('      , a.cod_ts_tit                                                                                      ')
                  || rtrim ('      , a.cod_entidade_ts_tit                                                                             ')
                  || rtrim ('      , a.cod_operadora                                                                                   ')
                  || rtrim ('      , o.nom_operadora                                                                                   ')
                  || rtrim ('      , r.nom_rede                                                                                        ')
                  || rtrim ('      , r.cod_rede                                                                                        ')
                  || rtrim ('      , i.cod_inspetoria_ts                                                                               ')
                  || rtrim ('      , i.nome_inspetoria                                                                                 ')
                  || rtrim ('      , s.nome_sucursal                                                                                   ')
                  || rtrim ('      , p.ind_cobertura_internacional                                                                     ')
                  || rtrim ('      , aj.cod_acao_ts, aj.num_processo, aj.txt_obs TXT_OBS_JUDICIAL                                      ')
                  || rtrim (' from   associado              a                                                                          ')
                  || rtrim ('      , contrato_empresa       c                                                                          ')
                  || rtrim ('      , beneficiario_entidade       d                                                                          ')
                  || rtrim ('      , plano_medico           p                                                                          ')
                  || rtrim ('      , situacao_contrato      sc                                                                         ')
                  || rtrim ('      , situacao_especial      se                                                                         ')
                  || rtrim ('      , situacao_associado     sa                                                                         ')
                  || rtrim ('      , operadora              o                                                                          ')
                  || rtrim ('      , plano_rede_atendimento pr                                                                         ')
                  || rtrim ('      , rede_atendimento       r                                                                          ')
                  || rtrim ('      , entidade_sistema       estit                                                                      ')
                  || rtrim ('      , associado              atit                                                                       ')
                  || rtrim ('      , banco                  ba                                                                         ')
                  || rtrim ('      , banco                  ba_tit                                                                     ')
                  || rtrim ('      , regra_empresa          re                                                                         ')
                  || rtrim ('      , grupo_empresa          ge                                                                         ')
                  || rtrim ('      , contrato_grupo         cg                                                                         ')
                  || rtrim ('      , entidade_sistema       con                                                                        ')
                  || rtrim ('      , inspetoria             i                                                                          ')
                  || rtrim ('      , acao_jud_pgto          aj                                                                          ')
                  || rtrim ('      , sucursal               s                                                                          ')
                  || rtrim (' WHERE  a.cod_ts                  = :cod_ts                                                               ')
                  || rtrim (' AND    a.cod_ts_contrato         = c.cod_ts_contrato(+)                                                  ')
                  || rtrim (' AND    a.cod_entidade_ts         = d.cod_entidade_ts(+)                                                  ')
                  || rtrim (' AND    a.cod_plano               = p.cod_plano(+)                                                        ')
                  || rtrim (' AND    c.ind_situacao            = sc.ind_situacao(+)                                                    ')
                  || rtrim (' AND    a.ind_situacao            = sa.ind_situacao(+)                                                    ')
                  || rtrim (' AND    a.cod_situacao_esp        = se.cod_situacao_esp(+)                                                ')
                  || rtrim (' AND    c.tipo_empresa            = re.tipo_empresa(+)                                                    ')
                  || rtrim (' AND    a.cod_operadora           = o.cod_operadora(+)                                                    ')
                  || rtrim (' AND    c.cod_ts_contrato         = cg.cod_ts_contrato(+)                                                 ')
                  || rtrim (' AND    cg.cod_grupo_empresa      = ge.cod_grupo_empresa(+)                                               ')
                  || rtrim (' AND    c.cod_titular_contrato    = con.cod_entidade_ts (+)                                               ')
                  || rtrim (' AND    a.cod_plano               = pr.cod_plano (+)                                                      ')
                  || rtrim (' AND    pr.cod_rede               = r.cod_rede(+)                                                         ')
                  || rtrim (' AND    a.cod_inspetoria_ts       = i.cod_inspetoria_ts (+)                                               ')
                  || rtrim (' AND    a.cod_sucursal            = s.cod_sucursal (+)                                                    ')
                  || rtrim (' AND    a.cod_ts_tit              = atit.cod_ts(+)                                                        ')
                  || rtrim (' AND    atit.cod_entidade_ts      = estit.cod_entidade_ts(+)                                              ')
                  || rtrim (' AND    a.cod_banco_reemb         = ba.cod_banco(+)                                                       ')
                  || rtrim (' AND    atit.cod_banco_reemb      = ba_tit.cod_banco(+)                                                   ')
                  || rtrim (' AND    a.cod_ts                  = aj.cod_ts(+)                                                          ');
            --
            qryCtx := dbms_xmlgen.newContext(v_SQL);
            dbms_xmlgen.setBindValue(qryCtx, 'cod_ts', v_cod_ts);
            dbms_xmlgen.setCheckInvalidChars(qryCtx, TRUE);
            dbms_xmlgen.useNullAttributeIndicator(qryCtx, TRUE);
            p_xml_retorno := dbms_xmlgen.getXML(qryCtx);
            dbms_xmlgen.closeContext(qryCtx);
            -- DADOS DE CONTATO DO ASSOCIADO
            begin
                for c in ( select * from beneficiario_contato where cod_entidade_ts = v_cod_entidade_ts ) loop
                    CASE c.ind_class_contato
                       WHEN 'T' THEN
                        num_ddd_tel := c.num_ddd;
                        num_tel     := c.num_telefone;
                       WHEN 'C' THEN
                        num_ddd_cel := c.num_ddd;
                        num_cel     := c.num_telefone;
                       WHEN 'F' THEN
                        num_ddd_fax := c.num_ddd;
                        num_fax     := c.num_telefone;
                       WHEN 'E' THEN
                        end_email   := c.end_email;
                       ELSE null;
                    END CASE;
                end loop;

                 --
            -- Caso o associado não tenha dados do contrato, será atribuido os dados do titular
            --
              select count(*) into qtd_contato from  beneficiario_contato where cod_entidade_ts = v_cod_entidade_ts;

              if qtd_contato = 0 then
                 for c in ( select * from beneficiario_contato where cod_entidade_ts = v_cod_entidade_ts_tit ) loop

                        CASE c.ind_class_contato
                           WHEN 'T' THEN
                            num_ddd_tel := c.num_ddd;
                            num_tel     := c.num_telefone;
                           WHEN 'C' THEN
                            num_ddd_cel := c.num_ddd;
                            num_cel     := c.num_telefone;
                           WHEN 'F' THEN
                            num_ddd_fax := c.num_ddd;
                            num_fax     := c.num_telefone;
                           WHEN 'E' THEN
                            end_email   := c.end_email;
                           ELSE null;
                        END CASE;
                     end loop;
                 end if;
            exception
                when others then
                null;
            end;

            --
            xml_contato := '<CONTATO>';
            xml_contato := xml_contato || '<NUM_DDD_TELEFONE>'  || num_ddd_tel  || '</NUM_DDD_TELEFONE>';
            xml_contato := xml_contato || '<NUM_TELEFONE>'      || num_tel      || '</NUM_TELEFONE>';
            xml_contato := xml_contato || '<NUM_DDD_CELULAR>'   || num_ddd_cel  || '</NUM_DDD_CELULAR>';
            xml_contato := xml_contato || '<NUM_CELULAR>'       || num_cel      || '</NUM_CELULAR>';
            xml_contato := xml_contato || '<NUM_DDD_FAX>'       || num_ddd_fax  || '</NUM_DDD_FAX>';
            xml_contato := xml_contato || '<NUM_FAX>'           || num_fax      || '</NUM_FAX>';
            xml_contato := xml_contato || '<END_EMAIL>'         || end_email    || '</END_EMAIL>';
            xml_contato := xml_contato || '</CONTATO>';
            --
            add_xml(p_xml_retorno,xml_contato, 'ROWSET/ROW');
            --
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_msg_retorno := 'Beneficiário não encontrado';
            goto trata_retorno_erro;
        END;
        --
        return;
        --
        <<trata_retorno_erro>>
        --
        v_cod_retorno := '9';
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<ROWSET>';
        p_xml_retorno := p_xml_retorno || '<ROW>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>' || v_cod_retorno || '</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || v_msg_retorno || '-' ||  ts.top_utl_padrao.msgerro  || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<SQL>'         || v_SQL         || '</SQL>';
        p_xml_retorno := p_xml_retorno || '</ROW>';
        p_xml_retorno := p_xml_retorno || '</ROWSET>';
        --
        return;
        --
    EXCEPTION
    WHEN OTHERS THEN
        TS_LOG_EXECUCAO ( 'rb_reembolso', 99, 'Erro não previsto', 'Erro:' || chr(13) || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || chr(13) || 'Parametros:' || chr(13) || v_parametro, 'RetornaDadosAssociado' );
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<ROWSET>';
        p_xml_retorno := p_xml_retorno || '<ROW>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<SQL>'         || v_SQL         || '</SQL>';
        p_xml_retorno := p_xml_retorno || '</ROW>';
        p_xml_retorno := p_xml_retorno || '</ROWSET>';
        return;
    END;
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com as informações do anexo
    ----------------------------------------------------------------------------
    procedure RetornaAnexo(p_num_reembolso in  number
                          ,p_xml_retorno   out clob
                          ,p_nome_arquivo  in  varchar2 default null)

    is
        v_SQL                   varchar2(4000);
        v_item_vazio            varchar2(3) := '¿¿¿';
        v_num_reembolso         number;
        v_num_protocolo         number;
    begin
        --
        --Validação
        IF NVL(p_num_reembolso,0) = 0 THEN
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<ANEXO><DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Número do reembolso não informado</MSG_RETORNO>';
            p_xml_retorno := p_xml_retorno || '</DADOS></ANEXO>';
            return;
        end if;
        --
        select num_reembolso
             , num_protocolo
          into v_num_reembolso
             , v_num_protocolo
          from ts.pedido_reembolso
         where num_reembolso = p_num_reembolso
            or num_protocolo = p_num_reembolso;

        --Monta XML de anexos
        v_SQL :=  trim(' select distinct 0 cod_retorno                                                    ')
              || rtrim('      , a.nom_arq_anexo                                                           ')
              || rtrim('      , a.cod_usuario                                                             ')
              || rtrim('      , nvl(ta.nom_tipo_anexo, a.txt_descricao) AS txt_descricao                  ')
              || rtrim('      , a.cod_anexo_ts                                                            ')
              || rtrim('      , to_char(a.dt_anexado,''dd/mm/yyyy hh24:mi'') dt_anexado                   ')
              || rtrim('      , decode(a.ind_nota_original,''S'',''Sim'',''N'',''Não'','''')   ind_nota   ')
              || rtrim('      , a.ind_nota_original                                                       ')
              || rtrim('      , a.COD_TIPO_ANEXO                                                          ')
              || rtrim(' from   reembolso_anexo a                                                         ')
              || rtrim(' left join RBM_TIPO_ANEXO_REEMBOLSO ta  ON ta.cod_tipo_anexo = A.cod_tipo_anexo   ')
              || rtrim(' where ( num_reembolso  =  to_number(:num_reembolso)                              ')
              || rtrim('    or  num_protocolo  =  to_number(:num_protocolo ))                             ')
              || case when nvl(p_nome_arquivo, v_item_vazio) <> v_item_vazio then
                 rtrim(' and    nom_arq_anexo   = :nom_arq_anexo                                          ')
              end
              || rtrim(' order by a.nom_arq_anexo                                                         ');
        --
        add_parametro_sql ( p_nome_parametro => 'num_reembolso' , p_valor_parametro => v_num_reembolso );
        add_parametro_sql ( p_nome_parametro => 'num_protocolo' , p_valor_parametro => v_num_protocolo );
        --
        if NVL(p_nome_arquivo, v_item_vazio) <> v_item_vazio then
            add_parametro_sql ( p_nome_parametro => 'nom_arq_anexo' , p_valor_parametro => p_nome_arquivo );
        end if;
        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'ANEXO'
                                   , p_nome_coluna    => 'DADOS'
                                   );
        --
        return;
        --
    exception
    when others then
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<ANEXO>';
        p_xml_retorno := p_xml_retorno || '<DADOS>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '</DADOS>';
        p_xml_retorno := p_xml_retorno || '</ANEXO>';
        return;
    END;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um cursor com os parametros informados
    ----------------------------------------------------------------------------
    function  RetornaCursor( p_nome_tabela       in varchar
                            ,p_campo_value       in varchar
                            ,p_campo_desc        in varchar
                            ,p_order             in varchar default null
                            ,p_where             in varchar default null
                            )
    return sys_refcursor
    is
        c                         sys_refcursor;
        v_Sql                     Varchar2(4000) := '';
        v_item_vazio              varchar2(3) := '¿¿¿';
    begin
        --
        v_Sql := v_Sql || ' SELECT ';
        --
        if    NVL(p_campo_value,v_item_vazio) <> v_item_vazio
           or NVL(p_campo_desc,v_item_vazio) <> v_item_vazio then
            --
            if NVL(p_campo_value,v_item_vazio) <> v_item_vazio then
                v_Sql := v_Sql || p_campo_value;
            end if;
            --
            if NVL(p_campo_desc,v_item_vazio) <> v_item_vazio then
                --
                if NVL(p_campo_value,v_item_vazio) <> v_item_vazio then v_Sql := v_Sql || ' ,';
                end if;
                --
                v_Sql := v_Sql || p_campo_desc;
                --
            end if;
            --
        else
            --
            v_Sql := v_Sql || ' * ';
            --
        end if;
        --
        v_Sql := v_Sql || ' From ' || p_nome_tabela;
        --
        if p_where is not null then
            v_Sql := v_Sql || ' ' || p_where;
        end if;
        --
        if p_order is not null then
            v_Sql := v_Sql || ' ' || p_order;
        elsif p_campo_desc is not null then
            v_Sql := v_Sql || ' order by ' || p_campo_desc;
        elsif p_campo_value is not null then
            v_Sql := v_Sql || ' order by ' || p_campo_value;
        end if;
        --
        open c for v_Sql;
        --
        return c;
        --
    exception
    when others then
        raise_application_error( -20001 , 'rb_reembolso.RetornaCursor - Ocorreu o seguinte erro: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || v_Sql);
        return null;
    end;
    --
    procedure GravaAcompanhamentoReembolso( p_xml_parametros          in clob
                                           , p_cod_retorno            out number
                                           , p_msg_retorno            out varchar2
                                           )
      is
      -----  documento transformado
      v_doc               xmldom.DOMDocument;

      -----  retorno
      v_cod_retorno       number;
      v_msg_retorno       varchar2(200);
      v_posicao           number;

      v_num_reembolso                      procedimento_reembolso.num_reembolso%type;
      v_num_seq_item                       procedimento_reembolso.num_seq_item%type;
      --v_cod_procedimento                   procedimento_reembolso.cod_procedimento%type;
      v_dt_atendimento                     procedimento_reembolso.data_atendimento%type;
      v_val_informado                      procedimento_reembolso.val_informado%type;

      v_val_total_solicitado               pedido_reembolso.val_informado%type;
      v_ind_insc_fiscal                    pedido_reembolso.ind_insc_fiscal%type;
      v_num_insc_fiscal                    pedido_reembolso.num_insc_fiscal%type;
      v_nome_prestador                     pedido_reembolso.nome_prestador%type;
      v_num_crm                            pedido_reembolso.num_crm%type;
      v_uf_conselho                        pedido_reembolso.uf_conselho%type;
      v_sigla_conselho                     pedido_reembolso.sigla_conselho%type;
      v_nome_favorecido                    pedido_reembolso.nome_favorecido%type;
      v_num_cpf_favorecido                 pedido_reembolso.num_cpf_favorecido%type;
      v_cod_banco                          pedido_reembolso.cod_banco%type;
      v_cod_agencia                        pedido_reembolso.cod_agencia%type;
      v_num_dv_agencia                     pedido_reembolso.num_dv_agencia%type;
      v_num_conta_corrente                 pedido_reembolso.num_conta_corrente%type;
      v_num_dv_cc                          pedido_reembolso.num_dv_cc%type;

      v_agd                       varchar2(1);
      v_val_informado_solicitado  varchar2(1);
      -----------------------------------------------------------------------------
      begin
        --
        v_posicao := 0;
        --
        ts_cria_doc_xml(p_xml_parametros, v_doc, v_cod_retorno, v_msg_retorno);
        --
		TS_LOG_EXECUCAO ( 'RB_REEMBOLSO.GravaAcompanhamentoReembolso', 00, 'Entrada', p_xml_parametros, 'GravaAcompanhamentoReembolso - XML' );
        --
        if v_cod_retorno <> 0 then
          p_cod_retorno := v_cod_retorno;
          p_msg_retorno := v_msg_retorno;
          return;
        end if;
        --
        v_posicao := 2;
        --
        v_num_reembolso           := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','NUM_REEMBOLSO');
        v_num_seq_item            := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','NUM_SEQ_ITEM');
        --v_cod_procedimento        := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','COD_PROCEDIMENTO');
        v_dt_atendimento          := to_date(ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','DT_ATENDIMENTO'), 'DD/MM/YYYY');
        v_val_informado           := ts_numero_web(ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','VAL_INFORMADO'),2);

        v_val_total_solicitado    := ts_numero_web(ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','VAL_TOTAL_SOLICITADO'),2);
        v_ind_insc_fiscal         := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','IND_INSC_FISCAL');
        v_num_insc_fiscal         := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','NUM_INSC_FISCAL');
        v_nome_prestador          := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','NOM_PRESTADOR');
        v_num_crm                 := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','NUM_CRM');
        v_uf_conselho             := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','UF_CONSELHO');
        v_sigla_conselho          := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','SIGLA_CONSELHO');
        v_nome_favorecido         := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','NOM_FAVORECIDO');
        v_num_cpf_favorecido      := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','NUM_CPF_FAVORECIDO');
        v_cod_banco               := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','COD_BANCO');
        v_cod_agencia             := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','COD_AGENCIA');
        v_num_dv_agencia          := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','NUM_DV_AGENCIA');
        v_num_conta_corrente      := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','NUM_CONTA_CORRENTE');
        v_num_dv_cc               := ts_obtem_dados_xml(v_doc,'ACOMPANHAMENTO_REEMBOLSO','NUM_DV_CC');

        --
        if NVL(v_num_reembolso,0) = 0 then
            p_cod_retorno := 9;
            p_msg_retorno := 'Nº do reembolso não informado';
            return;
        end if;
        --

        -----  A situação do reembolso for AGD
        -----  For a primeira vez nessa situação
        -----  Motivo estiver parametrizado com "Envia Carta de Autorização" = Sim
        select case count(*)
        when 0 then 'N'
        when 1 then 'S'
        else 'N' end as ind_agd_doc
        into v_agd
        from ( select  to_char(rc.dt_ocorrencia,'dd/mm/yyyy hh24:mi')
        from ts.reembolso_ocorrencia rc
           , ts.pedido_reembolso pr
           , ts.motivo_reembolso mr
        where rc.num_reembolso = pr.num_reembolso
        and pr.cod_motivo_reembolso = mr.cod_motivo_reembolso
        and mr.ind_envio_carta = 'S'
        and pr.ind_situacao = 32
        and rc.cod_tipo_ocorrencia = 57
        and rc.num_reembolso = v_num_reembolso
        group by to_char(rc.dt_ocorrencia,'dd/mm/yyyy hh24:mi'));

        if v_agd = 'S' then
          ---- A soma de todos os "Valores Informados" por Data de Atendimento deve ser igual ao Valor Total Solicitado.
          select
          case
            when round(rp.val_informado, 0) = round((select sum(val_informado) from procedimento_reembolso where num_reembolso = v_num_reembolso), 0)
            then 'S'
            else 'N'
          end as valores_iguais
          into v_val_informado_solicitado
          from pedido_reembolso rp
          where rp.num_reembolso = v_num_reembolso;

          if v_val_informado_solicitado = 'S' then

            --
            v_posicao := 3;
            --

            if v_num_reembolso is not null then

               if v_num_seq_item is not null then

                  -- procedimento_reembolso
                  update ts.procedimento_reembolso i
                  set
                     i.data_atendimento  = coalesce(
                                  v_dt_atendimento,
                                  i.data_atendimento
                                  ),
                     --i.cod_procedimento  = coalesce(
                     --           v_cod_procedimento,
                     --           i.cod_procedimento
                     --            ),
                     i.val_informado     = coalesce(
                                v_val_informado,
                                i.val_informado
                              )
                  where
                     i.num_reembolso = v_num_reembolso
                     and i.num_seq_item = v_num_seq_item;
              end if;

              -- pedido_reembolso
              update ts.pedido_reembolso pr
              set
                   pr.val_informado          = coalesce(v_val_total_solicitado, pr.val_informado),
                   pr.val_moeda_estrangeira  = coalesce(v_val_total_solicitado, pr.val_moeda_estrangeira),
                   pr.ind_insc_fiscal        = coalesce(v_ind_insc_fiscal,      pr.ind_insc_fiscal),
                   pr.num_insc_fiscal        = coalesce(v_num_insc_fiscal,      pr.num_insc_fiscal),
                   pr.nome_prestador         = coalesce(v_nome_prestador,       pr.nome_prestador),
                   pr.num_crm                = coalesce(v_num_crm,              pr.num_crm),
                   pr.uf_conselho            = coalesce(v_uf_conselho,          pr.uf_conselho),
                   pr.sigla_conselho         = coalesce(v_sigla_conselho,       pr.sigla_conselho),
                   pr.nome_favorecido        = coalesce(v_nome_favorecido,      pr.nome_favorecido),
                   pr.num_cpf_favorecido     = coalesce(v_num_cpf_favorecido,   pr.num_cpf_favorecido),
                   pr.cod_banco              = coalesce(v_cod_banco,            pr.cod_banco),
                   pr.cod_agencia            = coalesce(v_cod_agencia,          pr.cod_agencia),
                   pr.num_dv_agencia         = coalesce(v_num_dv_agencia,       pr.num_dv_agencia),
                   pr.num_conta_corrente     = coalesce(v_num_conta_corrente,   pr.num_conta_corrente),
                   pr.num_dv_cc              = coalesce(v_num_dv_cc,            pr.num_dv_cc)
              where
                   pr.num_reembolso = v_num_reembolso;

              end if;

          end if;

        end if;

        xmldom.freeDocument(v_doc);
        commit;

        p_cod_retorno       := 0;
        p_msg_retorno       := 'Operação realizada.';

      exception
        when others then

          p_cod_retorno := 9;
          p_msg_retorno := p_msg_retorno || 'GravaAcompanhamentoReembolso-' || v_posicao || ': ' || sqlerrm;
          TS_LOG_EXECUCAO ( 'RB_REEMBOLSO.GravaAcompanhamentoReembolso', 00, 'Entrada', p_xml_parametros, 'GravaAcompanhamentoReembolso - XML' );

          rollback;

          if v_posicao > 1 then
            xmldom.freeDocument(v_doc);
          end if;

    end;
    --
    ----------------------------------------------------------------------------
    -- Anexar / Excluir arquivos informados
    ----------------------------------------------------------------------------
    PROCEDURE GravaAnexo ( p_xml_dados       in   clob, -- xml contendo a informação a ser gravada/atualizada/excluída
                           p_cod_retorno     out  number,
                           p_msg_retorno     out  varchar2,
                           p_ind_commit      in   varchar2 default 'S')   is

    -----  documento transformado
    v_doc          xmldom.DOMDocument;

    -----  retorno
    v_cod_retorno     number;
    v_msg_retorno     varchar2(200);

    v_posicao         number;
    v_qtd             number;
    v_num_reembolso   REEMBOLSO_ANEXO.num_reembolso%type;
    v_num_protocolo   REEMBOLSO_ANEXO.num_protocolo%type;
    v_nom_arq_anexo   REEMBOLSO_ANEXO.nom_arq_anexo%type;
    v_txt_descricao   REEMBOLSO_ANEXO.txt_descricao%type;
    v_cod_usuario     REEMBOLSO_ANEXO.cod_usuario%type;
    v_txt_obs         REEMBOLSO_OCORRENCIA.txt_obs%type;
    v_ind_nota_original REEMBOLSO_ANEXO.Ind_Nota_Original%type;
    v_cod_tipo_anexo REEMBOLSO_ANEXO.COD_TIPO_ANEXO%type;
    v_cod_anexo_ts    anexo_ts.cod_anexo_ts%type;
    v_ind_exclusao    varchar2(1);
    v_qtd_exclusao    number;
    i                 number;
    v_xml_anexo       clob;
    --------------------------------------------------------------------------------
    BEGIN
      --
      v_posicao := 0;
      --
      ts_cria_doc_xml(p_xml_dados,v_doc,v_cod_retorno,v_msg_retorno);
      --
      if v_cod_retorno <> 0 then
          p_cod_retorno := v_cod_retorno;
          p_msg_retorno := v_msg_retorno;
          return;
      end if;
      --
      v_posicao := 2;
      --
      v_num_reembolso     := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','NUM_REEMBOLSO');
      v_num_protocolo     := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','NUM_PROTOCOLO');
      v_ind_nota_original := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','IND_NOTA_ORIGINAL');
      v_cod_tipo_anexo    := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','COD_TIPO_ANEXO');
      --
      if NVL(v_num_reembolso,0) = 0 and NVL(v_num_protocolo,0) = 0 then
          p_cod_retorno := 9;
          p_msg_retorno := 'Nº do reembolso/protocolo não informado';
          return;
      end if;
      --
      begin
          v_txt_descricao     := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','TXT_DESCRICAO');
      exception
        when others then
          p_cod_retorno := 9;
          p_msg_retorno := 'Descrição do anexo maior que o limite do campo (200)';
          return;
      end;
      --
      begin
          v_nom_arq_anexo     := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','NOM_ARQ_ANEXO');
      exception
        when others then
          p_cod_retorno := 9;
          p_msg_retorno := 'Nome do anexo maior que o limite do campo (255)';
          return;
      end;
      --
      v_cod_usuario       := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','COD_USUARIO');
      --
      v_posicao := 3;
      --
      if not v_nom_arq_anexo is null then
          --
          select count(*)
          into   v_qtd
          from   reembolso_anexo
          where  num_reembolso        = v_num_reembolso
          and    num_protocolo        = v_num_protocolo
          and    Upper(nom_arq_anexo) = upper(v_nom_arq_anexo);
          --
          v_posicao := 4;
          --
          if v_qtd > 0 then
              p_cod_retorno := 9;
              p_msg_retorno := 'Arquivo ' || v_nom_arq_anexo || ' já anexado no reembolso.';
              return;
          end if;
          --
          v_xml_anexo := '<PARAMETROS>';
          v_xml_anexo := v_xml_anexo || '<COD_MODULO>79</COD_MODULO>';
          v_xml_anexo := v_xml_anexo || '<NOME_ARQUIVO>'|| ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','NOME_ARQUIVO_ORIG') ||'</NOME_ARQUIVO>';
          v_xml_anexo := v_xml_anexo || '<PARAMETRO_CAMINHO>RBM_CAMINHO_ANEXO</PARAMETRO_CAMINHO>';
          v_xml_anexo := v_xml_anexo || '<USUARIO_LOGADO>'|| ts_read_client_info || '</USUARIO_LOGADO>';
          v_xml_anexo := v_xml_anexo || '<LOCAL_CHAMADA>TS.RB_REEMBOLSO.GravaAnexo</LOCAL_CHAMADA>';
          v_xml_anexo := v_xml_anexo || '</PARAMETROS>';
          --
          ts.top_utl_file.saveFile( v_xml_anexo
                                  , v_cod_anexo_ts
                                  , p_cod_retorno
                                  , p_msg_retorno
                                  , nvl(p_ind_commit, 'S')
                                  );
          --
          if p_cod_retorno <> 0 then
              xmldom.freeDocument(v_doc);
              rollback;
              return;
          end if;
          --
          v_posicao := 5;
          --
          insert into
                  reembolso_anexo (num_protocolo, num_reembolso,       nom_arq_anexo,      txt_descricao,
                                   cod_usuario,         dt_anexado, cod_anexo_ts, ind_nota_original, cod_tipo_anexo)
                           values (v_num_protocolo, v_num_reembolso,     v_nom_arq_anexo,    v_txt_descricao,
                                   v_cod_usuario,       sysdate, v_cod_anexo_ts,v_ind_nota_original, v_cod_tipo_anexo);

          v_posicao := 6;
          --
          ---- gera ocorrencia de inclusão de anexo
          GeraOcorrencia(v_num_reembolso,8,'Arquivo:' || v_nom_arq_anexo,null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
          if p_cod_retorno <> 0 then
              xmldom.freeDocument(v_doc);
              rollback;
              return;
          end if;
          --
      end if;
      --
      v_posicao := 7;
      --
      v_qtd_exclusao      := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','EXCLUSAO/QTD_EXCLUSAO');
      --
      if v_qtd_exclusao is null then v_qtd_exclusao:=0;
      end if;
      --
      -- deletar os marcados
      --
      v_txt_obs := '';
      --
      for i in 1 .. v_qtd_exclusao loop
          --
          v_nom_arq_anexo   := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','EXCLUSAO/NOM_ARQ_ANEXO_' || i);
          v_cod_anexo_ts    := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','EXCLUSAO/COD_ANEXO_TS_' || i);
          --
          v_posicao := 8;
          --
          if nvl(v_cod_anexo_ts,0) <> 0 then
              delete from anexo_ts
               where cod_anexo_ts = v_cod_anexo_ts;
          end if;
          --
          delete from reembolso_anexo
          where  num_reembolso        = v_num_reembolso
          and    num_protocolo        = v_num_protocolo
          and    upper(nom_arq_anexo) = upper(v_nom_arq_anexo);
          --
          if i > 1 then v_txt_obs := v_txt_obs || ', ';
          end if;
          --
          v_txt_obs := v_txt_obs || v_nom_arq_anexo;
          --

      end loop;
      --
      ---- gera ocorrencia de exclusão de anexo
      --
      v_posicao := 9;
      --
      if v_qtd_exclusao>0 then
          v_txt_obs := 'Arquivo(s) : ' || v_txt_obs;
          --
          GeraOcorrencia(v_num_reembolso,9,v_txt_obs,null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
          if p_cod_retorno <> 0 then
              xmldom.freeDocument(v_doc);
              rollback;
              return;
          end if;
      end if;
      --
      -- liberação do xml ------------------------------------------------------------
      --
      v_posicao := 10;
      xmldom.freeDocument(v_doc);
      --
      --commit;
      -- Commit, comentado por erro de duplicidade na gravação de protocolo, não achei funcionalidade que usasse e tivesse necessidade de que este commit seja realizado
      -- Por Marcos Luiz 01/10/2013
      --
      p_cod_retorno       := 0;
      p_msg_retorno       := 'Operação realizada.';
      --
    exception
        when others then
            --
            p_cod_retorno := 9;
            p_msg_retorno := 'GravaAnexo-' || v_posicao || ': ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
            --
            rollback;
            --
            if v_posicao > 1 then xmldom.freeDocument(v_doc);
            end if;
            --
    end GravaAnexo;
    --
    ----------------------------------------------------------------------------
    -- Retornar tipos de pagamento
    ----------------------------------------------------------------------------
    function  get_tipos_pagamento( p_num_reembolso in varchar2 )  return sys_refcursor
    is
       result          sys_refcursor;
       v_txt_parametro varchar2(1000);
       v_erro          varchar2(1000);
    begin
    --
    if nvl(p_num_reembolso, 0) = 0 then
      v_erro:= 'Parametros não informados.';
      ts_log_execucao ('RB_REEMBOLSO', '0', v_erro, v_txt_parametro, 'GET_TIPOS_PAGAMENTO');
      goto fim;
    end if;

    open result
    for
       SELECT PR.COD_TIPO_PAGAMENTO AS COD_TIPO_PGTO
           ,PR.TXT_DESC_COD_VERIFICACAO AS TXT_DESC_COD_VERIFICACAO
           ,TP.TXT_DESCRICAO AS TXT_DESC_PGTO
       FROM TS.PEDIDO_REEMBOLSO_FORMA_PGTO PR
           ,TS.RBM_TIPO_PAGAMENTO TP
      WHERE TP.COD_TIPO_PAGAMENTO = PR.COD_TIPO_PAGAMENTO
        AND PR.NUM_REEMBOLSO = p_num_reembolso;
    --
    return result;
    --
    <<fim>>
    null;
    exception
    when others then
      ts_log_execucao ('RB_REEMBOLSO', '0', 'Erro',' Error:' || ts.ts_util.MsgErro, 'GET_TIPOS_PAGAMENTO');
      null;
    end;
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com as informações do solicitante informado
    ----------------------------------------------------------------------------
    procedure RetornaSolicitante(p_xml_filtro       in clob
                                ,p_xml_retorno      out clob)

    is
        v_SQL                   varchar2(4000);
        v_cod_retorno           number;
        v_msg_retorno           varchar2(4000);
        v_doc                   xmldom.DOMDocument;
        v_cod_solicitante       solicitante.cod_solicitante%type;
        v_nome_solicitante      solicitante.nome_solicitante%type;
        v_sigla_conselho        solicitante.sigla_conselho%type;
        v_num_crm               solicitante.num_crm%type;
        v_sgl_uf_conselho       solicitante.sgl_uf_conselho%type;
        v_num_insc_fiscal       solicitante.num_insc_fiscal%type;
        v_ind_tipo_pessoa       solicitante.ind_tipo_pessoa%type;
        v_item_vazio            varchar2(3) := '¿¿¿';
    begin
        --Recuperar parametros do filtro
        ts_cria_doc_xml(p_xml_filtro, v_doc, v_cod_retorno, v_msg_retorno);
        if v_cod_retorno <> 0 then
            goto trata_retorno_erro;
        end if;
        --
        v_cod_solicitante   := ts_obtem_dados_xml(v_doc,'SOLICITANTE','COD_SOLICITANTE');
        v_nome_solicitante  := ts_obtem_dados_xml(v_doc,'SOLICITANTE','NOME_SOLICITANTE');
        v_sigla_conselho    := ts_obtem_dados_xml(v_doc,'SOLICITANTE','SIGLA_CONSELHO');
        v_num_crm           := ts_obtem_dados_xml(v_doc,'SOLICITANTE','NUM_CRM');
        v_sgl_uf_conselho   := ts_obtem_dados_xml(v_doc,'SOLICITANTE','SGL_UF_CONSELHO');
        v_num_insc_fiscal   := replace(replace(replace(ts_obtem_dados_xml(v_doc,'SOLICITANTE','NUM_INSC_FISCAL'),'.',''),'-',''),'/','');
        v_ind_tipo_pessoa   := ts_obtem_dados_xml(v_doc,'SOLICITANTE','IND_TIPO_PESSOA');
        --
        xmldom.freeDocument(v_doc);
        --
        --Montar XML
        v_SQL := '';
        v_SQL := v_SQL || ' SELECT  0 cod_retorno, cod_solicitante, nome_solicitante, sigla_conselho, num_crm, ';
        v_SQL := v_SQL || '         sgl_uf_conselho, num_insc_fiscal, ind_tipo_pessoa,';
        --CPF
        v_SQL := v_SQL || '         DECODE(num_insc_fiscal,null,'||chr(39)||chr(39)||',';
        v_SQL := v_SQL || '         SUBSTR(lpad(num_insc_fiscal,11,'||chr(39)||0||chr(39)||'),1,3)||'||chr(39)||'.'||chr(39)||'||';
        v_SQL := v_SQL || '         SUBSTR(lpad(num_insc_fiscal,11,'||chr(39)||0||chr(39)||'),4,3)||'||chr(39)||'.'||chr(39)||'||';
        v_SQL := v_SQL || '         SUBSTR(lpad(num_insc_fiscal,11,'||chr(39)||0||chr(39)||'),7,3)||'||chr(39)||'-'||chr(39)||'||';
        v_SQL := v_SQL || '         SUBSTR(lpad(num_insc_fiscal,11,'||chr(39)||0||chr(39)||'),10,2)) num_cpf,';
        --CNPJ
        v_SQL := v_SQL || '         DECODE(num_insc_fiscal,null,'||chr(39)||chr(39)||',';
        v_SQL := v_SQL || '         SUBSTR(lpad(num_insc_fiscal,14,'||chr(39)||0||chr(39)||'),1,2)||'||chr(39)||'.'||chr(39)||'||';
        v_SQL := v_SQL || '         SUBSTR(lpad(num_insc_fiscal,14,'||chr(39)||0||chr(39)||'),3,3)||'||chr(39)||'.'||chr(39)||'||';
        v_SQL := v_SQL || '         SUBSTR(lpad(num_insc_fiscal,14,'||chr(39)||0||chr(39)||'),6,3)||'||chr(39)||'/'||chr(39)||'||';
        v_SQL := v_SQL || '         SUBSTR(lpad(num_insc_fiscal,14,'||chr(39)||0||chr(39)||'),9,4)||'||chr(39)||'-'||chr(39)||'||';
        v_SQL := v_SQL || '         SUBSTR(lpad(num_insc_fiscal,14,'||chr(39)||0||chr(39)||'),13,2)) num_cnpj';
        --
        v_SQL := v_SQL || '   FROM  solicitante';
        v_SQL := v_SQL || '   WHERE ind_tipo_pessoa = :ind_tipo_pessoa';
        --
        add_parametro_sql ( p_nome_parametro => 'ind_tipo_pessoa' , p_valor_parametro => v_ind_tipo_pessoa );
        --
        if nvl(v_cod_solicitante,0) <> 0 then
            v_SQL := v_SQL || ' and cod_solicitante = :cod_solicitante';
            add_parametro_sql ( p_nome_parametro => 'cod_solicitante' , p_valor_parametro => v_cod_solicitante );
        end if;
        if nvl(v_num_insc_fiscal,0) <> 0 then
            v_SQL := v_SQL || ' and num_insc_fiscal = :num_insc_fiscal';
            add_parametro_sql ( p_nome_parametro => 'num_insc_fiscal' , p_valor_parametro => v_num_insc_fiscal );
        end if;
        --
        if nvl(v_nome_solicitante,v_item_vazio) <> v_item_vazio then
            v_SQL := v_SQL || ' and UPPER(nome_solicitante) like ' || chr(39) || '%' || UPPER(v_nome_solicitante) || '%' || chr(39);
        end if;
        --
        if v_ind_tipo_pessoa = 'F' then
            if nvl(v_sigla_conselho,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' and sigla_conselho = :sigla_conselho';
                add_parametro_sql ( p_nome_parametro => 'sigla_conselho' , p_valor_parametro => v_sigla_conselho );
            end if;
            if nvl(v_num_crm,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' and num_crm = :num_crm';
                add_parametro_sql ( p_nome_parametro => 'num_crm' , p_valor_parametro => v_num_crm );
            end if;
            if nvl(v_sgl_uf_conselho,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' and sgl_uf_conselho = :sgl_uf_conselho';
                add_parametro_sql ( p_nome_parametro => 'sgl_uf_conselho' , p_valor_parametro => v_sgl_uf_conselho );
            end if;
        end if;
        --
        v_SQL := v_SQL || '  ORDER BY nome_solicitante';
        --
        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'SOLICITANTE'
                                   , p_nome_coluna    => 'DADOS'
                                   );
        --
        return;
        --
        <<trata_retorno_erro>>
        --
        v_cod_retorno := 9;
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<SOLICITANTE>';
        p_xml_retorno := p_xml_retorno || '<DADOS>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || v_msg_retorno || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
        p_xml_retorno := p_xml_retorno || '</DADOS>';
        p_xml_retorno := p_xml_retorno || '</SOLICITANTE>';
        --
        return;
        --
    EXCEPTION
    WHEN OTHERS THEN
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<SOLICITANTE>';
        p_xml_retorno := p_xml_retorno || '<DADOS>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
        p_xml_retorno := p_xml_retorno || '</DADOS>';
        p_xml_retorno := p_xml_retorno || '</SOLICITANTE>';
        return;
    END;
    --
    --
   function get_filial_unidade ( p_cod_retorno         in out nocopy varchar2
                               , p_msg_retorno         in out nocopy varchar2
                               , p_cod_usuario         in out nocopy varchar2
                               , p_ind_consulta        in varchar2 default 'N'
                               )
    return sys_refcursor
    is
        result                          sys_refcursor;
        v_qtd_filial                    pls_integer;
        v_qtd_unidade                   pls_integer;
        v_cod_tipo_usuario              usuario.cod_tipo_usuario%type;
        v_linha                         pls_integer;
        v_SQL                           varchar2(32700);
    begin
        --
        v_linha := 10;
        --
        begin
            v_SQL := 'select cod_tipo_usuario
                        from usuario
                       where cod_usuario = upper(:p_cod_usuario)
                     ';
            execute
          immediate v_SQL
               into v_cod_tipo_usuario
              using upper(p_cod_usuario);
        exception
        when others then
            null;
        end;
        --
        v_linha := 20;
        --UNIDADE
        v_SQL := 'select /*+ FIRST_ROWS(1)*/ count(1)
                    from autorizacao_perfil_nivel apn
                   where  apn.cod_tipo_nivel       =  12
                     and (  exists                  (select 1
                                                       from perfil_usuario      pu
                                                      where upper(pu.cod_usuario) = upper(:p_cod_usuario)
                                                        and pu.cod_perfil         = apn.cod_perfil
                                                        and rownum = 1
                                                    )
                         or exists                  (select 1
                                                       from perfil_tipo_usuario pu
                                                      where pu.cod_tipo_usuario = :v_cod_tipo_usuario
                                                        and pu.cod_perfil       = apn.cod_perfil
                                                        and rownum = 1
                                                    )
                       )
                       and rownum = 1
                 ';
        --
        execute
      immediate v_SQL
           into v_qtd_unidade
          using p_cod_usuario
              , v_cod_tipo_usuario;
        --
        v_linha := 30;
        --FILIAL
        v_SQL := 'select /*+ FIRST_ROWS(1)*/ count(1)
                    from autorizacao_perfil_nivel apn
                   where apn.cod_tipo_nivel       =  10
                     and (  exists                  (select 1
                                                       from perfil_usuario      pu
                                                      where upper(pu.cod_usuario) = upper(:p_cod_usuario)
                                                        and pu.cod_perfil         = apn.cod_perfil
                                                        and rownum = 1
                                                    )
                         or exists                  (select 1
                                                       from perfil_tipo_usuario pu
                                                      where pu.cod_tipo_usuario = :v_cod_tipo_usuario
                                                        and pu.cod_perfil       = apn.cod_perfil
                                                        and rownum = 1
                                                    )
                     )
                     and rownum = 1
                 ';
        --
        execute
      immediate v_SQL
           into v_qtd_filial
          using p_cod_usuario
              , v_cod_tipo_usuario;
        --
        --  Verifica se existe filial e unidade
        if ( v_qtd_unidade = 0 and v_qtd_filial = 0 ) or nvl(p_ind_consulta,'N') = 'S' then
            -- se nao existir nenhum dos dois, exibe todas as cadastradas no sistema
            -- se for consulta também exibe todas as filiais
            v_linha := 40;
            --
            v_SQL := 'select i.cod_inspetoria_ts
                           , i.nome_inspetoria || '' ('' || s.nome_sucursal || '')'' nome_filial_unidade
                        from inspetoria i
                           , sucursal   s
                       where i.cod_sucursal = s.cod_sucursal
                       order by nome_filial_unidade
            ';
            --
            open result
             for v_SQL;
            --
        elsif nvl(v_qtd_unidade,0) > 0 then
            -- se tiver algum caso de unidade, exibe apenas as unidades cadastradas, ignorandos as filiais
            v_linha := 50;
            --
            v_SQL := 'select i.cod_inspetoria_ts
                           , i.nome_inspetoria || '' ('' || s.nome_sucursal || '')'' nome_filial_unidade
                        from inspetoria i
                           , sucursal   s
                       where i.cod_sucursal = s.cod_sucursal
                         and i.cod_inspetoria_ts in (select apn.val_permitido
                                                       from   autorizacao_perfil_nivel apn
                                                      where  apn.cod_tipo_nivel       =  ''12''
                                                        and (  exists                   (select null
                                                                                           from perfil_usuario      pu
                                                                                          where upper(pu.cod_usuario) = upper(:p_cod_usuario)
                                                                                            and pu.cod_perfil         = apn.cod_perfil
                                                                                        )
                                                            or exists                   (select null
                                                                                           from perfil_tipo_usuario pu
                                                                                          where pu.cod_tipo_usuario = :v_cod_tipo_usuario
                                                                                            and pu.cod_perfil       = apn.cod_perfil
                                                                                        )
                                                        )
                                                    )
                       order by nome_filial_unidade
            ';
            --
            open result
             for v_SQL
           using p_cod_usuario
               , v_cod_tipo_usuario;

        else
            -- caso contrário, ele tem filiais cadastradas, exibe todas as unidades das filiais encontradas.
            v_linha := 60;
            --
            v_SQL := 'select i.cod_inspetoria_ts
                           , i.nome_inspetoria || '' ('' || s.nome_sucursal || '')'' nome_filial_unidade
                        from inspetoria i
                           , sucursal   s
                       where i.cod_sucursal = s.cod_sucursal
                         and i.cod_sucursal in (select apn.val_permitido
                                                  from autorizacao_perfil_nivel apn
                                                 where apn.cod_tipo_nivel       =  ''10''
                                                   and (  exists                   (select null
                                                                                      from perfil_usuario      pu
                                                                                     where upper(pu.cod_usuario) = upper(:p_cod_usuario)
                                                                                       and pu.cod_perfil         = apn.cod_perfil
                                                                                    )
                                                       or exists                   (select null
                                                                                      from perfil_tipo_usuario pu
                                                                                     where pu.cod_tipo_usuario = :v_cod_tipo_usuario
                                                                                       and pu.cod_perfil       = apn.cod_perfil
                                                                                    )
                                                        )
                                                    )
                      order by nome_filial_unidade
            ';
            --
            open result
             for v_SQL
           using p_cod_usuario
               , v_cod_tipo_usuario;
            --
        end if;
        --
        return result;
        --
    exception
    when others then
        ts_log_execucao ('RB_REEMBOLSO'
                        , v_linha
                        , ts_util.MsgErro || ' - ' || ts.top_utl_padrao.msgerro
                        , v_SQL                                          || chr(10) ||
                          '/*'                                           || chr(10) ||
                          'p_cod_retorno       = ' || p_cod_retorno      || chr(10) ||
                          'p_msg_retorno       = ' || p_msg_retorno      || chr(10) ||
                          'p_cod_usuario       = ' || p_cod_usuario      || chr(10) ||
                          'p_ind_consulta      = ' || p_ind_consulta     || chr(10) ||
                          'v_cod_tipo_usuario  = ' || v_cod_tipo_usuario || chr(10) ||
                          '*/'
                        , 'get_filial_unidade'
                        ) ;
       --
       return get_cursor_vazio;
       --
    end get_filial_unidade;
    --
    --
    --
    PROCEDURE get_endereco_prestador ( p_cod_retorno         out varchar2
                                     , p_msg_retorno         out varchar2
                                     , p_num_insc_fiscal     in varchar2
                                     , p_xml_retorno         out clob
                                     )

    is
        --result                          sys_refcursor;
        vXMLRetorno                     clob;
        v_SQL                           varchar2(32700);
        c_nome_cabecalho                varchar2(50) := 'ENDERECO_PRESTADOR';
        c_nome_coluna                   varchar2(50) := 'DADOS';
        v_cod_retorno                   pls_integer;
        v_msg_retorno                   varchar2(4000);


    begin
        --
        --


        v_SQL := rtrim('select ep.end_prestador || '', ''|| ep.num_endereco || '', ''|| ep.nome_bairro || '', ''|| ep.nome_cidade || '', ''|| ep.sgl_uf  as endereco')
               ||rtrim('       ,ep.num_cnes                                                                                                                         ')
               ||rtrim('       ,ep.cod_prestador_ts                                                                                                                 ')
               ||rtrim('       ,ep.seq_endereco                                                                                                                     ')
               ||rtrim('  from endereco_prestador ep                                                                                                                ')
               ||rtrim(' where ep.cod_prestador_ts = (select ps.cod_prestador_ts                                                                                    ')
               ||rtrim('  from prestador_servico ps,                                                                                                                ')
               ||rtrim('       rede_prestador rp,                                                                                                                   ')
               ||rtrim('       entidade_sistema es                                                                                                                  ')
               ||rtrim(' where ps.cod_prestador_ts = rp.cod_prestador_ts                                                                                            ')
               ||rtrim('   and ps.cod_entidade_ts = es.cod_entidade_ts                                                                                              ')
               ||rtrim('   and ((es.num_cgc = :p_num_insc_fiscal) or (es.num_cpf = :p_num_insc_fiscal))                                                             ')
               ||rtrim('   and rownum = 1)                                                                                                                          ');

        --
        add_parametro_sql ( p_nome_parametro      => 'p_num_insc_fiscal'
                          , p_valor_parametro     => p_num_insc_fiscal
                          );
        --
        --Montar XML com resultado da pesquisa
        vXMLRetorno := gerar_xml ( p_sql            => v_SQL
                                 , p_nome_cabecalho => c_nome_cabecalho
                                 , p_nome_coluna    => c_nome_coluna
                                 );
        --
        if vXMLRetorno is not null then
        --
            TOP_XML_VALIDAR ( v_cod_retorno
                            , v_msg_retorno
                            , vXMLRetorno
                            );
        --
            if v_cod_retorno != 0 then
                TS_LOG_EXECUCAO ( 'TS.RB_REEMBOLSO', 99, 'Erro ao validar XML', vXMLRetorno || chr(13) || v_SQL || chr(13) || v_msg_retorno, 'get_xml_endereco' );
            end if;
        end if;
        --

        p_xml_retorno := vXMLRetorno;
        --
    exception
    when others then
        ts_log_execucao ( 'RB_REEMBOLSO'
                        , 10
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                  || chr(13) || 'Query:' || vXMLRetorno
                        , 'get_xml_endereco' );

    end;--get_endereco_prestador
    --
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um XML com as funções de reembolso que o usuario possui permissão
    ----------------------------------------------------------------------------
    procedure get_xml_permissoes    ( p_xml_retorno      out clob
                                    , p_cod_retorno      out number
                                    , p_msg_retorno      out varchar2
                                    , p_cod_usuario      in varchar2
                                    , p_cod_tipo_usuario in varchar2
                                    )
    is
        str_Sql                         Varchar2(32000) := '';
        str_Xml                         clob;
        v_cod_mod_reembolso             Varchar2(2) := '79';
    begin
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
        --Montar SQL
        --
        str_Sql := '';
        str_Sql := str_Sql || ' select u.cod_usuario        , upper (ap.cod_funcao) cod_funcao';
        str_Sql := str_Sql || ' from   usuario              u';
        str_Sql := str_Sql || '      , perfil_tipo_usuario  ptu';
        str_Sql := str_Sql || '      , autorizacao_perfil   ap';
        str_Sql := str_Sql || ' where  u.cod_usuario        = :cod_usuario';
        str_Sql := str_Sql || ' and    u.cod_tipo_usuario   = ptu.cod_tipo_usuario';
        str_Sql := str_Sql || ' and    ptu.cod_perfil       = ap.cod_perfil';
        str_Sql := str_Sql || ' and    exists (select null';
        str_Sql := str_Sql || '                from   ts.funcao f';
        str_Sql := str_Sql || '                where  f.cod_funcao = ap.cod_funcao';
        str_Sql := str_Sql || '                and    f.cod_modulo = :cod_modulo)';
        str_Sql := str_Sql || ' union ';
        str_Sql := str_Sql || ' select u.cod_usuario        , upper (ap.cod_funcao) cod_funcao';
        str_Sql := str_Sql || ' from   usuario              u';
        str_Sql := str_Sql || '      , perfil_usuario       pu';
        str_Sql := str_Sql || '      , autorizacao_perfil   ap';
        str_Sql := str_Sql || ' where  u.cod_usuario        = :cod_usuario';
        str_Sql := str_Sql || ' and    u.cod_usuario        = pu.cod_usuario';
        str_Sql := str_Sql || ' and    pu.cod_perfil        = ap.cod_perfil';
        str_Sql := str_Sql || ' and    exists (select null';
        str_Sql := str_Sql || '                from   ts.funcao f';
        str_Sql := str_Sql || '                where  f.cod_funcao = ap.cod_funcao';
        str_Sql := str_Sql || '                and    f.cod_modulo = :cod_modulo)';
        --
        add_parametro_sql ( p_nome_parametro => 'cod_usuario' , p_valor_parametro => p_cod_usuario );
        --
        add_parametro_sql ( p_nome_parametro => 'cod_modulo'  , p_valor_parametro => v_cod_mod_reembolso );
        --
        --Montar XML com resultado da pesquisa
        str_Xml := gerar_xml ( p_sql            => str_Sql
                             , p_nome_cabecalho => 'USUARIO_FUNCAO'
                             , p_nome_coluna    => 'DADOS'
                             );
        --
        p_xml_retorno := str_Xml;
        --
        return;
        --
    exception
    when others then
        --
        p_cod_retorno := 9;
        p_msg_retorno := 'Ocorreu o seguinte erro: ' || ts_util.MsgErro || ' ( ' || top_utl_padrao.msgerro  || ' )';
        --
        ts_log_execucao ( 'RB_REEMBOSLO'
                        , 999
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || top_utl_padrao.msgerro
                        , 'get_xml_funcao'
                        );
        --
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar os dados do procedimento
    ----------------------------------------------------------------------------
    procedure RetornaProcedimentoPrincipal( p_item_medico            in  varchar2
                                         , p_nome_item            out varchar2
                                         )

    is
        v_SQL                   varchar2(4000);
    begin
        --Validação
        IF NVL(p_item_medico,'0') = '0' THEN
            p_nome_item := '';
            return;
        END IF;
        --
        begin
            select vp.nome_item
             into  p_nome_item
            from   vwm_procedimento  vp
            where  vp.item_medico           = p_item_medico
            and    vp.tipo_item             in ('I','S','P');
        exception
          when others then
               p_nome_item := '';
        end;
        --
        return;
        --
    EXCEPTION
        WHEN OTHERS THEN

            p_nome_item := '';
            return;
    END;
    --
    --
    ----------------------------------------------------------
    -- Encaminhar / Transferir reembolso para grupo de análise
    ----------------------------------------------------------
    procedure processa_encaminhamento ( p_num_reembolso            in  varchar2
                                      , p_cod_grupo_encaminhamento in  varchar2
                                      , p_ind_tipo_encaminhamento  in  varchar2
                                      , p_cod_usuario              in  varchar2
                                      , p_cod_retorno              out pls_integer
                                      , p_msg_retorno              out varchar2
                                      )
    is
        v_cod_retorno                   pls_integer;
        v_msg_retorno                   varchar2(4000);
        v_num_seq_liberacao             pls_integer;
        v_cod_tipo_usuario              pls_integer;
        v_nome_grupo_enca               reembolso_grupo_regra.nom_grupo%type;
        --
    BEGIN
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
        if p_cod_grupo_encaminhamento is null then
           p_cod_retorno := 1;
           p_msg_retorno := 'Grupo não foi informado.';
           return;
        end if;
        --
        begin
            select nom_grupo
              into v_nome_grupo_enca
              from reembolso_grupo_regra
             where cod_grupo = p_cod_grupo_encaminhamento;
        exception
            when others then
               p_cod_retorno := 1;
               p_msg_retorno := 'Grupo informado não foi encontrado.';
               return;
        end;
        --
        begin
            select cod_tipo_usuario
            into   v_cod_tipo_usuario
            from   usuario
            where  cod_usuario = p_cod_usuario;
        exception
        when no_data_found then
            v_cod_tipo_usuario := 0;
        end;
        --
        select nvl(max(num_seq_liberacao),0)+1
        into   v_num_seq_liberacao
        from   pedido_reembolso_grupo
        where  num_reembolso            = p_num_reembolso
        and    cod_grupo                = p_cod_grupo_encaminhamento;
        --
        begin
            --
            -- Se for transferência, retirar de todos os grupos que o usuário faz parte
            if nvl(p_ind_tipo_encaminhamento,'E') = 'T' then
                for C_item in ( select /* rb_reembolso.processa_encaminhamento */
                                       prg.cod_grupo
                                     , prg.num_seq_liberacao
                                     , rgr.nom_grupo
                                     , prg.rowid
                                from   pedido_reembolso_grupo prg, reembolso_grupo_regra rgr
                                where  prg.ind_situacao     = '1'
                                and    prg.cod_grupo        = rgr.cod_grupo
                                and    prg.num_reembolso    = p_num_reembolso
                                and    prg.cod_grupo        in ( select pgp.cod_grupo
                                                             from   reembolso_grupo_perfil pgp
                                                             where  exists        ( select cod_perfil
                                                                                    from   ( select pu.cod_perfil
                                                                                             from   perfil_usuario pu
                                                                                             where  pu.cod_usuario = p_cod_usuario
                                                                                             union
                                                                                             select ptu.cod_perfil
                                                                                             from   perfil_tipo_usuario ptu
                                                                                             where  ptu.cod_tipo_usuario = v_cod_tipo_usuario
                                                                                           ) x
                                                                                    where  x.cod_perfil = pgp.cod_perfil
                                                                                  )
                                                          )
                              )
                loop
                    --Caso exista, colocar como analisado, porém colocando uma obs
                    update /* rb_reembolso.processa_encaminhamento */
                           pedido_reembolso_grupo
                    set    cod_usuario_liberacao     = p_cod_usuario
                         , dt_liberacao              = sysdate
                         , ind_situacao              = '2'
                         , txt_obs                   = substr(txt_obs || ' -- Transferido',1,500)
                         , ind_encaminhamento        = 'S'
                    where  rowid                     = C_item.rowid;
                    --
                    --Gerar ocorrência de Transferência
                    GeraOcorrencia ( p_num_reembolso,20,'Grupo Transferido: ' || C_item.nom_grupo,null,p_cod_usuario,p_cod_retorno,p_msg_retorno);
                    --
                    if p_cod_retorno != 0 then
                       rollback;
                       return;
                    end if;
                    --
                end loop;
            end if;
            --
            insert
            into /* rb_reembolso.processa_encaminhamento */
                pedido_reembolso_grupo
              ( num_reembolso,                cod_grupo,
                ind_tipo,                     ind_encaminhamento,
                dt_atu,                       cod_usuario_atu,
                cod_usuario_encam,            ind_situacao,
                dt_encaminhamento,            num_seq_liberacao)
            values
              ( p_num_reembolso,              p_cod_grupo_encaminhamento,
                1,                            'S',
                sysdate,                      p_cod_usuario,
                p_cod_usuario,                '1',
                sysdate,                      v_num_seq_liberacao);
            --
            if v_num_seq_liberacao > 1 then
                -- gera ocorrencia de reencaminhamento
                GeraOcorrencia ( p_num_reembolso,38,'Reembolso reencaminhado para o grupo: ' || v_nome_grupo_enca,null,p_cod_usuario,p_cod_retorno,p_msg_retorno);
            else
                -- gera ocorrencia de encaminhamento
                GeraOcorrencia ( p_num_reembolso,35,'Reembolso encaminhado para o grupo: ' || v_nome_grupo_enca,null,p_cod_usuario,p_cod_retorno,p_msg_retorno);
            end if;
            --
            if p_cod_retorno != 0 then
               rollback;
               return;
            end if;
            --
            -- atualiza a situação para "Em Análise Técnica"
            update ts.pedido_reembolso
               set ind_situacao = 47
             where num_reembolso = p_num_reembolso;
            --
            TS.AGENDA_NOTIFICACAO_REEMBOLSO(p_num_reembolso, 2,47);
            --
        exception
        when others then
            p_cod_retorno := 9;
            p_msg_retorno := 'processa_encaminhamento - '||p_num_reembolso|| '-' || ': ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
            rollback;
        end;
        --
        p_cod_retorno :=  0;
        p_msg_retorno := 'Encaminhamento do pedido ' || p_num_reembolso || ' realizado.';
        --
        commit;
        --
    exception
    when others then
        p_cod_retorno := 9;
        p_msg_retorno := 'processa_encaminhamento - '||p_num_reembolso|| '-' || ': ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
        rollback;
    end processa_encaminhamento;
    --
    --
    -----------------------------------------------------------------
    -- Liberação das glosas da cabeça
    -----------------------------------------------------------------
    procedure LiberacaoGlosa ( p_cod_retorno    out pls_integer
                             , p_msg_retorno    out varchar2
                             , p_xml_dados      in  clob
                             , p_num_reembolso  in  varchar2
                             , p_cod_usuario    in  varchar2
                             )
    is
        --
        cursor cur_glosa      (pXML in sys.XMLType)
        is
        select nvl(extractValue( VALUE(T) , '//IND_ANALISE'     ),'N') IND_ANALISE
             , nvl(extractValue( VALUE(T) , '//COD_MOTIVO_GLOSA'),0  ) COD_MOTIVO_GLOSA
             , extractValue( VALUE(T) , '//IND_MOTIVO_LIBERACAO')      IND_MOTIVO_LIBERACAO
             , extractValue( VALUE(T) , '//IND_SOLICITADO_POR')        IND_SOLICITADO_POR
             , extractValue( VALUE(T) , '//COD_TIPO_ACP')              COD_TIPO_ACP
        from   table ( xmlsequence ( extract(pXML,'/LIBERACAO_GLOSA/GLOSA') ) ) T;
        --
        V_XML                           sys.XMLType;
        --
    begin
        --
        --
        V_XML := sys.XMLType.createXML( p_xml_dados );
        --
        --
        for rc_glosa in cur_glosa (V_XML) loop
            --
            if rc_glosa.cod_motivo_glosa > 0 then
                --
                if rc_glosa.ind_analise = 'S' then
                    -- Liberar a glosa informada
                    update /*rb_reembolso.LiberacaoGlosa*/
                           reembolso_glosa
                    set    ind_analisado         = rc_glosa.ind_analise
                         , dt_liberacao          = sysdate
                         , cod_usuario_liberacao = p_cod_usuario
                         , txt_obs               = null
                         , mot_liberacao         = rc_glosa.ind_motivo_liberacao
                         , solicitado_por        = rc_glosa.ind_solicitado_por
                         , cod_tipo_acp          = rc_glosa.cod_tipo_acp
                    where  num_reembolso         = p_num_reembolso
                    and    cod_motivo_glosa      = rc_glosa.cod_motivo_glosa
                    and    num_seq_item          = 0;
                else
                    update /*rb_reembolso.LiberacaoGlosa*/
                           reembolso_glosa
                    set    ind_analisado         = rc_glosa.ind_analise
                         , dt_liberacao          = null
                         , cod_usuario_liberacao = null
                         , txt_obs               = null
                         , mot_liberacao         = null
                         , solicitado_por        = null
                         , cod_tipo_acp          = null
                    where  num_reembolso         = p_num_reembolso
                    and    cod_motivo_glosa      = rc_glosa.cod_motivo_glosa
                    and    num_seq_item          = 0;
                end if;
            end if;
        end loop;
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
    exception
    when others then
        p_cod_retorno:=9;
        p_msg_retorno:='Ocorreu um erro ao liberar as glosas da cabeça: ' || chr(13) || ts_util.MsgErro;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Liberação das glosas dos itens
    ----------------------------------------------------------------------------
    procedure LiberacaoGlosaItem ( p_cod_retorno     out pls_integer
                                 , p_msg_retorno     out varchar2
                                 , p_xml_dados       in  clob
                                 , p_num_rembolso    in  varchar2
                                 , p_num_seq_item    in  pls_integer
                                 , p_cod_usuario     in  varchar2
                                 )
    is
        --
        cursor cur_glosa      (pXML in sys.XMLType)
        is
        select nvl(extractValue( VALUE(T) , '//IND_ANALISE'     ),'N') IND_ANALISE
             , nvl(extractValue( VALUE(T) , '//COD_MOTIVO_GLOSA'),0  ) COD_MOTIVO_GLOSA
             , extractValue( VALUE(T) , '//IND_MOTIVO_LIBERACAO')      IND_MOTIVO_LIBERACAO
             , extractValue( VALUE(T) , '//IND_SOLICITADO_POR')        IND_SOLICITADO_POR
             , extractValue( VALUE(T) , '//COD_TIPO_ACP')              COD_TIPO_ACP
        from   table ( xmlsequence ( extract(pXML,'/LIBERACAO_GLOSA_ITEM/GLOSA') ) ) T;
        --
        V_XML                           sys.XMLType;
        --
    begin
        --

        V_XML := sys.XMLType.createXML( p_xml_dados );
        --
        --
        for rc_glosa in cur_glosa (V_XML) loop
            --
            if rc_glosa.cod_motivo_glosa > 0 then
                --
                if rc_glosa.ind_analise = 'S' then
                    -- Liberar a glosa informada
                    update /*  rb_reembolso.LiberacaoGlosaItem  */
                           reembolso_glosa
                    set    ind_analisado            = rc_glosa.ind_analise
                         , dt_liberacao             = sysdate
                         , cod_usuario_liberacao    = p_cod_usuario
                         , mot_liberacao            = rc_glosa.ind_motivo_liberacao
                         , solicitado_por           = rc_glosa.ind_solicitado_por
                         , cod_tipo_acp             = rc_glosa.cod_tipo_acp
                    where  num_reembolso            = p_num_rembolso
                    and    num_seq_item             = p_num_seq_item
                    and    cod_motivo_glosa         = rc_glosa.cod_motivo_glosa;
                    --
                else
                    --
                    update /*  rb_reembolso.LiberacaoGlosaItem  */
                           reembolso_glosa
                    set    ind_analisado            = rc_glosa.ind_analise
                         , dt_liberacao             = null
                         , cod_usuario_liberacao    = null
                         , mot_liberacao         = null
                         , solicitado_por        = null
                         , cod_tipo_acp             = null
                    where  num_reembolso            = p_num_rembolso
                    and    num_seq_item             = p_num_seq_item
                    and    cod_motivo_glosa         = rc_glosa.cod_motivo_glosa;
                    --
                end if;
            end if;
        end loop;
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
    exception
    when others then
        p_cod_retorno:=9;
        p_msg_retorno:='Ocorreu um erro ao liberar as glosas dos itens: ' || chr(13) || ts_util.MsgErro;
    end;
    --
    --


    procedure gravaMotivoIndef (  p_cod_retorno     out pls_integer
                                , p_msg_retorno     out varchar2
                                , p_xml_dados       in  clob
                                , p_num_reembolso   in  varchar2
                                , p_cod_usuario     in  varchar2)
    is
        ---
        cursor cur_motivo      (pXML in sys.XMLType)
        is
        select extractValue( VALUE(T) , '//COD_MOTIVO_INDEF') COD_MOTIVO_INDEF
        from   table ( xmlsequence ( extract(pXML,'/MOTIVOS/ITEM') ) ) T;
        --
        V_XML                           sys.XMLType;
        v_retorno               varchar2(3000);
        v_nom_ocorrencia        varchar2(4000);
        v_nom_temp_ocorrencia   varchar2(4000);
        --
    begin
        --
        V_XML := sys.XMLType.createXML( p_xml_dados );
        --
        IF V_XML is not null THEN
            FOR rc_motivo in cur_motivo (V_XML) LOOP
                --
                BEGIN
                    INSERT INTO reembolso_pedido_indef( cod_motivo
                                                    , num_reembolso
                                                    , cod_usuario_atu
                                                    , dt_atu)
                                                VALUES( rc_motivo.COD_MOTIVO_INDEF
                                                    , p_num_reembolso
                                                    , p_cod_usuario
                                                    , SYSDATE);
                    SELECT desc_motivo
                     INTO v_nom_ocorrencia
                    FROM reembolso_motivo_indef
                    WHERE cod_motivo = rc_motivo.COD_MOTIVO_INDEF;

                    v_nom_temp_ocorrencia := 'Motivo: '|| v_nom_ocorrencia || '<br>' || v_nom_temp_ocorrencia;
                    v_nom_temp_ocorrencia := RTRIM(v_nom_temp_ocorrencia, '<br>');

                EXCEPTION
                    WHEN dup_val_on_index THEN
                    raise;
                END;
            END LOOP;

            BEGIN
                GeraOcorrencia ( p_num_reembolso,5,v_nom_temp_ocorrencia ,null,p_cod_usuario,p_cod_retorno,p_msg_retorno);
            EXCEPTION
                WHEN dup_val_on_index THEN
                raise;
            END;
        END IF;
        --
        p_cod_retorno := 0;
        p_msg_retorno := v_retorno;
    exception
    when others then
        p_cod_retorno:=9;
        p_msg_retorno:=ts_util.MsgErro;
    end;
    --
    --
    ---------------------------------------------------
    -- Gerar o item de pagamento
    ---------------------------------------------------
    procedure GerarPagamento ( p_cod_retorno      out number
                             , p_msg_retorno      out varchar2
                             , pRsReembolso       in pedido_reembolso%rowtype
                             , p_cod_usuario      in varchar2
                             )
    is
        v_cod_conta_mxm             beneficiario_faturamento.cod_conta_mxm%type;
        v_num_item_pagamento_ts     number;
        v_posicao                   pls_integer;
    begin
        --
        v_posicao := 10;
        --
        v_cod_conta_mxm := pRsReembolso.cod_conta_mxm;
        --
        if v_cod_conta_mxm is null and pRsReembolso.Ind_Forma_Pgto = '1' then
          NULL;
        end if;
        --
        v_posicao := 20;
        --
        pag_grava_item ( p_ind_origem_item         => 3
                       , p_num_grd                 => null
                       , p_mes_ano_ref             => null
                       , p_cod_prestador_ts        => null
                       , p_data_solicitacao_rev    => null
                       , p_cod_ts_contrato         => null
                       , p_cod_empresa             => null
                       , p_cod_ts                  => null
                       , p_num_reembolso           => pRsReembolso.num_reembolso
                       , p_cod_corretor_ts         => null
                       , p_num_ciclo_ref           => null
                       , p_val_bruto               => pRsReembolso.val_reembolsado
                       , p_val_base_impostos       => pRsReembolso.val_reembolsado
                       , p_dt_pgto_prevista        => pRsReembolso.dt_prevista_pgto
                       , p_usuario_insercao        => p_cod_usuario
                       , p_cod_banco               => pRsReembolso.cod_banco
                       , p_cod_agencia             => pRsReembolso.cod_agencia
                       , p_num_dv_agencia          => pRsReembolso.num_dv_agencia
                       , p_num_conta_corrente      => pRsReembolso.num_conta_corrente
                       , p_num_dv_cc               => pRsReembolso.num_dv_cc
                       , p_cod_conta_mxm           => v_cod_conta_mxm
                       , p_cod_tipo_rubrica        => 11
                       , p_ind_forma_pgto          => pRsReembolso.ind_forma_pgto
                       , p_num_pagamento_ts        => null
                       , p_num_item_pagamento_ts   => v_num_item_pagamento_ts
                       , p_ind_erro_out            => p_cod_retorno
                       , p_msg_retorno_out         => p_msg_retorno
                       , p_commit                  => 'N'
                       );
        --
        v_posicao := 30;
        --
        if p_cod_retorno != 0 then
            TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 00, 'Item Pagamento Não Gerado', 'Item : ' || v_num_item_pagamento_ts || ' - num_reembolso :' || pRsReembolso.num_reembolso || chr(13) || 'p_msg_retorno =' || p_msg_retorno , pRsReembolso.num_protocolo);
            p_msg_retorno := 'Geração de PGTO: ' || p_msg_retorno;
            return;
        end if;
        --
        v_posicao := 40;
        --
        update pedido_reembolso
           set num_item_pagamento_ts = v_num_item_pagamento_ts
             , cod_usuario_analise   = null
         where num_reembolso         = pRsReembolso.num_reembolso;
        --
        v_posicao := 50;
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
    exception
        when others then
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO'
                        , v_posicao
                        , 'Item Pagamento Não Gerado'
                        , 'Item : ' || v_num_item_pagamento_ts ||
                          ' - num_reembolso :' || pRsReembolso.num_reembolso || chr(13) ||
                          ts_util.MsgErro || ' - ' || ts.ts_util.msgerro
                        , 'GerarPagamento - num_protocolo = ' || pRsReembolso.num_protocolo
                        );
        --
    end GerarPagamento;
    --
       ----------------------------------------------------------------------------
    -- Gravar os dados da carta de autorização
    ----------------------------------------------------------------------------
    PROCEDURE GravaDadosCartaAutorizacao( p_ind_envio_carta            in   varchar2,
                                          p_num_reembolso              in   number,
                                          p_num_associado              in   varchar2,
                                          p_txt_obs_procedimento       in   varchar2,
                                          p_uf_demandado               in   varchar2,
                                          p_cod_municipio_demandado    in   number,
                                          p_uf_efetivado               in   varchar2,
                                          p_cod_municipio_efetivado    in   number,
                                          p_data_reembolso             in   date,
                                          p_data_agendamento           in   date,
                                          p_qtd_dias_parametrizado     in   number,
                                          p_num_protocolo_atendimento  in   varchar2,
                                          p_val_estimado               in   number,
                                          p_ind_atendimento_rn         in   varchar2,
                                          p_nome_rn                    in   varchar2,
                                          p_cod_usuario_atu            in   varchar2,
                                          p_cod_retorno           out  number,
                                          p_msg_retorno           out  varchar2,
                                          p_ind_municipio_deslocamento in   varchar2,
                                          p_qtd_procedimento_carta     in   number) is

    v_data_exclusao                date;
    v_data_agendamento_ant         date;
    v_calculo_data                 date;
    v_ind_data_parametrizada       varchar2(1);
    v_nome_rn                      varchar2(100);
    v_ind_tem_carta                number;
    v_cod_municipio_demandado_old  number;
    v_cod_municipio_efetivado_old  number;
    v_nome_municipio_demandado_old  varchar2(100);
    v_nome_municipio_efetivado_old  varchar2(100);
    v_obs_reembolso                 varchar2 (255);
    v_origem_demandado              varchar2(100);
    v_destino_efetivado             varchar2(100);
    --
    begin

    ---------------------------------------------------------------------------------
    --
    IF nvl(p_ind_municipio_deslocamento,'M') = 'M' THEN
       v_origem_demandado  := 'Município Demandado: ';
       v_destino_efetivado := 'Município Efetivado: ';
    ELSE
       v_origem_demandado  := 'Município Origem: ';
       v_destino_efetivado := 'Município Destino: ';
    END IF;
    --
    IF nvl(p_ind_envio_carta,'N') = 'N' THEN

       SELECT count(*)
         INTO v_ind_tem_carta
         FROM ts.reembolso_carta_autorizacao
        WHERE num_reembolso = p_num_reembolso;

        IF v_ind_tem_carta > 0 THEN

           BEGIN
              DELETE FROM ts.reembolso_carta_autorizacao
                    WHERE num_reembolso = p_num_reembolso;
           EXCEPTION
             WHEN OTHERS THEN
               p_cod_retorno := 9;
               p_msg_retorno := 'Erro ao realizar alteração da carta autorização: ' || ts_util.MsgErro;
               rollback;
           END;

        END IF;
    ELSE

      --Validações da Carta de Autorização de Reembolso
      IF p_uf_demandado is null or p_uf_efetivado is null THEN
         p_cod_retorno := 9;
         p_msg_retorno := 'Estado é obrigatório.';
         return;
      END IF;

      IF p_cod_municipio_demandado is null THEN
         p_cod_retorno := 9;
         p_msg_retorno := 'Município Demandado é obrigatório.';
         return;
      END IF;

      IF p_cod_municipio_efetivado is null THEN
         p_cod_retorno := 9;
         p_msg_retorno := 'Município Efetivado é obrigatório.';
         return;
      END IF;

      IF p_num_protocolo_atendimento is null THEN
         p_cod_retorno := 9;
         p_msg_retorno := 'Protocolo de Atendimento é obrigatório.';
         return;
      END IF;

      IF p_data_agendamento IS NULL THEN

          BEGIN
            SELECT a.data_exclusao
              INTO v_data_exclusao
              FROM ts.associado a
             WHERE a.num_associado = p_num_associado;
          EXCEPTION
            WHEN OTHERS THEN
              v_data_exclusao := null;
          END;
          --
          IF v_data_exclusao IS NULL THEN
             v_calculo_data := trunc(p_data_reembolso) + p_qtd_dias_parametrizado;
          ELSE
            v_calculo_data := v_data_exclusao;
          END IF;

          v_ind_data_parametrizada := 'S';
          --
      ELSE
        BEGIN
          SELECT rc.data_agendamento, rc.ind_data_parametrizada
            INTO v_data_agendamento_ant,v_ind_data_parametrizada
            FROM ts.reembolso_carta_autorizacao rc
           WHERE num_reembolso = p_num_reembolso;
         EXCEPTION
           WHEN OTHERS THEN
              v_data_agendamento_ant    := NULL;
              v_ind_data_parametrizada  := NULL;
         END;
          --
          IF p_data_agendamento = v_data_agendamento_ant THEN
            v_ind_data_parametrizada := v_ind_data_parametrizada;
            v_calculo_data := p_data_agendamento;
          ELSE
            v_ind_data_parametrizada := 'N';
            v_calculo_data := p_data_agendamento;
          END IF;
      END IF;

      IF trunc(p_data_agendamento) < trunc(p_data_reembolso) THEN
         p_cod_retorno := 9;
         p_msg_retorno := 'Data Agendamento não pode ser inferior a Data Solicitação.';
         return;
      END IF;
      --
      IF p_ind_atendimento_rn = 'S' AND p_nome_rn IS NULL THEN
        v_nome_rn := 'Atendimento para o RN';
      ELSIF p_ind_atendimento_rn = 'N' THEN
        v_nome_rn := NULL;
      ELSE
        v_nome_rn := p_nome_rn;
      END IF;
      --
      BEGIN
        INSERT INTO TS.REEMBOLSO_CARTA_AUTORIZACAO (NUM_REEMBOLSO,
                                                    NUM_ASSOCIADO,
                                                    TXT_OBS_PROCEDIMENTO,
                                                    UF_DEMANDADO,
                                                    COD_MUNICIPIO_DEMANDADO,
                                                    UF_EFETIVADO,
                                                    COD_MUNICIPIO_EFETIVADO,
                                                    DATA_AGENDAMENTO,
                                                    IND_DATA_PARAMETRIZADA,
                                                    NUM_PROTOCOLO_ATENDIMENTO,
                                                    VAL_ESTIMADO,
                                                    IND_ATENDIMENTO_RN,
                                                    NOME_RN,
                                                    COD_USUARIO_ATU,
                                                    DT_ATU,
                                                    QTD_PROCEDIMENTO_CARTA)
                                       VALUES     ( p_num_reembolso
                                                  , p_num_associado
                                                  , p_txt_obs_procedimento
                                                  , p_uf_demandado
                                                  , p_cod_municipio_demandado
                                                  , p_uf_efetivado
                                                  , p_cod_municipio_efetivado
                                                  , v_calculo_data
                                                  , v_ind_data_parametrizada
                                                  , p_num_protocolo_atendimento
                                                  , p_val_estimado
                                                  , p_ind_atendimento_rn
                                                  , v_nome_rn
                                                  , p_cod_usuario_atu
                                                  , SYSDATE
                                                  , p_qtd_procedimento_carta);
          EXCEPTION
              WHEN DUP_VAL_ON_INDEX THEN

                 BEGIN
                    SELECT cod_municipio_demandado
                         , m1.nom_municipio        nome_municipio_demandado
                         , cod_municipio_efetivado
                         , m2.nom_municipio        nome_municipio_efetivado
                      INTO v_cod_municipio_demandado_old
                         , v_nome_municipio_demandado_old
                         , v_cod_municipio_efetivado_old
                         , v_nome_municipio_efetivado_old
                      FROM ts.reembolso_carta_autorizacao rc
                         , ts.municipio                   m1
                         , ts.municipio                   m2
                     WHERE rc.cod_municipio_demandado = m1.cod_municipio
                       AND rc.cod_municipio_efetivado = m2.cod_municipio
                       AND rc.num_reembolso           = p_num_reembolso;

                      IF v_cod_municipio_demandado_old != p_cod_municipio_demandado THEN
                         --
                         v_obs_reembolso :=  v_origem_demandado|| ' ' ||
                                             v_cod_municipio_demandado_old ||
                                             ' - ' ||
                                             v_nome_municipio_demandado_old ||
                                             '<br>';
                         --
                      END IF;

                      IF v_cod_municipio_efetivado_old != p_cod_municipio_efetivado THEN
                      --
                         IF v_obs_reembolso is null THEN
                            --
                            v_obs_reembolso := v_destino_efetivado|| ' ' ||
                                             v_cod_municipio_efetivado_old ||
                                             ' - ' ||
                                             v_nome_municipio_efetivado_old;
                           --
                         ELSE
                           --
                           v_obs_reembolso := v_obs_reembolso
                                           ||' '
                                           || v_destino_efetivado
                                           || ' '
                                           || v_cod_municipio_efetivado_old
                                           || ' - '
                                           || v_nome_municipio_efetivado_old;
                           --
                         END IF;
                      END IF;

                  IF v_obs_reembolso != '' OR v_obs_reembolso is not null THEN

                     GeraOcorrencia(p_num_reembolso  => p_num_reembolso,
                                 p_cod_ocorrencia => 2,
                                 p_txt_obs        => '',
                                 p_txt_reembolso  => v_obs_reembolso,
                                 p_cod_usuario    => p_cod_usuario_atu,
                                 p_cod_retorno    => p_cod_retorno,
                                 p_msg_retorno    => p_msg_retorno,
                                 p_num_seq_item   => 0);
                  END IF;

                  UPDATE TS.REEMBOLSO_CARTA_AUTORIZACAO
                         SET txt_obs_procedimento          = p_txt_obs_procedimento
                           , uf_demandado                 = p_uf_demandado
                           , cod_municipio_demandado      = p_cod_municipio_demandado
                           , uf_efetivado                 = p_uf_efetivado
                           , cod_municipio_efetivado      = p_cod_municipio_efetivado
                           , data_agendamento             = v_calculo_data
                           , ind_data_parametrizada       = v_ind_data_parametrizada
                           , num_protocolo_atendimento    = p_num_protocolo_atendimento
                           , val_estimado                 = p_val_estimado
                           , ind_atendimento_rn           = p_ind_atendimento_rn
                           , nome_rn                      = v_nome_rn
                           , cod_usuario_atu              = p_cod_usuario_atu
                           , dt_atu                       = SYSDATE
                           , qtd_procedimento_carta       = p_qtd_procedimento_carta
                       WHERE num_reembolso = p_num_reembolso;
                  exception
                      when others then
                          p_cod_retorno := 9;
                          p_msg_retorno := 'Erro ao realizar alteração da carta autorização: ' || ts_util.MsgErro;
                          rollback;
                  end;
          END;
    END IF;

    IF p_cod_retorno != 9 THEN
       p_cod_retorno := 0;
       p_msg_retorno := null;
       commit;
    END IF;

    exception
        when others then
             TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 0, 'Erro geral na funcao', ts_util.MsgErro, 'geral - ' || ts_util.MsgErro );

             p_cod_retorno := 9;
             p_msg_retorno := 'GravaDadosCartaAutorizacao - ' || ts_util.MsgErro;
             rollback;

    end;
    --
    --
    procedure GravaReembolso  ( p_xml_dados                in clob
                              , p_num_reembolso            out number
                              , p_num_protocolo            out number
                              , p_cod_retorno              out number
                              , p_msg_retorno              out varchar2
                              )
    is
        v_xml_retorno   CLOB;
    BEGIN

        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 0, 'XML', p_xml_dados, 'GravaReembolso - XML' );

        GravaReembolso  ( p_xml_dados
                       , p_num_reembolso
                        , p_num_protocolo
                        , p_cod_retorno
                        , p_msg_retorno
                        , v_xml_retorno
                        , 'N');
    END GravaReembolso;

    ----------------------------------
    -- Gravar Blacklist de Locais Suspeitos
    ----------------------------------
    procedure verifica_rbm_pedido_geo_blacklist(p_num_reembolso in number) is
      --
      procedure limpa_historico is
      begin
        --
        delete rbm_pedido_geo_blacklist x
         where exists (select null
                  from pedido_reembolso p, rbm_pedido_geo_blacklist b, rbm_item_geolocalizacao i
                 where p.num_reembolso = b.num_reembolso
                   and b.cod_param_geolocalizacao = i.cod_param_geolocalizacao
                   and b.cod_item_geolocalizacao = i.cod_item_geolocalizacao
                   and trunc(sysdate) - p.dt_pedido > i.qtd_dias
                   and p.num_reembolso = x.num_reembolso
                   and i.cod_param_geolocalizacao = x.cod_param_geolocalizacao
                   and i.cod_item_geolocalizacao = x.cod_item_geolocalizacao);
        --
      end;
      --
      procedure popula_geo_blacklist(p_num_reembolso in number) is
      begin
        --
        insert into rbm_pedido_geo_blacklist
          (num_reembolso, cod_param_geolocalizacao, cod_item_geolocalizacao)
          with prm as
           (select /*+ materialize */
             r.num_reembolso,
             p.cod_param_geolocalizacao,
             i.cod_item_geolocalizacao,
             i.val_distancia_limite,
             ts_calcula_distancia(r.val_longitude, r.val_latitude, i.val_longitude, i.val_latitude) distancia_km
              from pedido_reembolso r, rbm_param_geolocalizacao p, rbm_item_geolocalizacao i
             where r.num_reembolso = p_num_reembolso
               and r.val_latitude is not null
               and r.val_longitude is not null
               and p.cod_param_geolocalizacao = i.cod_param_geolocalizacao
               and (p.cod_operadora = '99' or r.cod_operadora_contrato = p.cod_operadora)
               and r.ind_tipo_reembolso = p.ind_tipo_reembolso
               and p.ind_habilitado = 'S'
               and r.dt_pedido between p.dt_ini_vigencia and nvl(p.dt_fim_vigencia, r.dt_pedido))
          select num_reembolso, cod_param_geolocalizacao, cod_item_geolocalizacao
            from prm
           where distancia_km * 1000 < val_distancia_limite;
        --
      end;
      --
    begin
      --
      limpa_historico;
      popula_geo_blacklist(p_num_reembolso);
      --
    end;
    --

    ----------------------------------
    -- Gravar o Reembolso
    ----------------------------------
    procedure GravaReembolso  ( p_xml_dados                in clob
                              , p_num_reembolso            out number
                              , p_num_protocolo            out varchar2
                              , p_cod_retorno              out number
                              , p_msg_retorno              out varchar2
                              , p_xml_retorno              out clob
                              , p_ind_site            in varchar2 default 'N')
    is
        --Declarações:
        v_posicao                       number;
        v_item_vazio                    varchar2(3) := '¿¿¿';
        v_doc                           xmldom.DOMDocument;
        vXMLAnexo                       clob;
        vXMLAnexoRetorno                clob;
        v_xml_dados_ocr                 clob;
        --
        v_ind_permite_aprovacao         varchar2(1) := 'N';
        rsReembolso                     pedido_reembolso%rowtype;
        rsReembolsoPag                  pedido_reembolso%rowtype;
        v_num_protocolo                 pedido_reembolso.num_protocolo_ans%type;
        --
        v_dt_prevista_pgto_ant          date;
        v_qtd                           pls_integer;
        v_msg_retorno_sem_sucesso       varchar2(500) := null;
        rsProcedimentoReembolso         procedimento_reembolso%rowtype;
        ind_excluir                     varchar2(1);
        v_ind_acao_item                 varchar2(1);
        qtd_participante                number;
        v_existe_proc_con               number;
        v_cod_usuario                   usuario.cod_usuario%type;
        v_cod_tipo_usuario              usuario.cod_tipo_usuario%type;
        v_nome_arquivo                  reembolso_anexo.nom_arq_anexo%type;
        v_cod_anexo_ts                  anexo_ts.cod_anexo_ts%type;
        v_qtd_anexo                     number;
        v_result                        varchar2(10);
        v_qtd_procedimento              number;
        v_cod_procedimento_principal    procedimento_reembolso.cod_procedimento%type;
        v_cod_procedimento_princ_ant    procedimento_reembolso.cod_procedimento%type;
        v_ind_acao                      varchar2(2);
        v_ind_excluir                   varchar2(1);
        v_txt_memoria_calculo           memoria_reembolso.txt_memoria%type;
        v_num_seq_item_memoria          memoria_reembolso.num_seq_item%type;
        rsReembolsoAux                  pedido_reembolso%rowtype;
        rsProcedimentoReembolsoAux      procedimento_reembolso%rowtype;
        v_legenda_situacao_01           varchar2(50);
        v_legenda_situacao_02           varchar2(50);
        v_menor_num_seq_item            procedimento_reembolso.num_seq_item%type;
        v_maior_num_seq_item            procedimento_reembolso.num_seq_item%type;
        v_ind_procedimento_alterado     varchar2(1);
        v_ind_tipo_finalizacao          varchar2(1);
        v_cod_grupo_encaminhamento      varchar2(500);
        v_ind_tipo_encaminhamento       varchar2(1);
        v_cod_grupo_encaminhamento_de   varchar2(20);
        v_tipo_ocorrecia                number;
        v_cod_retorno                   number;
        v_msg_retorno                   varchar2(400);
        v_msg_retorno_sucesso           varchar2(400);
        v_msg_retorno_erro              varchar2(400);
        v_num_cnpj_nf                   number;
        v_val_informado                 number(10,2);
        v_val_moeda_estrangeira         number(10,2);
        v_ind_ppr                       varchar2(1);
        v_num_reembolso_nf              pedido_reembolso.num_reembolso%type;
        --VARIÁVEIS DA CARTA AUTORIZAÇÃO
        v_ind_envio_carta               varchar2(1);
        v_ind_municipio_deslocamento    varchar2(1);
        v_ind_login_permissao           varchar2(1);
        v_txt_obs_procedimento          reembolso_carta_autorizacao.txt_obs_procedimento%type;
        v_qtd_procedimento_carta        reembolso_carta_autorizacao.qtd_procedimento_carta%type;
        v_uf_municipio_demandado        reembolso_carta_autorizacao.uf_demandado%type;
        v_cod_municipio_demandado       reembolso_carta_autorizacao.cod_municipio_demandado%type;
        v_uf_municipio_efetivado        reembolso_carta_autorizacao.uf_efetivado%type;
        v_cod_municipio_efetivado       reembolso_carta_autorizacao.cod_municipio_efetivado%type;
        v_data_agendamento              reembolso_carta_autorizacao.data_agendamento%type;
        v_ind_data_parametrizada        reembolso_carta_autorizacao.ind_data_parametrizada%type;
        v_num_protocolo_atendimento     reembolso_carta_autorizacao.num_protocolo_atendimento%type;
        v_val_estimado_carta            reembolso_carta_autorizacao.val_estimado%type;
        v_ind_atendimento_rn            reembolso_carta_autorizacao.ind_atendimento_rn%type;
        v_nome_rn                       reembolso_carta_autorizacao.nome_rn%type;
        v_qtd_dias_carta_autorizacao    number;
        --
        v_xml_glosa                     clob;
        v_xml_motivo                    clob;
        v_xml_executante                clob;
        v_xml_solicitante               clob;
        v_existe_executante             number;
        v_xml_param                     clob;
        --
        v_ind_erro_ws                   varchar2(1);
        v_msg_erro_ws                   clob;
        --
        v_ind_desbloquear               varchar(1);
        v_nom_usuario                   usuario.nom_usuario%type;
        v_motivo_alter_dt_pgto          motivo_alter_dt_pgto.desc_motivo_alter_dt_pgto%type;

        v_qtd_docs_pedido               number;
        v_val_total_proc                number;
        v_ind_situacao_aux              number;
        v_ind_situacao_aux2             number;
        v_cod_fase_processo_aux2        number;
        --
        qtd_empresas_abrangencia        number;
        v_ind_banco_bloqueado           varchar2(1);
        --
        v_xml_saldo                     clob;
        --
        v_qtd_utilizada                 number;
        v_cod_motivo_glosa              number;
        v_cod_fase_processo_aux         number;
        v_tem_item_pagamento            number;
        v_ind_salva_documentos          varchar2(1);
        v_uf_inspetoria_abertura        varchar2(4);
        v_xml_divisao_aux               clob;
        v_xml_calcula                   clob;
        v_dt_ini_vigencia_benef         date;
        v_dt_ini_vigencia               varchar2(20);
        v_reembolso_original            pedido_reembolso.num_reembolso_origem%type;
        v_ind_commit                    varchar2(1);
        v_ind_reembolso_completo        varchar2(1);
        v_nome_arquivo_orig             varchar2(500);
        v_num_controle                  varchar2(3);
        v_ind_replica                   varchar2(1);
        v_num_protocolo_r               varchar2(15);
        v_tipo_situacao                 situacao_reembolso.tipo_situacao%type;
        v_ind_regra_cob                 varchar2(1);
        v_num_reembolsos                varchar2(400);
        v_qtd_reembolsos                number;
        v_ind_altera_dados_bancario     varchar2(1);
        v_cod_ts_favorecido             pedido_reembolso.cod_ts%type;
        v_cod_sucursal_favorecido       associado.cod_sucursal%type;
        v_existe_benef_faturamento      char(1);
        --
        p_xml_protocolo_ans             CLOB;
        v_txt_obs                       ts.atd_controle.txt_obs%type;
        v_protocolo_inclusao            varchar2(20);
        v_qtd_protocolo_atd             number;
        v_txt_url_nfe                   pedido_reembolso.txt_url_nfe%type;
        v_cod_inspetoria_courrier       reembolso_abrangencia_courier.cod_inspetoria_ts%type;
        --
        v_sql                           varchar2(32760);
        v_ind_nota_original             reembolso_anexo.ind_nota_original%type;
        v_cod_tipo_anexo                reembolso_anexo.cod_tipo_anexo%type;
        v_ExisteSuspensao               number :=0;
        v_ind_bloqueado                 reembolso_conta_mxm.ind_bloqueado%type;

        v_ExcluidoSuspensao             number :=0;
        v_duplicado_aux                 pls_integer;
        v_protocolo_aux                 varchar2(2000);
        P_Ind_Tipo_Reembolso  ts.REEMBOLSO_SUSPENSAO.IND_TIPO_REEMBOLSO%Type;
        v_dt_prevista_nova              date;
        p_ValorLimite         ts.pedido_reembolso.val_informado%Type;
        p_Val_informado       ts.pedido_reembolso.val_informado%Type;

        v_cod_altera_motivo             number;
        v_ind_original                  varchar2(1);
        --
        v_qtd_regra_lib                 number;
        v_qtd_regra_out                 number;
        v_ind_liberacao_aut             varchar2(1);
        v_qtd_glosa_out                 number;
        v_ValorLimite                   varchar(10);
        v_ind_documentacao              varchar2(1);

        v_cod_banco_ant              number(3);
        v_cod_agencia_ant            varchar2(4);
        v_num_conta_corrente_ant     varchar2(15);
        v_num_dv_agencia_ant         varchar2(2);
        v_num_dv_cc_ant              varchar2(2);
        v_num_cpf_favorecido_ant     number(11);
        v_num_cnpj_favorecido_ant    number(14);
        v_ind_tipo_conta_reemb_ant   varchar2(1);
        --
v_num_envelope             protocolo_reembolso.num_envelope%type;

      v_cod_tipo_envio_envelope  protocolo_reembolso.cod_tipo_envio_envelope%type;

        v_cod_liberacao                 number;
        v_cod_conta_mxm           varchar2(3);
        --
        v_qtd_tratamento            number;
        v_cod_tratamento_regra      pedido_reembolso.cod_tratamento%type;
        --  procedimento_reembolso_cid
        v_qtd_cid                   number;
        v_cod_cid                   varchar2(6);
        v_item_medico               varchar2(8);
        v_ind_acao_item_CID         varchar2(1);
        v_ind_excluir_CID           varchar2(1);
        v_ind_forma_abertura        varchar2(6);
        v_existe_cons_sem_espec     varchar2(1);
        v_cod_termo varchar2(10);
        v_cod_termo_benef varchar2(10);
        v_param_valida_duplicidade_site varchar2(1);
        v_qtd_forma_pgto		     NUMBER;
        v_cod_tipo_pgto              NUMBER;
        v_desc_cod_verificacao       VARCHAR2(300);
        ERRO                         exception;
		v_cod_grupo_pai                 varchar2(3);

        v_cod_municipio         NUMBER;
        v_cod_inspetoria_ts     NUMBER;
        v_cod_sucursal          NUMBER;
        v_dt_prevista_pgto_nova DATE;
        v_num_reembolso         NUMBER;
        v_ind_alt_modalidade    varchar2(1);
        v_descricao_motivo_indef varchar2(200);

        rsSolicitante          ts.solicitante%rowtype;
    begin

        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO.GravaReembolso', v_posicao, 'INICIO', p_xml_dados || chr(13) || ts.ts_util.msgerro || chr(13) || p_msg_retorno, 'GravaReembolso - XML');
        --
        v_posicao := 10;
        --
        --Início
        p_cod_retorno        := 0;
        p_msg_retorno        := '';
        v_ind_desbloquear    := 'N';
        v_tem_item_pagamento := null;


        begin
            select VAL_PARAMETRO_DEFAULT
            into   v_param_valida_duplicidade_site
            from TS.PARAMETRO_SISTEMA
            WHERE COD_PARAMETRO = 'REEMB_VALIDA_DUPLICIDADE_SITE';

        EXCEPTION
        WHEN OTHERS THEN
                v_param_valida_duplicidade_site := 'N';
        END;
        --
        BEGIN
           SELECT to_number(VAL_PARAMETRO_DEFAULT)
             INTO v_qtd_dias_carta_autorizacao
             FROM TS.PARAMETRO_SISTEMA
            WHERE COD_PARAMETRO = 'RBM_QTD_DIAS_ENVIO_CARTA_AUTORIZACAO';

        EXCEPTION
          WHEN OTHERS THEN
              v_qtd_dias_carta_autorizacao := 30;
        END;
        --
        --Ler informações do XML
        ts_cria_doc_xml(p_xml_dados, v_doc, p_cod_retorno, p_msg_retorno);
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'Debug', p_xml_dados || chr(13) || ts.ts_util.msgerro || chr(13) || p_msg_retorno, 'GravaReembolso - XML' );

        if p_cod_retorno <> 0 then
           p_msg_retorno := 'RB_REEMBOLSO.GravaReembolso.ts_cria_doc_xml: '|| p_msg_retorno;
           TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'ERRO', p_xml_dados || chr(13) || ts.ts_util.msgerro || chr(13) || p_msg_retorno, 'GravaReembolso - XML' );
           return;
        end if;
        --
        v_posicao := 20;
        --
        --Recuperar informações do XML
        --
        v_ind_acao             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_ACAO');
        v_ind_tipo_finalizacao := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_TIPO_FINALIZACAO');
        --
        --- BUSCAR INDICADOR SE É PARA SER REALIZO O COMMIT
        v_ind_commit             := nvl(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_COMMIT'),'S');
        --- INDICADOR DA TELA DE REEMBOLSO COMPLETO
        v_ind_reembolso_completo := nvl(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_REEMB_COMPLETO'),'N');
        v_num_reembolsos         := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_REEMBOLSOS');
        v_qtd_reembolsos         := nvl(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/QTD_REEMBOLSOS'),0);
        --
        v_ind_documentacao       := nvl(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_DOCUMENTACAO'),'N');
        --
        v_ind_altera_dados_bancario := nvl(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_ALTERA_DADOS_BANCARIO'),'N');
        --
        v_num_envelope           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_ENVELOPE');
        v_cod_tipo_envio_envelope := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_TIPO_ENVIO_ENVELOPE');
        --
        v_posicao := 30;
        --
        if v_ind_acao = 'I' then
            --
            v_protocolo_inclusao := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_PROTOCOLO');
            --
            begin
              v_posicao := 40;
              select num_protocolo_ans
                   , num_protocolo
                into rsReembolso.num_protocolo_ans
                   , rsReembolso.num_protocolo
                from ts.pedido_reembolso
               where (num_protocolo = v_protocolo_inclusao
                  or num_protocolo_ans = v_protocolo_inclusao)
                 and rownum = 1;
            exception
                when others then
                     rsReembolso.num_protocolo_ans := null;
                     rsReembolso.num_protocolo := null;
            end;
            --
            v_posicao := 50;
            v_cod_usuario                              := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_USUARIO'));
            rsReembolso.cod_origem                     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_ORIGEM');
            rsReembolso.cod_inspetoria_ts_abertura     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_INSPETORIA_TS_ABERTURA');
            rsReembolso.sgl_area_abertura              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/SGL_AREA_ABERTURA');
            rsReembolso.dt_pedido             := SYSDATE;
            rsReembolso.dt_inclusao           := SYSDATE;
      --
            if rsReembolso.cod_origem in(11,20) then

               if rsReembolso.ind_opt_in = 'N' and rsReembolso.Ind_Tipo_Comprovante != 'N' then
                  rsReembolso.ind_situacao          := 48;
               else
                  rsReembolso.ind_situacao          := 3;
               end if;

            else
              if (nvl(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/QTD_ANEXO'),0) > 0 ) then
                 --
                 for i in 1..ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/QTD_ANEXO') loop
                   if (trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/IND_NOTA_ORIGINAL_'||i)) = 'N') then
                      v_ind_original                    := 'N';
                   end if;
                 end loop;
                 --
                 if v_ind_original = 'N' then
                    --Se origem for tele-atendimento, colocar como Aguardando Documentação Original
                    if rsReembolso.cod_origem = 5 then
                     rsReembolso.ind_situacao         := 48;
                    else
                    rsReembolso.ind_situacao          := 28;
                    end if;
                 else
                   rsReembolso.ind_situacao          := 3;
                 end if;
                 --
              else
                rsReembolso.ind_situacao          := 48;
              end if;

            end if;
            --
            rsReembolso.cod_usuario_atu       := v_cod_usuario;
            rsReembolso.dt_atu                := sysdate;
            rsReembolso.cod_usuario_inclusao  := v_cod_usuario;
            rsReembolso.dt_situacao_pedido    := sysdate;
            v_tipo_ocorrecia                  := 1;
        else
            --
            v_posicao := 60;
            p_num_reembolso := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_REEMBOLSO');
            --
            v_posicao := 63;
            --
            select /*rb_reembolso.GravaReembolso*/
                   *
            into   rsReembolso
            from   pedido_reembolso
            where  num_reembolso = p_num_reembolso;
            --
            v_posicao := 65;
            --
            v_ind_situacao_aux                     := rsReembolso.ind_situacao;
            --
            --preenche os dados bancários do reembolso antes da alteração
            v_cod_banco_ant               := rsReembolso.Cod_Banco;
            v_cod_agencia_ant             := rsReembolso.cod_agencia;
            v_num_conta_corrente_ant      := rsReembolso.num_conta_corrente;
            v_num_dv_agencia_ant          := rsReembolso.num_dv_agencia;
            v_num_dv_cc_ant               := rsReembolso.num_dv_cc;
            v_num_cpf_favorecido_ant      := rsReembolso.num_cpf_favorecido;
            v_num_cnpj_favorecido_ant     := rsReembolso.num_cnpj_favorecido;
            v_ind_tipo_conta_reemb_ant    := rsReembolso.ind_tipo_conta_reemb;



            --
            begin
                select cod_fase_processo, tipo_situacao
                  into v_cod_fase_processo_aux, v_tipo_situacao
                  from situacao_reembolso
                 where cod_situacao = v_ind_situacao_aux;
            exception
                when others then
                    p_cod_retorno := 9;
                    p_msg_retorno := 'Ocorreu um erro na verificação da situação do reembolso.';
                    return;
            end;
            --
            v_posicao := 70;
            if v_cod_fase_processo_aux in (4,5,7,8) then
                 p_cod_retorno := 9;
                 p_msg_retorno := 'O Reembolso não esta em situação que permita a ação desejada.';
                 return;
            end if;
            --
            begin
                select num_item_pagamento_ts
                  into v_tem_item_pagamento
                  from itens_pagamento
                 where num_reembolso = rsReembolso.num_reembolso;
            exception
                when others then
                    v_tem_item_pagamento := 0;
            end;
            --
            v_posicao := 80;
            --
            if nvl(v_tem_item_pagamento,0) != 0 then
                --
                update pedido_reembolso
                   set num_item_pagamento_ts = v_tem_item_pagamento
                 where num_reembolso = rsReembolso.num_reembolso;
                --
                if v_ind_commit = 'S' then
                   commit;
                end if;
                --
                p_cod_retorno := 9;
                p_msg_retorno := 'Ação não permitida, já existe um item de pagamento para este reembolso.';
                return;
            end if;
            --
            v_posicao := 90;
            --
            --
            if v_qtd_reembolsos > 0 then
               for r in ( select x.column_value num_reembolso
                            from table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x )
               loop
                  --
                  --
                  select ind_situacao
                    into v_ind_situacao_aux2
                    from pedido_reembolso
                   where num_reembolso = r.num_reembolso;
                  --
                  begin
                      select cod_fase_processo
                        into v_cod_fase_processo_aux2
                        from situacao_reembolso
                       where cod_situacao = v_ind_situacao_aux2;
                  exception
                      when others then
                          p_cod_retorno := 9;
                          p_msg_retorno := 'Ocorreu um erro na verificação da situação do reembolso. Num. reembolso: ' || to_char(r.num_reembolso);
                          return;
                  end;
                  --
                  if v_cod_fase_processo_aux2 in (4,5,7,8) then
                       p_cod_retorno := 9;
                       p_msg_retorno := 'O Reembolso não esta em situação que permita a ação desejada. Num. reembolso: ' || to_char(r.num_reembolso);
                       return;
                  end if;
                  --
                  begin
                      select num_item_pagamento_ts
                        into v_tem_item_pagamento
                        from itens_pagamento
                       where num_reembolso = r.num_reembolso;
                  exception
                      when others then
                          v_tem_item_pagamento := 0;
                  end;
                  --
                  if nvl(v_tem_item_pagamento,0) != 0 then
                      --
                      update pedido_reembolso
                         set num_item_pagamento_ts = v_tem_item_pagamento
                       where num_reembolso = r.num_reembolso;
                      --
                      if v_ind_commit = 'S' then
                         commit;
                      end if;
                      --
                      p_cod_retorno := 9;
                      p_msg_retorno := 'Ação não permitida, já existe um item de pagamento para este reembolso. Num. reembolso: ' || to_char(r.num_reembolso);
                      return;
                  end if;
               end loop;
            end if;
            --
            v_posicao := 100;
            --
            v_dt_prevista_pgto_ant                 := rsReembolso.dt_prevista_pgto;
            --
            rsReembolso.cod_usuario_atu            := v_cod_usuario;
            rsReembolso.dt_atu                     := sysdate;
            rsReembolso.dt_deferimento             := null;
            rsReembolso.cod_usuario_deferimento    := null;
            rsReembolso.dt_indeferimento           := null;
            rsReembolso.cod_usuario_indeferimento  := null;
            rsReembolso.dt_cancelamento            := null;
            rsReembolso.cod_usuario_cancelamento   := null;
            rsReembolso.cod_motivo_indeferimento   := null;
            v_posicao := 110;
            --Executa validações em relção ao tipo de ação
            if v_ind_acao = 'A' then
                --------------------------
                -- ALTERAÇÃO
                --------------------------
                v_msg_retorno_sucesso          := ' alterado com sucesso.';
                v_msg_retorno_erro             := 'Erro ao alterar o reembolso ';
                if v_tipo_situacao = 'CR' then
                   rsReembolso.ind_situacao    := v_ind_situacao_aux; --Situação atual de courrier que se encontra
                else
                   rsReembolso.ind_situacao    := 28; --EM PROCESSAMENTO
                end if;
                v_tipo_ocorrecia               := 2;
                rsReembolso.dt_situacao_pedido := sysdate;
                v_ind_desbloquear              := nvl(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_DESBLOQUEAR'),'N');
                --
                v_posicao := 120;
                --
            elsif v_ind_acao = 'FN' then
                --------------------------
                -- FINALIZACAO
                --------------------------
                if v_ind_tipo_finalizacao = 'A' then
                    begin
                        select case when exists ( select 1
                            from procedimento_reembolso
                            where num_reembolso = rsReembolso.num_reembolso
                            and cod_procedimento = '10101012'
                            and cod_especialidade is null
                            )  then 'S' else 'N' end
                            into v_existe_cons_sem_espec
                            from dual;
                    end;
                    if v_existe_cons_sem_espec = 'S' then
                        p_cod_retorno := 9;
                        p_msg_retorno := 'Aprovação não permitida: Especialidade não informada.';
                        return;
                    end if;
                end if;
                v_posicao := 125;
				if v_ind_tipo_finalizacao = 'A' and ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_FORMA_PGTO') = 2 then
                    p_cod_retorno := 9;
                    p_msg_retorno := 'Forma de pagamento inválida, altere para Depósito/Transferência Bancaria.';
                    return;
                end if;
                v_posicao := 128;
                begin
                    select count(*)
                      into v_tem_item_pagamento
                      from itens_pagamento
                     where num_reembolso = rsReembolso.num_reembolso;
                exception
                    when others then
                        v_tem_item_pagamento := 0;
                end;
                --
                v_posicao := 130;
                --
                if v_tem_item_pagamento > 0 then
                    p_cod_retorno := 9;
                    p_msg_retorno := 'Finalização do reembolso não permitida, já existe um item de pagamento para este reembolso.';
                    return;
                end if;
                --
                v_msg_retorno_sucesso          := ' finalizado com sucesso.';
                v_msg_retorno_erro             := 'Erro ao finalizar o reembolso ';
                v_ind_desbloquear              := 'S';
                --
                v_posicao := 140;
                --
                if v_ind_tipo_finalizacao = 'A' then -- APROVACAO
                    --
                    v_posicao := 150;
                    v_tipo_ocorrecia                     := 3;
                    rsReembolso.ind_situacao             := 34;
                    rsReembolso.dt_situacao_pedido    := sysdate;
                    rsReembolso.cod_usuario_deferimento  := v_cod_usuario;
                    rsReembolso.dt_deferimento           := sysdate;
                    --
                elsif v_ind_tipo_finalizacao = 'R' then -- RECUSA
                    v_posicao := 160;
                    v_tipo_ocorrecia                     := 5; --5; Não grava ocorrencia, já é gravada nos motivos
                    rsReembolso.ind_situacao             := 33;
                    rsReembolso.dt_situacao_pedido       := sysdate;
                    rsReembolso.cod_usuario_indeferimento:= v_cod_usuario;
                    rsReembolso.dt_indeferimento         := sysdate;
                    -- HV início
                    -- Limpa utilizacao para co-participação
                    delete from ctm_diaria_realizada
                      where cod_ts_sinistro  = p_num_reembolso;
                    --
                    delete from ctm_procedimento_realizado
                      where cod_ts_sinistro  = p_num_reembolso;
                    --
                    delete from ctm_consulta_realizada
                      where cod_ts_sinistro  = p_num_reembolso;
                    --
                    delete from internacao_coparticipacao
                      where cod_ts_conta     = p_num_reembolso;
                    --
                    v_posicao := 170;
                    --
                    if v_qtd_reembolsos > 0 then
                        delete from ctm_diaria_realizada
                          where cod_ts_sinistro  in ( select x.column_value
                                                    from table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x );

                        delete from ctm_procedimento_realizado
                          where cod_ts_sinistro  in ( select x.column_value
                                                    from table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x );

                        delete from ctm_consulta_realizada
                          where cod_ts_sinistro  in ( select x.column_value
                                                    from table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x );

                        delete from internacao_coparticipacao
                          where cod_ts_conta     in ( select x.column_value
                                                    from table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x );
                     end if;
                    -- HV Final
                    --
                end if;
                --
            elsif v_ind_acao = 'CA' then
                v_posicao := 180;
                -------------------
                -- CANCELAMENTO
                -------------------
                 --Caso a Reanálise seja Cancelada, o Reembolso Original voltará a ter o IND_ANALISE = 'N'
                 BEGIN
                    SELECT pr.num_reembolso_origem
                      INTO v_reembolso_original
                      FROM ts.pedido_reembolso pr
                     where pr.num_reembolso = p_num_reembolso;
                 EXCEPTION
                     when no_data_found then
                          v_reembolso_original := NULL;
                 END;
                 --
                 if  v_reembolso_original is not null then
                    UPDATE pedido_reembolso pr
                     SET pr.IND_REANALISADO = 'N'
                   where pr.num_reembolso = v_reembolso_original;
                end if;
                --
                v_posicao := 190;
                --
                v_msg_retorno_sucesso                    := ' cancelado com sucesso.';
                v_msg_retorno_erro                       := 'Erro ao cancelar o reembolso ';
                --
                v_tipo_ocorrecia                         := 4;
                rsReembolso.ind_situacao                 := 26;
                rsReembolso.dt_situacao_pedido           := sysdate;
                rsReembolso.cod_usuario_indeferimento    := v_cod_usuario;
                rsReembolso.dt_cancelamento              := sysdate;
                rsReembolso.cod_motivo_indeferimento     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_MOTIVO');
                v_ind_desbloquear                        := 'S';
                --

            elsif v_ind_acao = 'TR' then
                --------------------------
                -- TRANSFERE GRUPO ANÁLISE
                --------------------------
                v_posicao := 200;
                v_ind_tipo_encaminhamento      := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_TIPO_ENCAMINHAMENTO');
                --
                if nvl(v_ind_tipo_encaminhamento,'E') = 'T' then
                    v_msg_retorno_sucesso          := ' transferido para o grupo com sucesso.';
                    v_msg_retorno_erro             := 'Erro ao tranferir para o grupo o reembolso ';
                else
                    v_msg_retorno_sucesso          := ' encaminhado para o grupo com sucesso.';
                    v_msg_retorno_erro             := 'Erro ao encaminhar para o grupo o reembolso ';
                end if;
                --
                v_tipo_ocorrecia               := 20; --20; Não grava ocorrencia, já é gravada nos motivos
                v_ind_desbloquear              := 'S';
                --
            else
                p_cod_retorno := 9;
                p_msg_retorno := 'Ação não informada ou inválida.';
                return;
            end if;
        end if;
        --
        v_posicao := 210;
        --
        if nvl(rsReembolso.cod_usuario_analise,'X') <> 'X' and rsReembolso.cod_usuario_analise <> v_cod_usuario then
            select nom_usuario
              into v_nom_usuario
              from usuario
             where cod_usuario = rsReembolso.cod_usuario_analise;

            p_cod_retorno := 9;
            p_msg_retorno := 'Ação não permitida. Reembolso encontra-se em análise com "' || rsReembolso.cod_usuario_analise || ' - ' || v_nom_usuario || '" ';
            if rsReembolso.dt_inicio_analise is not null then
               p_msg_retorno := p_msg_retorno || ' desde ' || rsReembolso.dt_inicio_analise;
            end if;
            return;
        end if;
        --
        v_posicao := 220;
        --Associado
        rsReembolso.num_associado         := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_ASSOCIADO');
        rsReembolso.nome_associado        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NOME_ASSOCIADO');
        rsReembolso.cod_ts                := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_TS');
        rsReembolso.num_cpf_associado     := replace(replace(replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CPF_ASSOCIADO'),'.',''),'-',''),'/','');
        rsReembolso.cod_ts_tit            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_TS_TIT');
        rsReembolso.cod_entidade_ts_tit   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_ENTIDADE_TS_TIT');
        rsReembolso.num_cpf_titular       := replace(replace(replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CPF_TITULAR'),'.',''),'-',''),'/','');
        rsReembolso.nome_titular          := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NOME_TITULAR');
        rsReembolso.num_titular           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_TITULAR');
        v_posicao := 230;

        v_posicao := 240;
        --
        rsReembolso.qtd_dias_reembolso    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/QTD_DIAS_REEMBOLSO');
        --
        if TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DATA_NASCIMENTO'), 'DD/MM/YYYY') then
            rsReembolso.data_nascimento   := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DATA_NASCIMENTO'), 'DD/MM/YYYY');
        end if;
        --
        rsReembolso.qtd_idade             := TO_NUMBER(ts_calcula_idade(rsReembolso.data_nascimento,TRUNC(SYSDATE),'A'));
        if rsReembolso.qtd_idade = -1 THEN
            rsReembolso.qtd_idade := null;
        end if;
        --
        v_posicao := 250;
        --
        rsReembolso.cod_rede                    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_REDE');
        rsReembolso.cod_plano                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_PLANO');
        rsReembolso.cod_ts_contrato             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_TS_CONTRATO');
        rsReembolso.num_contrato                := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CONTRATO');
        rsReembolso.nome_contrato               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NOME_CONTRATO');
        rsReembolso.cod_empresa                 := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_EMPRESA');
        rsReembolso.cod_inspetoria_ts_contrato  := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_INSPETORIA_TS');
        rsReembolso.cod_operadora_contrato      := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_OPERADORA');
        if rsReembolso.cod_operadora_contrato != 14 then
            v_dt_ini_vigencia             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DATA_INCLUSAO');
        else
            v_dt_ini_vigencia             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DT_INI_VIGENCIA');
        end if;
        --
        rsReembolso.cod_marca_contrato          := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_MARCA');
        rsReembolso.ind_sexo                    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_SEXO');
        rsReembolso.tipo_associado              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TIPO_ASSOCIADO');
        rsReembolso.cod_acomodacao              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_ACOMODACAO');
        rsReembolso.num_reembolso_previa        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_REEMBOLSO_PREVIA');
        -- dados do executante
        rsReembolso.ind_insc_fiscal             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_INSC_FISCAL');
        rsReembolso.num_insc_fiscal             := replace(replace(replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_INSC_FISCAL'),'.',''),'-',''),'/','');
        rsReembolso.nome_prestador              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NOME_PRESTADOR');
        rsReembolso.sigla_conselho              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/SIGLA_CONSELHO');
        rsReembolso.cod_cbo                     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_CBO');
        rsReembolso.uf_conselho                 := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/UF_CONSELHO');
        rsReembolso.num_crm                     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CRM');
        rsReembolso.cnes                        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/CNES');
        rsReembolso.seq_endereco                := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/SEQ_ENDERECO');
        rsReembolso.cod_prestador_ts            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_PRESTADOR_TS_ENDERECO');
        rsReembolso.cod_municipio_execucao      := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_MUNICIPIO_EXECUCAO');
        -- dados do solicitante
        rsReembolso.cod_solicitante             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_SOLICITANTE');
        rsReembolso.cnes_solicitante            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/CNES_SOLICITANTE');
        rsReembolso.cod_cbo_solicitante         := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_CBO_SOLICITANTE');
        rsSolicitante.ind_tipo_pessoa           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_INSC_FISCAL_SOLICITANTE');
        rsSolicitante.nome_solicitante          := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NOME_PRESTADOR_SOLICITANTE');
        rsSolicitante.num_insc_fiscal           := replace(replace(replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_INS_FISCAL_SOLICITANTE'),'.',''),'-',''),'/','');
        rsSolicitante.sigla_conselho            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/SIGLA_CONSELHO_SOLICITANTE');
        rsSolicitante.num_crm                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CRM_SOLICITANTE');
        rsSolicitante.sgl_uf_conselho           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/UF_CONSELHO_SOLICITANTE');
        --
        rsReembolso.ind_tipo_reembolso          := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_TIPO_REEMBOLSO');
        rsReembolso.ind_carater                 := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_CARATER');
        rsReembolso.cod_tratamento              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_TRATAMENTO');
        rsReembolso.cod_motivo_reembolso        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_MOTIVO_REEMBOLSO');
        rsReembolso.cod_usuario_solic           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/AREA_SOLICITACAO');
        rsReembolso.qtd_dias_reembolso          := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/QTD_DIAS_REEMBOLSO');
        rsReembolso.ind_acidente                := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_ACIDENTE');
        --
        rsReembolso.num_centro_custo            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CENTRO_CUSTO');
        rsReembolso.cod_tipo_contrato           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_TIPO_CONTRATO');
        rsReembolso.ind_tipo_preco              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_TIPO_PRECO');
        rsReembolso.ind_regulamentado           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_REGULAMENTADO');
        --
        rsReembolso.tipo_pessoa_contrato        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TIPO_PESSOA_CONTRATO');
        rsReembolso.ind_origem_associado        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_ORIGEM_ASSOCIADO');
        -- CID-s
        rsReembolso.cod_cid                     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_CID');
        rsReembolso.cod_cid_2                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_CID_2');
        rsReembolso.cod_cid_3                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_CID_3');
        rsReembolso.cod_cid_4                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_CID_4');
        --acao judicial
        rsReembolso.ind_acao_judicial           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_ACAO_JUDICIAL');
        rsReembolso.num_acao_judicial           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_ACAO_JUDICIAL');
        rsReembolso.cod_tipo_acp                := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_ACP');
        rsReembolso.txt_obs_acao_judicial       := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_OBS_ACAO_JUDICIAL');
        --dados pagamento
           rsReembolso.cod_entidade_favorecido     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_ENTIDADE_FAVORECIDO');
        rsReembolso.ind_tipo_favorecido         := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_TIPO_FAVORECIDO');
        rsReembolso.nome_favorecido             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NOME_FAVORECIDO');
        rsReembolso.num_favorecido              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_FAVORECIDO');
        rsReembolso.num_cpf_favorecido          := replace(replace(replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CPF_FAVORECIDO'),'.',''),'-',''),'/','');
        rsReembolso.num_cnpj_favorecido         := replace(replace(replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CNPJ_FAVORECIDO'),'.',''),'-',''),'/','');
        --
        v_ind_erro_ws                           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_ERRO_WS');
        v_msg_erro_ws                           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/MSG_ERRO_WS');
        --
        v_ind_salva_documentos                  := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','DOCUMENTOS_PENDENTES/IND_DOCUMENTOS'));
        --
        v_posicao := 270;
        -- Consultar o cod_ts do favorecido

        --CL00546886
        if NVL(rsReembolso.cod_origem,0) in (11,20) Then
         begin

          SELECT Nvl(Val_Parametro, 0)
            INTO v_ValorLimite
            FROM ts.Controle_Sistema
           WHERE cod_parametro = CASE rsReembolso.ind_tipo_reembolso
                    WHEN '1' THEN
                     'VAL_COMPROV_REEMB_CONSULTA'
                    WHEN '2' THEN
                     'VAL_COMPROV_REEMB_EXAME/PROCED'
                    WHEN '3' THEN
                     'VAL_COMPROV_REEMB_INTERNACAO'
                 END;

           p_ValorLimite := ts_numero_web(v_ValorLimite,2);

        exception
         when others then
           p_ValorLimite := 1;
        end;

           --
        P_Val_informado:=0;
            --
        if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_MOEDA_ESTRANGEIRA')) then

          P_Val_informado:= rb_calcula_reembolso.cm_converte_moeda (p_valor         => nvl(ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_MOEDA_ESTRANGEIRA'),2),0)
                                       ,p_sigla_moeda   => nvl(rsReembolso.sigla_moeda,'R$')
                                       ,p_data_pesquisa => rsReembolso.dt_comprovante
                                        );
        end if;
        --
        v_posicao := 350;
        --
      If   P_Val_informado <= p_ValorLimite Then
               --
               Select Nvl(Count(*),0)
                 into v_ExcluidoSuspensao
                From ts.Reembolso_Suspensao
                Where Num_Associado=rsReembolso.num_associado
                And Ind_Tipo_Reembolso=rsReembolso.ind_tipo_reembolso
                And IND_EXCLUSAO='S';
               --
                IF v_ExcluidoSuspensao=0 Then
                 --
                 Select Nvl(Count(*),0)
                   into v_ExisteSuspensao
        From ts.Reembolso_Suspensao
        Where Num_Associado=rsReembolso.num_associado
        And  trunc(rsReembolso.dt_pedido) Between trunc(Dt_Inicio) and trunc(dt_Fim)
        And Ind_Tipo_Reembolso=rsReembolso.ind_tipo_reembolso
        And IND_EXCLUSAO='N';
                  --
              if v_ExisteSuspensao >0 Then
                rsReembolso.ind_utiliza_courrier :='N';
                rsReembolso.txt_contato_courrier := null;
            rsReembolso.IND_OPT_IN :='S';
                   else
                     rsReembolso.IND_OPT_IN :='N';
              End If;
                end if;
            End If;

            if v_ind_acao = 'I' then

               if ((nvl(rsReembolso.ind_opt_in,'N') = 'S') or ( rsReembolso.cod_origem in ('11','20') and rsReembolso.ind_tipo_comprovante = 'N')) then
                  rsReembolso.ind_situacao          := 3;
               else
                  rsReembolso.ind_situacao          := 48;
               end if;
            end if;
        END IF;
        --
        begin
          SELECT a.cod_ts,
                 a.cod_sucursal
            INTO v_cod_ts_favorecido,
                 v_cod_sucursal_favorecido
            FROM ts.associado a
           WHERE a.num_associado = rsReembolso.num_favorecido;
        exception
           when others then
               v_cod_ts_favorecido := null;
        end;
        --
        -- Consulta cod_marca_contrato
        if rsReembolso.cod_marca_contrato is null then
            begin
               SELECT COD_MARCA
                 INTO rsReembolso.cod_marca_contrato
                 FROM TS.CONTRATO_EMPRESA CONTEMP
                    , TS.BENEFICIARIO     BEN
                WHERE CONTEMP.COD_TS_CONTRATO = BEN.COD_TS_CONTRATO
                  AND NUM_ASSOCIADO           = rsReembolso.num_associado;
            exception
                when others then
                    rsReembolso.cod_marca_contrato := null;
            end;
        end if;
        --
        v_posicao := 280;
        --
        begin
            if rsReembolso.ind_tipo_favorecido = 'R' then
                --
                rsReembolso.cod_entidade_ts_rl      := null;
                rsReembolso.cod_entidade_favorecido := null;
                --
                if ( ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_ENTIDADE_TS_RL',0) != 0 ) then
                   rsReembolso.cod_entidade_ts_rl      := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_ENTIDADE_TS_RL');
                   rsReembolso.cod_entidade_favorecido := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_ENTIDADE_TS_RL');
                end if;
                --
            else
                 if rsReembolso.ind_tipo_favorecido = 'T' then
                    --
                    select cod_entidade_ts
                      into rsReembolso.cod_entidade_favorecido
                      from associado
                    where  cod_ts = rsReembolso.cod_ts_tit;
                 else
                    select cod_entidade_ts
                      into rsReembolso.cod_entidade_favorecido
                      from associado
                    where  cod_ts = rsReembolso.cod_ts;
                 end if;
                rsReembolso.cod_entidade_ts_rl      := null;
            end if;
        exception
            when others then
                rsReembolso.cod_entidade_ts_rl      := null;
                rsReembolso.cod_entidade_favorecido := null;
        end;
        --
        v_posicao := 290;
        --
        if TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DT_PREVISTA_PGTO'), 'DD/MM/RRRR') then
            rsReembolso.dt_prevista_pgto            := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DT_PREVISTA_PGTO'),'DD/MM/RRRR');
        else
            p_cod_retorno := 9;
            p_msg_retorno := 'Data prevista de pagamento inválida.';
            rollback;
            return;
        end if;
        --
        v_posicao := 300;
        --
        if nvl (v_tipo_situacao,'X') != 'CR' and (( v_ind_acao = 'A' and v_ind_salva_documentos = 'N' )
          or ( v_ind_acao = 'FN' and v_ind_tipo_finalizacao = 'A' )) then
            -- valida se a data prevista de pagamento foi preenchida e é maior ou igual a data de hoje caso não seja inclusao
            if rsReembolso.dt_prevista_pgto is null  then
                p_cod_retorno := 9;
                p_msg_retorno := 'Data prevista de pagamento não preenchida.';
                rollback;
                return;
            end if;
            --
            rsReembolso.cod_motivo_alter_dt_pgto    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_MOTIVO_ALTER_DT_PGTO');
            --
            if (v_ind_acao = 'FN' and v_ind_tipo_finalizacao = 'A' and rsReembolso.dt_prevista_pgto < trunc(sysdate) and NVL(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_DOCUMENTACAO'),'N') = 'N') then
                p_cod_retorno := 9;
                p_msg_retorno := 'Data prevista de pagamento não pode ser menor que a data atual.';
                rollback;
                return;
            end if;

             -- Validação das 11:00AM para regra
             if rsReembolso.dt_prevista_pgto = TRUNC(SYSDATE) AND TO_CHAR(SYSDATE, 'hh24:mi') > '11:00' then

               -- Consulta próximo dia útil.
               -- Retorna um Código de Inspetoria
                   SELECT pr.cod_inspetoria_ts_abertura
                   INTO v_cod_inspetoria_ts
                   FROM  ts.pedido_reembolso pr
                   WHERE pr.num_reembolso = rsReembolso.Num_Reembolso;
              -- Retorna um Código Sucursal
                   SELECT cod_sucursal
                   INTO v_cod_sucursal
                   FROM ts.inspetoria
                   WHERE cod_inspetoria_ts = v_cod_inspetoria_ts;
              -- Retorna um Código de Município
                   SELECT cod_municipio
                   INTO v_cod_municipio
                   FROM ts.sucursal
                   WHERE cod_sucursal = v_cod_sucursal;
            --Função criada para calcular uma data considerando os dias úteis
                v_dt_prevista_pgto_nova := TS.CALCULA_PROX_DATA_UTIL(p_data_base     => rsReembolso.dt_prevista_pgto
                                                               , p_qtd_dias      => 1
                                                               , p_cod_municipio => v_cod_municipio
                                                                );
              --
              --
                rsReembolso.dt_prevista_pgto := v_dt_prevista_pgto_nova;
                RSREEMBOLSO.Cod_Motivo_Alter_Dt_Pgto := 44; -- codigo do EXPEDIENTE BANCARIO.

            end if;
        end if;
        --RECIBO / NOTA FISCAL
        v_posicao := 310;
        --
        if TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DT_COMPROVANTE'), 'DD/MM/YYYY') then
            rsReembolso.dt_comprovante              := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DT_COMPROVANTE'),'DD/MM/YYYY');
        else
            p_cod_retorno := 9;
            p_msg_retorno := 'Data do comprovante inválida.';
            rollback;
            return;
        end if;
        --
        v_posicao := 320;
        --
        if rsReembolso.dt_comprovante > trunc(sysdate) and nvl (v_tipo_situacao,'X') != 'CR' then
             p_cod_retorno := 9;
             p_msg_retorno:= 'A data do comprovante não pode ser maior que a data atual.';
             rollback;
             return;
        end if;
        --
        v_posicao := 330;
        --
        rsReembolso.num_nota_fiscal             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_NOTA_FISCAL');
        rsReembolso.ind_tipo_comprovante        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_TIPO_COMPROVANTE');
        --
        if(substr((ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_URL_NFE')),1,3) = 'www') then
            rsReembolso.txt_url_nfe             := 'http://' || ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_URL_NFE');
        else
            rsReembolso.txt_url_nfe             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_URL_NFE');
        end if;
        --
        v_posicao := 340;
        --
    if NVL(rsReembolso.cod_origem,0) in (11,20) Then
        if v_ind_acao = 'I' then

               if nvl(rsReembolso.ind_opt_in,'N') = 'S' or rsReembolso.Ind_Tipo_Comprovante = 'N' then
                  rsReembolso.ind_situacao          := 3;
               else
                  rsReembolso.ind_situacao          := 48;
               end if;
            end if;
    end if;
    --
        rsReembolso.ind_internacional           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_INTERNACIONAL');
        rsReembolso.sigla_moeda                 := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/SIGLA_MOEDA');
        --
        if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_MOEDA_ESTRANGEIRA')) then
            rsReembolso.val_moeda_estrangeira   := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_MOEDA_ESTRANGEIRA'),2);
        end if;
        --
        v_posicao := 350;
        --
        rsReembolso.val_informado               := rb_calcula_reembolso.cm_converte_moeda (  p_valor         => nvl(rsReembolso.val_moeda_estrangeira,0)
                                                                                           , p_sigla_moeda   => nvl(rsReembolso.sigla_moeda,'R$')
                                                                                           , p_data_pesquisa => rsReembolso.dt_comprovante
                                                                                           );
        --
        v_posicao := 360;
        --
        rsReembolso.num_internacao              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_INTERNACAO');
        rsReembolso.cod_procedimento_principal  := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_PROCEDIMENTO_PRINCIPAL');
        -- atendimento data ; hora
        rsReembolso.dt_ini_atendimento := null;
        rsReembolso.dt_fim_atendimento := null;
        --
        rsReembolso.hora_inicio                 := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/HORA_INICIO'),':');
        rsReembolso.hora_fim                    := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/HORA_FIM'),':');
        --
        -- alta / obito
        rsReembolso.cod_tipo_alta               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_TIPO_ALTA');
        rsReembolso.cod_cid_obito               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_CID_OBITO');
        rsReembolso.num_declara_obito           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_DECLARA_OBITO');
        --
        rsReembolso.ind_forma_pgto              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_FORMA_PGTO');
        --
        v_posicao := 370;
        --
        if rsReembolso.ind_forma_pgto = 1 then

            if length(trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_DV_AGENCIA'))) > 1 then
                 p_cod_retorno := 9;
                 p_msg_retorno := 'Só é permitido 1 dígito para o DV da agência.';
                 rollback;
                 return;
            end if;

            if length(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_AGENCIA')) > 4 then
                 p_cod_retorno := 9;
                 p_msg_retorno := 'Só é permitido 4 dígitos para o campo agência.';
                 rollback;
                 return;
            end if;

            if length(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CONTA_CORRENTE')) > 15 then
                 p_cod_retorno := 9;
                 p_msg_retorno := 'Só é permitido 15 dígitos para o campo conta corrente.';
                 rollback;
                 return;
            end if;
            --
            v_posicao := 380;
            --
            rsReembolso.cod_banco                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_BANCO');
            rsReembolso.ind_tipo_conta_reemb        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_TIPO_CONTA_REEMB');
            rsReembolso.cod_agencia                 := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_AGENCIA');
            rsReembolso.num_dv_agencia              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_DV_AGENCIA');
            rsReembolso.num_conta_corrente          := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CONTA_CORRENTE');
            rsReembolso.num_dv_cc                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_DV_CC');
            --
            BEGIN
              SELECT nvl(rc.ind_bloqueado,'N')
                INTO v_ind_bloqueado
                FROM ts.reembolso_conta_mxm rc
               WHERE rc.num_cpf_associado   = rsReembolso.Num_Cpf_Favorecido
                 AND rc.cod_banco           = rsReembolso.Cod_Banco
                 AND rc.cod_agencia         = rsReembolso.Cod_Agencia
                 AND rc.num_conta_corrente  = rsReembolso.Num_Conta_Corrente || rsReembolso.Num_Dv_Cc
                 AND nvl(rc.ind_tipo_conta_reemb,'C')= rsReembolso.ind_tipo_conta_reemb
                 AND ROWNUM = 1;
            EXCEPTION
              when others then
                   v_ind_bloqueado := 'N';
            END;
            --
            if (v_ind_bloqueado = 'S') then
                p_cod_retorno := 9;
                p_msg_retorno := 'Dados bancários inválidos.';
                rollback;
                return;
            end if;
            --
            if (( v_ind_altera_dados_bancario = 'S') and (v_cod_ts_favorecido is not null)) then
               SELECT CASE WHEN count(0) = 0 THEN 'N' ELSE 'S' END
                 INTO v_existe_benef_faturamento
                 FROM ts.beneficiario_faturamento
                WHERE cod_ts = v_cod_ts_favorecido;
                --
                if v_existe_benef_faturamento = 'S' then
                   UPDATE ts.beneficiario_faturamento bef
                      SET bef.cod_banco_reemb         = rsReembolso.cod_banco
                        , bef.Cod_Agencia_Reemb       = rsReembolso.cod_agencia
                        , bef.num_dv_agencia_reemb    = rsReembolso.num_dv_agencia
                        , bef.num_conta_corrente_reemb= rsReembolso.num_conta_corrente
                        , bef.num_dv_cc_reemb         = rsReembolso.num_dv_cc
                        , bef.ind_tipo_conta_reemb    = rsReembolso.ind_tipo_conta_reemb
                    WHERE bef.cod_ts = v_cod_ts_favorecido;
                else
                    INSERT INTO ts.beneficiario_faturamento
                         (cod_ts,
                          cod_sucursal,
                          ind_tipo_pessoa_contrato,
                          cod_banco_reemb,
                          cod_agencia_reemb,
                          num_dv_agencia_reemb,
                          num_conta_corrente_reemb,
                          num_dv_cc_reemb,
                          ind_tipo_conta_reemb)
                    VALUES
                         (v_cod_ts_favorecido,
                          v_cod_sucursal_favorecido,
                          rsReembolso.tipo_pessoa_contrato,
                          rsReembolso.cod_banco,
                          rsReembolso.cod_agencia,
                          rsReembolso.num_dv_agencia,
                          rsReembolso.num_conta_corrente,
                          rsReembolso.num_dv_cc,
                          rsReembolso.ind_tipo_conta_reemb);
                end if;
                --
            end if;
        else
            v_posicao := 390;
            rsReembolso.cod_banco                   := null;
            rsReembolso.ind_tipo_conta_reemb        := null;
            rsReembolso.cod_agencia                 := null;
            rsReembolso.num_dv_agencia              := null;
            rsReembolso.num_conta_corrente          := null;
            rsReembolso.num_dv_cc                   := null;
        end if;
        --
        v_posicao := 400;
        --
        if rsReembolso.cod_banco is not null then
            begin
               select ind_bloqueio into v_ind_banco_bloqueado from banco where cod_banco = rsReembolso.cod_banco;
            exception
                when others then
                    v_ind_banco_bloqueado := null;
            end;

            if v_ind_banco_bloqueado = 'S' then
               p_cod_retorno := 9;
               p_msg_retorno := 'Não é permitido o cadastro do banco informado, banco bloqueado.';
               rollback;
               return;
            end if;

        end if;
        --
        v_posicao := 410;
        --
        rsReembolso.txt_observacao              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_OBSERVACAO');
        rsReembolso.txt_observacao_operadora    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_OBSERVACAO_OPERADORA');
        v_cod_usuario                           := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_USUARIO'));
        rsReembolso.ind_tipo_emissao            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_TIPO_EMISSAO');
        rsReembolso.txt_num_fax                 := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_NUM_FAX');
        rsReembolso.txt_ddd_fax                 := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_DDD_FAX');
        rsReembolso.txt_ramal_fax               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_RAMAL_FAX');
        rsReembolso.txt_email                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_EMAIL');
        -- TELEFONES
        --*****************************************************************************************************************
        --CL00541137 - ALTERAÇÃO DA GRAVAÇÃO DO NÚMERO DE TELEFONE PARA COLUNA CELULAR NA TABELA PEDIDO_REEMBOLSO
        --*****************************************************************************************************************
        if (rsReembolso.cod_origem in(11,20) and v_ind_acao = 'I') then
            --se veio do site:
            --pegar o número de telefone e setar o RS celular
            --e setar os demais telefones como nulo
            rsReembolso.ddd_residencial             := null;
            rsReembolso.tel_residencial             := null;
            rsReembolso.ddd_comercial               := null;
            rsReembolso.tel_comercial               := null;
            rsReembolso.ddd_celular                 := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DDD_RESIDENCIAL');
            rsReembolso.tel_celular                 := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TEL_RESIDENCIAL'),'-');
        elsif (rsReembolso.cod_origem in (11,20) and v_ind_acao = 'A') then
            --se não
            --usa normal
            rsReembolso.ddd_residencial             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DDD_RESIDENCIAL');
            rsReembolso.tel_residencial             := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TEL_RESIDENCIAL'),'-');
            rsReembolso.ddd_comercial               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DDD_COMERCIAL');
            rsReembolso.tel_comercial               := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TEL_COMERCIAL'),'-');
            rsReembolso.ddd_celular                 := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DDD_CELULAR');
            rsReembolso.tel_celular                 := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TEL_CELULAR'),'-');
        else
            --sisamil
            rsReembolso.ddd_residencial             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DDD_RESIDENCIAL');
            rsReembolso.tel_residencial             := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TEL_RESIDENCIAL'),'-');
            rsReembolso.ddd_comercial               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DDD_COMERCIAL');
            rsReembolso.tel_comercial               := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TEL_COMERCIAL'),'-');
            rsReembolso.ddd_celular                 := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DDD_CELULAR');
            rsReembolso.tel_celular                 := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TEL_CELULAR'),'-');
        end if;
        --*****************************************************************************************************************
        v_posicao := 420;
        --
        v_xml_glosa                             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/XML_GLOSA');
        v_xml_motivo                            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/INDEFERIMENTO');
        --
        IF  v_ind_acao = 'A' THEN
            -- INICIAR O PROCESSO DE GRAVAR AS INFORMAÇÕES DA CARTA AUTORIZAÇÃO
            v_ind_envio_carta           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_ENVIO_CARTA');
            v_ind_municipio_deslocamento := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_MUNICIPIO_DESLOCAMENTO');
            v_ind_login_permissao       := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_LOGIN_PERMISSAO');
            v_txt_obs_procedimento      := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/TXT_OBS_PROCEDIMENTO');
            v_qtd_procedimento_carta    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/QTD_PROCEDIMENTO_CARTA');
            v_uf_municipio_demandado    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/UF_MUNICIPIO_DEMANDADO');
            v_cod_municipio_demandado   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_MUNICIPIO_DEMANDADO');
            v_uf_municipio_efetivado    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/UF_MUNICIPIO_EFETIVADO');
            v_cod_municipio_efetivado   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_MUNICIPIO_EFETIVADO');
            --
            if nvl(v_ind_envio_carta,'N') = 'S' and nvl(v_ind_login_permissao,'N') = 'N' then
               p_cod_retorno := 9;
               p_msg_retorno := 'Usuário sem permissão.';
               rollback;
               return;
            end if;
            --
            if TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DATA_AGENDAMENTO_CARTA'), 'DD/MM/YYYY') then
               BEGIN
                 v_data_agendamento              := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/DATA_AGENDAMENTO_CARTA'),'DD/MM/YYYY');
               EXCEPTION
                 WHEN OTHERS THEN
                    p_cod_retorno := 9;
                    p_msg_retorno := 'Data agendamento inválida';
                    rollback;
                    return;
               END;
            else
                p_cod_retorno := 9;
                p_msg_retorno := 'Data agendamento inválida.';
                rollback;
                return;
            end if;
            --
            v_num_protocolo_atendimento := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/PROTOCOLO_ATENDIMENTO');
            v_val_estimado_carta        := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_CARTA_AUTORIZACAO'),2);
            v_ind_atendimento_rn        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_ATENDIMENTO_RN');
            v_nome_rn                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NOME_ATENDIMENTO_RN');
            --
            GravaDadosCartaAutorizacao( v_ind_envio_carta
                                      , rsReembolso.num_reembolso
                                      , rsReembolso.Num_Associado
                                      , v_txt_obs_procedimento
                                      , v_uf_municipio_demandado
                                      , v_cod_municipio_demandado
                                      , v_uf_municipio_efetivado
                                      , v_cod_municipio_efetivado
                                      , rsReembolso.Dt_Pedido
                                      , v_data_agendamento
                                      , v_qtd_dias_carta_autorizacao
                                      , v_num_protocolo_atendimento
                                      , v_val_estimado_carta
                                      , v_ind_atendimento_rn
                                      , v_nome_rn
                                      , v_cod_usuario
                                      , v_cod_retorno
                                      , v_msg_retorno
                                      , v_ind_municipio_deslocamento
									  , v_qtd_procedimento_carta
                                      );
            --
            IF v_cod_retorno = 9 THEN
                p_cod_retorno := 9;
                p_msg_retorno := v_msg_retorno;
                rollback;
                return;
            END IF;
        END IF;
        --DADOS COURRIER
        -- CL00546886
        if v_ExisteSuspensao >0 Then
          rsReembolso.ind_utiliza_courrier := 'N';
          rsReembolso.txt_contato_courrier := null;
        Else
        rsReembolso.ind_utiliza_courrier       := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/IND_UTILIZA_COURRIER');
          rsReembolso.txt_contato_courrier       := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/TXT_CONTATO_COURRIER');
        End if;
        rsReembolso.ind_tipo_endereco          := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/IND_TIPO_ENDERECO');

        rsReembolso.num_cep                    := to_number(replace(replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CEP'),'-',''),'.',''));
        rsReembolso.nom_logradouro             := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/NOM_LOGRADOURO');
        rsReembolso.num_endereco               := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/NUM_ENDERECO');
        rsReembolso.txt_complemento            := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/TXT_COMPLEMENTO');
        rsReembolso.cod_municipio              := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/COD_MUNICIPIO');
        rsReembolso.nome_municipio             := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/NOM_MUNICIPIO');
        rsReembolso.cod_bairro                 := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/COD_BAIRRO');
        rsReembolso.nome_bairro                := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/NOM_BAIRRO');
        rsReembolso.sgl_uf                     := ts_obtem_dados_xml(v_doc, 'REEMBOLSO', 'PEDIDO/SGL_UF');
        rsReembolso.cod_tipo_logr              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_TIPO_LOGR');
        --DADOS FACEID
        if ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_CONFIAB_VALID_BIOMETRICA') is not null then
          if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_CONFIAB_VALID_BIOMETRICA')) then
              rsReembolso.val_confiab_valid_biometrica  := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_CONFIAB_VALID_BIOMETRICA'), 2);
          end if;
        end if;
        if ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_LATITUDE') is not null then
          if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_LATITUDE')) then
              rsReembolso.val_latitude                  := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_LATITUDE'), 2);
          end if;
        end if;
        if ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_LONGITUDE') is not null then
          if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_LONGITUDE')) then
              rsReembolso.val_longitude                 := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/VAL_LONGITUDE'), 2);
          end if;
        end if;
        --
        if rsReembolso.cod_ts is null and rsReembolso.num_associado is null then
             p_cod_retorno := 9;
             p_msg_retorno := 'Beneficiário é obrigatório.';
             rollback;
             return;
        end if;
        --
        if rsReembolso.ind_forma_pgto is null then
            p_cod_retorno := 9;
            p_msg_retorno := 'Forma de pagamento é obrigatória';
           return;
        end if;
        --
        if rsReembolso.data_nascimento is null then
            p_cod_retorno := 9;
            p_msg_retorno := 'Data de nascimento do Beneficiário inválida'||rsReembolso.data_nascimento;
           return;
        end if;
        --
        if rsReembolso.cod_origem is null then
             p_cod_retorno := 9;
             p_msg_retorno := 'Origem da solicitação é obrigatória.';
             rollback;
             return;
        end if;
        --
        if rsReembolso.ind_tipo_reembolso is null then
             p_cod_retorno := 9;
             p_msg_retorno := 'Modalidade do reembolso é obrigatória.';
             rollback;
             return;
        end if;
        --
        if rsReembolso.cod_tratamento is null and  v_ind_reembolso_completo = 'N' and nvl (v_tipo_situacao,'X') != 'CR' then
             p_cod_retorno := 9;
             p_msg_retorno := 'Tipo Atendimento / Internação é obrigatório.';
             rollback;
             return;
        end if;
        --
        if rsReembolso.ind_tipo_emissao <> 'I'  then
            if rsReembolso.ind_tipo_emissao = 'E' and rsReembolso.txt_email is null then
                 p_cod_retorno := 9;
                 p_msg_retorno := 'E-mail para envio é obrigatório.';
                 rollback;
                 return;
            end if;
            --
            if rsReembolso.ind_tipo_emissao = 'F' and rsReembolso.txt_num_fax is null then
                 p_cod_retorno := 9;
                 p_msg_retorno := 'Número de Fax para envio é obrigatório.';
                 rollback;
                 return;
            end if;
        end if;
        --
        if rsReembolso.cod_inspetoria_ts_abertura is null then
             p_cod_retorno := 9;
             p_msg_retorno := 'Filial / Unidade da abertura é obrigatório.';
             rollback;
             return;
        end if;
        --
        v_posicao := 430;
        --
        --Validar informações do prestador
        if rsReembolso.Nome_Prestador is null and rsReembolso.Ind_Insc_Fiscal is null then
          p_cod_retorno := 9;
          p_msg_retorno := 'Dados do Executante incompleto.';
          rollback;
          return;
        end if;
        if rsReembolso.ind_insc_fiscal is not null then
             if rsReembolso.ind_insc_fiscal = 'F' AND NVL(rsReembolso.num_insc_fiscal,0) <> 0 then
                 --
                 select /*rb_reembolso.GravaReembolso*/
                        TS_VALIDA_CPF(rsReembolso.num_insc_fiscal)
                 into   v_result
                 from   dual;
                 --
                 if v_result = 'NOK' then
                     p_cod_retorno := 9;
                     p_msg_retorno := 'CPF do executante inválido.';
                     xmldom.freeDocument(v_doc);
                     return;
                 end if;
                 --
             elsif rsReembolso.ind_insc_fiscal = 'J' AND NVL(rsReembolso.num_insc_fiscal,0) <> 0 then
                 --
                 select /*rb_reembolso.GravaReembolso*/ TS_VALIDA_CNPJ(lpad(rsReembolso.num_insc_fiscal,14,'0'))
                 into   v_result
                 from   dual;
                 --
                 if v_result = 'NOK' then
                     p_cod_retorno := 9;
                     p_msg_retorno := 'CNPJ do executante inválido.';
                     xmldom.freeDocument(v_doc);
                     return;
                 end if;
             end if;
             --
             if rsReembolso.Sigla_Conselho = 'CRM' then
               --
               if rsReembolso.ind_insc_fiscal = 'F' AND rsReembolso.Num_Crm is null then
                   p_cod_retorno := 9;
                   p_msg_retorno := 'Número do CRM não informado';
                   xmldom.freeDocument(v_doc);
                   return;
               end if;
               --
               if rsReembolso.Uf_Conselho is null then
                   p_cod_retorno := 9;
                   p_msg_retorno := 'UF do conselho não informado';
                   xmldom.freeDocument(v_doc);
                   return;
               end if;
               --
             end if;
             --
        end if;

        --Validar informações do Solicitante
        if (rsSolicitante.nome_solicitante is null and rsSolicitante.num_insc_fiscal is not null ) or
            (rsSolicitante.nome_solicitante is not null and rsSolicitante.num_insc_fiscal is null) then
          p_cod_retorno := 9;
          p_msg_retorno := 'Dados do Solicitante incompleto.';
          rollback;
          return;
        end if;

        if rsSolicitante.num_insc_fiscal is not null then
             if rsSolicitante.ind_tipo_pessoa = 'F' AND NVL(rsSolicitante.num_insc_fiscal,0) <> 0 then
                 --
                 select /*rb_reembolso.GravaReembolso*/
                        TS_VALIDA_CPF(rsSolicitante.num_insc_fiscal)
                 into   v_result
                 from   dual;
                 --
                 if v_result = 'NOK' then
                     p_cod_retorno := 9;
                     p_msg_retorno := 'CPF do solicitante inválido.';
                     xmldom.freeDocument(v_doc);
                     return;
                 end if;
                 --
             elsif rsSolicitante.ind_tipo_pessoa = 'J' AND NVL(rsSolicitante.num_insc_fiscal,0) <> 0 then
                 --
                 select /*rb_reembolso.GravaReembolso*/ TS_VALIDA_CNPJ(lpad(rsSolicitante.num_insc_fiscal,14,'0'))
                 into   v_result
                 from   dual;
                 --
                 if v_result = 'NOK' then
                     p_cod_retorno := 9;
                     p_msg_retorno := 'CNPJ do solicitante inválido.';
                     xmldom.freeDocument(v_doc);
                     return;
                 end if;
             end if;
             --
             if rsSolicitante.Sigla_Conselho = 'CRM' then
               --
               if rsSolicitante.ind_tipo_pessoa = 'F' AND rsSolicitante.Num_Crm is null then
                   p_cod_retorno := 9;
                   p_msg_retorno := 'Número do CRM não informado';
                   xmldom.freeDocument(v_doc);
                   return;
               end if;
               --
               if rsSolicitante.sgl_uf_conselho is null then
                   p_cod_retorno := 9;
                   p_msg_retorno := 'UF do conselho não informado';
                   xmldom.freeDocument(v_doc);
                   return;
               end if;
               --
             end if;
             --
        end if;
        --
        v_posicao := 440;
        --Validar informações do favorecido
        if rsReembolso.num_cpf_favorecido is not null then
                 --
                 v_result := 0;
                 select /*rb_reembolso.GravaReembolso*/
                        TS_VALIDA_CPF(rsReembolso.num_cpf_favorecido)
                 into   v_result
                 from   dual;
                 --
                 if v_result = 'NOK' then
                     p_cod_retorno := 9;
                     p_msg_retorno := 'CPF do favorecido inválido.';
                     xmldom.freeDocument(v_doc);
                     return;
                 end if;

        end if;
        --
        v_posicao := 450;
        --
       if rsReembolso.cod_origem = 1 and rsReembolso.sgl_area_abertura is null and v_ind_acao = 'I' then
           p_cod_retorno  := 9;
           p_msg_retorno  := 'Agência de atendimento é obrigatória.';
           xmldom.freeDocument(v_doc);
           return;
       end if;
       --
       v_posicao := 460;
       --
       if rsReembolso.ind_utiliza_courrier = 'S' then
          if rsReembolso.num_cep is null or
               rsReembolso.nom_logradouro is null or
               ( rsReembolso.cod_municipio is null and rsReembolso.nome_municipio is null ) or
               ( rsReembolso.cod_bairro is null and rsReembolso.nome_bairro is null ) or
               rsReembolso.sgl_uf is null then

               p_cod_retorno := 9;
               p_msg_retorno := 'Dados do endereço de coleta do courrier incompletos ou inválidos.';
               xmldom.freeDocument(v_doc);
               rollback;
               return;

            end if;
            --
            begin
                --
                v_posicao := 470;
                --
                v_sql := '  select count(*)
                              from ts.reembolso_empresa_courier   emp
                                 , ts.reembolso_abran_emp_courier  abr
                             where emp.cod_empresa_ts = abr.cod_empresa_ts
                               and :p_num_cep between abr.num_cep_inicial and abr.num_cep_final
                               and abr.sgl_uf = :p_sgl_uf ';
                --
                execute
              immediate v_sql
                   into qtd_empresas_abrangencia
                  using rsReembolso.num_cep
                      , rsReembolso.sgl_uf;
                --
                if nvl(qtd_empresas_abrangencia,0) = 0 then
                    p_cod_retorno := 9;
                    p_msg_retorno := 'Endereço sem abrangência para utilização de courrier.';
                    xmldom.freeDocument(v_doc);
                    rollback;
                    return;
                end if;
                --
            exception
                when others then
                    p_cod_retorno := 9;
                    p_msg_retorno := 'Endereço sem abrangência para utilização de courrier.';
                    xmldom.freeDocument(v_doc);
                    rollback;
                    return;
            end;
            --
            v_posicao := 479;
            --
            begin
              select cod_inspetoria_ts
              into v_cod_inspetoria_courrier
              from ts.reembolso_abran_emp_courier abr,
                   ts.reembolso_empresa_courier   emp
                     where emp.cod_empresa_ts = abr.cod_empresa_ts
                     and rsReembolso.Num_Cep between num_cep_inicial and num_cep_final
                     and sgl_uf = rsReembolso.Sgl_Uf
                     and rownum < 2;
                     --
            exception
               when no_data_found then
                 v_cod_inspetoria_courrier := null;
               when others then
                 p_msg_retorno := ts_util.MsgErro;
                 p_cod_retorno := 9;
                 xmldom.freeDocument(v_doc);
                 rollback;
                 return;
            end;
            --
            v_posicao := 480;
            --
            begin
                --
                v_sql := '  select sgl_uf
                              from ts.unidade_federacao
                             where cod_inspetoria_ts_courrier = :p_cod_inspetoria_ts_abertura';
                --
                execute
              immediate v_sql
                   into v_uf_inspetoria_abertura
                  using v_cod_inspetoria_courrier;
                --
                if rsReembolso.sgl_uf != v_uf_inspetoria_abertura then
                   if p_ind_site = 'S' then
                       select cod_inspetoria_ts_courrier
                          into v_cod_inspetoria_courrier
                          from ts.unidade_federacao
                         where sgl_uf = rsReembolso.sgl_uf;
                   else
                      p_cod_retorno := 9;
                      p_msg_retorno := 'A Filial informada não corresponde com a UF do endereço informado para courrier.';
                      xmldom.freeDocument(v_doc);
                      rollback;
                      return;
                    end if;
                end if;
                --
            exception
                when no_data_found then
                    v_uf_inspetoria_abertura := rsReembolso.sgl_uf;
                when others then
                    p_cod_retorno := 9;
                    p_msg_retorno := 'Não foi possível encontrar a UF para Courier para a filial informada.';
                    xmldom.freeDocument(v_doc);
                    rollback;
                    return;
            end;
            --
       else
           rsReembolso.ind_utiliza_courrier       := 'N';
           rsReembolso.txt_contato_courrier       := null;
       end if;
       --
       v_posicao := 500;
       --
       if nvl(rsReembolso.ind_internacional,'N') = 'N' then
             -- monta xml para rotina de salvar o executante
             v_xml_executante := '<parametros>';
             v_xml_executante := v_xml_executante || '<ind_tipo_pessoa>'            || rsReembolso.ind_insc_fiscal              || '</ind_tipo_pessoa>';
             v_xml_executante := v_xml_executante || '<num_insc_fiscal>'            || rsReembolso.num_insc_fiscal              || '</num_insc_fiscal>';
             v_xml_executante := v_xml_executante || '<nome_solicitante>'           || rsReembolso.nome_prestador               || '</nome_solicitante>';
             v_xml_executante := v_xml_executante || '<sigla_conselho>'             || rsReembolso.sigla_conselho               || '</sigla_conselho>';
             v_xml_executante := v_xml_executante || '<sgl_uf_conselho>'            || rsReembolso.uf_conselho                  || '</sgl_uf_conselho>';
             v_xml_executante := v_xml_executante || '<num_crm>'                    || rsReembolso.num_crm                      || '</num_crm>';
             v_xml_executante := v_xml_executante || '<cod_usuario>'                || v_cod_usuario                            || '</cod_usuario>';
             v_xml_executante := v_xml_executante || '<cod_municipio_execucao>'     || rsReembolso.cod_municipio_execucao       || '</cod_municipio_execucao>';
             v_xml_executante := v_xml_executante || '</parametros>';
             --
             v_posicao := 510;
             --
             grava_solicitante  ( v_cod_retorno
                                , v_msg_retorno
                                , v_xml_executante
                                );

             -- monta xml para rotina de salvar o executante
             v_xml_solicitante := '<parametros>';
             v_xml_solicitante := v_xml_solicitante || '<cod_solicitante>'            || rsReembolso.cod_solicitante              || '</cod_solicitante>';
             v_xml_solicitante := v_xml_solicitante || '<num_reembolso>'              || rsReembolso.num_reembolso                || '</num_reembolso>';
             v_xml_solicitante := v_xml_solicitante || '<ind_tipo_pessoa>'            || rsSolicitante.ind_tipo_pessoa            || '</ind_tipo_pessoa>';
             v_xml_solicitante := v_xml_solicitante || '<num_insc_fiscal>'            || rsSolicitante.num_insc_fiscal            || '</num_insc_fiscal>';
             v_xml_solicitante := v_xml_solicitante || '<nome_solicitante>'           || rsSolicitante.nome_solicitante           || '</nome_solicitante>';
             v_xml_solicitante := v_xml_solicitante || '<sigla_conselho>'             || rsSolicitante.sigla_conselho             || '</sigla_conselho>';
             v_xml_solicitante := v_xml_solicitante || '<sgl_uf_conselho>'            || rsSolicitante.sgl_uf_conselho            || '</sgl_uf_conselho>';
             v_xml_solicitante := v_xml_solicitante || '<num_crm>'                    || rsSolicitante.num_crm                    || '</num_crm>';
             v_xml_solicitante := v_xml_solicitante || '<cod_usuario>'                || v_cod_usuario                            || '</cod_usuario>';
             v_xml_solicitante := v_xml_solicitante || '<cod_municipio_execucao>'     || rsReembolso.cod_municipio_execucao       || '</cod_municipio_execucao>';
             v_xml_solicitante := v_xml_solicitante || '</parametros>';
             --
             v_posicao := 510;
             --

             grava_solicitante_reembolso  ( rsReembolso.cod_solicitante
                                          , v_cod_retorno
                                          , v_msg_retorno
                                          , v_xml_solicitante
                                          );
        end if;
        --
        v_posicao := 520;
        --
        v_num_reembolso_nf := 0;
        --
        if rsReembolso.ind_tipo_comprovante is null and  v_ind_reembolso_completo = 'N' then
             p_cod_retorno := 9;
             p_msg_retorno := 'Tipo de comprovante é obrigatório.';
             xmldom.freeDocument(v_doc);
             rollback;
             return;
        end if;
        --
        v_posicao := 530;
        --
        if rsReembolso.ind_tipo_comprovante = 'N' then
            if nvl(rsReembolso.num_nota_fiscal,0) = 0 then
                 p_cod_retorno := 9;
                 p_msg_retorno := 'Número da nota fiscal é obrigatório.';
                 xmldom.freeDocument(v_doc);
                 rollback;
                 return;
            end if;
            --
            v_num_reembolso_nf := null;
            --
            if v_ind_acao = 'I' then
                 --
                 begin
                     select num_reembolso
                     into   v_num_reembolso_nf
                     from   pedido_reembolso
                     where  num_nota_fiscal         = rsReembolso.num_nota_fiscal
                     and    nvl(num_insc_fiscal,0)  = nvl(rsReembolso.num_insc_fiscal,0)
                     and    ind_situacao not in (27,33,39,40,41,13,16,26)
                     and    ind_tipo_comprovante    = 'N'
                     and    rownum = 1;
                 exception
                    when others then
                        v_num_reembolso_nf := null;
                 end;
                 --
                 if nvl(v_num_reembolso_nf,0) != 0 and p_ind_site = 'N' then
                         p_cod_retorno := 9;
                         p_msg_retorno := 'Nota fiscal já cadastrada no reembolso '|| v_num_reembolso_nf ||' com o executante informado.';
                         xmldom.freeDocument(v_doc);
                         rollback;
                         return;
                 end if;
                 --
            end if;
         --
        end if;
        --
        v_posicao := 540;
        --
        if rsReembolso.dt_prevista_pgto_calc is null and rsReembolso.ind_utiliza_courrier <> 'S' then
            v_xml_param := '<parametros>'
                        || '<numAssociado>'         ||  rsReembolso.num_associado                   ||  '</numAssociado>'
                        || '<codTsContrato>'        ||  rsReembolso.cod_ts_contrato                 ||  '</codTsContrato>'
                        || '<codPlano>'             ||  rsReembolso.cod_plano                       ||  '</codPlano>'
                        || '<codInspetoriaTs>'      ||  rsReembolso.cod_inspetoria_ts_abertura      ||  '</codInspetoriaTs>'
                        || '<codOperadora>'         ||  rsReembolso.cod_operadora_contrato          ||  '</codOperadora>'
                        || '<codMotivoReembolso>'   ||  rsReembolso.cod_motivo_reembolso            ||  '</codMotivoReembolso>'
                        || '<codUsuarioSolic>'      ||  rsReembolso.cod_usuario_solic                ||  '</codUsuarioSolic>'
                        || '<indTipoReembolso>'     ||  rsReembolso.ind_tipo_reembolso              ||  '</indTipoReembolso>'
                        || '<indCourrier>'          ||  rsReembolso.ind_utiliza_courrier            ||  '</indCourrier>'
                        || '<dataSolicitacao>'      ||  to_char(rsReembolso.dt_pedido,'dd/mm/yyyy') ||  '</dataSolicitacao>'
                        || '<indOrigemAssociado>'   ||  rsReembolso.ind_origem_associado            ||  '</indOrigemAssociado>'
                        || '</parametros>';
             --
             v_posicao := 550;
             --
             get_dados_prazo_pgto       ( p_cod_retorno
                                        , p_msg_retorno
                                        , v_xml_param
                                        , rsReembolso.qtd_dias_reembolso
                                        , rsReembolso.ind_tipo_dia
                                        , rsReembolso.dt_prevista_pgto_calc
                                        );

             if p_cod_retorno <> 0 then
                 rollback;
                 return;
             end if;
        end if;
        --
        v_posicao := 560;
        -- GRAVA O ENDERECO EM OUTROS CASO SEJA PASSADO ESSE TIPO DE ENDERECO
        if rsReembolso.ind_tipo_endereco = 'OU' and rsReembolso.ind_utiliza_courrier = 'S' then
              v_xml_executante := '<parametros>';
              v_xml_executante := v_xml_executante || '<NUM_ASSOCIADO>'              || rsReembolso.num_associado              || '</NUM_ASSOCIADO>';
              v_xml_executante := v_xml_executante || '<NUM_TITULAR>'                || rsReembolso.num_titular                || '</NUM_TITULAR>';
              v_xml_executante := v_xml_executante || '<NUM_CEP>'                    || rsReembolso.num_cep                    || '</NUM_CEP>';
              v_xml_executante := v_xml_executante || '<NOM_LOGRADOURO>'             || rsReembolso.nom_logradouro             || '</NOM_LOGRADOURO>';
              v_xml_executante := v_xml_executante || '<NUM_ENDERECO>'               || rsReembolso.num_endereco               || '</NUM_ENDERECO>';
              v_xml_executante := v_xml_executante || '<TXT_COMPLEMENTO>'            || rsReembolso.txt_complemento            || '</TXT_COMPLEMENTO>';
              v_xml_executante := v_xml_executante || '<COD_BAIRRO>'                 || rsReembolso.cod_bairro                 || '</COD_BAIRRO>';
              v_xml_executante := v_xml_executante || '<NOM_BAIRRO>'                 || rsReembolso.nome_bairro                || '</NOM_BAIRRO>';
              v_xml_executante := v_xml_executante || '<COD_MUNICIPIO>'              || rsReembolso.cod_municipio              || '</COD_MUNICIPIO>';
              v_xml_executante := v_xml_executante || '<NOM_MUNICIPIO>'              || rsReembolso.nome_municipio             || '</NOM_MUNICIPIO>';
              v_xml_executante := v_xml_executante || '<SGL_UF>'                     || rsReembolso.sgl_uf                     || '</SGL_UF>';
              v_xml_executante := v_xml_executante || '<TXT_CONTATO_COURRIER>'       || rsReembolso.txt_contato_courrier       || '</TXT_CONTATO_COURRIER>';
              v_xml_executante := v_xml_executante || '<COD_TIPO_LOGR>'              || rsReembolso.cod_tipo_logr              || '</COD_TIPO_LOGR>';
              v_xml_executante := v_xml_executante || '</parametros>';

              rbm_protocolo.grava_endereco_adicional  ( v_cod_retorno
                                                      , v_msg_retorno
                                                      , v_xml_executante
                                                      );


        end if;
        --
        -- ##################################
        -- INCLUSAO / ALTERAÇÃO DO REEMBOLSO
        -- ##################################
        v_posicao := 560;

        -- valida regra de tipo cobranca
        ValidaRegraCobranca( rsReembolso.cod_ts_contrato
                           , rsReembolso.cod_operadora_contrato
                           , rsReembolso.cod_inspetoria_ts_contrato
                           , rsReembolso.cod_plano
                           , rsReembolso.cod_rede
                           , rsReembolso.num_associado
                           , rsReembolso.ind_tipo_reembolso
                           , rsReembolso.qtd_dias_reembolso
                           , v_ind_regra_cob
                           , p_cod_retorno
                           , p_msg_retorno);

        v_posicao := 570;

        rsReembolso.ind_tipo_cobranca := v_ind_regra_cob;

        IF nvl(rsReembolso.ind_aguardando_documentacao,'N') != 'S' THEN -- Ajuste para tratar coluna ind_aguardando_documentacao
           rsReembolso.ind_aguardando_documentacao := 'N';
        END IF;
        ----
        if v_ind_acao = 'I' then
            rsReembolso.dt_prevista_pgto := rsReembolso.dt_prevista_pgto_calc;
            if rsReembolso.num_protocolo is null then
                 --------------------------------------------------
                 --  Insclusão do protocolo do reembolso
                 --------------------------------------------------
                v_posicao := 580;
                getProtocolo(p_cod_operadora_atd => rsReembolso.Cod_Operadora_Contrato
                        , p_cod_usuario_atd        => rsReembolso.Cod_Usuario_Inclusao
                       , p_cod_ts_atd             => rsReembolso.cod_ts
                       , p_cod_retorno    => p_cod_retorno
                       , p_msg_retorno    => p_msg_retorno
                       , p_num_protocolo  => rsReembolso.num_protocolo_ans
                       , p_ind_commit     => v_ind_commit
                       ) ;
                --
                select ts_sinistro_seq.nextval
                into   rsReembolso.Num_Protocolo
                from   dual;
                --
                --rsReembolso.num_protocolo_ans := p_num_protocolo; -- LCT [18/09/2012]
                 p_num_protocolo := rsReembolso.num_protocolo;
                --
                select ts_sinistro_seq.nextval
                into   p_num_reembolso
                from   dual;
                --
                rsReembolso.num_reembolso         := p_num_reembolso;
                --
                v_posicao := 590;
                AdicionaProrocolo  ( rsReembolso
                                    , v_cod_usuario
                                    , p_cod_retorno
                                    , p_msg_retorno
                                    , rsReembolso.num_protocolo_ans
                                    , v_ind_commit
                                    );
             if p_cod_retorno <> 0 then
                 rollback;
                 return;
             end if;
            else
                --
                v_posicao := 600;
                select ts_sinistro_seq.nextval
                into   p_num_reembolso
                from   dual;
                --
                rsReembolso.num_reembolso := p_num_reembolso;
                --
                begin
                    select num_protocolo_ans,num_protocolo
                    into rsReembolso.num_protocolo_ans,v_num_protocolo
                    from protocolo_reembolso
                    where num_protocolo =  rsReembolso.num_protocolo
                       or num_protocolo_ans =  rsReembolso.num_protocolo_ans;
                    --
                    p_num_protocolo := v_num_protocolo; -- LCT [18/09/2012]
                    --
                EXCEPTION
                    when no_data_found then
                        p_cod_retorno := 9;
                        p_msg_retorno:= 'Número de protocolo não encontrado';
                        rollback;
                        return;
                end;
                v_posicao := 610;
                if rsReembolso.Num_Protocolo_Ans is null then
                    v_posicao := 620;
                    getProtocolo(p_cod_operadora_atd => rsReembolso.Cod_Operadora_Contrato
                        , p_cod_usuario_atd        => rsReembolso.Cod_Usuario_Inclusao
                       , p_cod_ts_atd             => rsReembolso.cod_ts
                       , p_cod_retorno            => p_cod_retorno
                       , p_msg_retorno            => p_msg_retorno
                       , p_num_protocolo          => rsReembolso.num_protocolo_ans
                       , p_ind_commit             => v_ind_commit
                       ) ;

                end if;
            end if;
            v_posicao := 630;

            if v_ExisteSuspensao >0 Then
                  GeraOcorrencia(rsReembolso.num_reembolso,81,null,null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
                  if p_cod_retorno <> 0 then
                      xmldom.freeDocument(v_doc);
                      rollback;
                      return;
                  end if;

            End If;
            --
            begin
                 insert /*rb_reembolso.GravaReembolso*/
                   into pedido_reembolso
                 values rsReembolso;
                 --
                 TS.AGENDA_NOTIFICACAO_REEMBOLSO(rsReembolso.num_reembolso, 2,rsReembolso.ind_situacao);
                 --
                 if rsReembolso.Val_Latitude is not null and rsReembolso.Val_Longitude is not null then
                   --
                   verifica_rbm_pedido_geo_blacklist(rsReembolso.num_reembolso);
                 end if;
                 --
            exception
             when others then
                 p_cod_retorno := 9;
                 p_msg_retorno := 'Erro ao incluir reembolso: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                 rollback;
                 return;
            end;
            --
        else
             --
             v_posicao := 640;
             --
             if rsReembolso.dt_prevista_pgto is null then
                 rsReembolso.dt_prevista_pgto := rsReembolso.dt_prevista_pgto_calc;
             end if;
             -- Verifica se teve alteração da data prevista para pgto
             if v_dt_prevista_pgto_ant <> rsReembolso.dt_prevista_pgto then
                 begin
                    --
                    v_posicao := 650;
                    --
                    v_sql := 'SELECT B.DESC_MOTIVO_ALTER_DT_PGTO
                                FROM TS.MOTIVO_ALTER_DT_PGTO B
                               WHERE B.COD_MOTIVO_ALTER_DT_PGTO = :P_COD_MOTIVO_ALTERACAO';
                    --
                    execute
                  immediate v_sql
                       INTO V_MOTIVO_ALTER_DT_PGTO
                      using RSREEMBOLSO.Cod_Motivo_Alter_Dt_Pgto;
                    --
                    v_ind_ppr := 'S'; -- indica que é pedido prorrogado para envio de email;
                    --
                 exception
                    when others then
                        v_motivo_alter_dt_pgto := null;
                        v_ind_ppr := 'N';
                 end;
                 --
                 v_posicao := 660;
                 --
                 GeraOcorrencia(p_num_reembolso,22,to_char(v_dt_prevista_pgto_ant,'dd/mm/yyyy') || ' foi alterada para : ' || to_char(rsReembolso.dt_prevista_pgto,'dd/mm/yyyy') || ' - Motivo: ' || v_motivo_alter_dt_pgto, null , v_cod_usuario,p_cod_retorno,p_msg_retorno);
                 --
                 v_posicao := 670;
                 --
                 if v_qtd_reembolsos > 0 then
                     for r in ( select x.column_value num_reembolso
                               from table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x )
                     loop


                         GeraOcorrencia(r.num_reembolso,22,to_char(v_dt_prevista_pgto_ant,'dd/mm/yyyy') || ' foi alterada para : ' || to_char(rsReembolso.dt_prevista_pgto,'dd/mm/yyyy') || ' - Motivo: ' || v_motivo_alter_dt_pgto, null , v_cod_usuario,p_cod_retorno,p_msg_retorno);


                     end loop;
                 end if;
             end if;
             --
             v_posicao := 680;
             --
      IF ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_DOCUMENTACAO') = 'N' then
        rsReembolso.ind_situacao := 32;    -- Aguardando documentação original
        rsReembolso.ind_aguardando_documentacao := 'S';
      ELSE
        IF rsReembolso.ind_situacao != 34 THEN
          --
          IF ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_DOCUMENTACAO') = 'S' then
            libera_documentos_pedido ( p_num_reembolso, v_cod_usuario, p_cod_retorno, p_msg_retorno, 'N',v_dt_prevista_nova, v_cod_altera_motivo, 'N' );
          END IF;
          --
          if v_dt_prevista_nova is not null then
            rsReembolso.Dt_Prevista_Pgto := v_dt_prevista_nova;
            rsReembolso.Dt_Prevista_Pgto_Calc := v_dt_prevista_nova;
            rsReembolso.Cod_Motivo_Alter_Dt_Pgto := v_cod_altera_motivo;
          end if;
        END IF;
      END IF;
             --
             v_posicao := 690;
             --
             begin
                 --
                 update /*rb_reembolso.GravaReembolso*/
                        pedido_reembolso
                 set    row = rsReembolso
                 where  num_reembolso = rsReembolso.num_reembolso;
                 --
                 if sql%rowcount = 0 then
                     p_cod_retorno := 9;
                     p_msg_retorno := 'Houve problema na tentativa de atualizar o pedido de reembolso ( ' || rsReembolso.num_reembolso || ')';
                     rollback;
                     return;
                 end if;
                 --
                 if rsReembolso.ind_situacao <> 32 then
                    --
                    v_posicao := 700;
                    --
                    TS.AGENDA_NOTIFICACAO_REEMBOLSO(rsReembolso.num_reembolso, 2,rsReembolso.ind_situacao);
                    --

                 end if;
                 --
            exception
            when others then
                 p_cod_retorno := 9;
                 p_msg_retorno := v_msg_retorno_sucesso || p_num_reembolso || ': ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                 rollback;
                 return;
            end;
            --
            v_posicao := 710;
            --
            if v_qtd_reembolsos > 0 then
                begin
                    --
                    update ts.pedido_reembolso
                       set dt_prevista_pgto = rsReembolso.dt_prevista_pgto
                         , cod_motivo_alter_dt_pgto = rsReembolso.cod_motivo_alter_dt_pgto
                         , ind_tipo_favorecido = rsReembolso.ind_tipo_favorecido
                         , num_cpf_favorecido = rsReembolso.num_cpf_favorecido
                         , ind_forma_pgto = rsReembolso.ind_forma_pgto
                         , cod_banco = rsReembolso.cod_banco
                         , cod_agencia = rsReembolso.cod_agencia
                         , num_dv_agencia = rsReembolso.num_dv_agencia
                         , num_conta_corrente = rsReembolso.num_conta_corrente
                         , num_dv_cc = rsReembolso.num_dv_cc
                         , cod_usuario_atu = v_cod_usuario
                         , num_favorecido  = rsReembolso.num_favorecido
                         , ind_situacao = rsReembolso.ind_situacao
                         , dt_situacao_pedido = rsReembolso.dt_situacao_pedido
                         , cod_usuario_indeferimento = v_cod_usuario
                         , dt_cancelamento = rsReembolso.dt_cancelamento
                         , cod_motivo_indeferimento = rsReembolso.cod_motivo_indeferimento
                         , dt_indeferimento = rsReembolso.dt_indeferimento
                         , txt_observacao_operadora = rsReembolso.Txt_Observacao_Operadora
                         , txt_observacao = rsReembolso.txt_observacao
                         , ind_tipo_conta_reemb = rsReembolso.ind_tipo_conta_reemb
                     where num_reembolso in ( select x.column_value
                                                from table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x );
                    --

                 exception
                    when others then
                        p_cod_retorno := 9;
                        p_msg_retorno := 'Ocorreu um erro na atualização dos reembolsos.' || top_utl_padrao.msgerro;
                        return;
                 end;

            end if;
            --
            v_posicao := 720;
            --
            begin
                update pedido_reembolso pr
                    set pr.num_associado = rsReembolso.num_associado,
                        pr.nome_associado = rsReembolso.nome_associado
                    where num_protocolo = rsReembolso.num_protocolo
                    and num_reembolso != rsReembolso.num_reembolso
                    and ind_situacao not in (34,35,36,37,38,46);
             exception
                when others then
                p_cod_retorno := 1;
                p_msg_retorno := 'Houve problema na tentativa de atualizar o pedido de reembolso ( ' || rsReembolso.num_protocolo || ')';
                rollback;
                return;

            end;
            --
            v_posicao := 740;
            --
            if v_qtd_reembolsos > 0 then
                  for r in ( select x.column_value num_reembolso
                               from table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x )
                  loop
                     --
                     gravaMotivoIndef( p_cod_retorno
                                     , p_msg_retorno
                                     , v_xml_motivo
                                     , r.num_reembolso
                                     , v_cod_usuario);
                     --

                  end loop;
            else
              gravaMotivoIndef( p_cod_retorno
                            , p_msg_retorno
                            , v_xml_motivo
                            , p_num_reembolso
                            , v_cod_usuario);
            end if;
            --
            v_posicao := 750;
            --
            --Liberar as glosas da cabeça
            LiberacaoGlosa ( p_cod_retorno
                           , p_msg_retorno
                           , v_xml_glosa
                           , p_num_reembolso
                           , v_cod_usuario );
            --
            if p_cod_retorno <> 0 then
                rollback;
                return;
            end if;
            --
            --
        end if;
        --
        --
        BEGIN
             UPDATE ts.protocolo_reembolso p
                SET p.num_envelope            = v_num_envelope
                  , p.cod_tipo_envio_envelope = v_cod_tipo_envio_envelope
              WHERE p.num_protocolo_ans  = rsReembolso.Num_Protocolo_Ans;

        EXCEPTION
           WHEN OTHERS THEN
             p_cod_retorno := 9;
             p_msg_retorno := 'Erro ao incluir envelope no protocolo: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
             rollback;
             return;
        END;
            --
        --
        v_posicao := 760;
        --
        v_val_total_proc := 0;
        --
        if v_ind_acao in ('I','A','FN','TR') then
            --
            ----------
            --ITENS
            ----------
            v_posicao := 770;
            --
            if nvl (v_tipo_situacao,'X') != 'CR' then -- so fará as verificações se o reembolso nao estiver em courrier
              --
              -- EXCLUSAO DE TODOS OS PROCEDIMENTOS QUE NÃO SEJAM CONSULTA EM CASO DE O REEMBOLSO SER CONSULTA
              --
              /*if rsReembolso.ind_tipo_reembolso = 1 and v_ind_acao in ('A','FN','TR') then
                  begin
                      for p in ( select num_seq_item
                                      , cod_procedimento_cm
                                   from procedimento_reembolso
                                  where num_reembolso = p_num_reembolso
                                    and cod_procedimento_cm != '10101012' )
                       loop
                              --
                              v_posicao := 780;
                              --
                              delete
                              from   procedimento_reembolso
                              where  num_reembolso              = p_num_reembolso
                              and    num_seq_item               = p.num_seq_item;
                              --
                              delete
                              from   memoria_reembolso_detalhe
                              where  num_reembolso              = p_num_reembolso
                              and    num_seq_item               = p.num_seq_item;
                              --
                              delete
                              from   reembolso_glosa
                              where  num_reembolso              = p_num_reembolso
                              and    num_seq_item               = p.num_seq_item;
                              --
                              GeraOcorrencia(p_num_reembolso,25,'Procedimento ' || p.cod_procedimento_cm || ' excluído. ' || chr(13) || rsReembolso.txt_observacao, rsReembolso.txt_observacao_operadora, v_cod_usuario,p_cod_retorno,p_msg_retorno,p.num_seq_item);
                              --

                      end loop;
                  exception
                      when others then
                          null;
                  end;
              end if; */
              --
              v_posicao := 790;
              --
              v_qtd_procedimento := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/QTD_PROCEDIMENTO');
              --
              v_val_informado :=0;
              v_duplicado_aux :=0;
              --

              if(nvl(v_qtd_procedimento, 0) = 0 and v_cod_usuario = 'SITE' and v_param_valida_duplicidade_site = 'S') then

                RetornaDuplicidade(rsReembolso.Num_Associado,
                                   rsReembolso.Val_Informado,
                                   rsReembolso.dt_comprovante,
                                   replace(replace(replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_INSC_FISCAL'),'.',''),'-',''),'/',''),
                                   ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/NUM_CRM'),
                                   Null,
                                   rsReembolso.Num_Reembolso,
                                   v_protocolo_aux,
                                   v_duplicado_aux
                                   );

                if (v_duplicado_aux > 0) then
                  p_cod_retorno := 10;
                  p_msg_retorno := v_protocolo_aux;
                  rollback;
                  return;
                end if;

              End if;

              v_ind_alt_modalidade := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_ALTERA_MODALIDADE');
              if v_ind_acao = 'A' and v_qtd_procedimento > 0 and v_ind_alt_modalidade = 'S' then

                 delete from procedimento_reembolso
                    where num_reembolso = rsReembolso.Num_Reembolso;

              end if;



              for x in 1 .. nvl(v_qtd_procedimento,0) loop
                  --
                  rsProcedimentoReembolso.cod_procedimento_cm       := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/ITEM_MEDICO_' || x);
                  rsProcedimentoReembolso.cod_procedimento          := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/COD_PROCEDIMENTO_' || x);
                  rsProcedimentoReembolso.num_seq_item              := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/NUM_SEQ_ITEM_' || x );
                  -- retira o código do procedimento caso ele tenha sido excluido anteriormente
                  --if rsReembolso.ind_tipo_reembolso = 1 and rsProcedimentoReembolso.cod_procedimento_cm != '10101012' then
                    --  rsProcedimentoReembolso.cod_procedimento_cm := null;
                  --end if;
                  --

                  v_posicao := 800;
                  --
                  if NVL(rsProcedimentoReembolso.cod_procedimento_cm, v_item_vazio) != v_item_vazio then
                      --
                      begin
                          select /*rb_reembolso.GravaReembolso*/ *
                          into   rsProcedimentoReembolso
                          from   procedimento_reembolso
                          where  num_reembolso = p_num_reembolso
                          and    num_seq_item  = rsProcedimentoReembolso.num_seq_item;
                      exception
                      when no_data_found then
                           v_ind_acao_item := 'I';
                      end;
                      v_cod_termo := null;
                      v_cod_termo_benef := null;
                      --
                      rsProcedimentoReembolso.cod_procedimento_cm   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/ITEM_MEDICO_' || x);
                      rsProcedimentoReembolso.cod_procedimento      := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/COD_PROCEDIMENTO_' || x);
                      rsProcedimentoReembolso.qtd_informado         := NVL(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/QTD_INFORMADO_' || x),1);
                      v_cod_termo                                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/COD_TISS_UNIDADE_MEDIDA_' || x);
                      v_cod_termo_benef                             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/COD_TISS_UNIDADE_MEDIDA_BENEF_' || x);
                      rsProcedimentoReembolso.ind_via               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_VIA_' || x);
                      rsProcedimentoReembolso.ind_cirurgia          := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_CIRURGIA_' || x);
                      rsProcedimentoReembolso.cod_usuario_atu       := v_cod_usuario;
                      rsProcedimentoReembolso.dt_atu                := sysdate;
                      rsProcedimentoReembolso.ind_funcao            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/COD_FUNCAO_' || x );
                      rsProcedimentoReembolso.cod_grupo_estatistico := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/COD_GRUPO_ESTATISTICO_' || x);
                      rsProcedimentoReembolso.hora_atendimento      := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/HR_ATENDIMENTO_INICIO_' || x),':');
                      rsProcedimentoReembolso.hora_alta             := replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/HR_ATENDIMENTO_FIM_' || x),':');
                      rsProcedimentoReembolso.ind_dhe               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_DHE_' || x);
                      rsProcedimentoReembolso.tipo_tecnica_utilizada:= ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_TECNICA_' || x);
                      rsProcedimentoReembolso.ind_doppler           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_DOPPLER_' || x);
                      rsProcedimentoReembolso.ind_uti               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_UTI_' || x);
                      rsProcedimentoReembolso.cod_motivo_glosa_man  := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/GLOSA_MAN_' || x);
                      rsProcedimentoReembolso.ind_tipo_glosa_man    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/TIPO_GLOSA_MAN_' || x);
                      --
                      --Validar prrenchimento de fracionamento
                     --
                     v_posicao := 791;
                     --
                     if (v_ind_acao = 'FN' and rsProcedimentoReembolso.ind_tipo_item = 'M' and v_cod_termo is null ) then
                        p_cod_retorno := 9;
                        p_msg_retorno := 'Existem Procedimentos / Serviços do grupo estatítico MED com fracionamento não informado.';
                        rollback;
                        return;
                     end if;

                     if (v_ind_acao = 'FN' and rsProcedimentoReembolso.ind_tipo_item = 'M' and v_cod_termo_benef is null ) then
                        p_cod_retorno := 9;
                        p_msg_retorno := 'Existem Procedimentos / Serviços do grupo estatítico MED com fracionamento beneficiário não informado.';
                        rollback;
                        return;
                     end if;
                      --


                      if rsReembolso.cod_tratamento is null and rsReembolso.Cod_Origem in (11,20) then

                        if ((rsProcedimentoReembolso.Cod_Procedimento = '10101012' or rsProcedimentoReembolso.Cod_Procedimento_Cm = '10101012') and rsReembolso.Ind_Tipo_Reembolso = 1) then

                          UPDATE ts.pedido_reembolso pr
                             SET pr.cod_tratamento = 5
                           WHERE pr.num_reembolso  = rsReembolso.num_reembolso;

                           rsReembolso.Cod_Tratamento := 5;

                        else
                          BEGIN
                            SELECT COUNT(*)
                              INTO v_qtd_tratamento
                              FROM(
                                  SELECT distinct(ptc.cod_tratamento)
                                    FROM ts.reemb_param_terapia rpt
                                       , ts.reemb_param_terapia_proc ptc
                                   WHERE rpt.cod_regra = ptc.cod_regra
                                     AND rpt.ind_habilitado = 'S'
                                     AND rsReembolso.Dt_Pedido between rpt.dt_ini_vigencia and nvl(rpt.dt_fim_vigencia,sysdate)
                                     --AND ptc.cod_procedimento   = rsProcedimentoReembolso.Cod_Procedimento
                                     AND rpt.ind_tipo_reembolso = rsReembolso.Ind_Tipo_Reembolso
                                     AND ( rpt.cod_operadora = '99' OR rpt.cod_operadora = rsReembolso.Cod_Operadora_Contrato)
                                     GROUP BY ptc.cod_tratamento);
                          EXCEPTION
                            WHEN OTHERS THEN
                               v_qtd_tratamento := 10;
                          END;
                          --
                          IF v_qtd_tratamento = 1 THEN

                            BEGIN
                                SELECT distinct(ptc.cod_tratamento)
                                  INTO v_cod_tratamento_regra
                                  FROM ts.reemb_param_terapia rpt
                                     , ts.reemb_param_terapia_proc ptc
                                 WHERE rpt.cod_regra = ptc.cod_regra
                                   AND rpt.ind_habilitado = 'S'
                                   AND rsReembolso.Dt_Pedido between rpt.dt_ini_vigencia and nvl(rpt.dt_fim_vigencia,sysdate)
                                   AND ptc.cod_procedimento   in (rsProcedimentoReembolso.Cod_Procedimento,rsProcedimentoReembolso.Cod_Procedimento_Cm)
                   AND rpt.ind_tipo_reembolso = rsReembolso.Ind_Tipo_Reembolso
                                   AND ( rpt.cod_operadora = '99' OR rpt.cod_operadora = rsReembolso.Cod_Operadora_Contrato)
                              GROUP BY ptc.cod_tratamento;
                            EXCEPTION
                              WHEN OTHERS THEN
                                 v_cod_tratamento_regra := null;
                            END;

              UPDATE ts.pedido_reembolso pr
                               SET pr.cod_tratamento = v_cod_tratamento_regra
                             WHERE pr.num_reembolso  = rsReembolso.num_reembolso;

                            rsReembolso.Cod_Tratamento := v_cod_tratamento_regra;
                          END IF;
                          --
                        end if;

                      end if;
                      --
                      v_posicao := 810;
                      --
                      if nvl(rsProcedimentoReembolso.ind_cirurgia,'N') = 'S' and nvl(rsProcedimentoReembolso.ind_funcao,'X') = 'X' then
                          p_cod_retorno := 9;
                          p_msg_retorno := 'Informe a função para o procedimento - ' || rsProcedimentoReembolso.cod_procedimento_cm || '.';
                          rollback;
                          return;
                      end if;
                      --
                      v_posicao := 820;
                      --
                      if TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/DT_ATENDIMENTO_PROC_'), 'DD/MM/YYYY') then
                          BEGIN
                              rsProcedimentoReembolso.data_atendimento      := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/DT_ATENDIMENTO_PROC_' || x), 'DD/MM/YYYY');
                          EXCEPTION
                           when others then
                                  p_cod_retorno := 9;
                                  p_msg_retorno := 'Data do Procedimento ' || rsProcedimentoReembolso.cod_procedimento_cm || ' inválida';
                                  rollback;
                                  return;
                            end;
                      else
                          p_cod_retorno := 9;
                          p_msg_retorno := 'Data de atendimento inválida.';
                          rollback;
                          return;
                      end if;
                      --
                      v_posicao := 830;
                      --
                      if rsProcedimentoReembolso.data_atendimento > trunc(sysdate) then
                          p_cod_retorno := 9;
                          p_msg_retorno := 'A data do atendimento do procedimento ' || rsProcedimentoReembolso.cod_procedimento_cm || ' não pode ser maior que a data de hoje';
                          rollback;
                          return;
                      end if;
					  --
					  v_posicao := 831;
                      --

                      --
                      begin
                          if rsReembolso.cod_origem not in(11,20) then
                            select nvl(cod_grupo_pai,'XXX') into v_cod_grupo_pai from ts.grupo_estatistico where cod_grupo_estatistico = rsProcedimentoReembolso.Cod_Grupo_Estatistico;
                          else
                            v_cod_grupo_pai := 'XXX';
                          end if;
                      exception
                          WHEN NO_DATA_FOUND THEN v_cod_grupo_pai := 'XXX';
                      end;

                      if ((nvl(rsProcedimentoReembolso.ind_funcao,'X') = 'X')
                          and (rsProcedimentoReembolso.Cod_Grupo_Estatistico <> 'HNN')
                          and (nvl(v_cod_grupo_pai,'XXX')
                          not in ('XXX', 'DIA', 'GAS', 'HDC', 'REM', 'MAT', 'MED', 'TAX'))) then
                          p_cod_retorno := 9;
						  p_msg_retorno := 'Informe a função para o procedimento - ' || rsProcedimentoReembolso.cod_procedimento_cm;
                          rollback;
                          return;
                      end if;
                      --
                      v_posicao := 840;
                      --
                      if nvl(rsReembolso.ind_reanalise,'N') = 'N' then
                          if ( rsReembolso.dt_pedido - rsProcedimentoReembolso.data_atendimento ) > 1826 then
                              p_cod_retorno := 9;
                              p_msg_retorno := 'A data do atendimento do procedimento ' || rsProcedimentoReembolso.cod_procedimento_cm || ' não pode ser 5 anos anterior a data de solicitação do pedido.';
                              rollback;
                              return;
                          end if;
                      end if;
                      --
                      v_posicao := 850;
                      --
                      rsProcedimentoReembolso.txt_obs_glosa_man     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/TXT_OBS_GLOSA_MAN_' || x);
                      if nvl(rsProcedimentoReembolso.ind_tipo_glosa_man,0) = 1 then
                      -- se for quantidade
                          rsProcedimentoReembolso.qtd_glosa_man     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/QTD_GLOSA_MAN_' || x);
                          rsProcedimentoReembolso.val_glosa_man     := null;
                      else
                          rsProcedimentoReembolso.qtd_glosa_man         := null;
                          if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_GLOSA_MAN_' || x )) then
                              rsProcedimentoReembolso.val_glosa_man     := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_GLOSA_MAN_' || x ),2);
                          end if;
                      end if;
                      --
                      v_posicao := 860;
                      --
                      if    rsProcedimentoReembolso.cod_motivo_glosa_man is null
                      and ( rsProcedimentoReembolso.val_glosa_man        is not null
                      or    rsProcedimentoReembolso.qtd_glosa_man        is not null ) then
                          p_cod_retorno := 9;
                          p_msg_retorno:= 'Informe o motivo da glosa manual para o procedimento '||rsProcedimentoReembolso.cod_procedimento_cm ;
                          rollback;
                          return;
                      elsif rsProcedimentoReembolso.cod_motivo_glosa_man is null
                      and ( rsProcedimentoReembolso.val_glosa_man        is null
                      or    rsProcedimentoReembolso.qtd_glosa_man        is null ) then

                          rsProcedimentoReembolso.txt_obs_glosa_man   := null;
                          rsProcedimentoReembolso.val_glosa_man       := null;
                          rsProcedimentoReembolso.qtd_glosa_man       := null;
                          rsProcedimentoReembolso.ind_tipo_glosa_man  := null;
                          rsProcedimentoReembolso.val_glosa_man_calc  := null;
                      end if;
                      --
                      v_posicao := 870;
                      --
                      rsProcedimentoReembolso.num_insc_fiscal       := replace(replace(replace(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/NUM_INSC_FISCAL_PROF_'  || x),'.',''),'-',''),'/','');
                      rsProcedimentoReembolso.nome_profissional     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/NOME_PROFISSIONAL_' || x);
                      rsProcedimentoReembolso.sigla_conselho        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/SIGLA_CONSELHO_PROF_' || x);
                      rsProcedimentoReembolso.sgl_uf_conselho       := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/UF_CONSELHO_PROF_' || x);
                      rsProcedimentoReembolso.ind_insc_fiscal       := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_INSC_FISCAL_PROF_' || x);
                      rsProcedimentoReembolso.num_crm               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/NUM_CRM_PROF_' || x);
                      rsProcedimentoReembolso.ind_dobra_honorario   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_DOBRA_HONORARIO_' || x);
                      rsProcedimentoReembolso.cod_especialidade     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/COD_ESPECIALIDADE_' || x);
                      --

                      -- valida duplicidade na solicitação de Reembolso

                      if (v_cod_usuario = 'SITE' and v_param_valida_duplicidade_site = 'S') then

                            RetornaDuplicidade(rsReembolso.Num_Associado,
                                               rsReembolso.Val_Informado,
                                               rsReembolso.dt_comprovante,
                                               rsReembolso.Num_Insc_Fiscal,
                                               rsReembolso.Num_Crm,
                                               rsProcedimentoReembolso.Cod_Especialidade,
                                               rsReembolso.Num_Reembolso,
                                               v_protocolo_aux,
                                               v_duplicado_aux
                                              );

                            if (v_duplicado_aux > 0) then
                                p_cod_retorno := 10;
                                p_msg_retorno := v_protocolo_aux;
                                rollback;
                                return;
                            end if;
                      end if;
                      --
                      v_posicao := 880;
                      --
                      if nvl(rsReembolso.ind_origem_associado,'BD') = 'WS' then
                          begin
                              --
                              v_sql := ' SELECT CASE WHEN rsReembolso.ind_regulamentado = ''S''
                                                     THEN to_char (a.cod_grupo_benef_atual)
                                                     ELSE to_char (a.cod_grupo_benef_velho)
                                                END  grupo_beneficio
                                           FROM amil_item_grupo_benef a
                                          WHERE item_medico = :p_cod_procedimento_cm';
                              --
                              execute
                            immediate v_sql
                                 INTO rsProcedimentoReembolso.grupo_beneficio
                                using rsProcedimentoReembolso.cod_procedimento_cm;
                              --
                          exception
                              when no_data_found then
                                  begin
                                      --
                                      v_sql := ' SELECT CASE WHEN rsReembolso.ind_regulamentado = ''S''
                                                             THEN to_char (a.cod_grupo_benef_atual)
                                                             ELSE to_char (a.cod_grupo_benef_velho)
                                                        END  grupo_beneficio
                                                   FROM amil_item_grupo_benef a
                                                  WHERE item_medico = :p_cod_procedimento';
                                      --
                                      execute
                                    immediate v_sql
                                         INTO rsProcedimentoReembolso.grupo_beneficio
                                        using rsProcedimentoReembolso.cod_procedimento;
                                      --
                                  exception
                                  when no_data_found then
                                      rsProcedimentoReembolso.grupo_beneficio := null;
                                  end;
                          end;
                      end if;
                      --
                      v_posicao := 890;
                      --
                      if rsProcedimentoReembolso.data_atendimento is null then
                          p_cod_retorno := 9;
                          p_msg_retorno:= 'Informe a data de atendimento do procedimento '||rsProcedimentoReembolso.cod_procedimento_cm ;
                          rollback;
                          return;
                      end if;

                      if rsProcedimentoReembolso.data_atendimento > trunc(sysdate) then
                          p_cod_retorno := 9;
                          p_msg_retorno:= 'A data de atendimento do procedimento '||rsProcedimentoReembolso.cod_procedimento_cm||' não pode ser maior que a data atual.';
                          rollback;
                          return;
                      end if;
                      --
                      v_posicao := 900;
                      --
                      if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_GLOSA_CALC_' || x )) then
                          rsProcedimentoReembolso.val_glosa         := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_GLOSA_CALC_' || x ),2);
                      end if;
                      --
                      if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_GLOSA_MAN_CALC_' || x )) then
                          rsProcedimentoReembolso.val_glosa_man_calc:= ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_GLOSA_MAN_CALC_' || x ),2);
                      end if;
                      --
                      if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_CALCULADO_' || x )) then
                          rsProcedimentoReembolso.val_calculado     := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_CALCULADO_' || x ),2);
                      end if;
                      --
                      if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_INFORMADO_' || x )) then
                          rsProcedimentoReembolso.val_informado     := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_INFORMADO_' || x ),2);
                      else
                          rsProcedimentoReembolso.val_informado     := 0;
                      end if;
                      --
                      if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_REEMBOLSO_' || x )) then
                          rsProcedimentoReembolso.val_reembolsado   := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_REEMBOLSO_' || x ),2);
                      end if;
                      --
                      if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_FRANQUIA_' || x )) then
                          rsProcedimentoReembolso.val_franquia      := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_FRANQUIA_' || x ),2);
                      end if;
                      --
                      if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_APROVADO_' || x )) then
                          rsProcedimentoReembolso.val_aprovado      := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_APROVADO_' || x ),2);
                      end if;
                      --
                      if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_CALCULADO_FILME_' || x )) then
                          rsProcedimentoReembolso.val_calculado_filme     := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_CALCULADO_FILME_' || x ),2);
                      end if;

                      if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_CUSTO_OPERACIONAL_' || x )) then
                          rsProcedimentoReembolso.val_proc_co_calculado   := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_CUSTO_OPERACIONAL_' || x ),2);
                      end if;
                      --
                      if TS_UTIL.IsNumber(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_PROCEDIMENTO_' || x )) then
                          rsProcedimentoReembolso.val_proc_calculado      := ts_numero_web(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/VAL_PROCEDIMENTO_' || x ),2);
                      end if;
                      --
                      v_txt_memoria_calculo       := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/TXT_MEMORIA_CALCULO_' || x);
                      v_ind_excluir               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_EXCLUIR_' || x );
                      --
                      rsProcedimentoReembolso.ind_videolaparascopia   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_VIDEOLAPARASCOPIA_' || x);
                      rsProcedimentoReembolso.ind_videoendoscopia     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_VIDEOENDOSCOPIA_' || x);
                      rsProcedimentoReembolso.ind_tipo_item           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_TIPO_ITEM_' || x);
                      --
                      rsProcedimentoReembolso.ind_negociacao_prest    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/IND_NEGOCIACAO_PREST_' || x);
                      rsProcedimentoReembolso.cod_prestador_ts_neg    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/COD_PRESTADOR_TS_NEG_' || x);
                      rsProcedimentoReembolso.num_seq_item_negociacao := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/NUM_SEQ_ITEM_NEGOCIACAO_' || x);
                      v_xml_glosa                                     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/XML_GLOSA_' || x);
                      --
                      --
                      -- Verifica se o valor do comprovante é menor do que a soma dos valores dos procedimentos
                      v_posicao := 910;
                      --
                      if nvl(v_ind_excluir,'N') = 'N' then
                          if nvl(rsProcedimentoReembolso.val_informado,0) = 0 then
                              p_cod_retorno := 9;
                              p_msg_retorno:= 'Digite um valor válido e maior que zero para o campo valor informado do procedimento '||rsProcedimentoReembolso.cod_procedimento_cm;
                              rollback;
                              return;
                          end if;

                          v_val_total_proc := v_val_total_proc + rsProcedimentoReembolso.val_informado;
                      end if;
                      --
                      v_posicao := 919;
                      --
                      rsProcedimentoReembolso.cod_tiss_unidade_medida := null;
                      if NVL(v_cod_termo, v_item_vazio) != v_item_vazio then
                        BEGIN
                            SELECT cod_tiss_unidade_medida
                                    INTO rsProcedimentoReembolso.cod_tiss_unidade_medida
                                    FROM ts.TISS_UNIDADE_MEDIDA tum
                                    WHERE upper(tum.cod_termo) = upper(v_cod_termo)
                                    AND rownum = 1;
                        EXCEPTION
                            WHEN OTHERS THEN
                                rsProcedimentoReembolso.cod_tiss_unidade_medida := null;
                        END;
                      end if;

                    -- FRACIONAMENTO BENEFICIARIO
                      rsProcedimentoReembolso.cod_tiss_unidade_medida_benef := null;
                      if NVL(v_cod_termo_benef, v_item_vazio) != v_item_vazio then
                        BEGIN
                            SELECT  cod_tiss_unidade_medida
                                    INTO rsProcedimentoReembolso.cod_tiss_unidade_medida_benef
                                    FROM ts.TISS_UNIDADE_MEDIDA tum
                                    WHERE upper(tum.cod_termo) = upper(v_cod_termo_benef)
                                    AND rownum = 1;
                        EXCEPTION
                            WHEN OTHERS THEN
                                rsProcedimentoReembolso.cod_tiss_unidade_medida_benef := null;
                        END;
                      end if;
                      --
                      v_posicao := 920;
                      --
                      if v_ind_acao_item != 'I' then
                          begin
                              select /*rb_reembolso.GravaReembolso*/
                                     cod_procedimento_cm
                                   , qtd_informado
                                   , ind_via
                                   , ind_situacao
                              into   rsprocedimentoreembolsoaux.cod_procedimento_cm
                                   , rsprocedimentoreembolsoaux.qtd_informado
                                   , rsprocedimentoreembolsoaux.ind_via
                                   , rsprocedimentoreembolsoaux.ind_situacao
                              from   procedimento_reembolso
                              where  num_reembolso = p_num_reembolso
                              and    num_seq_item  = rsprocedimentoreembolso.num_seq_item
                              and    rownum        = 1;
                              --
                              v_ind_procedimento_alterado := 'N';
                              --
                              --Gerar ocorrência de troca de procedimento
                              if rsProcedimentoReembolsoAux.cod_procedimento_cm <> rsProcedimentoReembolso.cod_procedimento_cm then
                                  --
                                  GeraOcorrencia(p_num_reembolso,6,rsProcedimentoReembolsoAux.cod_procedimento_cm || ' foi alterado para : ' || rsProcedimentoReembolso.cod_procedimento_cm || chr(13) || rsReembolso.txt_observacao, null /*rsReembolso.txt_observacao_operadora*/, v_cod_usuario,p_cod_retorno,p_msg_retorno);
                                  v_ind_procedimento_alterado := 'S';
                                  if p_cod_retorno <> 0 then
                                      rollback;
                                      return;
                                  end if;
                              end if;
                              --Gerar ocorrência de alteraçaõ de quantidade
                              if rsProcedimentoReembolsoAux.qtd_informado <> rsProcedimentoReembolso.qtd_informado then
                                  --
                                  GeraOcorrencia(p_num_reembolso,12,'Procedimento ' || rsProcedimentoReembolso.cod_procedimento_cm || ' (' || rsProcedimentoReembolsoAux.qtd_informado || ') foi alterada para ' || rsProcedimentoReembolso.qtd_informado || chr(13) || rsReembolso.txt_observacao, rsReembolso.txt_observacao_operadora, v_cod_usuario,p_cod_retorno,p_msg_retorno,rsProcedimentoReembolso.num_seq_item);
                                  if p_cod_retorno <> 0 then
                                      rollback;
                                      return;
                                  end if;
                              end if;
                          exception
                          when no_data_found then
                              null;
                          end;
                      end if;
                      --
                      v_posicao := 930;
                      --
                      rsProcedimentoReembolso.num_reembolso := p_num_reembolso;
                      -- #######################################################################
                      -- INCLUSÃO / ALTERAÇÃO DOS PROCEDIMENTOS
                      -- #######################################################################
                      if v_ind_acao_item = 'I' then

                          if nvl(v_ind_excluir,'N') = 'N' then
                              begin
                                  --
                                  v_posicao := 940;
                                  --
                                  rsProcedimentoReembolso.ind_situacao := nvl(rsProcedimentoReembolso.ind_situacao,'E');
                                  --
                                  begin
                                    select cod_grupo_estatistico
                                    into rsProcedimentoReembolso.Cod_Grupo_Estatistico
                                    from ts.itens_medicos
                                     where item_medico = rsProcedimentoReembolso.cod_procedimento_cm
                                     and rownum < 2;
                                  exception
                                  when others then
                                  rsProcedimentoReembolso.Cod_Grupo_Estatistico := null;
                                  end;
                                  --
                                  insert /*rb_reembolso.GravaReembolso*/
                                  into   procedimento_reembolso
                                  values rsProcedimentoReembolso;
                              exception
                              when dup_val_on_index then
                                  p_cod_retorno := 9;
                                  p_msg_retorno := 'Erro ao incluir reembolso: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                                  rollback;
                                  return;
                              when others then
                                  p_cod_retorno := 9;
                                  p_msg_retorno := 'Erro ao incluir reembolso: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                                  rollback;
                                  return;
                              end;
                          end if;
                          --
                      else
                          if nvl(v_ind_excluir,'N') = 'S' then
                              --
                              delete /*rb_reembolso.GravaReembolso*/
                              from   pedido_reemb_proc_cid
                              where  num_reembolso              = p_num_reembolso
                              and    num_seq_item               = rsProcedimentoReembolso.num_seq_item;

                              delete /*rb_reembolso.GravaReembolso*/
                              from   procedimento_reembolso
                              where  num_reembolso              = p_num_reembolso
                              and    num_seq_item               = rsProcedimentoReembolso.num_seq_item;
                              --
                              delete /*rb_reembolso.GravaReembolso*/
                              from   memoria_reembolso
                              where  num_reembolso              = p_num_reembolso
                              and    num_seq_item               = rsProcedimentoReembolso.num_seq_item;
                              --
                              delete /*rb_reembolso.GravaReembolso*/
                              from   reembolso_glosa
                              where  num_reembolso              = p_num_reembolso
                              and    num_seq_item               = rsProcedimentoReembolso.num_seq_item;
                              --
                              v_posicao := 950;
                              --
                              GeraOcorrencia(p_num_reembolso,25,'Procedimento ' || rsProcedimentoReembolso.cod_procedimento_cm || ' excluído. ' || chr(13) || rsReembolso.txt_observacao, rsReembolso.txt_observacao_operadora, v_cod_usuario,p_cod_retorno,p_msg_retorno,rsProcedimentoReembolso.num_seq_item);
                              --
                          else
                              --
                              begin
                                 --
								 begin
									select cod_grupo_estatistico
									  into rsProcedimentoReembolso.Cod_Grupo_Estatistico
									  from ts.itens_medicos
									 where item_medico = rsProcedimentoReembolso.cod_procedimento_cm
									   and rownum < 2;
								  exception
								  when others then
									  rsProcedimentoReembolso.Cod_Grupo_Estatistico := null;
								  end;
                                 --
                                 v_posicao := 960;
                                 --
                                 update /*rb_reembolso.GravaReembolso*/
                                        procedimento_reembolso
                                 set    row = rsProcedimentoReembolso
                                 where  num_reembolso = rsProcedimentoReembolso.num_reembolso
                                 and    num_seq_item  = rsProcedimentoReembolso.num_seq_item;
                                --
                          exception
                          when dup_val_on_index then
                              p_cod_retorno := 9;
                              p_msg_retorno := v_msg_retorno_erro || p_num_reembolso || ': ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                              rollback;
                              return;
                          when others then
                              p_cod_retorno := 9;
                              p_msg_retorno := v_msg_retorno_erro || p_num_reembolso || ': ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                              rollback;
                              return;
                          end;
                          --
                          v_posicao := 970;
                          --
                          --Liberar as glosas dos itens
                          LiberacaoGlosaItem ( p_cod_retorno
                                             , p_msg_retorno
                                             , v_xml_glosa
                                             , p_num_reembolso
                                             , rsProcedimentoReembolso.num_seq_item
                                             , v_cod_usuario );
                          --
                          if p_cod_retorno <> 0 then
                              rollback;
                              return;
                          end if;

                       end if;
                       --
                    end if;
                    --
                    ---
                    /* CIDs do Procedimento*/
                    v_posicao := 975;
                    begin
                       delete from pedido_reemb_proc_cid
                       where  num_reembolso = p_num_reembolso
                       and    num_seq_item  = rsProcedimentoReembolso.num_seq_item;
                    exception
                       when others then
                            p_cod_retorno := 9;
                            p_msg_retorno := 'Erro ao excluir CID reembolso: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                            rollback;
                       return;
                    end;
              --
                    /* CIDs do Procedimento*/
                    v_posicao := 976;
                    begin
                       delete from pedido_reemb_proc_cid
                       where  num_reembolso = p_num_reembolso
                       and    num_seq_item  = rsProcedimentoReembolso.num_seq_item;
                    exception
                       when others then
                            p_cod_retorno := 9;
                            p_msg_retorno := 'Erro ao excluir CID reembolso: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                            rollback;
                       return;
                    end;

                    v_qtd_cid      := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/CID_' || x || '/QTD_CID');
                    for y in 1 .. nvl(v_qtd_cid, 0) loop
                       v_cod_cid := ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ITEM/CID_' || x || '/COD_CID_' || y );
                       v_posicao := 940;
                       begin
                          select count(*)
                          into   v_qtd
                          from   pedido_reemb_proc_cid
                          where  num_reembolso = p_num_reembolso
                          and    num_seq_item  = rsProcedimentoReembolso.num_seq_item
                          and    cod_cid       = RTRIM(LTRIM(v_cod_cid));
                       exception
                          when others then
                              v_qtd := 0;
                       end;

                       if v_qtd > 0 then
                          p_cod_retorno := 9;
                          p_msg_retorno := 'Erro CID já cadastrado para este reembolso.';
                          rollback;
                          return;
                       end if;

                       v_posicao := 950;
                       begin
                          insert into pedido_reemb_proc_cid
                          (
                               num_seq_reemb_proc_cid,
                               item_medico,
                               cod_cid,
                               num_reembolso,
                               num_seq_item,
                               dt_atu,
                               cod_usuario
                          )
                          values
                          (
                               NUM_SEQ_REEMB_PROC_CID.nextval,
                               rsProcedimentoReembolso.cod_procedimento_cm,
                               RTRIM(LTRIM(v_cod_cid)),
                               p_num_reembolso,
                               rsProcedimentoReembolso.num_seq_item,
                               sysdate,
                               v_cod_usuario
                          );
                       exception
                          when others then
                               p_cod_retorno := 9;
                               p_msg_retorno := 'Erro ao excluir CID reembolso: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                               rollback;
                               return;
                       end;
                    end loop;   -- v_qtd_cid
                  end if;       -- v_item_vazio
                  --
              end loop;         --- v_qtd_procedimento
              --
            --valida duplicidade
            end if; -- fim da validação caso nao esteja em courrier
                    --
            v_qtd_forma_pgto := 0;

            BEGIN
               v_qtd_forma_pgto := ts_obtem_dados_xml (v_doc, 'REEMBOLSO', 'PEDIDO/FORMAS_PAGAMENTO/QTD_FORMAS_PAGAMENTO');
            EXCEPTION
              WHEN OTHERS THEN
               v_posicao := 710;
               p_msg_retorno := 'Erro ao recuperar a quantidade de formas de pagamento do pedido. ' || v_posicao || '  Erro: ' || ts.ts_util.MsgErro;
               RAISE ERRO;
            END;

            DELETE FROM TS.PEDIDO_REEMBOLSO_FORMA_PGTO WHERE NUM_REEMBOLSO = rsReembolso.Num_Reembolso;

            IF (v_qtd_forma_pgto > 0) THEN

            FOR x IN 1 .. v_qtd_forma_pgto
            LOOP

              BEGIN
                v_cod_tipo_pgto := ts_obtem_dados_xml (v_doc, 'REEMBOLSO', 'PEDIDO/FORMAS_PAGAMENTO/COD_TIPO_PGTO_' || x);
                v_desc_cod_verificacao := ts_obtem_dados_xml (v_doc, 'REEMBOLSO', 'PEDIDO/FORMAS_PAGAMENTO/DESC_COD_VERIFICACAO_' || x);

              EXCEPTION
                WHEN OTHERS THEN
                    v_posicao := 417;
                    p_msg_retorno := 'Erro ao recuperar dados' || '  Erro: ' || ts.ts_util.MsgErro;
                    RAISE ERRO;
              END;
              --
              BEGIN
                   INSERT INTO TS.PEDIDO_REEMBOLSO_FORMA_PGTO (COD_PEDIDO_RBM_FORMA_PGTO, NUM_REEMBOLSO, COD_TIPO_PAGAMENTO, TXT_DESC_COD_VERIFICACAO, COD_USUARIO_ATU, DT_ATU)
                   VALUES (TS.PEDIDO_RBM_FORMA_PGTO_SEQ.nextval, rsReembolso.Num_Reembolso, v_cod_tipo_pgto, v_desc_cod_verificacao, v_cod_usuario, SYSDATE);
               exception
               when others then
                   p_cod_retorno := 9;
                   p_msg_retorno := 'Erro ao gravar tipo de pagamento ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
                   rollback;
                   return;
              end;
            END LOOP;

          END IF;
        end if;
        --
        v_posicao := 980;
        -- CÓDIGO PARA CALCULO DA DIVISÃO PROPORCIONAL
        if ts_obtem_dados_xml(v_doc,'REEMBOLSO','DIVISAO_PROPORCIONAL/IND_FAZ_DIVISAO') = 'S' then
             --
             v_xml_divisao_aux := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','DIVISAO_PROPORCIONAL/PROCEDIMENTOS'));
             v_xml_divisao_aux := replace(v_xml_divisao_aux, '<FUNCOES>', '<FUNCOES><![CDATA[');
             v_xml_divisao_aux := replace(v_xml_divisao_aux, '</FUNCOES>', ']]></FUNCOES>');
             --
             AdicionaProcDivisaoProp( p_num_reembolso
                                    , v_xml_divisao_aux
                                    , p_cod_retorno
                                    , p_msg_retorno
                                    );

             if p_cod_retorno != 0 then
                rollback;
                return;
             end if;
        end if;
        --
        v_posicao := 990;
        --
        if rsReembolso.val_informado < v_val_total_proc and nvl (v_tipo_situacao,'X') != 'CR' then
           p_cod_retorno := 9;
           p_msg_retorno := 'A soma do valor informado dos procedimentos não pode ser maior que o valor do comprovante. Valor comprovante: ' || rsReembolso.val_informado || ', Valor total dos itens: ' || v_val_total_proc ;
           rollback;
           return;
        end if;
        --
        v_posicao := 1000;
        --#################################################################
        --   Prepara e executa transferencia de grupo, se necessário
        --#################################################################
        if v_ind_acao = 'TR' then
            --
            v_cod_grupo_encaminhamento := ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/COD_GRUPO_ENCAMINHAMENTO');
            --
            if v_cod_grupo_encaminhamento is null then
                p_cod_retorno := 9;
                p_msg_retorno := 'Grupo de encaminhamento/transferência não informado.';
                rollback;
                return;
            else
                --
                v_posicao := 1010;
                --
                processa_encaminhamento (  p_num_reembolso            => p_num_reembolso
                                         , p_cod_grupo_encaminhamento => v_cod_grupo_encaminhamento
                                         , p_ind_tipo_encaminhamento  => v_ind_tipo_encaminhamento
                                         , p_cod_usuario              => v_cod_usuario
                                         , p_cod_retorno              => p_cod_retorno
                                         , p_msg_retorno              => p_msg_retorno
                                         );
                --
                if p_cod_retorno != 0 then
                      rollback;
                      return;
                end if;
                --
                v_posicao := 1020;
                --
                if v_qtd_reembolsos > 0 then
                   for r in ( select x.column_value num_reembolso
                                                from table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x )
                   loop
                       --
                       v_posicao := 1020;
                       --
                       processa_encaminhamento ( p_num_reembolso            => r.num_reembolso
                                               , p_cod_grupo_encaminhamento => v_cod_grupo_encaminhamento
                                               , p_ind_tipo_encaminhamento  => v_ind_tipo_encaminhamento
                                               , p_cod_usuario              => v_cod_usuario
                                               , p_cod_retorno              => p_cod_retorno
                                               , p_msg_retorno              => p_msg_retorno
                                               );
                       --
                       if p_cod_retorno != 0 then
                          rollback;
                          return;
                       end if;
                       --
                   end loop;
                end if;
                --
           end if;
           --
        end if;
        --
        v_posicao := 1030;
        --#################################################################
        --  Prepara e executa gravação dos anexos
        --#################################################################
        v_qtd_anexo := nvl(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/QTD_ANEXO'),0);
        --
        vXMLAnexoRetorno := '';
        --
        if v_qtd_anexo > 0 then
            --
            for i in 1..v_qtd_anexo loop
                --
                if trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/NOM_ARQ_ANEXO_'||i)) is not null then
                    --
                    if  trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/IND_ALTERAR_'||i)) = 'S' and
                        trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/IND_EXCLUIR_'||i)) = 'S' then
                        --
                        v_nome_arquivo := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/NOM_ARQ_ANEXO_'||i));
                        v_cod_anexo_ts := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/COD_ANEXO_TS_'||i));
                        --
                        if nvl(v_cod_anexo_ts,0) <> 0 then
                           delete from anexo_ts
                            where cod_anexo_ts = v_cod_anexo_ts;

                            delete /*rb_reembolso.GravaReembolso*/
                              from   reembolso_anexo
                              where cod_anexo_ts = v_cod_anexo_ts;
                        else
                            delete /*rb_reembolso.GravaReembolso*/
                            from   reembolso_anexo
                            where  num_reembolso = p_num_reembolso
                            and    nom_arq_anexo = v_nome_arquivo;
                        end if;
                        --
                    elsif trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/IND_ALTERAR_'||i)) = 'N' then
                        v_nome_arquivo        := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/NOM_ARQ_ANEXO_'||i));
                        if ( (nvl(v_ind_reembolso_completo,'N') = 'S') and (nvl(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/IND_SITE'),'N') = 'N' ) ) then
                           v_nome_arquivo_orig   := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/INDEX')) || trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/NOM_ARQ_ANEXO_'||i));
                        else
                           v_nome_arquivo_orig   := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/NOM_ARQ_ANEXO_'||i));
                        end if;

                        v_num_controle        := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/NUM_CONTROLE_'||i));
                        v_ind_replica       := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/IND_REPLICA_'||i));
                        v_ind_nota_original   := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/IND_NOTA_ORIGINAL_'||i));
                        v_cod_tipo_anexo    := trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/COD_TIPO_ANEXO_'||i));

                        if nvl(v_ind_replica,'N') = 'S' then
                            v_num_protocolo_r := p_num_protocolo;
                        else
                            v_num_protocolo_r := '';
                        end if;

                        --
                        -----------------------------------
                        -- INCLUIR ANEXOS
                        -----------------------------------
                        vXMLAnexo := '<ANEXO_REEMBOLSO>'||
                                     '<NUM_REEMBOLSO>'      || p_num_reembolso      ||'</NUM_REEMBOLSO>'||
                                     '<NUM_PROTOCOLO>'      || v_num_protocolo_r      ||'</NUM_PROTOCOLO>'||
                                     '<NOM_ARQ_ANEXO>'      || v_nome_arquivo       ||'</NOM_ARQ_ANEXO>'||
                                     '<NOME_ARQUIVO_ORIG>'  || v_nome_arquivo_orig  ||'</NOME_ARQUIVO_ORIG>'||
                                     '<COD_USUARIO>'        || v_cod_usuario        ||'</COD_USUARIO>'||
                                     '<NUM_CONTROLE>'       || v_num_controle       || '</NUM_CONTROLE>'||
                                     '<TXT_DESCRICAO>'      ||ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/TXT_DESCRICAO_'||i) ||'</TXT_DESCRICAO>'||
                                     '<IND_NOTA_ORIGINAL>'  || v_ind_nota_original  || '</IND_NOTA_ORIGINAL>'||
                                     '<COD_TIPO_ANEXO>'     || v_cod_tipo_anexo     || '</COD_TIPO_ANEXO>'||
                                     '</ANEXO_REEMBOLSO>';

                        vXMLAnexoRetorno := vXMLAnexoRetorno || vXMLAnexo;

                        vXMLAnexo := '<?xml version="1.0" encoding="ISO-8859-1" ?>' || vXMLAnexo;

                        --
                        v_posicao := 1035;
                        --
                        GravaAnexo ( vXMLAnexo, p_cod_retorno, p_msg_retorno, v_ind_commit);
                        --
                        if p_cod_retorno <> 0 then
                            rollback;
                            return;
                        end if;
                        --
                    end if;
                end if;
                --
            end loop;
            --
            p_xml_retorno := vXMLAnexoRetorno;

        end if;

		-- Salva os dados lidos durante o OCR
		v_posicao := 1040;
		BEGIN
			v_xml_dados_ocr := '<DADOSOCR>' || ts_obtem_dados_xml(v_doc,'REEMBOLSO','DADOSOCR') || '</DADOSOCR>';
            TS_LOG_EXECUCAO ( 'RBM_PARAM_OCR', v_posicao, 'Info', v_xml_dados_ocr || chr(13), 'grava_ocr_documento - input - XML' );

			ts.RBM_PARAM_OCR.grava_ocr_documento(v_xml_dados_ocr, p_num_reembolso, v_cod_retorno, v_msg_retorno);
			IF v_cod_retorno <> 0 THEN
				TS_LOG_EXECUCAO ( 'RBM_PARAM_OCR', v_posicao, 'Info', v_xml_dados_ocr || chr(13) || ts.ts_util.msgerro, 'grava_ocr_documento - retorno - XML' );
				TS_LOG_EXECUCAO ( 'RBM_PARAM_OCR', v_posicao, 'Info', 'v_msg_retorno: ' || v_msg_retorno || chr(13) || ts.ts_util.msgerro, 'grava_ocr_documento - retorno - Dados' );
				v_cod_retorno := 0;
				v_msg_retorno := null;
			END IF;
			 exception
				when others then
				TS_LOG_EXECUCAO ( 'RBM_PARAM_OCR', v_posicao, 'ERRO', v_xml_dados_ocr || chr(13) || ts.ts_util.msgerro, 'grava_ocr_documento - retorno - XML' );
				TS_LOG_EXECUCAO ( 'RBM_PARAM_OCR', v_posicao, 'ERRO', 'v_msg_retorno: ' || v_msg_retorno || chr(13) || ts.ts_util.msgerro, 'grava_ocr_documento - retorno - Dados' );
		END;

        --
        v_posicao := 1050;
        --
        if v_ind_acao != 'TR' then --SE NAO FOR ENCAMINHAMENTO / TRANSFERENCIA
            --
            begin
                select cod_tipo_usuario
                into   v_cod_tipo_usuario
                from   usuario
                where  cod_usuario = v_cod_usuario;
            exception
            when no_data_found then
                v_cod_tipo_usuario := 0;
            end;
            --
            v_posicao := 1060;
            --
            -- Liberar os grupos de analise vinculados ao usuário
            for C_item in ( select /* rb_reembolso.GravaReembolso */
                                   cod_grupo
                                 , num_seq_liberacao
                                 , rowid
                            from   pedido_reembolso_grupo
                            where  ind_situacao     = '1'
                            and    num_reembolso    = p_num_reembolso
                            and    cod_grupo        in ( select pgp.cod_grupo
                                                         from   reembolso_grupo_perfil pgp
                                                         where  exists        ( select cod_perfil
                                                                                from   ( select pu.cod_perfil
                                                                                         from   perfil_usuario pu
                                                                                         where  pu.cod_usuario = v_cod_usuario
                                                                                         union
                                                                                         select ptu.cod_perfil
                                                                                         from   perfil_tipo_usuario ptu
                                                                                         where  ptu.cod_tipo_usuario = v_cod_tipo_usuario
                                                                                       ) x
                                                                                where  x.cod_perfil = pgp.cod_perfil
                                                                              )
                                                      )
                          )
            loop
                -- Caso exista, colocar como analisado
                update /* rb_reembolso.GravaReembolso */
                       pedido_reembolso_grupo
                set    cod_usuario_liberacao     = v_cod_usuario
                     , dt_liberacao              = sysdate
                     , ind_situacao              = '2'
                where  rowid                     = C_item.rowid;
            end loop;
            --

        end if;
        --
        ---------------------------
        -- Posicionar Beneficiário
        ---------------------------
        v_posicao := 1070;
        --
        AUT_CTX_BENEFICIARIO.carga_por_uk ( p_cod_retorno
                                          , p_msg_retorno
                                          , rsReembolso.num_associado
                                          );
        --
        if p_cod_retorno <> 0 then
             rollback;
             return;
        end if;
        --
        --------------------------------------------
        -- VALIDAR REGRAS DE REEMBOLSO
        --------------------------------------------
        v_posicao := 1080;
        --
        if v_ind_acao != 'FN' and v_ind_acao != 'CA' then
          --
        ValidaRegra ( p_num_reembolso  => p_num_reembolso
                    , p_cod_usuario    => v_cod_usuario
                    , p_cod_retorno    => p_cod_retorno
                    , p_msg_retorno    => p_msg_retorno
                    );
        --
        v_posicao := 1090;
        --
        if p_cod_retorno <> 0 then
             rollback;
             return;
        end if;
        end if;
        --apagar as críticas não liberadas  @@ faltava a exclusão da glosa
        delete from reembolso_glosa
         where num_reembolso            = p_num_reembolso
           and  nvl(ind_analisado,'N')  = 'N';
        --
        v_posicao := 1100;
        --------------------------------------------
        -- VALIDAR GLOSAS DE REEMBOLSO
        --------------------------------------------
        ValidaReembolso ( p_num_reembolso  => p_num_reembolso
                        , p_cod_usuario    => v_cod_usuario
                        , p_cod_retorno    => p_cod_retorno
                        , p_msg_retorno    => p_msg_retorno
                        );
        --
        if p_cod_retorno <> 0 then
             rollback;
             return;
        end if;
        ------------------------------------------------------------------------
        --- verifica duplicidade e reexecução
        ------------------------------------------------------------------------
        v_posicao := 1110;
        --
        IF (nvl(v_ind_reembolso_completo,'N') = 'N') OR
           (rsReembolso.cod_origem in(11,20)) THEN
            for c_itens_proc in (select num_reembolso
                                      , cod_especialidade
                                      , cod_procedimento
                                      , data_atendimento
                                      , qtd_informado
                                      , qtd_aprovada
                                      , qtd_glosa_man
                                      , num_seq_item
                                      , rowid
                                      , ind_funcao
                                      , cod_cobertura_ts
                                      , cod_procedimento_cm
                                   from procedimento_reembolso a
                                  where num_reembolso = p_num_reembolso
                                  order by  data_atendimento desc )
             loop
                   --
                   v_posicao := 1120;
                   --
                   v_cod_motivo_glosa := null;
                   v_qtd_utilizada := nvl(c_itens_proc.qtd_informado,1) - nvl(c_itens_proc.qtd_glosa_man,0);
                   --
                   RB_DUP_REEXEC_NO_PEDIDO_CON    ( NVL(c_itens_proc.cod_especialidade,'0110'), c_itens_proc.cod_procedimento,
                                                    c_itens_proc.data_atendimento,              v_qtd_utilizada,
                                                    rsReembolso.cod_ts,                    p_num_reembolso ,
                                                    c_itens_proc.num_seq_item,             c_itens_proc.rowid ,
                                                    p_num_reembolso,                       v_cod_usuario,
                                                    v_cod_motivo_glosa,                    p_msg_retorno,
                                                    p_cod_retorno);
                   --
                   if p_cod_retorno = 9  then
                      return;
                   end if;
                   --
                   p_msg_retorno := '  ';
                   p_cod_retorno := 0;
                   --
                   v_posicao := 1130;
                   --
                   if v_cod_motivo_glosa is null then
                      v_posicao := 1140;
                      --
                      RB_DUP_REEXEC_NO_PEDIDO_GER( c_itens_proc.cod_procedimento,
                                                   c_itens_proc.data_atendimento,   v_qtd_utilizada,
                                                   c_itens_proc.ind_funcao,         rsReembolso.cod_ts,
                                                   p_num_reembolso,            c_itens_proc.num_seq_item,
                                                   c_itens_proc.rowid,              p_num_reembolso,
                                                   v_cod_usuario,              v_cod_motivo_glosa,
                                                   p_msg_retorno,              p_cod_retorno);
                      --
                      if p_cod_retorno = 9  then
                         return;
                      end if;

                     p_msg_retorno := '  ';
                     p_cod_retorno := 0;
                   end if;

                   v_posicao := 1150;
                   if v_cod_motivo_glosa is null then
                      v_posicao := 1160;
                      --
                      RB_DUP_REEXEC_GERAL_CON    ( c_itens_proc.cod_especialidade
                                                 , c_itens_proc.cod_procedimento
                                                 , c_itens_proc.data_atendimento
                                                 , v_qtd_utilizada
                                                 , rsReembolso.cod_ts
                                                 , p_num_reembolso
                                                 , c_itens_proc.num_seq_item
                                                 , c_itens_proc.rowid
                                                 , nvl(rsReembolso.num_crm,'99999')
                                                 , nvl(rsReembolso.sigla_conselho,'CRM')
                                                 , rsReembolso.uf_conselho
                                                 , p_num_reembolso
                                                 , rsReembolso.num_associado
                                                 , rsReembolso.dt_pedido
                                                 , v_cod_usuario
                                                 , v_cod_motivo_glosa
                                                 , p_msg_retorno
                                                 , p_cod_retorno);
                      --
                      if p_cod_retorno = 9  then
                         return;
                      end if;
                      --
                   end if;
                   --
                   v_posicao := 1170;
                   --
                   if v_cod_motivo_glosa is null then
                      --
                      v_posicao := 1180;
                      --
                      RB_DUP_REEXEC_GERAL_CONT_CON(c_itens_proc.cod_especialidade
                                                 , c_itens_proc.cod_procedimento
                                                 ,  c_itens_proc.ind_funcao
                                                 , c_itens_proc.data_atendimento
                                                 , v_qtd_utilizada
                                                 , rsReembolso.cod_ts
                                                 , p_num_reembolso
                                                 , c_itens_proc.num_seq_item
                                                 , c_itens_proc.rowid
                                                 , nvl(rsReembolso.num_crm,'99999')
                                                 , nvl(rsReembolso.sigla_conselho,'CRM')
                                                 , rsReembolso.uf_conselho
                                                 , p_num_reembolso
                                                 , c_itens_proc.cod_cobertura_ts
                                                 , v_cod_usuario
                                                 , c_itens_proc.cod_procedimento_cm
                                                 , v_cod_motivo_glosa
                                                 , p_msg_retorno
                                                 , p_cod_retorno);
                      --
                      if p_cod_retorno = 9  then
                         return;
                      end if;
                      --
                   end if;
                   --
                   v_posicao := 1190;
                   --
                   if v_cod_motivo_glosa is null  then
                      --
                      v_posicao := 1200;
                      --
                      RB_DUP_REEXEC_GERAL        ( c_itens_proc.cod_procedimento
                                                 , c_itens_proc.data_atendimento
                                                 , v_qtd_utilizada
                                                 , c_itens_proc.ind_funcao
                                                 , rsReembolso.cod_ts
                                                 , p_num_reembolso
                                                 , c_itens_proc.num_seq_item
                                                 , c_itens_proc.rowid
                                                 , p_num_reembolso
                                                 , rsReembolso.num_associado
                                                 , rsReembolso.dt_pedido
                                                 , v_cod_usuario
                                                 , v_cod_motivo_glosa
                                                 , p_msg_retorno
                                                 , p_cod_retorno);
                      --
                      if p_cod_retorno = 9  then
                         return;
                      end if;
                      --
                   end if;
                   --
                   v_posicao := 1210;
                   --
                   if v_cod_motivo_glosa is null and nvl(rsReembolso.ind_origem_associado,'BD') = 'BD' then
                      --
                      v_posicao := 1220;
                      --
                      RB_DUP_REEXEC_GERAL_CONTRATO ( c_itens_proc.cod_procedimento,
                                                     c_itens_proc.data_atendimento,   v_qtd_utilizada, -- c_itens.qtd_informado,
                                                     c_itens_proc.ind_funcao,         rsReembolso.cod_ts,
                                                     p_num_reembolso,            c_itens_proc.num_seq_item,
                                                     c_itens_proc.rowid,              p_num_reembolso,
                                                     c_itens_proc.cod_cobertura_ts,   v_cod_usuario,
                                                     c_itens_proc.cod_procedimento_cm, v_cod_motivo_glosa,
                                                     p_msg_retorno,               p_cod_retorno);
                      --
                      if p_cod_retorno = 9  then
                         return;
                      end if;
                      --
                   end if;
                   --
                   v_posicao := 1230;
                   -- Esse update é só para registro dos itens , depois ele é corrigido pelo rb_calcula
                   update procedimento_reembolso
                      set qtd_aprovada       = qtd_informado,
                          val_aprovado       = val_informado,
                          dt_atu             = sysdate,
                          cod_usuario_atu    = ts_read_client_info
                    where num_reembolso  = c_itens_proc.num_reembolso
                      and num_seq_item   = c_itens_proc.num_seq_item;
                   --
            end loop;
        END IF;
        --
        v_posicao := 1240;
        --
        if p_cod_retorno <> 0 then
             p_cod_retorno := 9;
             p_msg_retorno := 'RB_REEMBOLSO::GravaReembolso -> ' || ts_util.MsgErro || ' - ' || ts.ts_util.msgerro ;
             rollback;
             return;
        end if;
       -------------------
       -- Bloqueia pedido
       -------------------
       if v_ind_acao = 'I' or ( v_ind_acao = 'A' and nvl(rsReembolso.cod_usuario_analise,'X') = 'X' ) then
           --
           if rsReembolso.cod_usuario_atu != 'CALLCENTER' and rsReembolso.cod_usuario_atu != 'CALLCENTERG2' then
           --
               if rsReembolso.cod_origem not in (5,4) then
                   --
                   v_posicao := 1250;
                   --
                   lock_pedido ( rsReembolso.num_reembolso
                               , rsReembolso.cod_usuario_atu
                               , p_cod_retorno
                               , p_msg_retorno
                               );
                   --

               end if;
           --
           end if;
           --
       end if;
       --
       v_posicao := 1260;
       --#################################################################
       --   Calcular valores dos procedimentos informados
       --#################################################################
       v_xml_calcula := '<DADOS> ';
       v_xml_calcula := v_xml_calcula  || '<DT_INI_VIGENCIA>' || v_dt_ini_vigencia || '</DT_INI_VIGENCIA>';
       v_xml_calcula := v_xml_calcula||'</DADOS> ';


       if nvl(rsReembolso.ind_origem_associado,'BD') = 'WS' then
           --
           v_posicao := 1270;
           --
           rb_calcula_reembolso_cam.rb_calcula_conta ( p_num_reembolso  => p_num_reembolso
                                                     , p_xml_calcula    => v_xml_calcula
                                                     , p_cod_usuario    => v_cod_usuario
                                                     , p_msg_retorno    => p_msg_retorno
                                                     , p_cod_retorno    => p_cod_retorno
                                                     );
           --

       else
--           if nvl(v_ind_reembolso_completo,'N') = 'N' then
           if (nvl(v_ind_reembolso_completo,'N') = 'N') or ((nvl(v_ind_reembolso_completo,'N') != 'N') and (rsReembolso.cod_tratamento is not null)) then
               --
               v_posicao := 1280;
               --
               rb_calcula_reembolso.rb_calcula_conta ( p_num_reembolso  => p_num_reembolso
                                                     , p_xml_calcula    => v_xml_calcula
                                                     , p_cod_usuario    => v_cod_usuario
                                                     , p_msg_retorno    => p_msg_retorno
                                                     , p_cod_retorno    => p_cod_retorno
                                                     );
               --

           end if;
       end if;
       --
       if v_ind_acao not in ('FN','CA','TR') then
       ------------------------------------------------------------------------
        --- verifica se regra Liberação Automática e Reembolso sem Glosa
        ------------------------------------------------------------------------
        SELECT count(*)
          INTO v_qtd_regra_lib
          FROM ts.pedido_reembolso_regra prg
             , ts.reembolso_regra_grupo rrg
         WHERE prg.cod_regra     = rrg.cod_regra_grupo
           AND prg.num_reembolso = p_num_reembolso
           AND rrg.cod_tipo_reembolso = 3;
        --
        SELECT count(*)
          INTO v_qtd_regra_out
          FROM ts.pedido_reembolso_regra prg
             , ts.reembolso_regra_grupo rrg
         WHERE prg.cod_regra     = rrg.cod_regra_grupo
           AND prg.num_reembolso = p_num_reembolso
           AND rrg.cod_tipo_reembolso = 2;
        --
        if v_qtd_regra_lib >= 1 and v_qtd_regra_out = 0 then
           -- Verifica se tem glosa que não seja 1563
           SELECT count(*)
             INTO v_qtd_glosa_out
             FROM ts.reembolso_glosa
            WHERE num_reembolso = p_num_reembolso
              and nvl(ind_analisado,'N') = 'N'
              AND cod_motivo_glosa != '1563';
           --
             if ((v_qtd_glosa_out = 0)  and
                ( rsReembolso.Txt_Url_Nfe is not null
                  or  nvl(rsReembolso.Ind_Opt_In,'N') = 'S'
                  or (nvl(ts_obtem_dados_xml(v_doc,'REEMBOLSO','REEMBOLSO_ANEXO/QTD_ANEXO'),0) > 0
                  and nvl(v_ind_original,'S') = 'S')))
                  and rsReembolso.Ind_Situacao not in(32)   then

              -- Colocar a situação do reembolso para liberada
              BEGIN
                UPDATE ts.pedido_reembolso       pr
                   SET pr.ind_situacao           = '34'
                 WHERE pr.num_reembolso         = p_num_reembolso;
              EXCEPTION
                WHEN OTHERS THEN
                  null;
              END;
            --
              -- Liberar as análises do grupo de reembolso
              BEGIN
                DELETE FROM ts.pedido_reembolso_grupo prg
                 WHERE prg.num_reembolso         = p_num_reembolso;
              EXCEPTION
                WHEN OTHERS THEN
                  null;
              END;
              --
              IF rsReembolso.Ind_Forma_Pgto = '1' and (v_ind_acao = 'I' OR rsReembolso.Cod_Conta_Mxm is null) THEN
                 -- Cria conta MXM
                 NULL;
                 --
                  BEGIN
                    UPDATE ts.pedido_reembolso       pr
                       SET pr.Cod_Conta_Mxm           = v_cod_conta_mxm
                     WHERE pr.num_reembolso         = p_num_reembolso;
                  EXCEPTION
                    WHEN OTHERS THEN
                      null;
                  END;
              END IF;
              --
              v_ind_acao             := 'FN';
              v_tipo_ocorrecia       := 2;
              v_ind_tipo_finalizacao := 'A';
              v_ind_liberacao_aut    := 'S';
              v_cod_liberacao        := 22;

           else

                  BEGIN
                    UPDATE ts.pedido_reembolso       pr
                       SET pr.ind_situacao           = '28'
                     WHERE pr.num_reembolso         = p_num_reembolso;
                  EXCEPTION
                    WHEN OTHERS THEN
                      null;
                  END;
             end if;
           end if;

        end if;
       --
       v_posicao := 1290;
       --#################################################################
       -- Executa a função de calculo proporcional
       --#################################################################
       if ts_obtem_dados_xml(v_doc,'REEMBOLSO','DIVISAO_PROPORCIONAL/IND_FAZ_DIVISAO') = 'S' then
           --
           v_posicao := 1300;
           --
           CalculaDivisaoProporcional ( p_num_reembolso
                                      , v_xml_divisao_aux
                                      , ts_obtem_dados_xml(v_doc,'REEMBOLSO','DIVISAO_PROPORCIONAL/IND_TIPO_DIVISAO')
                                      , p_cod_retorno
                                      , p_msg_retorno
                                      );
           --
           if p_cod_retorno != 0 then
              rollback;
              return;
           end if;
           --
           v_posicao := 1310;
           --#################################################################
           --   Executa novamente o calculo para aplicação de glosas e validações no valor informado do procedimentos feito pela divisão proporcional
           --#################################################################
           if nvl(rsReembolso.ind_origem_associado,'BD') = 'WS' then
               --
               v_posicao := 1320;
               --
               rb_calcula_reembolso_cam.rb_calcula_conta ( p_num_reembolso  => p_num_reembolso
                                                         , p_xml_calcula    => v_xml_calcula
                                                         , p_cod_usuario    => v_cod_usuario
                                                         , p_msg_retorno    => p_msg_retorno
                                                         , p_cod_retorno    => p_cod_retorno
                                                         );
               --

           else
               --
               v_posicao := 1330;
               --
               rb_calcula_reembolso.rb_calcula_conta ( p_num_reembolso  => p_num_reembolso
                                                     , p_xml_calcula    => v_xml_calcula
                                                     , p_cod_usuario    => v_cod_usuario
                                                     , p_msg_retorno    => p_msg_retorno
                                                     , p_cod_retorno    => p_cod_retorno
                                                     );
               --

           end if;

       end if;

       --
       v_posicao := 1340;
       -- executa o calculo dos totais do pedido
       calcula_total_pedido(p_num_reembolso,v_ind_tipo_finalizacao);
       --
       if p_cod_retorno != 0 then
            rollback;
            return;
       end if;
       --
       v_posicao := 1350;
       --
       if v_ind_acao <> 'I' then
           --atualiza informações do protocolo e dos reembolso para o protocolo
           v_posicao := 1360;
           --
           AtualizaProtocoloEReembolsos( rsReembolso, v_cod_usuario, p_cod_retorno, p_msg_retorno );
           --
           if p_cod_retorno <> 0 then
               p_cod_retorno := 9;
               p_msg_retorno := p_msg_retorno;
               rollback;
               return;
           end if;
       end if;
       --
       v_posicao := 1370;
       --
       if v_ind_acao = 'FN' and v_ind_tipo_finalizacao = 'A' then
            --------------------------
            -- FINALIZACAO - APROVACAO
            --------------------------
            --
            -- Verifica se a data de pagamento esta preenchida
            --
            v_msg_retorno_erro := null;
            --
            if rsReembolso.val_informado > v_val_total_proc
            or rsReembolso.val_informado < v_val_total_proc  then
               v_msg_retorno_erro := 'A soma do valor informado dos procedimentos deve ser igual ao valor do comprovante.';
            end if;
            --
            if rsReembolso.dt_prevista_pgto is null then
               v_msg_retorno_erro := 'Data prevista de pagamento não preenchida.';
            end if;
            --
            if rsReembolso.dt_prevista_pgto < trunc(sysdate) then
                v_msg_retorno_erro := 'Data prevista de pagamento não pode ser menor que a data atual.';
            end if;
            --
            if v_ind_situacao_aux = 32 and v_ind_documentacao = 'N' and v_ind_liberacao_aut = 'N' then
                v_msg_retorno_erro := 'Existe documentação pendente para o reembolso.';
            end if;
            --
            -- Verifica se a inscrição fiscal do executante esta preenchida
            if nvl(rsReembolso.ind_internacional,'N') = 'N' then
                if rsReembolso.num_insc_fiscal is null or rsReembolso.Nome_Prestador is null then
                    v_msg_retorno_erro := 'Dados do executante não preenchidos ou incompletos.';
                end if;
            end if;
            --
            -- Se for Depósito em C/C, valida dados bancários
            if rsReembolso.ind_forma_pgto = '1' then
                if nvl(rsReembolso.cod_banco,0) = 0 then
                    v_msg_retorno_erro := 'Banco para pagamento não informado';
                elsif rsReembolso.cod_agencia is null then
                    v_msg_retorno_erro := 'Agência para pagamento não informada';
                elsif rsReembolso.num_conta_corrente is null then
                    v_msg_retorno_erro := 'Conta Corrente para pagamento não informada';
                end if;
                --
            end if;
            --
            if rsReembolso.nome_favorecido is null or rsReembolso.num_cpf_favorecido is null then
                 v_msg_retorno_erro := 'Dados do favorecido não informados ou incompletos.';
            end if;
            --
            v_posicao := 1380;
            --
            if v_msg_retorno_erro is not null then
                  --
                  v_posicao := 1390;
                  --
                  calcula_total_pedido(p_num_reembolso,v_ind_tipo_finalizacao);
                  --
                  update pedido_reembolso
                     set ind_situacao = v_ind_situacao_aux
                       , cod_usuario_deferimento = null
                       , dt_deferimento          = null
                  where num_reembolso = p_num_reembolso;
                  --
                  v_posicao := 1400;
                  --
                  if v_ind_situacao_aux <> 32 then
                    --
                    TS.AGENDA_NOTIFICACAO_REEMBOLSO(p_num_reembolso, 2,v_ind_situacao_aux);
                    --

                  end if;
                  p_cod_retorno := 1;
                  p_msg_retorno := 'Aprovação não permitida: ' || v_msg_retorno_erro;
                  if v_ind_commit = 'S' then
                      commit;
                  end if;
                  return;
                  --
            end if;
            --
            v_posicao := 1410;
            --
            v_msg_retorno_sucesso          := ' finalizado com sucesso.';
            v_msg_retorno_erro             := 'Erro ao finalizar o reembolso ';
            --
            ---------------------------
            -- Validar se pode APROVAR
            ---------------------------
            select count(*)
            into   v_qtd
            from   pedido_reembolso_grupo
            where  num_reembolso  = p_num_reembolso
            and    ind_situacao  != '2';
            --
            if nvl(v_qtd,0) > 0 then
                v_msg_retorno_sem_sucesso := 'Aprovação não permitida, Reembolso ' || p_num_reembolso || ' pendente de análise especial';
                v_ind_permite_aprovacao   := 'N';
            else
                --
                v_posicao := 1420;
                --
                select count(*)
                into   v_qtd
                from   reembolso_glosa
                where  num_reembolso          = p_num_reembolso
                and    nvl(ind_analisado,'N') = 'N'
                and    num_seq_item           = 0;
                --
                if nvl(v_qtd,0) > 0 then
                    v_ind_permite_aprovacao   := 'N';
                    v_msg_retorno_sem_sucesso := 'Aprovação não permitida, Reembolso ' || p_num_reembolso || ' com glosa não liberada';
                else
                    --Verificar se existe pelo menos um item com VAL_REEMBOLSADO PREENCHIDO
                    --
                    v_posicao := 1430;
                    --
                    select count(*)
                    into   v_qtd
                    from   procedimento_reembolso
                    where  num_reembolso          = p_num_reembolso
                    and    nvl(val_reembolsado,0) > 0;
                    --
                    if nvl(v_qtd,0) = 0 then
                        v_ind_permite_aprovacao   := 'N';
                        v_msg_retorno_sem_sucesso := 'Aprovação não permitida, Reembolso ' || p_num_reembolso || ' não possui nenhum procedimento com valor para reembolso';
                    else
                        -- Aprovar os itens com valor > 0
                        v_posicao := 1440;
                        --
                        update procedimento_reembolso a
                        set    a.ind_situacao         = 'A'
                        where  a.num_reembolso        = p_num_reembolso
                        and    num_seq_item           in ( select num_seq_item
                                                           from   procedimento_reembolso
                                                           where  num_reembolso          = p_num_reembolso
                                                           and    nvl(val_reembolsado,0) > 0
                                                           and    nvl(ind_situacao,'E')  not in ('C','N')
                                                         );
                        -- Negar os sem valor
                        v_posicao := 1450;
                        --
                        update procedimento_reembolso a
                        set    a.ind_situacao         = 'N'
                        where  a.num_reembolso        = p_num_reembolso
                        and    num_seq_item           in ( select num_seq_item
                                                           from   procedimento_reembolso
                                                           where  num_reembolso          = p_num_reembolso
                                                           and    nvl(val_reembolsado,0) = 0
                                                           and    nvl(ind_situacao,'E')  not in ('C','N')
                                                         );
                        --
                        v_ind_permite_aprovacao   := 'S';
                        --
                    end if;
                end if;
            end if;
            --
            v_posicao := 1460;
            --
            if v_ind_permite_aprovacao = 'S' then
                -- Gerar o item de pagamento
                select *
                  into rsReembolsoPag
                  from pedido_reembolso
                 where num_reembolso = p_num_reembolso;
                --
                v_posicao := 1470;
                --
                GerarPagamento ( p_cod_retorno, p_msg_retorno, rsReembolsoPag , v_cod_usuario);
                --
                if p_cod_retorno <> 0 then
                    --
                    v_posicao := 1480;
                    --
                    unlock_pedido ( p_num_reembolso , v_cod_usuario , v_cod_retorno , v_msg_retorno);
                    --
                    rollback;
                    return;
                end if;
                --
                v_posicao := 1490;
                -- Gravar memória para calculo do saldo de reembolso
                v_xml_saldo := '<PARAMETROS>';
                v_xml_saldo := v_xml_saldo || '<NUM_REEMBOLSO>' || rsReembolsoPag.num_reembolso || '</NUM_REEMBOLSO>';
                v_xml_saldo := v_xml_saldo || '<IND_ORIGEM>R</IND_ORIGEM>';
                v_xml_saldo := v_xml_saldo || '<IND_TIPO>D</IND_TIPO>';
                v_xml_saldo := v_xml_saldo || '<IND_COMMIT>N</IND_COMMIT>';
                v_xml_saldo := v_xml_saldo || '<COD_USUARIO>' || v_cod_usuario || '</COD_USUARIO>';
                v_xml_saldo := v_xml_saldo || '<DATA_INI_VIG_BENEF>' || v_dt_ini_vigencia_benef || '</DATA_INI_VIG_BENEF>';
                v_xml_saldo := v_xml_saldo || '</PARAMETROS>';
                --
                rb_calcula_reembolso.gravar_memoria_saldo (v_xml_saldo, v_cod_retorno , v_msg_retorno);
                --
                if v_cod_retorno != 0 then
                    TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 00, 'ERRO',  'v_xml_saldo = '   || v_xml_saldo   || chr(13)
                                                                || 'v_cod_retorno = ' || v_cod_retorno || chr(13)
                                                                || 'v_msg_retorno = ' || v_msg_retorno || chr(13) , 'grava_memoria_saldo' );
                end if;
                --
                v_posicao := 1500;
                -- Gravar memória para calculo do saldo de procedimentos
                v_xml_saldo := '<PARAMETROS>';
                v_xml_saldo := v_xml_saldo || '<NUM_REEMBOLSO>' || rsReembolsoPag.num_reembolso || '</NUM_REEMBOLSO>';
                v_xml_saldo := v_xml_saldo || '<IND_ORIGEM>R</IND_ORIGEM>';
                v_xml_saldo := v_xml_saldo || '<IND_TIPO>D</IND_TIPO>';
                v_xml_saldo := v_xml_saldo || '<IND_COMMIT>N</IND_COMMIT>';
                v_xml_saldo := v_xml_saldo || '<COD_USUARIO>' || v_cod_usuario || '</COD_USUARIO>';
                v_xml_saldo := v_xml_saldo || '</PARAMETROS>';
                --
                rb_calcula_reembolso.gravar_memoria_procedimentos (v_xml_saldo, v_cod_retorno , v_msg_retorno);
                --
                if v_cod_retorno != 0 then
                     TS_LOG_EXECUCAO ( 'RB_REEMBOLSO.proc', 00, 'ERRO',  'v_xml_saldo = '   || v_xml_saldo   || chr(13)
                                                                 || 'v_cod_retorno = ' || v_cod_retorno || chr(13)
                                                                 || 'v_msg_retorno = ' || v_msg_retorno || chr(13) , 'grava_memoria_saldo' );
                end if;
                --
                v_posicao := 1510;
                -- Gravar memória para calculo do saldo de sessoes
                v_xml_saldo := '<PARAMETROS>';
                v_xml_saldo := v_xml_saldo || '<NUM_REEMBOLSO>' || rsReembolsoPag.num_reembolso || '</NUM_REEMBOLSO>';
                v_xml_saldo := v_xml_saldo || '<IND_ORIGEM>R</IND_ORIGEM>';
                v_xml_saldo := v_xml_saldo || '<IND_TIPO>D</IND_TIPO>';
                v_xml_saldo := v_xml_saldo || '<IND_COMMIT>N</IND_COMMIT>';
                v_xml_saldo := v_xml_saldo || '<COD_USUARIO>' || v_cod_usuario || '</COD_USUARIO>';
                v_xml_saldo := v_xml_saldo || '</PARAMETROS>';
                --
                rb_calcula_reembolso.gravar_memoria_sessoes (v_xml_saldo, v_cod_retorno , v_msg_retorno);
                --
                if v_cod_retorno != 0 then
                    TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'DEBUG',  'v_xml_saldo = '   || v_xml_saldo   || chr(13)
                                                                || 'v_cod_retorno = ' || v_cod_retorno || chr(13)
                                                                || 'v_msg_retorno = ' || v_msg_retorno || chr(13) , 'grava_memoria_sessoes' );
                end if;
                --
            else
                -- Voltar para em processamento
                v_posicao := 1520;
                v_tipo_ocorrecia   := 2;
                --
                update pedido_reembolso
                set    ind_situacao            = 28
                     , cod_usuario_deferimento = null
                     , dt_deferimento          = null
                where  num_reembolso           = p_num_reembolso;
                --
                v_posicao := 1530;
                --
                TS.AGENDA_NOTIFICACAO_REEMBOLSO(p_num_reembolso, 2,28);
                --

            end if;
            -- HV início: somente gravar utilização para CAM, pelo sistema já foi antecipado em CM_CALCULA_CONTA
            if nvl(rsReembolso.ind_origem_associado,'BD') = 'WS' then
               --
               v_posicao := 1540;
               --
               for c_itens_proc in (select num_seq_item
                                      from procedimento_reembolso a
                                     where num_reembolso   = p_num_reembolso
                                     and   val_reembolsado > 0
                                     order by  data_atendimento desc )
               loop
                   --
                   registra_utilizacao_item(p_num_reembolso
                                          , c_itens_proc.num_seq_item
                                          , p_msg_retorno
                                          , p_cod_retorno
                                           );
                   --

               end loop;
            end if;
            -- HV end if;
        end if;
        --
        v_posicao := 1550;
        --
        -- GERA OCORRENCIA EM CASO DE ERRO NA CONSULTA DO WS
        if v_ind_erro_ws = 'S' then
            --
            v_posicao := 1560;
            --
            GeraOcorrencia(p_num_reembolso,56,'Erro ocorrido na chamada do WS de dados complementares do beneficiário: ' || v_msg_erro_ws,null, v_cod_usuario,p_cod_retorno,p_msg_retorno);
            --
            if p_cod_retorno <> 0 then
                rollback;
                return;
            end if;
        end if;
        --
        v_posicao := 1570;
        --
        if v_tipo_ocorrecia is not null then
            --
            v_posicao := 1580;
            --
            if v_ind_liberacao_aut = 'S' then
              --Gerar Ocorrência de Liberação Automatica
              GeraOcorrencia(p_num_reembolso,3,'Regra de Liberação Automática',null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
            else
              -- Ocorrências: Inclusão, Alteração, Finalização com aprovação, Transferência de grupo
              if (v_tipo_ocorrecia in (1,2,3,5,20) and rsReembolso.txt_observacao_operadora is not null) then
                GeraOcorrencia(p_num_reembolso,v_tipo_ocorrecia,rsReembolso.txt_observacao,'Observação Operadora: '|| rsReembolso.txt_observacao_operadora  ,v_cod_usuario,p_cod_retorno,p_msg_retorno);
              -- Ocorrências: Cancelamento adicionado o motivo na observacao
              elsif(v_tipo_ocorrecia = 4 and rsReembolso.txt_observacao_operadora is not null) then
                select DESC_MOTIVO
                  into v_descricao_motivo_indef
                 from ts.REEMBOLSO_MOTIVO_INDEF
                 where COD_MOTIVO = rsReembolso.cod_motivo_indeferimento;
                GeraOcorrencia(p_num_reembolso,v_tipo_ocorrecia,rsReembolso.txt_observacao,'Observação Operadora: '|| rsReembolso.txt_observacao_operadora ||'<br> Motivo do Cancelamento: '|| v_descricao_motivo_indef,v_cod_usuario,p_cod_retorno,p_msg_retorno);
              else
              --Gerar Ocorrência do tipo informado
              GeraOcorrencia(p_num_reembolso,v_tipo_ocorrecia,rsReembolso.txt_observacao,null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
            end if;
            end if;
            --
            if p_cod_retorno <> 0 then
                rollback;
                return;
            end if;
            --
            v_posicao := 1590;
            --
            if v_qtd_reembolsos > 0 then
                  for r in ( select x.column_value num_reembolso
                               from table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x )
                  loop
                    if v_ind_liberacao_aut = 'S' then
                      --Gerar Ocorrência de Liberação Automatica
                      GeraOcorrencia(r.num_reembolso,3,'Regra de Liberação Automática',null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
                    else
                       -- Ocorrências: Inclusão, Alteração, Finalização com aprovação, Cancelamento, Transferência de grupo
                       if (v_tipo_ocorrecia in (1,2,3,4,5,20) and rsReembolso.txt_observacao_operadora is not null) then
                          GeraOcorrencia(r.num_reembolso,v_tipo_ocorrecia,rsReembolso.txt_observacao,'Observação Operadora: '|| rsReembolso.txt_observacao_operadora  ,v_cod_usuario,p_cod_retorno,p_msg_retorno);
                       else
                          --Gerar Ocorrência do tipo informado
                        GeraOcorrencia(r.num_reembolso,v_tipo_ocorrecia,rsReembolso.txt_observacao,null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
                      end if;
                      --GeraOcorrencia(r.num_reembolso,v_tipo_ocorrecia,rsReembolso.txt_observacao,null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
                    end if;
                      if p_cod_retorno <> 0 then
                         rollback;
                         return;
                       end if;
                  end loop;
            end if;
        end if;
        --
        v_posicao := 1600;
        --
        calcula_total_pedido(p_num_reembolso,v_ind_tipo_finalizacao);
        --
        --
        v_posicao := 1610;
        --
        if v_ind_acao = 'I' then
            --
            v_posicao := 1620;
            --
            if v_ind_reembolso_completo = 'N' then
              --
              v_posicao := 1630;
              --
              v_txt_obs := 'Reembolso(s) cadastrado(s) no sistema: ';
              --
              v_posicao := 1640;
              --
              select count(*)
                into v_qtd_protocolo_atd
                from ts.atd_protocolo_geral
               where num_protocolo = rsReembolso.num_protocolo_ans;
              --
              if v_qtd_protocolo_atd > 0 then
                --
                v_posicao := 1650;
                --
                select txt_obs
                  into v_txt_obs
                  from ts.atd_controle
                 where num_atendimento_ts = rsReembolso.num_protocolo_ans;
                --
                v_posicao := 1660;
                --
                v_txt_obs := v_txt_obs || ', '|| rsReembolso.Nome_Associado || ' - '|| p_num_reembolso;
                --
                begin
                     --
                     UPDATE ts.atd_protocolo_geral
                        SET dt_geracao = sysdate
                          , COD_USUARIO_SOLICITANTE = rsReembolso.Cod_Usuario_Inclusao
                      WHERE num_protocolo = rsReembolso.num_protocolo_ans;
                     --
                 end;
                 --
                 v_posicao := 1670;
                 --
                 begin
                      UPDATE ts.atd_controle
                         SET cod_usuario = rsReembolso.Cod_Usuario_Inclusao
                           , txt_obs = v_txt_obs
                       WHERE num_atendimento_ts = rsReembolso.num_protocolo_ans;
                 exception
                   when others then
                        rollback;
                 end;
                 --
              else
                  --
                  v_posicao := 1680;
                  --
                  v_txt_obs := v_txt_obs || rsReembolso.Nome_Associado || ' - ' ||p_num_reembolso;
                  --
                  begin
                     --
                     insert
                             into   ts.atd_protocolo_geral
                          ( num_protocolo
                          , id_solicitante
                          , cod_operadora
                          , cod_qualificacao_solicitante
                          , cod_sistema_solicitante
                          , dt_geracao
                          , COD_USUARIO_SOLICITANTE
                          )
                     values
                          ( rsReembolso.num_protocolo_ans
                          , null
                          , rsReembolso.Cod_Operadora_Contrato
                          , null
                          , null
                          , sysdate
                          , rsReembolso.Cod_Usuario_Inclusao
                          ) ;
                     --
                  end;
                  --
                  v_posicao := 1690;
                  --
                  begin
                      insert into ts.atd_controle
                        (num_atendimento_ts,
                         data_inicio_atendimento,
                         data_fim_atendimento,
                         ind_situacao,
                         ind_origem_atendimento,
                         ind_forma_retorno,
                         sgl_area,
                         cod_usuario,
                         cod_operadora,
                         cod_sucursal,
                         cod_inspetoria_ts,
                         cod_ts,
                         cod_ts_contrato,
                         cod_prestador_ts,
                         cod_corretor_ts,
                         num_cpf_benef_event,
                         nom_benef_event,
                         txt_obs,
                         cod_sucursal_atd,
                         cod_atendimento,
                         historico_navegacao,
                         num_seq_proposta_ts,
                         cod_praca,
                         cod_celula)
                      values
                        (rsReembolso.num_protocolo_ans,
                         sysdate,
                         null,
                         '2',
                         '9',
                         null,
                         'REEMBOLSO',
                         rsReembolso.Cod_Usuario_Inclusao,
                         rsReembolso.Cod_Operadora_Contrato,
                         null,
                         null,
                         rsReembolso.Cod_Ts_Tit,
                         null,
                         null,
                         null,
                         null,
                         null,
                         v_txt_obs,
                         null,
                         1,
                         'Inclusão de Reembolso',
                         null,
                         null,
                         null);
                   exception
                     when others then
                          rollback;
                   end;
                   --
                   v_posicao := 1700;
                   --
                   begin
                      insert into ts.atd_motivo
                        (num_atendimento_ts, cod_motivo, dt_atu, cod_usuario_atu)
                      values
                        (rsReembolso.num_protocolo_ans, '300', sysdate, rsReembolso.Cod_Usuario_Inclusao);
                   exception
                     when others then
                          rollback;
                   end;
              end if;
              --
              v_posicao := 1710;
              --
            end if;
            --
            v_posicao := 1720;
            --
            p_cod_retorno := 0;
            p_msg_retorno := 'Reembolso ' || p_num_reembolso || ' incluído com sucesso no protocolo ' || rsReembolso.num_protocolo_ans || ' .';
            if ((nvl(rsReembolso.dt_prevista_pgto,sysdate) = sysdate) and (rsReembolso.cod_operadora_contrato not in (11,14)))  then
                p_msg_retorno := p_msg_retorno || '<br>Data Prevista Pagamento: Não foi possível calcular.';
            elsif rsReembolso.dt_prevista_pgto is null and rsReembolso.ind_utiliza_courrier = 'S' then
                p_msg_retorno := p_msg_retorno || '<br>Data Prevista Pagamento: Aguardando documentação courier.';
            else
                p_msg_retorno := p_msg_retorno || '<br>Data Prevista Pagamento: ' || to_char(rsReembolso.dt_prevista_pgto,'DD/MM/YYYY');
            end if;
        else
            --
            v_posicao := 1730;
            --
            if v_msg_retorno_sem_sucesso is not null then
                p_cod_retorno := 9;
                p_msg_retorno := v_msg_retorno_sem_sucesso;
            else
                -- CASO TENHA EXECUTADO A AÇÃO COM SUCESSO E SEJA UMA FUNÇÃO QUE DESBLOQUEIA O PEDIDO, EXECUTA O DESBLOQUEIO
                if v_ind_desbloquear = 'S' then
                    --
                    v_posicao := 1740;
                    --
                    unlock_pedido ( p_num_reembolso , v_cod_usuario , v_cod_retorno , v_msg_retorno);
                    --

                end if;

                p_cod_retorno := 0;
                p_msg_retorno := 'Reembolso ' || p_num_reembolso || v_msg_retorno_sucesso;
            end if;
        end if;
        --
        v_posicao := 1750;
        --
        IF trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','DOCUMENTOS_PENDENTES/IND_DOCUMENTOS')) = 'S' AND
                ts_obtem_dados_xml(v_doc,'REEMBOLSO','PEDIDO/IND_DOCUMENTACAO') = 'N'              THEN

            for rb in (select /*+cardinality(x,10)*/
                          x.column_value num_reembolso
                   from   table( SPLIT_VARCHAR2(p_num_reembolso || ',' || v_num_reembolsos , ',')) x )
             loop
                 --
                 v_posicao := 1760;
                 --
                 ts.RBM_DOCUMENTACAO.GRAVA_PEDIDO_DOCUMENTO( rb.num_reembolso
                                                           , trim(ts_obtem_dados_xml(v_doc,'REEMBOLSO','DOCUMENTOS_PENDENTES/DOCUMENTOS'))
                                                           , 'N'
                                                           , v_cod_usuario
                                                           , ''
                                                           , p_cod_retorno
                                                           , p_msg_retorno
                                                           );
                 --
                 if p_cod_retorno <> 0 then
                        rollback;
                        p_msg_retorno := 'Ocorreu um erro ao adicionar os documentos aos reembolsos. - ' || p_msg_retorno;
                        return;
                 end if;
                 --
             end loop;
        END IF;
        --
        v_posicao := 1770;
        --
        xmldom.freeDocument(v_doc);
        --
        --Codigo de Liberação automatica para voltar para fila de reembolso
        if v_cod_liberacao = 22 then
          p_cod_retorno := v_cod_liberacao;
        end if;
        --
        if v_ind_commit = 'S' then
             commit;
        end if; -- executa o commit  antes de tentar executar o envio de e-mail.
        --
        v_posicao := 1780;
        --
        begin
               --
               IF v_ind_ppr = 'S' THEN -- realiza o envio de email para prorogação ( pode ocorrer junto a troca de situação por isso deve ser enviado separado )
                    --
                    v_posicao := 1790;
                    --
                    rbm_comunicacao_situacao( rsReembolso.ind_situacao
                                            , rsReembolso.num_reembolso
                                            , v_ind_ppr
                                            , rsReembolso.dt_prevista_pgto
                                            , rsReembolso.ind_forma_pgto
                                            , rsReembolso.txt_email
                                            , v_cod_retorno
                                            , v_msg_retorno
                                            , 'N'
                                            , case when v_qtd_reembolsos > 0 then rsReembolso.num_reembolso || ',' || v_num_reembolsos else null end
                                            );
                    --

               END IF;
               --
               IF ( v_ind_situacao_aux != rsReembolso.ind_situacao and rsReembolso.ind_situacao = 32 ) THEN -- houve troca de situação
                    --
                    v_posicao := 1790;
                    --

                   rbm_comunicacao_situacao(rsReembolso.ind_situacao
                                          , rsReembolso.num_reembolso
                                          , v_ind_ppr
                                          , rsReembolso.dt_prevista_pgto
                                          , rsReembolso.ind_forma_pgto
                                          , rsReembolso.txt_email
                                          , v_cod_retorno
                                          , v_msg_retorno
                                          , 'N'
                                          , case when v_qtd_reembolsos > 0 then rsReembolso.num_reembolso || ',' || v_num_reembolsos else null end
                                          );
                    --

                END IF;
            --
        exception
            when others then

             ts.rb_reembolso.geraocorrencia (p_num_reembolso,
                                         70,
                                         NULL,
                                         'Erro ao enviar email.',
                                         'JOB',
                                         p_cod_retorno,
                                         p_msg_retorno);
            --
            ts_log_execucao ( 'RB_REEMBOLSO',
            v_posicao,
            'Erro ao enviar email - p_num_reembolso: ' || p_num_reembolso,
               'Erro:'
            || CHR (13)
            || ts.top_utl_padrao.msgerro
            || CHR (13)
            || 'Erro-ORA:'
            || ts_util.MsgErro
            || CHR (13)
            || 'p_ind_ppr:'
            || v_ind_ppr
            || CHR (13)
            || rsReembolso.txt_email
            || CHR (13)
            || 'rsReembolso.ind_situacao:'
            || rsReembolso.ind_situacao,
            v_msg_retorno);
        end;
        v_posicao := 1800;



        IF rsReembolso.ind_forma_pgto = 1 and (v_ind_acao = 'A' OR nvl(v_ind_liberacao_aut,'N') = 'S') THEN
              if nvl(v_cod_banco_ant,0)                    != rsReembolso.Cod_Banco
                 or nvl(v_cod_agencia_ant,'X')             != rsReembolso.cod_agencia
                 or nvl(v_num_conta_corrente_ant,'X')      != rsReembolso.num_conta_corrente
                 or nvl(v_num_dv_agencia_ant,'X')          != rsReembolso.num_dv_agencia
                 or nvl(v_num_dv_cc_ant,'X')               != rsReembolso.num_dv_cc
                 or nvl(v_num_cpf_favorecido_ant,0)        != rsReembolso.num_cpf_favorecido
                 or nvl(v_num_cnpj_favorecido_ant,0)       != rsReembolso.num_cnpj_favorecido
                 or nvl(v_ind_tipo_conta_reemb_ant,'X')    != rsReembolso.ind_tipo_conta_reemb
              THEN
                   NULL;


              END IF;
        ELSIF v_ind_acao = 'I' THEN
          NULL;
        END IF;

        if v_cod_retorno <> 0 then
           ts_log_execucao('RB_REEMBOLSO', v_posicao, ts_util.MsgErro,'NumReembolso: ' || rsReembolso.num_reembolso || ', erro: ' || v_msg_retorno, 'TR_PEDIDO_REEMBOLSO_MXM');
        end if;
        v_posicao := 1810;
        if v_ind_commit = 'S' then
             commit;
        end if;
        --
    exception
    when others then
        --
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO'
                        , v_posicao
                        , 'ERRO'
                        , p_xml_dados                                                                                       || chr(13) ||
                          ts_util.MsgErro || ' - ' || ts.ts_util.msgerro                                                            || chr(13) ||
                          'rsReembolso.cod_origem = '                        || rsReembolso.cod_origem                      || chr(13) ||
                          'rsReembolso.cod_inspetoria_ts_abertura = '        || rsReembolso.cod_inspetoria_ts_abertura      || chr(13) ||
                          'rsReembolso.sgl_area_abertura = '                 || rsReembolso.sgl_area_abertura               || chr(13) ||
                          'rsReembolso.cod_usuario_atu = '                   || rsReembolso.cod_usuario_atu                 || chr(13) ||
                          'rsReembolso.dt_atu = '                            || rsReembolso.dt_atu                          || chr(13) ||
                          'rsReembolso.cod_usuario_inclusao = '              || rsReembolso.cod_usuario_inclusao            || chr(13) ||
                          'rsReembolso.dt_situacao_pedido = '                || rsReembolso.dt_situacao_pedido              || chr(13) ||
                          'rsReembolso.ind_situacao = '                      || rsReembolso.ind_situacao                    || chr(13) ||
                          'rsReembolso.cod_usuario_deferimento = '           || rsReembolso.cod_usuario_deferimento         || chr(13) ||
                          'rsReembolso.dt_deferimento = '                    || rsReembolso.dt_deferimento                  || chr(13) ||
                          'rsReembolso.cod_usuario_indeferimento = '         || rsReembolso.cod_usuario_indeferimento       || chr(13) ||
                          'rsReembolso.dt_indeferimento = '                  || rsReembolso.dt_indeferimento                || chr(13) ||
                          'rsReembolso.dt_cancelamento = '                   || rsReembolso.dt_cancelamento                 || chr(13) ||
                          'rsReembolso.cod_motivo_indeferimento = '          || rsReembolso.cod_motivo_indeferimento        || chr(13) ||
                          'rsReembolso.num_associado = '                     || rsReembolso.num_associado                   || chr(13) ||
                          'rsReembolso.nome_associado = '                    || rsReembolso.nome_associado                  || chr(13) ||
                          'rsReembolso.cod_ts = '                            || rsReembolso.cod_ts                          || chr(13) ||
                          'rsReembolso.num_cpf_associado = '                 || rsReembolso.num_cpf_associado               || chr(13) ||
                          'rsReembolso.cod_ts_tit = '                        || rsReembolso.cod_ts_tit                      || chr(13) ||
                          'rsReembolso.cod_entidade_ts_tit = '               || rsReembolso.cod_entidade_ts_tit             || chr(13) ||
                          'rsReembolso.num_cpf_titular = '                   || rsReembolso.num_cpf_titular                 || chr(13) ||
                          'rsReembolso.nome_titular = '                      || rsReembolso.nome_titular                    || chr(13) ||
                          'rsReembolso.num_titular = '                       || rsReembolso.num_titular                     || chr(13) ||
                          'rsReembolso.qtd_dias_reembolso = '                || rsReembolso.qtd_dias_reembolso              || chr(13) ||
                          'rsReembolso.data_nascimento = '                   || rsReembolso.data_nascimento                 || chr(13) ||
                          'rsReembolso.qtd_idade = '                         || rsReembolso.qtd_idade                       || chr(13) ||
                          'rsReembolso.cod_rede = '                          || rsReembolso.cod_rede                        || chr(13) ||
                          'rsReembolso.cod_plano = '                         || rsReembolso.cod_plano                       || chr(13) ||
                          'rsReembolso.cod_ts_contrato = '                   || rsReembolso.cod_ts_contrato                 || chr(13) ||
                          'rsReembolso.num_contrato = '                      || rsReembolso.num_contrato                    || chr(13) ||
                          'rsReembolso.nome_contrato = '                     || rsReembolso.nome_contrato                   || chr(13) ||
                          'rsReembolso.cod_empresa = '                       || rsReembolso.cod_empresa                     || chr(13) ||
                          'rsReembolso.cod_inspetoria_ts_contrato = '        || rsReembolso.cod_inspetoria_ts_contrato      || chr(13) ||
                          'rsReembolso.cod_operadora_contrato = '            || rsReembolso.cod_operadora_contrato          || chr(13) ||
                          'rsReembolso.cod_marca_contrato = '                || rsReembolso.cod_marca_contrato              || chr(13) ||
                          'rsReembolso.ind_sexo = '                          || rsReembolso.ind_sexo                        || chr(13) ||
                          'rsReembolso.tipo_associado = '                    || rsReembolso.tipo_associado                  || chr(13) ||
                          'rsReembolso.ind_carater = '                       || rsReembolso.ind_carater                     || chr(13) ||
                          'rsReembolso.cod_tratamento = '                    || rsReembolso.cod_tratamento                  || chr(13) ||
                          'rsReembolso.cod_acomodacao = '                    || rsReembolso.cod_acomodacao                  || chr(13) ||
                          'rsReembolso.num_reembolso_previa = '              || rsReembolso.num_reembolso_previa            || chr(13) ||
                          'rsReembolso.ind_insc_fiscal = '                   || rsReembolso.ind_insc_fiscal                 || chr(13) ||
                          'rsReembolso.num_insc_fiscal = '                   || rsReembolso.num_insc_fiscal                 || chr(13) ||
                          'rsReembolso.nome_prestador = '                    || rsReembolso.nome_prestador                  || chr(13) ||
                          'rsReembolso.sigla_conselho = '                    || rsReembolso.sigla_conselho                  || chr(13) ||
                          'rsReembolso.cod_cbo = '                           || rsReembolso.cod_cbo                         || chr(13) ||
                          'rsReembolso.uf_conselho = '                       || rsReembolso.uf_conselho                     || chr(13) ||
                          'rsReembolso.num_crm = '                           || rsReembolso.num_crm                         || chr(13) ||
                          'rsReembolso.cnes = '                              || rsReembolso.cnes                            || chr(13) ||
                          'rsReembolso.cod_municipio_execucao = '            || rsReembolso.cod_municipio_execucao          || chr(13) ||
                          'rsReembolso.ind_tipo_reembolso = '                || rsReembolso.ind_tipo_reembolso              || chr(13) ||
                          'rsReembolso.cod_motivo_reembolso = '              || rsReembolso.cod_motivo_reembolso            || chr(13) ||
                          'rsReembolso.cod_usuario_solic = '                 || rsReembolso.cod_usuario_solic               || chr(13) ||
                          'rsReembolso.qtd_dias_reembolso = '                || rsReembolso.qtd_dias_reembolso              || chr(13) ||
                          'rsReembolso.ind_acidente = '                      || rsReembolso.ind_acidente                    || chr(13) ||
                          'rsReembolso.num_centro_custo = '                  || rsReembolso.num_centro_custo                || chr(13) ||
                          'rsReembolso.cod_tipo_contrato = '                 || rsReembolso.cod_tipo_contrato               || chr(13) ||
                          'rsReembolso.ind_tipo_preco = '                    || rsReembolso.ind_tipo_preco                  || chr(13) ||
                          'rsReembolso.ind_regulamentado = '                 || rsReembolso.ind_regulamentado               || chr(13) ||
                          'rsReembolso.tipo_pessoa_contrato = '              || rsReembolso.tipo_pessoa_contrato            || chr(13) ||
                          'rsReembolso.ind_origem_associado = '              || rsReembolso.ind_origem_associado            || chr(13) ||
                          'rsReembolso.cod_cid = '                           || rsReembolso.cod_cid                         || chr(13) ||
                          'rsReembolso.cod_cid_2 = '                         || rsReembolso.cod_cid_2                       || chr(13) ||
                          'rsReembolso.cod_cid_3 = '                         || rsReembolso.cod_cid_3                       || chr(13) ||
                          'rsReembolso.cod_cid_4 = '                         || rsReembolso.cod_cid_4                       || chr(13) ||
                          'rsReembolso.ind_acao_judicial = '                 || rsReembolso.ind_acao_judicial               || chr(13) ||
                          'rsReembolso.num_acao_judicial = '                 || rsReembolso.num_acao_judicial               || chr(13) ||
                          'rsReembolso.cod_tipo_acp = '                      || rsReembolso.cod_tipo_acp                    || chr(13) ||
                          'rsReembolso.txt_obs_acao_judicial = '             || rsReembolso.txt_obs_acao_judicial           || chr(13) ||
                          'rsReembolso.cod_entidade_favorecido = '           || rsReembolso.cod_entidade_favorecido         || chr(13) ||
                          'rsReembolso.ind_tipo_favorecido = '               || rsReembolso.ind_tipo_favorecido             || chr(13) ||
                          'rsReembolso.nome_favorecido = '                   || rsReembolso.nome_favorecido                 || chr(13) ||
                          'rsReembolso.num_favorecido = '                    || rsReembolso.num_favorecido                  || chr(13) ||
                          'rsReembolso.num_cpf_favorecido = '                || rsReembolso.num_cpf_favorecido              || chr(13) ||
                          'rsReembolso.num_cnpj_favorecido = '               || rsReembolso.num_cnpj_favorecido             || chr(13) ||
                          'rsReembolso.cod_entidade_ts_rl = '                || rsReembolso.cod_entidade_ts_rl              || chr(13) ||
                          'rsReembolso.cod_entidade_favorecido = '           || rsReembolso.cod_entidade_favorecido         || chr(13) ||
                          'rsReembolso.dt_prevista_pgto = '                  || rsReembolso.dt_prevista_pgto                || chr(13) ||
                          'rsReembolso.cod_motivo_alter_dt_pgto = '          || rsReembolso.cod_motivo_alter_dt_pgto        || chr(13) ||
                          'rsReembolso.dt_comprovante = '                    || rsReembolso.dt_comprovante                  || chr(13) ||
                          'rsReembolso.num_nota_fiscal = '                   || rsReembolso.num_nota_fiscal                 || chr(13) ||
                          'rsReembolso.ind_tipo_comprovante = '              || rsReembolso.ind_tipo_comprovante            || chr(13) ||
                          'rsReembolso.txt_url_nfe = '                       || rsReembolso.txt_url_nfe                     || chr(13) ||
                          'rsReembolso.ind_internacional = '                 || rsReembolso.ind_internacional               || chr(13) ||
                          'rsReembolso.sigla_moeda = '                       || rsReembolso.sigla_moeda                     || chr(13) ||
                          'rsReembolso.val_moeda_estrangeira = '             || rsReembolso.val_moeda_estrangeira           || chr(13) ||
                          'rsReembolso.val_informado = '                     || rsReembolso.val_informado                   || chr(13) ||
                          'rsReembolso.num_internacao = '                    || rsReembolso.num_internacao                  || chr(13) ||
                          'rsReembolso.cod_procedimento_principal = '        || rsReembolso.cod_procedimento_principal      || chr(13) ||
                          'rsReembolso.hora_inicio = '                       || rsReembolso.hora_inicio                     || chr(13) ||
                          'rsReembolso.hora_fim = '                          || rsReembolso.hora_fim                        || chr(13) ||
                          'rsReembolso.cod_tipo_alta = '                     || rsReembolso.cod_tipo_alta                   || chr(13) ||
                          'rsReembolso.cod_cid_obito = '                     || rsReembolso.cod_cid_obito                   || chr(13) ||
                          'rsReembolso.num_declara_obito = '                 || rsReembolso.num_declara_obito               || chr(13) ||
                          'rsReembolso.ind_forma_pgto = '                    || rsReembolso.ind_forma_pgto                  || chr(13) ||
                          'rsReembolso.cod_banco = '                         || rsReembolso.cod_banco                       || chr(13) ||
                          'rsReembolso.cod_agencia = '                       || rsReembolso.cod_agencia                     || chr(13) ||
                          'rsReembolso.num_dv_agencia = '                    || rsReembolso.num_dv_agencia                  || chr(13) ||
                          'rsReembolso.num_conta_corrente = '                || rsReembolso.num_conta_corrente              || chr(13) ||
                          'rsReembolso.num_dv_cc = '                         || rsReembolso.num_dv_cc                       || chr(13) ||
                          'rsReembolso.txt_observacao = '                    || rsReembolso.txt_observacao                  || chr(13) ||
                          'rsReembolso.txt_observacao_operadora = '          || rsReembolso.txt_observacao_operadora        || chr(13) ||
                          'rsReembolso.ind_tipo_emissao = '                  || rsReembolso.ind_tipo_emissao                || chr(13) ||
                          'rsReembolso.txt_num_fax = '                       || rsReembolso.txt_num_fax                     || chr(13) ||
                          'rsReembolso.txt_ddd_fax = '                       || rsReembolso.txt_ddd_fax                     || chr(13) ||
                          'rsReembolso.txt_ramal_fax = '                     || rsReembolso.txt_ramal_fax                   || chr(13) ||
                          'rsReembolso.txt_email = '                         || rsReembolso.txt_email                       || chr(13) ||
                          'rsReembolso.ddd_celular = '                       || rsReembolso.ddd_celular                     || chr(13) ||
                          'rsReembolso.tel_celular = '                       || rsReembolso.tel_celular                     || chr(13) ||
                          'rsReembolso.ddd_residencial = '                   || rsReembolso.ddd_residencial                 || chr(13) ||
                          'rsReembolso.tel_residencial = '                   || rsReembolso.tel_residencial                 || chr(13) ||
                          'rsReembolso.ddd_comercial = '                     || rsReembolso.ddd_comercial                   || chr(13) ||
                          'rsReembolso.tel_comercial = '                     || rsReembolso.tel_comercial                   || chr(13) ||
                          'rsReembolso.ddd_celular = '                       || rsReembolso.ddd_celular                     || chr(13) ||
                          'rsReembolso.tel_celular = '                       || rsReembolso.tel_celular                     || chr(13) ||
                          'rsReembolso.ddd_residencial = '                   || rsReembolso.ddd_residencial                 || chr(13) ||
                          'rsReembolso.tel_residencial = '                   || rsReembolso.tel_residencial                 || chr(13) ||
                          'rsReembolso.ddd_comercial = '                     || rsReembolso.ddd_comercial                   || chr(13) ||
                          'rsReembolso.tel_comercial = '                     || rsReembolso.tel_comercial                   || chr(13) ||
                          'rsReembolso.ddd_celular = '                       || rsReembolso.ddd_celular                     || chr(13) ||
                          'rsReembolso.tel_celular = '                       || rsReembolso.tel_celular                     || chr(13) ||
                          'rsReembolso.ind_utiliza_courrier = '              || rsReembolso.ind_utiliza_courrier            || chr(13) ||
                          'rsReembolso.ind_tipo_endereco = '                 || rsReembolso.ind_tipo_endereco               || chr(13) ||
                          'rsReembolso.txt_contato_courrier = '              || rsReembolso.txt_contato_courrier            || chr(13) ||
                          'rsReembolso.num_cep = '                           || rsReembolso.num_cep                         || chr(13) ||
                          'rsReembolso.nom_logradouro = '                    || rsReembolso.nom_logradouro                  || chr(13) ||
                          'rsReembolso.num_endereco = '                      || rsReembolso.num_endereco                    || chr(13) ||
                          'rsReembolso.txt_complemento = '                   || rsReembolso.txt_complemento                 || chr(13) ||
                          'rsReembolso.cod_municipio = '                     || rsReembolso.cod_municipio                   || chr(13) ||
                          'rsReembolso.nome_municipio = '                    || rsReembolso.nome_municipio                  || chr(13) ||
                          'rsReembolso.cod_bairro = '                        || rsReembolso.cod_bairro                      || chr(13) ||
                          'rsReembolso.nome_bairro = '                       || rsReembolso.nome_bairro                     || chr(13) ||
                          'rsReembolso.sgl_uf = '                            || rsReembolso.sgl_uf                          || chr(13) ||
                          'rsReembolso.cod_tipo_logr = '                     || rsReembolso.cod_tipo_logr                   || chr(13) ||
                          'rsReembolso.val_confiab_valid_biometrica = '      || rsReembolso.val_confiab_valid_biometrica    || chr(13) ||
                          'rsReembolso.val_latitude = '                      || rsReembolso.val_latitude                    || chr(13) ||
                          'rsReembolso.val_longitude = '                     || rsReembolso.val_longitude                   || chr(13) ||
                          'rsReembolso.ind_tipo_cobranca = '                 || rsReembolso.ind_tipo_cobranca               || chr(13) ||
                          'rsReembolso.dt_prevista_pgto = '                  || rsReembolso.dt_prevista_pgto                || chr(13) ||
                          'rsReembolso.num_reembolso = '                     || rsReembolso.num_reembolso                   || chr(13) ||
                          'rsReembolso.dt_prevista_pgto = '                  || rsReembolso.dt_prevista_pgto                || chr(13) ||
                          'rsReembolso.dt_prevista_pgto_calc = '             || rsReembolso.dt_prevista_pgto_calc           || chr(13) ||
                          'p_num_reembolso = '                               || p_num_reembolso                             || chr(13) ||
                          'v_cod_usuario = '                                 || v_cod_usuario                               || chr(13) ||
                          'v_xml_calcula = '                                 || v_xml_calcula                               || chr(13) ||
                          'v_ind_acao = '                                    || v_ind_acao
                        , 'IncluirReembolso - XML'
                        );
        --
        if nvl(v_posicao,0) > 1 then
           xmldom.freeDocument(v_doc);
        end if;
        --
        p_cod_retorno := 9;
        p_msg_retorno := 'RB_REEMBOLSO::GravaReembolso -> ' || ts_util.MsgErro || ' - ' || ts.ts_util.msgerro ;
        --
        rollback;
    end GravaReembolso;
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com as informações do reembolso
    ----------------------------------------------------------------------------
    Procedure RetornaReembolso  ( p_num_reembolso       in  number
                                , p_xml_retorno         out clob
                                , p_xml_filtro          in  clob    default null
                                , p_ind_forma_abertura  in varchar2 default null
                                , p_cod_usuario         in varchar2 default null
                                )
    is
        --Declarações:
        v_SQL                   varchar2(32000);
        v_doc                   xmldom.DOMDocument;
        v_cod_retorno           number;
        v_msg_retorno           varchar2(4000);
        v_item_vazio            varchar2(3) := '¿¿¿';
        v_cod_ts                pedido_reembolso.cod_ts%type;
        v_ind_situacao          pedido_reembolso.ind_situacao%type;
        v_cod_tratamento        pedido_reembolso.cod_tratamento%type;
        v_dt_pedido_ini         pedido_reembolso.dt_inclusao%type;
        v_dt_pedido_fim         pedido_reembolso.dt_inclusao%type;
        v_dt_prevista_ini       pedido_reembolso.dt_prevista_pgto%type;
        v_dt_prevista_fim       pedido_reembolso.dt_prevista_pgto%type;
        v_num_insc_fiscal       pedido_reembolso.num_insc_fiscal%type;
        v_nome_prestador        pedido_reembolso.nome_prestador%type;
        v_sigla_conselho        pedido_reembolso.sigla_conselho%type;
        v_num_crm               pedido_reembolso.num_crm%type;
        v_uf_conselho           pedido_reembolso.uf_conselho%type;
        v_cnes                  pedido_reembolso.cnes%type;
        v_num_protocolo         pedido_reembolso.num_protocolo_ans%type;
        v_num_associado         pedido_reembolso.num_associado%type;
        v_cod_fase_processo     number;
        v_ind_reanalise         varchar2(1);
        v_ind_reanalisado       varchar2(1);
        v_situacao_item_pag     number;
        v_usa_bloqueio_pedido   varchar2(1);
        v_dt_inicio_analise     pedido_reembolso.dt_inicio_analise%type;
        v_cod_usuario_analise   pedido_reembolso.cod_usuario_analise%type;
        v_ind_tipo_reemboslo    pedido_reembolso.ind_tipo_reembolso%type;
        v_cod_ts_contrato       pedido_reembolso.cod_ts_contrato%type;
        v_qtd_prazo_entrega_recibo number;

        v_cod_fase_processo_pesq     varchar2(20);
        v_tipo_acao_fase             varchar2(20);

        v_num_protocolo_ans          pedido_reembolso.num_protocolo_ans%type;
        v_tamanho_reembolso          number;

    begin
    --Início
    --
    --Validação
    if p_ind_forma_abertura is not null then
        --
        begin
           select a.cod_situacao        , a.cod_fase_processo
                , ind_reanalise         , ind_reanalisado
                , cod_usuario_analise   , dt_inicio_analise
           into   v_ind_situacao        , v_cod_fase_processo
                , v_ind_reanalise       , v_ind_reanalisado
                , v_cod_usuario_analise , v_dt_inicio_analise
           from   situacao_reembolso  a
                , pedido_reembolso    b
           where  b.ind_situacao      = a.cod_situacao
           and    b.num_reembolso     = p_num_reembolso;
           --
           if p_ind_forma_abertura = 'CA' then
               if ((v_cod_fase_processo not in (1, 2, 3, 6)) and (v_ind_situacao != '46')) then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita o seu cancelamento.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
                end if;
           end if;
           if p_ind_forma_abertura = 'RC' then
               if v_ind_situacao != '26' then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita reversão do cancelamento.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
               end if;
           end if;
           if p_ind_forma_abertura = 'REA' then
               if v_cod_fase_processo != 7 then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita a reanálise.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
               elsif nvl(v_ind_reanalisado,'N') = 'S' then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' já foi reanalisado.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
               elsif nvl(v_ind_reanalise,'N') = 'S' then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' já é uma reanálise.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
              end if;
           end if;
           if p_ind_forma_abertura = 'RF' then
               if v_ind_situacao not in(33, 34) then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita a reversão da finalização.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
              end if;
           end if;
           -- não realizar quando for alteração com regra de liberação automática
           if p_ind_forma_abertura = 'AL' then
               if v_cod_fase_processo in (4,5,7,8) then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita alteração.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
               end if;
           end if;
           if p_ind_forma_abertura = 'EN' then
               if v_cod_fase_processo in (4,5,7,8) then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita encaminhamento.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
               end if;
           end if;
           if p_ind_forma_abertura = 'AS' then
                if v_cod_fase_processo not in (1, 2, 3) then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita atualizar a situação.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
                end if;
           end if;
           if p_ind_forma_abertura = 'DEV' then
                if v_ind_situacao <> 33 then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita o sua devolução.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
                end if;
           end if;
           if p_ind_forma_abertura = 'EXE' then
                if v_ind_situacao not in (36, 37) then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita alterações nos dados do reembolso para IR.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
                end if;
           end if;
        exception
            when no_data_found then
               p_xml_retorno := '<?xml version="1.0"?>';
               p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
               p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
               p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso não encontrado.</MSG_RETORNO>';
               p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
               return;
        end;
       end if;

        if nvl(p_xml_filtro,'X') <> 'X' then
            ts_cria_doc_xml(p_xml_filtro, v_doc, v_cod_retorno, v_msg_retorno);
            if v_cod_retorno <> 0 then
                p_xml_retorno := '<?xml version="1.0"?>';
                p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || v_msg_retorno || '</MSG_RETORNO>';
                p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                return;
            end if;
        else
            IF NVL(p_num_reembolso,0) = 0 THEN
                p_xml_retorno := '<?xml version="1.0"?>';
                p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Número do reembolso não informado.</MSG_RETORNO>';
                p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                return;
            END IF;
        end if;
        --
        if p_ind_forma_abertura = 'RF' and v_ind_situacao = 34 then
            v_situacao_item_pag := 0;
            begin
                select ind_situacao into v_situacao_item_pag from itens_pagamento where num_reembolso = p_num_reembolso;
            exception
                when others then
                    v_situacao_item_pag := 0;
            end;

            if v_situacao_item_pag not in (0,1,4) then
                p_xml_retorno := '<?xml version="1.0"?>';
                p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não pode ter sua finalização revertida, pois seu pagamento já foi liberado.</MSG_RETORNO>';
                p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                return;
            end if;
        end if;

        -- Verificar bloqueio de pedido
        RetornaParametro( 'RB_BLOQUEIA_PEDIDO' , v_usa_bloqueio_pedido,  'N' );
        --
        if v_usa_bloqueio_pedido = 'S' then
             --
             if p_ind_forma_abertura = 'DP' then --Desbloqueio do Pedido
                 --
                 if nvl(v_cod_usuario_analise,'X') = 'X' then
                     p_xml_retorno := '<?xml version="1.0"?>';
                     p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                     p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                     p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não encontra-se bloqueado.</MSG_RETORNO>';
                     p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                     return;
                 end if;
                 --
             elsif p_ind_forma_abertura in ( 'HI', 'AL' ) then
                 --
                 if v_cod_fase_processo not in (4,5,7,8) then
                   if nvl(v_cod_usuario_analise,p_cod_usuario) != p_cod_usuario then
                       p_xml_retorno := '<?xml version="1.0"?>';
                       p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                       p_xml_retorno := p_xml_retorno || '<COD_RETORNO>6</COD_RETORNO>';
                       p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' encontra-se em análise com ' || v_cod_usuario_analise || ' desde ' || to_char(v_dt_inicio_analise,'dd/mm/yyyy') || '.</MSG_RETORNO>';
                       p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                       return;
                   end if;
                 end if;
                 --
             end if;
        end if;
        --Verifica se tem cod_ts_contrato para pegar o qtd_prazo_entrega_recibo
        if p_num_reembolso is not null then
            begin
                select  cod_ts_contrato
                into    v_cod_ts_contrato
                from    pedido_reembolso
                where   num_reembolso = p_num_reembolso;
            exception
                when others then
                    v_cod_ts_contrato := 0;
            end;

            if nvl(v_cod_ts_contrato,0) = 0 then
                v_qtd_prazo_entrega_recibo := 1826;
            else
                begin
                    select  nvl(qtd_prazo_entrega_recibo,1826)
                    into    v_qtd_prazo_entrega_recibo
                    from    contrato_empresa
                    where   cod_ts_contrato = v_cod_ts_contrato;
                exception
                    when others then
                        v_qtd_prazo_entrega_recibo := 1826;
                end;
            end if;
        else
            v_qtd_prazo_entrega_recibo := 1826;
        end if;
        --

        --Montar XML do pedidos
        v_SQL := '';
        v_SQL := v_SQL || ' SELECT * FROM ( ';
        v_SQL := v_SQL || ' SELECT 0 COD_RETORNO';
        v_SQL := v_SQL || ','|| v_qtd_prazo_entrega_recibo ||' qtd_prazo_entrega_recibo';
        v_SQL := v_SQL || ' , nvl(pr.num_protocolo_ans,pr.num_protocolo) num_protocolo';
        v_SQL := v_SQL || ' , pr.num_reembolso';
        v_SQL := v_SQL || ' , pr.num_protocolo num_protocolo_ant';
        v_SQL := v_SQL || ' , pr.num_protocolo_ans num_protocolo_ans';
        v_SQL := v_SQL || ' , to_char(SYSDATE,''DD/MM/YYYY'') data_atual';
        v_SQL := v_SQL || ' , pr.num_associado';
        v_SQL := v_SQL || ' , pr.nome_associado';
        v_SQL := v_SQL || ' , pr.num_contrato';
        v_SQL := v_SQL || ' , pr.cod_empresa';
        v_SQL := v_SQL || ' , pr.cod_ts';
        v_SQL := v_SQL || ' , pr.ind_situacao';
        v_SQL := v_SQL || ' , pr.ind_sexo';
        v_SQL := v_SQL || ' , pr.tipo_associado';
        v_SQL := v_SQL || ' , pr.cod_ts_tit';
        v_SQL := v_SQL || ' , pr.ind_internacional';
        v_SQL := v_SQL || ' , to_char(pr.val_moeda_estrangeira,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_moeda_estrangeira';
        v_SQL := v_SQL || ' , pr.sigla_moeda';
        v_SQL := v_SQL || ' , pr.cod_ts_contrato';
        v_SQL := v_SQL || ' , pr.num_reembolso_previa';
        v_SQL := v_SQL || ' , pr.num_reembolso_origem';
        v_SQL := v_SQL || ' , pr.ind_reanalise';
        v_SQL := v_SQL || ' , pr.ind_reanalisado';
        v_SQL := v_SQL || ' , pr.val_latitude';
        v_SQL := v_SQL || ' , pr.val_longitude';
        v_SQL := v_SQL || ' , to_char(pr.val_calculado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_calculado';
        v_SQL := v_SQL || ' , to_char(pr.val_informado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_informado';
        v_SQL := v_SQL || ' , to_char(pr.val_reembolsado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_reembolsado';
        v_SQL := v_SQL || ' , to_char(pr.val_desc_copart,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_desc_copart';
        v_SQL := v_SQL || ' , to_char(pr.val_glosa,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_total_glosa';
        v_SQL := v_SQL || ' , to_char(pr.data_nascimento,''DD/MM/YYYY'')     data_nascimento';
        v_SQL := v_SQL || ' , to_char(pr.dt_inclusao,''DD/MM/YYYY'')         dt_inclusao';
        v_SQL := v_SQL || ' , to_char(pr.dt_analise,''DD/MM/YYYY'')          dt_analise';
        v_SQL := v_SQL || ' , to_char(pr.dt_indeferimento,''DD/MM/YYYY'')    dt_indeferimento';
        v_SQL := v_SQL || ' , to_char(pr.dt_pagamento,''DD/MM/YYYY'')    dt_pagamento';
        v_SQL := v_SQL || ' , pr.cod_tratamento';
        v_SQL := v_SQL || ' , pr.qtd_idade';
        v_SQL := v_SQL || ' , pr.cod_acomodacao';
        v_SQL := v_SQL || ' , pr.txt_observacao';
        v_SQL := v_SQL || ' , null txt_observacao_operadora';
        v_SQL := v_SQL || ' , pr.ind_insc_fiscal';
        v_SQL := v_SQL || ' , pr.COD_MOTIVO_INDEFERIMENTO  cod_motivo_indef     ';
        v_SQL := v_SQL || ' , pr.nome_prestador';
        v_SQL := v_SQL || ' , pr.num_insc_fiscal';
        v_SQL := v_SQL || ' , pr.txt_url_nfe';
        v_SQL := v_SQL || ' , pr.num_crm';
        v_SQL := v_SQL || ' , pr.uf_conselho';
        v_SQL := v_SQL || ' , pr.sigla_conselho';
        v_SQL := v_SQL || ' , pr.cnes';
        v_SQL := v_SQL || ' , pr.seq_endereco';
        v_SQL := v_SQL || ' , pr.cod_cbo';
        v_SQL := v_SQL || ' , pr.cod_plano';
        v_SQL := v_SQL || ' , pr.ind_carater';
        v_SQL := v_SQL || ' , pr.cod_entidade_ts_tit';
        v_SQL := v_SQL || ' , pr.txt_num_fax';
        v_SQL := v_SQL || ' , pr.txt_ddd_fax';
        v_SQL := v_SQL || ' , pr.txt_ramal_fax';
        v_SQL := v_SQL || ' , pr.txt_email';
        v_SQL := v_SQL || ' , pr.ddd_residencial';
        v_SQL := v_SQL || ' , pr.tel_residencial';
        v_SQL := v_SQL || ' , pr.ddd_comercial';
        v_SQL := v_SQL || ' , pr.tel_comercial';
        v_SQL := v_SQL || ' , pr.ddd_celular';
        v_SQL := v_SQL || ' , pr.tel_celular';
        v_SQL := v_SQL || ' , cbo_s.nome_cbo';
        v_SQL := v_SQL || ' , sr.tipo_situacao';
        v_SQL := v_SQL || ' , sr.txt_status_site';
        v_SQL := v_SQL || ' , sr.nome_situacao';
        v_SQL := v_SQL || ' , sr.cod_fase_processo';
        v_SQL := v_SQL || ' , pr.cod_motivo_reembolso';
        v_SQL := v_SQL || ' , ( select pt.num_envelope from protocolo_reembolso pt where pt.num_protocolo_ans = pr.num_protocolo_ans) num_envelope   ';
        v_SQL := v_SQL || ' , ( select pt1.cod_tipo_envio_envelope from protocolo_reembolso pt1 where pt1.num_protocolo_ans = pr.num_protocolo_ans) cod_tipo_envio_envelope   ';
        v_SQL := v_SQL || ' , pr.cod_usuario_solic';
        v_SQL := v_SQL || ' , sr.ind_cancelar';
        v_SQL := v_SQL || ' , sr.ind_negar';
        v_SQL := v_SQL || ' , sr.ind_excluir';
        v_SQL := v_SQL || ' , sr.ind_alterar';
        v_SQL := v_SQL || ' , sr.ind_autorizar';
        v_SQL := v_SQL || ' , sr.ind_usuario_analise';
        v_SQL := v_SQL || ' , pr.cod_origem';
        v_SQL := v_SQL || ' , pr.ind_tipo_reembolso';
        v_SQL := v_SQL || ' , pr.cod_inspetoria_ts_abertura';
        v_SQL := v_SQL || ' , pr.ind_tipo_emissao';
        v_SQL := v_SQL || ' , pr.qtd_dias_reembolso';
        v_SQL := v_SQL || ' , sr.sgl_situacao';
        v_SQL := v_SQL || ' , to_char(pr.dt_prevista_pgto,''DD/MM/YYYY'')     dt_prevista_pgto';
        v_SQL := v_SQL || ' , to_char(pr.dt_prevista_pgto_calc,''DD/MM/YYYY'')     dt_prevista_pgto_calc';
        v_SQL := v_SQL || ' , pr.ind_tipo_favorecido';
        v_SQL := v_SQL || ' , pr.nome_favorecido';
        v_SQL := v_SQL || ' , pr.num_favorecido';
        v_SQL := v_SQL || ' , pr.num_cpf_favorecido';
        v_SQL := v_SQL || ' , pr.ind_forma_pgto';
        v_SQL := v_SQL || ' , pr.cod_agencia';
        v_SQL := v_SQL || ' , pr.num_dv_agencia';
        v_SQL := v_SQL || ' , pr.num_conta_corrente';
        v_SQL := v_SQL || ' , pr.num_dv_cc';
        v_SQL := v_SQL || ' , pr.cod_banco';
        v_SQL := v_SQL || ' , pr.ind_tipo_conta_reemb';
        v_SQL := v_SQL || ' , to_char(pr.dt_comprovante,''DD/MM/YYYY'')     dt_comprovante';
        v_SQL := v_SQL || ' , to_char(pr.val_informado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_comprovante';
        v_SQL := v_SQL || ' , pr.num_internacao';
        v_SQL := v_SQL || ' , to_char(pr.dt_ini_atendimento,''DD/MM/YYYY'')     dt_ini_atendimento';
        v_SQL := v_SQL || ' , to_char(pr.dt_fim_atendimento,''DD/MM/YYYY'')     dt_fim_atendimento';
        v_SQL := v_SQL || ' , NVL2(pr.hora_inicio, SUBSTR(pr.hora_inicio, 1, 2) || '':'' || SUBSTR(pr.hora_inicio, 3, 4), pr.hora_inicio) hora_inicio';
        v_SQL := v_SQL || ' , NVL2(pr.hora_inicio, SUBSTR(pr.hora_fim, 1, 2) || '':'' || SUBSTR(pr.hora_fim, 3, 4), pr.hora_fim) hora_fim';
        v_SQL := v_SQL || ' , pr.cod_procedimento_principal';
        v_SQL := v_SQL || ' , ( select nome_item from vwm_procedimento where item_medico = pr.cod_procedimento_principal ) nome_procedimento_principal';
        v_SQL := v_SQL || ' , pr.cod_cid';
        v_SQL := v_SQL || ' , c1.nome_cid';
        v_SQL := v_SQL || ' , pr.cod_cid_2';
        v_SQL := v_SQL || ' , c2.nome_cid nome_cid_2';
        v_SQL := v_SQL || ' , pr.cod_cid_3';
        v_SQL := v_SQL || ' , c3.nome_cid nome_cid_3';
        v_SQL := v_SQL || ' , pr.cod_cid_4';
        v_SQL := v_SQL || ' , c4.nome_cid nome_cid_4';
        v_SQL := v_SQL || ' , pr.cod_tipo_alta';
        v_SQL := v_SQL || ' , pr.cod_cid_obito';
        v_SQL := v_SQL || ' , co.nome_cid nome_cid_obito';
        v_SQL := v_SQL || ' , pr.num_declara_obito';
        v_SQL := v_SQL || ' , pr.ind_acidente';
        v_SQL := v_SQL || ' , pr.ind_acao_judicial';
        v_SQL := v_SQL || ' , pr.num_acao_judicial';
        v_SQL := v_SQL || ' , pr.cod_tipo_acp';
        v_SQL := v_SQL || ' , pr.txt_obs_acao_judicial';
        v_SQL := v_SQL || ' , b.nome_banco';
        v_SQL := v_SQL || ' , pr.ind_tipo_comprovante';
        v_SQL := v_SQL || ' , pr.cod_municipio_execucao';
        v_SQL := v_SQL || ' , m.nom_municipio nom_municipio_execucao';
        v_SQL := v_SQL || ' , ta.ind_tipo ind_acomodacao';
        v_SQL := v_SQL || ' , pr.cod_entidade_ts_rl';
        v_SQL := v_SQL || ' , pr.num_nota_fiscal';
        v_SQL := v_SQL || ' , pr.ind_tipo_endereco';
        v_SQL := v_SQL || ' , pr.ind_utiliza_courrier';
        v_SQL := v_SQL || ' , pr.txt_contato_courrier';
        v_SQL := v_SQL || ' , pr.num_cep';
        v_SQL := v_SQL || ' , pr.sgl_uf';
        v_SQL := v_SQL || ' , pr.cod_municipio';
        v_SQL := v_SQL || ' , nvl(pr.nome_municipio,m2.nom_municipio) nom_municipio';
        v_SQL := v_SQL || ' , pr.cod_bairro';
        v_SQL := v_SQL || ' , nvl(pr.nome_bairro,b2.nom_bairro) nome_bairro ';
        v_SQL := v_SQL || ' , pr.nom_logradouro';
        v_SQL := v_SQL || ' , pr.cod_tipo_logr';
        v_SQL := v_SQL || ' , pr.num_endereco';
        v_SQL := v_SQL || ' , pr.txt_complemento';
        v_SQL := v_SQL || ' , pr.SGL_AREA_ABERTURA ';
        v_SQL := v_SQL || ' , AU.NOM_AREA NOME_AREA_ABERTURA';
        v_SQL := v_SQL || ' , tr.nome_tipo_reembolso';
        v_SQL := v_SQL || ' , pr.cod_motivo_alter_dt_pgto';
        v_SQL := v_SQL || ' , ( select to_char(ptr.val_protocolo,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') from protocolo_reembolso ptr where ptr.num_protocolo = pr.num_protocolo) val_protocolo';
        v_SQL := v_SQL || ' , pr.cod_usuario_analise';
        v_SQL := v_SQL || ' , to_char(pr.dt_inicio_analise,''DD/MM/YYYY'')     dt_inicio_analise';
        v_SQL := v_SQL || ' , (select solic_area ';
        v_SQL := v_SQL || '      from motivo_reembolso ';
        v_SQL := v_SQL || '     where cod_motivo_reembolso = pr.cod_motivo_reembolso) solic_area';
        v_SQL := v_SQL || ' , (select nvl(ind_envio_carta, ''N'') ';
        v_SQL := v_SQL || '      from motivo_reembolso ';
        v_SQL := v_SQL || '     where cod_motivo_reembolso = pr.cod_motivo_reembolso) ind_envio_carta';
        v_SQL := v_SQL || ' , (select nvl(ind_municipio_deslocamento, ''N'') ';
        v_SQL := v_SQL || '      from motivo_reembolso ';
        v_SQL := v_SQL || '     where cod_motivo_reembolso = pr.cod_motivo_reembolso) ind_municipio_deslocamento';
        v_SQL := v_SQL || ' , (select acao_judicial ';
        v_SQL := v_SQL || '      from motivo_reembolso ';
        v_SQL := v_SQL || '     where cod_motivo_reembolso = pr.cod_motivo_reembolso) acao_judicial';
        v_SQL := v_SQL || ' , (select motivo_glosa ';
        v_SQL := v_SQL || '      from motivo_reembolso ';
        v_SQL := v_SQL || '     where cod_motivo_reembolso = pr.cod_motivo_reembolso) motivo_glosa ';
        v_SQL := v_SQL || ' , to_char(pr.dt_pgto_real,''DD/MM/YYYY'')    dt_pgto_real ';
        v_SQL := v_SQL || ' , sr.alias_status_site ';

        --CARTA AUTORIZAÇÃO
        v_SQL := v_SQL || ' , rca.txt_obs_procedimento                                                         ';
        v_SQL := v_SQL || ' , rca.qtd_procedimento_carta                                                         ';
        v_SQL := v_SQL || ' , rca.uf_demandado                                                                 ';
        v_SQL := v_SQL || ' , rca.cod_municipio_demandado                                                      ';
        v_SQL := v_SQL || ' , rca.uf_efetivado                                                                 ';
        v_SQL := v_SQL || ' , rca.cod_municipio_efetivado                                                      ';
        v_SQL := v_SQL || ' , to_char(rca.data_agendamento,''DD/MM/YYYY'') data_agendamento                   ';
        v_SQL := v_SQL || ' , rca.num_protocolo_atendimento                                                    ';
        v_SQL := v_SQL || ' , to_char(rca.val_estimado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_estimado                                                                 ';
        v_SQL := v_SQL || ' , rca.ind_atendimento_rn                                                           ';
        v_SQL := v_SQL || ' , rca.nome_rn                                                                      ';
        v_SQL := v_SQL || ' , (select md.nom_municipio                                                         ';
        v_SQL := v_SQL || '      from ts.municipio md                                                          ';
        v_SQL := v_SQL || '     where rca.cod_municipio_demandado = md.cod_municipio                           ';
        v_SQL := v_SQL || '        and rca.num_reembolso = pr.num_reembolso) nom_municipio_demandado           ';
        v_SQL := v_SQL || ' , (select me.nom_municipio                                                         ';
        v_SQL := v_SQL || '      from ts.municipio me                                                          ';
        v_SQL := v_SQL || '     where rca.cod_municipio_efetivado = me.cod_municipio                           ';
        v_SQL := v_SQL || '        and rca.num_reembolso = pr.num_reembolso) nom_municipio_efetivado           ';
        v_SQL := v_SQL || ' , pr.cod_solicitante ';
        v_SQL := v_SQL || ' , sl.nome_solicitante ';
        v_SQL := v_SQL || ' , sl.sigla_conselho sigla_conselho_solicitante ';
        v_SQL := v_SQL || ' , sl.num_crm num_crm_solicitante ';
        v_SQL := v_SQL || ' , sl.sgl_uf_conselho uf_conselho_solicitante ';
        v_SQL := v_SQL || ' , sl.num_insc_fiscal num_insc_fiscal_solicitante ';
        v_SQL := v_SQL || ' , sl.ind_tipo_pessoa ind_tipo_pessoa_solicitante ';
        v_SQL := v_SQL || ' , pr.cnes_solicitante ';
        v_SQL := v_SQL || ' , pr.cod_cbo_solicitante ';
        v_SQL := v_SQL || ' , cbo_2.nome_cbo nome_cbo_solicitante ';
        v_SQL := v_SQL || ' ,( select case count(*)                                                              ';
        v_SQL := v_SQL || '             when 0 then ''N''                                                        ';
        v_SQL := v_SQL || '             when 1 then ''S''                                                        ';
        v_SQL := v_SQL || '                  else ''N'' end                                                      ';
        v_SQL := v_SQL || '      from ( select  to_char(rc.dt_ocorrencia,''dd/mm/yyyy hh24:mi'')                 ';
        v_SQL := v_SQL || '               from ts.reembolso_ocorrencia rc                                        ';
        v_SQL := v_SQL || '                  , ts.pedido_reembolso pr2                                           ';
        v_SQL := v_SQL || '                  , ts.motivo_reembolso mr                                            ';
        v_SQL := v_SQL || '              where rc.num_reembolso = pr2.num_reembolso                               ';
        v_SQL := v_SQL || '                and pr2.cod_motivo_reembolso = mr.cod_motivo_reembolso                ';
        v_SQL := v_SQL || '                and mr.ind_envio_carta = ''S''                                        ';
        v_SQL := v_SQL || '                and pr2.ind_situacao = 32                                             ';
        v_SQL := v_SQL || '                and rc.cod_tipo_ocorrencia = 57                                       ';
        v_SQL := v_SQL || '                and rc.num_reembolso = pr.num_reembolso                               ';
        v_SQL := v_SQL || '          group by to_char(rc.dt_ocorrencia,''dd/mm/yyyy hh24:mi''))) as ind_agd_doc ';

        --
        if nvl(p_num_reembolso,0) > 0 then
            --GLOSA ANALISE
            v_SQL := v_SQL || ',(select count (*)';
            v_SQL := v_SQL || '  from   reembolso_glosa                a';
            v_SQL := v_SQL || '  where  a.num_reembolso                = :num_reembolso';
            v_SQL := v_SQL || '  and    nvl(a.num_seq_item,0)          = 0';
            v_SQL := v_SQL || '  and    nvl(a.ind_analisado,''N'')     = ''N''';
            v_SQL := v_SQL || '  and    nvl(a.ind_glosa_manual,''N'')  = ''N''';
            v_SQL := v_SQL || '  ) QTD_GLOSA_ANALISE ';
            --GLOSA ANALISADA
            v_SQL := v_SQL || ',(select count (*)';
            v_SQL := v_SQL || '  from   reembolso_glosa                a';
            v_SQL := v_SQL || '  where  a.num_reembolso                = :num_reembolso';
            v_SQL := v_SQL || '  and    nvl(a.num_seq_item,0)          = 0';
            v_SQL := v_SQL || '  and    nvl(a.ind_analisado,''N'')     = ''S''';
            v_SQL := v_SQL || '  and    nvl(a.ind_glosa_manual,''N'')  = ''N''';
            v_SQL := v_SQL || '  ) QTD_GLOSA_ANALISADA ';
            --GRUPO ANALISE
            v_SQL := v_SQL || ',(select count (*)';
            v_SQL := v_SQL || '  from   pedido_reembolso_grupo     a';
            v_SQL := v_SQL || '  where  a.num_reembolso            = :num_reembolso';
            v_SQL := v_SQL || ' ) QTD_GRUPO_ANALISE ';
             --GRUPO ANALISE
            v_SQL := v_SQL || ',(select count (*)';
            v_SQL := v_SQL || '  from   pedido_reembolso_regra     a';
            v_SQL := v_SQL || '  where  a.num_reembolso            = :num_reembolso';
            v_SQL := v_SQL || ' ) QTD_GRUPO_REGRA ';
        end if;
        --
        v_SQL := v_SQL || ' FROM pedido_reembolso     pr';
        v_SQL := v_SQL || '    , CBO_S';
        v_SQL := v_SQL || '    , CBO_S cbo_2';
        v_SQL := v_SQL || '    , situacao_reembolso   sr';
        v_SQL := v_SQL || '    , cid   c1';
        v_SQL := v_SQL || '    , cid   c2';
        v_SQL := v_SQL || '    , cid   c3';
        v_SQL := v_SQL || '    , cid   c4';
        v_SQL := v_SQL || '    , cid   co';
        v_SQL := v_SQL || '    , banco b';
        v_SQL := v_SQL || '    , municipio m';
        v_SQL := v_SQL || '    , municipio m2';
        v_SQL := v_SQL || '    , bairro b2';
        v_SQL := v_SQL || '    , tipo_acomodacao ta';
        v_SQL := v_SQL || '    , area_usuario au  ';
        v_SQL := v_SQL || '    , tipo_reembolso tr  ';
        v_SQL := v_SQL || '    , reembolso_carta_autorizacao rca  ';
        v_SQL := v_SQL || '    , solicitante sl ';
        --
        v_SQL := v_SQL || ' WHERE pr.ind_situacao           = sr.cod_situacao';
        v_SQL := v_SQL || ' and   pr.ind_tipo_reembolso     = tr.ind_tipo_reembolso ';
        v_SQL := v_SQL || ' AND   pr.num_reembolso          = rca.num_reembolso(+)';
        v_SQL := v_SQL || ' AND   pr.cod_cbo                = cbo_s.cod_cbo(+)';
        v_SQL := v_SQL || ' AND   pr.cod_cid                = c1.cod_cid(+)';
        v_SQL := v_SQL || ' AND   pr.cod_cid_2              = c2.cod_cid(+)';
        v_SQL := v_SQL || ' AND   pr.cod_cid_3              = c3.cod_cid(+)';
        v_SQL := v_SQL || ' AND   pr.cod_cid_4              = c4.cod_cid(+)';
        v_SQL := v_SQL || ' AND   pr.cod_cid_obito          = co.cod_cid(+)';
        v_SQL := v_SQL || ' AND   pr.cod_banco              = b.cod_banco(+)';
        v_SQL := v_SQL || ' AND   pr.cod_municipio_execucao = m.cod_municipio(+)';
        v_SQL := v_SQL || ' AND   pr.cod_municipio          = m2.cod_municipio(+)';
        v_SQL := v_SQL || ' AND   pr.cod_municipio          = b2.cod_municipio(+)';
        v_SQL := v_SQL || ' AND   pr.cod_bairro             = b2.cod_bairro(+)';
        v_SQL := v_SQL || ' AND   pr.cod_acomodacao         = ta.cod_acomodacao(+)';
        v_SQL := v_SQL || ' and   pr.sgl_area_abertura      = au.sgl_area(+) ';
        v_SQL := v_SQL || ' AND   pr.cod_solicitante        = sl.cod_solicitante(+) ';
        v_SQL := v_SQL || ' AND   pr.cod_cbo_solicitante    = cbo_2.cod_cbo(+)';

        --
        IF nvl(p_xml_filtro,'X') <> 'X' THEN --FILTRANDO PELA TELA GENERICA
            v_cod_ts            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/COD_TS');
            v_ind_situacao      := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/IND_SITUACAO');
            --
            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI') is not null and ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI'), 'DD/MM/YYYY') then
                v_dt_pedido_ini := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI'), 'DD/MM/YYYY');
            end if;
            --
            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM') is not null and ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM'), 'DD/MM/YYYY') then
                v_dt_pedido_fim := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM'), 'DD/MM/YYYY')+1;
            end if;
            --
            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_INI') is not null and ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_INI'), 'DD/MM/YYYY') then
                v_dt_prevista_ini := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_INI'), 'DD/MM/YYYY');
            end if;
            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_FIM') is not null and ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_FIM'), 'DD/MM/YYYY') then
                v_dt_prevista_fim := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_FIM'), 'DD/MM/YYYY')+1;
            end if;
            --
            v_num_insc_fiscal           := ts_limpa_caracteres_especiais(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_INSC_FISCAL'));
            v_nome_prestador            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NOME_PRESTADOR');
            v_sigla_conselho            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/SIGLA_CONSELHO');
            v_num_crm                   := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_CRM');
            v_uf_conselho               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/UF_CONSELHO');
            v_cnes                      := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/CNES');
            v_num_protocolo_ans         := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_PROTOCOLO');
            --
            select length(v_num_protocolo_ans)
              into v_tamanho_reembolso
              from dual;
            --
            if v_tamanho_reembolso > 15 then
              select p.num_protocolo
                into v_num_protocolo
                from ts.protocolo_reembolso p
               where p.num_protocolo_ans = v_num_protocolo_ans;
            else
              v_num_protocolo := v_num_protocolo_ans;
            end if;
            --
            v_num_associado             := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_ASSOCIADO');
            v_ind_tipo_reemboslo        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/IND_TIPO_REEMBOLSO');
            v_cod_fase_processo_pesq    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/COD_FASE_PROCESSO');
            v_tipo_acao_fase            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/TIPO_ACAO_FASE');
            --
            --
            xmldom.freeDocument(v_doc);
            --
            if nvl(v_cod_ts,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.cod_ts = :cod_ts';
                add_parametro_sql ( p_nome_parametro => 'cod_ts' , p_valor_parametro => v_cod_ts );
            end if;
            --
            if nvl(v_num_associado,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.num_associado = :num_associado';
                add_parametro_sql ( p_nome_parametro => 'num_associado' , p_valor_parametro => v_num_associado );
            end if;
            --
            if nvl(v_ind_situacao,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.ind_situacao = :ind_situacao';
                add_parametro_sql ( p_nome_parametro => 'ind_situacao' , p_valor_parametro => v_ind_situacao );
            end if;
            --
            if nvl(v_ind_tipo_reemboslo,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.ind_tipo_reembolso = :ind_tipo_reemboslo';
                add_parametro_sql ( p_nome_parametro => 'ind_tipo_reemboslo' , p_valor_parametro => v_ind_tipo_reemboslo );
            end if;
            --
            if nvl(v_cod_tratamento,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.cod_tratamento = :cod_tratamento';
                add_parametro_sql ( p_nome_parametro => 'cod_tratamento' , p_valor_parametro => v_cod_tratamento );
            end if;
            --
            if nvl(v_num_insc_fiscal,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.num_insc_fiscal = :num_insc_fiscal';
                add_parametro_sql ( p_nome_parametro => 'num_insc_fiscal' , p_valor_parametro => v_num_insc_fiscal );
            end if;
            --
            if nvl(v_nome_prestador,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' AND UPPER(pr.nome_prestador) LIKE ' || chr(39) || UPPER(v_nome_prestador) || '%' || chr(39);
            end if;
            --
            if nvl(v_sigla_conselho,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' AND pr.sigla_conselho = :sigla_conselho';
                add_parametro_sql ( p_nome_parametro => 'sigla_conselho' , p_valor_parametro => v_sigla_conselho );
            end if;
            --
            if nvl(v_num_crm,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' AND pr.num_crm = :num_crm';
                add_parametro_sql ( p_nome_parametro => 'num_crm' , p_valor_parametro => v_num_crm );
            end if;
            --
            if nvl(v_uf_conselho,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' AND pr.uf_conselho = :uf_conselho';
                add_parametro_sql ( p_nome_parametro => 'uf_conselho' , p_valor_parametro => v_uf_conselho );
            end if;
            --
            if nvl(v_cnes,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' AND pr.cnes = :cnes';
                add_parametro_sql ( p_nome_parametro => 'cnes' , p_valor_parametro => v_cnes );
            end if;
            --
            if v_dt_pedido_ini is not null and ts_util.isdate(to_char(v_dt_pedido_ini, 'dd/mm/yyyy'), 'dd/mm/yyyy') then
                v_SQL := v_SQL || ' AND dt_inclusao >= :dt_pedido_ini';
                add_parametro_sql ( p_nome_parametro => 'dt_pedido_ini' , p_valor_parametro => v_dt_pedido_ini );
            end if;
            --
            if v_dt_pedido_fim is not null and ts_util.isdate(to_char(v_dt_pedido_fim, 'dd/mm/yyyy'), 'dd/mm/yyyy') then
                v_SQL := v_SQL || ' AND dt_inclusao < :dt_pedido_fim';
                add_parametro_sql ( p_nome_parametro => 'dt_pedido_fim' , p_valor_parametro => v_dt_pedido_fim );
            end if;
            --
            if v_dt_prevista_ini is not null and ts_util.isdate(to_char(v_dt_prevista_ini, 'dd/mm/yyyy'), 'dd/mm/yyyy') then
                v_SQL := v_SQL || ' AND dt_prevista_pgto >= :dt_prevista_ini';
                add_parametro_sql ( p_nome_parametro => 'dt_prevista_ini' , p_valor_parametro => v_dt_prevista_ini );
            end if;
            --
            if v_dt_prevista_fim is not null and ts_util.isdate(to_char(v_dt_prevista_fim, 'dd/mm/yyyy'), 'dd/mm/yyyy') then
                v_SQL := v_SQL || ' AND dt_prevista_pgto < :dt_prevista_fim';
                add_parametro_sql ( p_nome_parametro => 'dt_prevista_fim' , p_valor_parametro => v_dt_prevista_fim );
            end if;
            --
            if nvl(v_num_protocolo,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.num_protocolo = :num_protocolo';
                add_parametro_sql ( p_nome_parametro => 'num_protocolo' , p_valor_parametro => v_num_protocolo );
            end if;
            --
            if nvl(v_cod_fase_processo_pesq,'X') <> 'X' then
                if v_tipo_acao_fase = 'NOTIN' then
                    v_SQL := v_SQL || ' AND sr.cod_fase_processo not in ('||v_cod_fase_processo_pesq||')';
                else
                    v_SQL := v_SQL || ' AND sr.cod_fase_processo in ('||v_cod_fase_processo_pesq||')';
                end if;
--                 add_parametro_sql ( p_nome_parametro => 'cod_fase_processo' , p_valor_parametro => v_cod_fase_processo_pesq );
            end if;
            --
        ELSE --FILTRANDO PELO NUMERO DE REEMBOLSO
            v_SQL := v_SQL || '   AND pr.num_reembolso = :num_reembolso';
            add_parametro_sql ( p_nome_parametro => 'num_reembolso' , p_valor_parametro => p_num_reembolso );
        END IF;
        --
        v_SQL := v_SQL || '  ORDER BY pr.dt_inclusao desc, num_reembolso desc ';
        v_SQL := v_SQL || ' ) WHERE rownum <= 100 ';
        --
        --

    ts_log_execucao ( 'RB_REEMBOLSO', 99, 'DEBUG', v_SQL || chr(13) || p_xml_filtro || chr(13) || p_xml_retorno, 'RetornaReembolso' );

        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'PEDIDO'
                                   , p_nome_coluna    => 'DADOS'
                                   );




    exception
        when others then
            --
            TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 99, 'Erro', ts_util.MsgErro || ' (' || ts.top_utl_padrao.msgerro  || ')' || chr(13) || v_SQL || chr(13) || p_xml_filtro || chr(13) || 'p_num_reembolso=' || p_num_reembolso, 'RetornaReembolso' );
            --
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || ' (' || ts.top_utl_padrao.msgerro  || ')' || '</MSG_RETORNO>';
            --p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
            p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
            return;
    end;
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com boleano para liberar o menu de reembolso do portal
    ----------------------------------------------------------------------------
    PROCEDURE RetornaReembolsoCartaAutorizacao ( p_num_associado in varchar2
                         , p_xml_retorno   out CLOB
                         , p_xml_filtro    in CLOB DEFAULT NULL
                      )
  is
    v_num_associado     varchar2(100);
    v_ind_direito_reembolso varchar2(1);
    v_count         number;
    v_existe        boolean;
  begin
  --
    IF p_num_associado IS NULL OR p_num_associado = '' THEN
      p_xml_retorno := '<?xml version="1.0"?>';
      p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
      p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
      p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Número do associado não informado.</MSG_RETORNO>';
      p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
      RETURN;
    END IF;

    begin
      SELECT CASE WHEN COUNT(rc.cod_ts_contrato) > 0 THEN 'S' ELSE 'N' END AS ind_direito_reembolso
      INTO v_ind_direito_reembolso
      FROM ts.associado a
      LEFT JOIN ts.reembolso_contrato rc ON a.cod_ts_contrato = rc.cod_ts_contrato AND a.cod_plano = rc.cod_plano
      WHERE a.num_associado = p_num_associado;
    exception
      when others Then
        v_ind_direito_reembolso := 'N';
    end;

    IF v_ind_direito_reembolso = 'S' THEN
      p_xml_retorno := '<?xml version="1.0"?>';
      p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
      p_xml_retorno := p_xml_retorno || '<COD_RETORNO>0</COD_RETORNO>';
      p_xml_retorno := p_xml_retorno || '<MENU>true</MENU>';
      p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
      RETURN;
    END IF;

    SELECT COUNT(*)
    INTO v_count
    FROM ts.pedido_reembolso pr
    JOIN ts.motivo_reembolso mr ON pr.cod_motivo_reembolso = mr.cod_motivo_reembolso
    WHERE pr.num_associado = p_num_associado
    AND NVL(mr.ind_envio_carta, 'N') = 'S'
    AND NVL(mr.ind_acesso_canais_digitais, 'N') = 'S';

    IF v_count > 0 THEN
      v_existe := TRUE;
    ELSE
      v_existe := FALSE;
    END IF;

    p_xml_retorno := '<?xml version="1.0"?>';
    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>0</COD_RETORNO>';
    p_xml_retorno := p_xml_retorno || '<MENU>' || CASE WHEN v_existe THEN 'true' ELSE 'false' END || '</MENU>';
    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';

    return;

  EXCEPTION
      WHEN OTHERS THEN
        TS_LOG_EXECUCAO ( 'rb_reembolso', 99, 'Erro não previsto', 'Erro:' || chr(13) || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || chr(13) || 'p_xml_filtro:' || chr(13) || p_xml_filtro, 'RetornaDadosAssociado' );
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<PEDIDO>';
        p_xml_retorno := p_xml_retorno || '<DADOS>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '</DADOS>';
        p_xml_retorno := p_xml_retorno || '</PEDIDO>';
        return;
    END;
    --

    --
    ----------------------------------------------------------------------------
    -- Retorna xml com dados de atendimento do reembolso do portal
    ----------------------------------------------------------------------------
    PROCEDURE RetornaAcompanhamentoReembolso ( p_num_associado IN VARCHAR2
                                              , p_num_reembolso IN VARCHAR2
                                              , p_data_ini IN DATE
                                              , p_data_fim IN DATE
                                              , p_periodo IN NUMBER
                                              , p_xml_retorno   OUT CLOB
                                              , p_xml_filtro    IN CLOB DEFAULT NULL
                                              )
  IS
    v_txt_just_indef                         VARCHAR2(5000);
    v_txt_mot_indef                          VARCHAR2(1000);
    v_agd                                    VARCHAR2(100);
    v_txt_just_agd                           VARCHAR2(5000);
    v_txt_mot_agd                            VARCHAR2(1000);
    v_data_ini                               DATE;
    v_data_fim                               DATE;
    loop_xml                                 CLOB;

  CURSOR cur_reembolsos IS
    SELECT
         pr.num_reembolso as numeroreembolso
        ,pr.num_protocolo as numeroprotocolo
        ,rca.num_protocolo_atendimento as numeroprotocoloatendimento
        ,rmi.desc_motivo as descricaomotivo
        ,rmi.txt_justificativa as txtjustificativa
        ,sr.cod_situacao as situacaoid
        --"situacao": 0,
        ,pr.ind_aguardando_documentacao as indaguardandodocumentacao
        ,rd.nom_documento as nomedocumento
        ,rd.txt_justificativa as motivojustificativa
        ,pr.dt_pedido as datapedido
        ,pr.dt_prevista_pgto as dtprevistapgto
        --,false                   --"previsaoPagamentoSpecified": true,
        ,pr.dt_pagamento as datareembolso
        --,false                   --"dataReembolsoSpecified": true,
        ,pr.val_informado as valorsolicitado
        ,pr.val_reembolsado as valorreembolso
        --,false                   --"valorReembolsoSpecified": true,
        ,sr.nome_situacao as mensagemsituacao
        ,pr.cod_banco as codigobanco
        ,b.nome_banco as nomebanco
        ,pr.cod_agencia as codigoagencia
        ,pr.num_dv_agencia as digitoagencia
        ,pr.num_conta_corrente as contacorrente
        ,pr.num_dv_cc as digitoconta
        ,pr.ind_tipo_conta_reemb as tipoconta
        ,pr.num_cpf_associado as cpfassociado
        --,0                       --"itemElementName": 0
        ,pr.nome_associado as nomeassociado
        ,pr.num_associado as marcaotica
        --PROCEDIMENTO
        ,pdr.cod_procedimento as codigoprocedimento
        ,im.nome_item as nomeitem
        ,pr.ind_tipo_reembolso as modalidade
        ,pdr.ind_funcao as codigofuncao
        ,tfa.nome_funcao as nomefuncao
        ,pdr.qtd_informado as quantidadesolicitada
        ,pdr.qtd_aprovada as quantidadereembolsada
        --,false                   -- "quantidadeReembolsadaSpecified": true,
        ,pdr.data_atendimento as dataatendimento
        ,pdr.val_informado as valorsolicitadoprocedimento
        ,pdr.val_reembolsado as valorreembolsado
        --,false                   -- "valorReembolsadoSpecified": true,
        --,null                    --   "codigo": "string",
        ,mr.txt_memoria as nomememoria
        ,mrd.num_seq_item as codigosequencialitem       --   "codigoSequenciaItem": 0,
        --,false                   --   "codigoSequenciaItemSpecified": true,
        ,mrd.cod_porte as codigoporte
        --,false                   --   "codigoPorteSpecified": true,
        ,mrd.pct_copart as percentualcoparticipacao
        --,false                   --   "percentualCoparticipacaoSpecified": true,
        ,mrd.qtd_filme as quantidadefilme
        --,false                   --   "quantidadeFilmeSpecified": true,
        ,mrd.qtd_honorario as quantidadehonorario
        --,false                   --   "quantidadeHonorarioSpecified": true,
        ,mrd.qtd_vezes_tabela as multiplicador
        --,false                   --   "multiplicadorSpecified": true,
        --,pr.val_informado        --   "valorApresentado": 0,
        --,false                   --   "valorApresentadoSpecified": true,
        --,mrd.val_reembolsado     --   "valorReembolsado": 0,
        --,false                   --   "valorReembolsadoSpecified": true,
        ,mrd.val_copart as valorcoparticipacao
        --,false                   --   "valorCoparticipacaoSpecified": true,
        ,mrd.val_filme as valormetroquadradofilme
        --,false                   --   "valorMetroQuadradoFilmeSpecified": true,
        ,mrd.val_tax_materiais as valortaxasmateriais
        --,false                   --   "valorTaxasMateriaisSpecified": true,
        --,mrd.qtd_honorario       --   "valorHonorario": 0,
        --,true                   --   "valorHonorarioSpecified": true
        ,pr.nom_logradouro as logradouro
        ,pr.num_endereco as numerologradouro
        ,pr.txt_complemento as complemento
        ,pr.num_cep as cep
        ,pr.nome_bairro as bairro
        ,rca.txt_obs_procedimento as txtobsprocedimento
        ,1 as qtdprocedimentocarta
        ,rca.data_agendamento       as dataagendamentocarta
        ,rca.val_estimado           as valestimadocarta
        --,null                    --   "cidade": "string",
        --,0                       --   "uf": 0
        --,null                    --   "contato": "string"
        --"codigo": 0,
        --"nome": "string"
        --"data": "2025-04-04T18:21:17.234Z",
    FROM
         ts.pedido_reembolso pr
    LEFT JOIN
         ts.procedimento_reembolso pdr ON pr.num_reembolso = pdr.num_reembolso
    LEFT JOIN
         ts.reembolso_carta_autorizacao rca ON pr.num_reembolso = rca.num_reembolso
    LEFT JOIN
         ts.reembolso_motivo_indef rmi ON pr.cod_motivo_indeferimento = rmi.cod_motivo
    LEFT JOIN
         ts.situacao_reembolso sr ON pr.ind_situacao = sr.cod_situacao
    LEFT JOIN
         ts.reembolso_documentacao_pedido rdp ON pr.num_reembolso = rdp.num_reembolso
    LEFT JOIN
         ts.reembolso_documento rd ON rdp.cod_documento = rd.cod_documento
    LEFT JOIN
         ts.banco b ON pr.cod_banco = b.cod_banco
    LEFT JOIN
         ts.itens_medicos im ON pdr.cod_procedimento = im.item_medico
    LEFT JOIN
         ts.memoria_reembolso mr ON pr.num_reembolso = mr.num_reembolso
    LEFT JOIN
         ts.memoria_reembolso_detalhe mrd ON pr.num_reembolso = mrd.num_reembolso
    LEFT JOIN
         ts.tipo_funcao_auxiliar tfa ON pdr.ind_funcao = tfa.cod_funcao
    WHERE
         (pr.num_associado IS NOT NULL OR pr.num_associado = nvl(p_num_associado,pr.num_associado))
      AND
         pr.num_reembolso = nvl(p_num_reembolso,pr.num_reembolso)
      AND
          pr.dt_pedido BETWEEN nvl(v_data_ini, pr.dt_pedido) AND nvl(v_data_fim,trunc(sysdate))
      AND
          mrd.cod_procedimento_calc = pdr.cod_procedimento;

  BEGIN
  IF p_num_associado IS NULL or p_num_reembolso IS NULL THEN

    IF ((p_periodo is null) and (p_data_ini IS NULL OR p_data_fim IS NULL ) ) then
       p_xml_retorno := p_xml_retorno || 'Período obrigatório na ausencia das datas.';
    ELSIF p_data_ini IS NULL OR p_data_fim IS NULL THEN
        p_xml_retorno := p_xml_retorno || 'Data inicial ou final inválida ou não informada.';
    ELSIF p_data_ini > p_data_fim THEN
        p_xml_retorno := p_xml_retorno || 'A Data inicial não pode ser posterior à data final.';
    END IF;
    p_xml_retorno := p_xml_retorno || '</MSG_RETORNO></DADOS></PEDIDO>';
    RETURN;
  END IF;

   IF p_periodo IN (1, 3, 6, 12) THEN
     v_data_ini := ADD_MONTHS(TRUNC(SYSDATE), - p_periodo);
     v_data_fim := TRUNC(SYSDATE);
   ELSE
     v_data_ini := p_data_ini;
     v_data_fim := p_data_fim;
   END IF;

    p_xml_retorno := '<?xml version="1.0"?>';
    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>0</COD_RETORNO>';

    DBMS_LOB.createtemporary(loop_xml, TRUE);

    FOR r IN cur_reembolsos LOOP

    loop_xml := loop_xml ||
    '<NUMREEMBOLSO>' || r.numeroreembolso || '</NUMREEMBOLSO>' ||
    '<PROTOCOLO>' || r.numeroprotocolo || '</PROTOCOLO>' ||
    '<PROTOCOLOATENDIMENTO>' || r.numeroprotocoloatendimento || '</PROTOCOLOATENDIMENTO>';

    IF r.situacaoid = 32 AND v_agd = 'S' THEN
        BEGIN
            SELECT CASE COUNT(*)
                WHEN 0 THEN 'N'
                WHEN 1 THEN 'S'
                ELSE 'N'
            END AS indagddoc
            INTO v_agd
            FROM (
                SELECT TO_CHAR(rc.dt_ocorrencia, 'dd/mm/yyyy hh24:mi') AS dataocorrencia
                FROM ts.reembolso_ocorrencia rc
                , ts.pedido_reembolso pr
                , ts.motivo_reembolso mr
                WHERE rc.num_reembolso = pr.num_reembolso
                AND pr.cod_motivo_reembolso = mr.cod_motivo_reembolso
                AND mr.ind_envio_carta = 'S'
                AND pr.ind_situacao = 32
                AND rc.cod_tipo_ocorrencia = 57
                AND rc.num_reembolso = p_num_reembolso
                GROUP BY TO_CHAR(rc.dt_ocorrencia, 'dd/mm/yyyy hh24:mi')
            ) rc_alias;
            EXCEPTION
                WHEN OTHERS THEN
                v_agd := 'N';
        END;

        loop_xml := loop_xml ||
                 '<INDAGD>' || v_agd || '</INDAGD>' ||
                 '<MOTIVO>' || v_txt_mot_agd || '</MOTIVO>' ||
                 '<JUSTIFICATIVA>' || v_txt_just_agd || '</JUSTIFICATIVA>';

    ELSIF r.situacaoid = 33 THEN
        loop_xml := loop_xml ||
            '<INDAGD></INDAGD>' ||
            '<MOTIVO>' || v_txt_mot_indef || '</MOTIVO>' ||
            '<JUSTIFICATIVA>' || v_txt_just_indef || '</JUSTIFICATIVA>';
    ELSE
        loop_xml := loop_xml ||
            '<INDAGD></INDAGD>' ||
            '<MOTIVO></MOTIVO>' ||
            '<JUSTIFICATIVA></JUSTIFICATIVA>';
    END IF;

    loop_xml := loop_xml ||
        '<SITUACAO>' || r.situacaoid || '</SITUACAO>' ||
        '<AGD>' || v_agd || '</AGD>' ||
        '<DTSOLICITACAO>' || r.datapedido || '</DTSOLICITACAO>' ||
        '<DTPREVISAOPG>' || r.dtprevistapgto || '</DTPREVISAOPG>' ||
        '<DATAREEMBOLSO>' || r.datareembolso || '</DATAREEMBOLSO>' ||
        '<VALORSOLICITADO>' || r.valorsolicitado || '</VALORSOLICITADO>' ||
        '<VALORREEMBOLSO>' || r.valorreembolso || '</VALORREEMBOLSO>' ||
        '<MENSAGEMSITUACAO>' || r.mensagemsituacao || '</MENSAGEMSITUACAO>' ||
        '<CODBANCO>' || r.codigobanco || '</CODBANCO>' ||
        '<NOMEBANCO>' || r.nomebanco || '</NOMEBANCO>' ||
        '<AGENCIA>' || r.codigoagencia || '</AGENCIA>' ||
        '<DIGITOAGENCIA>' || r.digitoagencia || '</DIGITOAGENCIA>' ||
        '<CONTACORRENTE>' || r.contacorrente || '</CONTACORRENTE>' ||
        '<DIGITOCONTA>' || r.digitoconta || '</DIGITOCONTA>' ||
        '<TIPOCONTA>' || r.tipoconta || '</TIPOCONTA>' ||
        '<ITEM>' || r.cpfassociado || '</ITEM>' ||
        '<NOMEASSOCIADO>' || r.nomeassociado || '</NOMEASSOCIADO>' ||
        '<MARCAOTICA>' || r.marcaotica || '</MARCAOTICA>';

    IF ((r.codigoprocedimento is not null) or (r.codigoprocedimento <> '')) THEN
        loop_xml := loop_xml ||
            '<PROCEDIMENTOS>' ||
                '<CODPROCEDIMENTO>' || r.codigoprocedimento || '</CODPROCEDIMENTO>' ||
                '<NOMEITEM>' || r.nomeitem || '</NOMEITEM>' ||
                '<MODALIDADE>' || r.modalidade || '</MODALIDADE>' ||
                '<FUNCAO>' || r.codigofuncao || '</FUNCAO>' ||
                '<NOME>' || r.nomefuncao || '</NOME>' ||
                '<QUANTIDADESOLICITADA>' || r.quantidadesolicitada || '</QUANTIDADESOLICITADA>' ||
                '<QUANTIDADEREEMBOLSADA>' || r.quantidadereembolsada || '</QUANTIDADEREEMBOLSADA>' ||
                '<DATA>' || r.dataatendimento || '</DATA>' ||
                '<VALORSOLICITADOPROCEDIMENTO>' || r.valorsolicitadoprocedimento || '</VALORSOLICITADOPROCEDIMENTO>' ||
                '<VALORREEMBOLSADO>' || r.valorreembolsado || '</VALORREEMBOLSADO>' ||
                '<NOMEMEMORIA>' || r.nomememoria || '</NOMEMEMORIA>' ||
                '<CODIGOSEQUENCIAL>' || r.codigosequencialitem || '</CODIGOSEQUENCIAL>' ||
                '<CODIGOPORTE>' || r.codigoporte || '</CODIGOPORTE>' ||
                '<PERCENTUALCOPARTICIPACAO>' || r.percentualcoparticipacao || '</PERCENTUALCOPARTICIPACAO>' ||
                '<QUANTIDADEFILME>' || r.quantidadefilme || '</QUANTIDADEFILME>' ||
                '<QUANTIDADEHONORARIO>' || r.quantidadehonorario || '</QUANTIDADEHONORARIO>' ||
                '<MULTIPLICADOR>' || r.multiplicador || '</MULTIPLICADOR>' ||
                '<VALORCOPARTICIPACAO>' || r.valorcoparticipacao || '</VALORCOPARTICIPACAO>' ||
                '<VALORMETROQUADRADOFILME>' || r.valormetroquadradofilme || '</VALORMETROQUADRADOFILME>' ||
                '<VALORTAXASMATERIAIS>' || r.valortaxasmateriais || '</VALORTAXASMATERIAIS>' ||
                '<LOGRADOURO>' || r.logradouro || '</LOGRADOURO>' ||
                '<NUMERO>' || r.numerologradouro || '</NUMERO>' ||
                '<COMPLEMENTO>' || r.complemento || '</COMPLEMENTO>' ||
                '<CEP>' || r.cep || '</CEP>' ||
                '<BAIRRO>' || r.bairro || '</BAIRRO>' ||
            '</PROCEDIMENTOS>';
    ELSE
            loop_xml := loop_xml ||
            '<PROCEDIMENTOS>' ||
                '<CODPROCEDIMENTO></CODPROCEDIMENTO>' ||
                '<NOMEITEM>' || r.Txtobsprocedimento || '</NOMEITEM>' ||
                '<MODALIDADE></MODALIDADE>' ||
                '<FUNCAO></FUNCAO>' ||
                '<NOME></NOME>' ||
                '<QUANTIDADESOLICITADA>' || r.qtdprocedimentocarta || '</QUANTIDADESOLICITADA>' ||
                '<QUANTIDADEREEMBOLSADA></QUANTIDADEREEMBOLSADA>' ||
                '<DATA>' || r.dataagendamentocarta || '</DATA>' ||
                '<VALORSOLICITADOPROCEDIMENTO>' || r.valestimadocarta || '</VALORSOLICITADOPROCEDIMENTO>' ||
                '<VALORREEMBOLSADO></VALORREEMBOLSADO>' ||
                '<NOMEMEMORIA></NOMEMEMORIA>' ||
                '<CODIGOSEQUENCIAL></CODIGOSEQUENCIAL>' ||
                '<CODIGOPORTE></CODIGOPORTE>' ||
                '<PERCENTUALCOPARTICIPACAO></PERCENTUALCOPARTICIPACAO>' ||
                '<QUANTIDADEFILME></QUANTIDADEFILME>' ||
                '<QUANTIDADEHONORARIO></QUANTIDADEHONORARIO>' ||
                '<MULTIPLICADOR></MULTIPLICADOR>' ||
                '<VALORCOPARTICIPACAO></VALORCOPARTICIPACAO>' ||
                '<VALORMETROQUADRADOFILME></VALORMETROQUADRADOFILME>' ||
                '<VALORTAXASMATERIAIS></VALORTAXASMATERIAIS>' ||
                '<LOGRADOURO>' || r.logradouro || '</LOGRADOURO>' ||
                '<NUMERO>' || r.numerologradouro || '</NUMERO>' ||
                '<COMPLEMENTO>' || r.complemento || '</COMPLEMENTO>' ||
                '<CEP>' || r.cep || '</CEP>' ||
                '<BAIRRO>' || r.bairro || '</BAIRRO>' ||
            '</PROCEDIMENTOS>';
    END IF;
    END LOOP;
    p_xml_retorno := p_xml_retorno || loop_xml || '</DADOS></PEDIDO>';
    DBMS_LOB.freetemporary(loop_xml);

  EXCEPTION
      WHEN OTHERS THEN
        TS_LOG_EXECUCAO ( 'rb_reembolso', 99, 'Erro não previsto', 'Erro:' || chr(13) || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || chr(13) || 'p_xml_filtro:' || chr(13) || p_xml_filtro, 'RetornaDadosAssociado' );
        p_xml_retorno := '<?xml version="1.0"?>' ||
        p_xml_retorno || '<NUMREEMBOLSO>''</NUMREEMBOLSO>' ||
        p_xml_retorno || '<PROTOCOLO>''</PROTOCOLO>' ||
        p_xml_retorno || '<PROTOCOLOATENDIMENTO>''</PROTOCOLOATENDIMENTO>' ||
        p_xml_retorno || '<INDAGD>''</INDAGD>' ||
        p_xml_retorno || '<MOTIVO>''</MOTIVO>' ||
        p_xml_retorno || '<JUSTIFICATIVA>''</JUSTIFICATIVA>' ||
        p_xml_retorno || '<SITUACAO>''</SITUACAO>' ||
        p_xml_retorno || '<AGD>''</AGD>' ||
        p_xml_retorno || '<DTSOLICITACAO>''</DTSOLICITACAO>' ||
        p_xml_retorno || '<DTPREVISAOPG>''</DTPREVISAOPG>' ||
        p_xml_retorno || '<DATAREEMBOLSO>''</DATAREEMBOLSO>' ||
        p_xml_retorno || '<VALORSOLICITADO>''</VALORSOLICITADO>' ||
        p_xml_retorno || '<VALORREEMBOLSO>''</VALORREEMBOLSO>' ||
        p_xml_retorno || '<MENSAGEMSITUACAO>''</MENSAGEMSITUACAO>' ||
        p_xml_retorno || '<CODBANCO>''</CODBANCO>' ||
        p_xml_retorno || '<NOMEBANCO>''</NOMEBANCO>' ||
        p_xml_retorno || '<AGENCIA>''</AGENCIA>' ||
        p_xml_retorno || '<DIGITOAGENCIA>''</DIGITOAGENCIA>' ||
        p_xml_retorno || '<CONTACORRENTE>''</CONTACORRENTE>' ||
        p_xml_retorno || '<DIGITOCONTA>''</DIGITOCONTA>' ||
        p_xml_retorno || '<TIPOCONTA>''</TIPOCONTA>' ||
        p_xml_retorno || '<ITEM>''</ITEM>' ||
        p_xml_retorno || '<NOMEASSOCIADO>''</NOMEASSOCIADO>' ||
        p_xml_retorno || '<MARCAOTICA>''</MARCAOTICA>' ||
        p_xml_retorno || '<PROCEDIMENTOS>' ||
        p_xml_retorno || '<CODPROCEDIMENTO>''</CODPROCEDIMENTO>' ||
        p_xml_retorno || '<NOMEITEM>''</NOMEITEM>' ||
        p_xml_retorno || '<MODALIDADE>''</MODALIDADE>' ||
        p_xml_retorno || '<FUNCAO>''</FUNCAO>' ||
        p_xml_retorno || '<NOME>''</NOME>' ||
        p_xml_retorno || '<QUANTIDADESOLICITADA>''</QUANTIDADESOLICITADA>' ||
        p_xml_retorno || '<QUANTIDADEREEMBOLSADA>''</QUANTIDADEREEMBOLSADA>' ||
        p_xml_retorno || '<DATA>''</DATA>' ||
        p_xml_retorno || '<VALORSOLICITADOPROCEDIMENTO>''</VALORSOLICITADOPROCEDIMENTO>' ||
        p_xml_retorno || '<VALORREEMBOLSADO>''</VALORREEMBOLSADO>' ||
        p_xml_retorno || '<NOMEMEMORIA>''</NOMEMEMORIA>' ||
        p_xml_retorno || '<CODIGOSEQUENCIAL>''</CODIGOSEQUENCIAL>' ||
        p_xml_retorno || '<CODIGOPORTE>''</CODIGOPORTE>' ||
        p_xml_retorno || '<PERCENTUALCOPARTICIPACAO>''</PERCENTUALCOPARTICIPACAO>' ||
        p_xml_retorno || '<QUANTIDADEFILME>''</QUANTIDADEFILME>' ||
        p_xml_retorno || '<QUANTIDADEHONORARIO>''</QUANTIDADEHONORARIO>' ||
        p_xml_retorno || '<MULTIPLICADOR>''</MULTIPLICADOR>' ||
        p_xml_retorno || '<VALORCOPARTICIPACAO>''</VALORCOPARTICIPACAO>' ||
        p_xml_retorno || '<VALORMETROQUADRADOFILME>''</VALORMETROQUADRADOFILME>' ||
        p_xml_retorno || '<VALORTAXASMATERIAIS>''</VALORTAXASMATERIAIS>' ||
        p_xml_retorno || '<LOGRADOURO>''</LOGRADOURO>' ||
        p_xml_retorno || '<NUMERO>''</NUMERO>' ||
        p_xml_retorno || '<COMPLEMENTO>''</COMPLEMENTO>' ||
        p_xml_retorno || '<CEP>''</CEP>' ||
        p_xml_retorno || '<BAIRRO>''</BAIRRO>' ||
        p_xml_retorno || '</PROCEDIMENTOS>' ||
        p_xml_retorno || '</DADOS></PEDIDO>';
        RETURN;
    END;
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com as informações do reembolso dental
    ----------------------------------------------------------------------------
    procedure RetornaReembolsoDental( p_num_reembolso       in  number
                                    , p_xml_retorno         out clob
                                    , p_xml_filtro          in  clob    default null
                                    , p_ind_forma_abertura  in varchar2 default null
                                    , p_cod_usuario         in varchar2 default null
                                    )
    is
    v_SQL              varchar2(32000);
    v_num_associado    pedido_reembolso.num_associado%type;
    v_dt_pedido_ini    pedido_reembolso.dt_inclusao%type;
    v_dt_pedido_fim    pedido_reembolso.dt_inclusao%type;
    v_doc              xmldom.DOMDocument;
    v_cod_retorno      number;
    v_msg_retorno      varchar2(4000);
    v_num_protocolo    pedido_reembolso.num_protocolo%type;
    begin
    --
        --Validacao
        if nvl(p_xml_filtro,'X') <> 'X' then
            ts_cria_doc_xml(p_xml_filtro, v_doc, v_cod_retorno, v_msg_retorno);
            if v_cod_retorno <> 0 then
                p_xml_retorno := '<?xml version="1.0"?>';
                p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || v_msg_retorno || '</MSG_RETORNO>';
                p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                return;
            end if;
        else
            IF NVL(p_num_reembolso,0) = 0 THEN
                p_xml_retorno := '<?xml version="1.0"?>';
                p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Número do reembolso não informado.</MSG_RETORNO>';
                p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                return;
            END IF;
        end if;

    v_SQL := '';
        --
        v_SQL:= trim('            select 0 COD_RETORNO                                                                     ');
        v_SQL := v_SQL || rtrim('     , b.num_protocolo_ans          num_protocolo                                                    ');
        v_SQL := v_SQL || rtrim('     , b.data_solicitacao           dt_inclusao                                                      ');
        v_SQL := v_SQL || rtrim('     , b.dt_pgto_prevista           dt_prevista_pgto                                                 ');
        v_SQL := v_SQL || rtrim('     , sum(i.valor_informado)       val_informado                                                    ');
        v_SQL := v_SQL || rtrim('     , sum(i.valor_reembolsado)     val_reembolsado                                                  ');
        v_SQL := v_SQL || rtrim('     , a.alias_status_reembolso     situacao                                                         ');
        v_SQL := v_SQL || rtrim('     , a.nom_situacao_externo       nome_situacao_externo                                            ');
        v_SQL := v_SQL || rtrim('     , b.num_reembolso              num_reembolso                                                    ');
        v_SQL := v_SQL || rtrim('     , ''1''                 ind_tipo_reembolso                                                      ');
        v_SQL := v_SQL || rtrim('     , b.cro_prestador              num_crm                                                          ');
        v_SQL := v_SQL || rtrim('     , b.uf_cro_prestador           uf_conselho                                                      ');
        v_SQL := v_SQL || rtrim('     , b.nome_prestador             nome_prestador                                                   ');
        v_SQL := v_SQL || rtrim('     , case when b.ind_tipo_pessoa_prestador = ''F'' then lpad(b.num_insc_fiscal_prestador,11,''0'') ');
        v_SQL := v_SQL || rtrim('            when b.ind_tipo_pessoa_prestador = ''J'' then lpad(b.num_insc_fiscal_prestador,14,''0'') ');
        v_SQL := v_SQL || rtrim('            else ''''                                                                                ');
        v_SQL := v_SQL || rtrim('       end                          num_insc_fiscal                                            ');
        v_SQL := v_SQL || rtrim('     , b.ind_tipo_pessoa_prestador  ind_insc_fiscal                                            ');
        v_SQL := v_SQL || rtrim('     ,''N''                         ind_provisorio                                              ');
        v_SQL := v_SQL || rtrim('     , b.dt_pgto_prevista           dt_pagamento                                              ');
        v_SQL := v_SQL || rtrim('     , a.ALIAS_STATUS_REEMBOLSO     alias_status_site                                         ');
        v_SQL := v_SQL || rtrim('     , b.data_inclusao                                                                         ');
        v_SQL := v_SQL || rtrim('     , b.num_cpf_favorecido                                                                   ');
        v_SQL := v_SQL || rtrim('     , b.nome_favorecido                                                                     ');
        v_SQL := v_SQL || rtrim('     , b.cod_banco                                                                             ');
        v_SQL := v_SQL || rtrim('     , bco.nome_banco                                                                       ');
        v_SQL := v_SQL || rtrim('     , b.cod_agencia_bancaria       cod_agencia                                              ');
        v_SQL := v_SQL || rtrim('     , b.num_dv_agencia                                                                     ');
        v_SQL := v_SQL || rtrim('     , b.num_conta_corrente                                                                 ');
        v_SQL := v_SQL || rtrim('     , b.num_dv_cc                                                                            ');
        v_SQL := v_SQL || rtrim('  from ts_odo.odo_reembolso_situacao    a                                                            ');
        v_SQL := v_SQL || rtrim('     , ts_odo.odo_reembolso             b                                                            ');
        v_SQL := v_SQL || rtrim('     , ts_odo.odo_reembolso_item        i                                                            ');
        v_SQL := v_SQL || rtrim('     , ts_odo.odo_itens_pagamento       d                                                            ');
        v_SQL := v_SQL || rtrim('     , ts_odo.banco                     bco                                                          ');
        v_SQL := v_SQL || rtrim('  where b.cod_situacao          = a.cod_situacao                                                     ');
        v_SQL := v_SQL || rtrim('    and b.num_reembolso         = i.num_reembolso                                                    ');
        v_SQL := v_SQL || rtrim('    and b.num_item_pagamento_ts = d.num_item_pagamento_ts(+)                                         ');
        v_SQL := v_SQL || rtrim('    and b.cod_banco             = bco.cod_banco(+)                                                   ');
        --

    --
        if nvl(p_xml_filtro,'X') <> 'X' then

            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI') is not null and ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI'), 'dd/MM/yyyy') then
              v_dt_pedido_ini := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI'), 'dd/MM/yyyy');
            end if;
            --
            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM') is not null and ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM'), 'dd/MM/yyyy') then
              v_dt_pedido_fim := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM'), 'dd/MM/yyyy')+1;
            end if;
            --
            if v_dt_pedido_ini is not null and ts_util.isdate(to_char(v_dt_pedido_ini, 'dd/MM/yyyy'), 'dd/MM/yyyy') then
              v_SQL := v_SQL || ' AND trunc(b.data_solicitacao) >= :dt_pedido_ini';
              add_parametro_sql ( p_nome_parametro => 'dt_pedido_ini' , p_valor_parametro => v_dt_pedido_ini );
            end if;
            --
            if v_dt_pedido_fim is not null and ts_util.isdate(to_char(v_dt_pedido_fim, 'dd/MM/yyyy'), 'dd/MM/yyyy') then
              v_SQL := v_SQL || ' AND trunc(b.data_solicitacao) < :dt_pedido_fim';
              add_parametro_sql ( p_nome_parametro => 'dt_pedido_fim' , p_valor_parametro => v_dt_pedido_fim );
            end if;
            --
            --
            v_num_associado := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_ASSOCIADO');
            --
            if nvl(v_num_associado,0) <> 0 then
              v_SQL := v_SQL || ' AND b.num_associado = :num_associado';
              add_parametro_sql ( p_nome_parametro => 'num_associado' , p_valor_parametro => v_num_associado );
            end if;

        else

            if nvl(p_num_reembolso,0) <> 0 then
              v_SQL := v_SQL || ' AND b.num_reembolso = :num_reembolso';
              add_parametro_sql ( p_nome_parametro => 'num_reembolso' , p_valor_parametro => p_num_reembolso );
            end if;

        end if;
    --
    if nvl(p_num_reembolso,0) <> 0 then
            v_SQL := v_SQL || '   AND b.num_reembolso = :num_reembolso';
            add_parametro_sql ( p_nome_parametro => 'num_reembolso' , p_valor_parametro => p_num_reembolso );
    end if;
    --
        v_SQL := v_SQL || rtrim(' and rownum <= 100 ');
    --
        v_SQL := v_SQL || rtrim('  group by b.num_protocolo_ans                                                                       ');
    v_SQL := v_SQL || rtrim('         , b.data_solicitacao                                                                        ');
        v_SQL := v_SQL || rtrim('         , b.dt_pgto_prevista                                                                        ');
        v_SQL := v_SQL || rtrim('         , a.alias_status_reembolso                                                                  ');
        v_SQL := v_SQL || rtrim('         , a.nom_situacao_externo                                                                    ');
        v_SQL := v_SQL || rtrim('         , b.num_reembolso                                                                           ');
        v_SQL := v_SQL || rtrim('         , b.cro_prestador                                                                           ');
        v_SQL := v_SQL || rtrim('         , b.uf_cro_prestador                                                                        ');
        v_SQL := v_SQL || rtrim('         , b.nome_prestador                                                                          ');
        v_SQL := v_SQL || rtrim('         , case when b.ind_tipo_pessoa_prestador = ''F'' then lpad(b.num_insc_fiscal_prestador,11,''0'') ');
        v_SQL := v_SQL || rtrim('                when b.ind_tipo_pessoa_prestador = ''J'' then lpad(b.num_insc_fiscal_prestador,14,''0'') ');
        v_SQL := v_SQL || rtrim('                else ''''                                                                            ');
        v_SQL := v_SQL || rtrim('           end                                                                                       ');
        v_SQL := v_SQL || rtrim('         , b.ind_tipo_pessoa_prestador                                                               ');
        v_SQL := v_SQL || rtrim('         , b.DT_PAGAMENTO                                                                            ');
        v_SQL := v_SQL || rtrim('         , a.nom_situacao                                                                            ');
        v_SQL := v_SQL || rtrim('         , b.data_inclusao                                                                           ');
        v_SQL := v_SQL || rtrim('         , b.num_cpf_favorecido                                                                 ');
        v_SQL := v_SQL || rtrim('         , b.nome_favorecido                                                                   ');
        v_SQL := v_SQL || rtrim('         , b.cod_banco                                                                           ');
        v_SQL := v_SQL || rtrim('         , bco.nome_banco                                                                       ');
        v_SQL := v_SQL || rtrim('         , b.cod_agencia_bancaria                                                             ');
        v_SQL := v_SQL || rtrim('         , b.num_dv_agencia                                                                   ');
        v_SQL := v_SQL || rtrim('         , b.num_conta_corrente                                                                 ');
        v_SQL := v_SQL || rtrim('         , b.num_dv_cc                                                                        ');
        v_SQL := v_SQL || rtrim('  order by b.data_inclusao desc, b.num_reembolso desc                                                ');
        --
        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'PEDIDO'
                                   , p_nome_coluna    => 'DADOS'
                                   );

    exception
        when others then
            --
            TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 99, 'Erro', ts_util.MsgErro || ' (' || ts.top_utl_padrao.msgerro  || ')' || chr(13) || v_SQL || chr(13) || p_xml_filtro || chr(13) || 'p_num_reembolso=' || p_num_reembolso, 'RetornaReembolsoDental' );
            --
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || ' (' || ts.top_utl_padrao.msgerro  || ')' || '</MSG_RETORNO>';
            --p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
            p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
            return;
  end;
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com as informações do reembolso
    ----------------------------------------------------------------------------
    Procedure RetornaReembolsoGen  ( p_num_reembolso       in  number
                                    , p_xml_retorno         out clob
                                    , p_xml_filtro          in  clob    default null
                                    , p_ind_forma_abertura  in varchar2 default null
                                    , p_cod_usuario         in varchar2 default null
                                    )
    is
        --Declarações:
        v_SQL                   varchar2(32000);
        v_doc                   xmldom.DOMDocument;
        v_cod_retorno           number;
        v_msg_retorno           varchar2(4000);
        v_item_vazio            varchar2(3) := '¿¿¿';
        v_cod_ts                pedido_reembolso.cod_ts%type;
        v_ind_situacao          pedido_reembolso.ind_situacao%type;
        v_cod_tratamento        pedido_reembolso.cod_tratamento%type;
        v_dt_pedido_ini         pedido_reembolso.dt_inclusao%type;
        v_dt_pedido_fim         pedido_reembolso.dt_inclusao%type;
        v_dt_prevista_ini       pedido_reembolso.dt_prevista_pgto%type;
        v_dt_prevista_fim       pedido_reembolso.dt_prevista_pgto%type;
        v_num_insc_fiscal       pedido_reembolso.num_insc_fiscal%type;
        v_nome_prestador        pedido_reembolso.nome_prestador%type;
        v_sigla_conselho        pedido_reembolso.sigla_conselho%type;
        v_num_crm               pedido_reembolso.num_crm%type;
        v_uf_conselho           pedido_reembolso.uf_conselho%type;
        v_cnes                  pedido_reembolso.cnes%type;
        v_num_protocolo         pedido_reembolso.num_protocolo%type;
        v_num_associado         pedido_reembolso.num_associado%type;
        v_cod_fase_processo     number;
        v_ind_reanalise         varchar2(1);
        v_ind_reanalisado       varchar2(1);
        v_situacao_item_pag     number;
        v_usa_bloqueio_pedido   varchar2(1);
        v_dt_inicio_analise     pedido_reembolso.dt_inicio_analise%type;
        v_cod_usuario_analise   pedido_reembolso.cod_usuario_analise%type;
        v_ind_tipo_reemboslo    pedido_reembolso.ind_tipo_reembolso%type;

        v_cod_fase_processo_pesq     varchar2(20);
        v_tipo_acao_fase             varchar2(20);

        v_protocolo_inclusao         varchar2(20);
    begin
    --Início
    --
    --Validação
    if p_ind_forma_abertura is not null then
        --
        begin
           select a.cod_situacao        , a.cod_fase_processo
                , ind_reanalise         , ind_reanalisado
                , cod_usuario_analise   , dt_inicio_analise
           into   v_ind_situacao        , v_cod_fase_processo
                , v_ind_reanalise       , v_ind_reanalisado
                , v_cod_usuario_analise , v_dt_inicio_analise
           from   situacao_reembolso  a
                , pedido_reembolso    b
           where  b.ind_situacao      = a.cod_situacao
           and    b.num_reembolso     = p_num_reembolso;
           --
           if p_ind_forma_abertura = 'CA' then
               if v_cod_fase_processo not in (1, 2, 3, 6) then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita o seu cancelamento.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
                end if;
           end if;
           if p_ind_forma_abertura = 'RC' then
               if v_ind_situacao != '26' then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita reversão do cancelamento.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
               end if;
           end if;
           if p_ind_forma_abertura = 'REA' then
               if v_cod_fase_processo != 7 then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita a reanálise.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
               elsif nvl(v_ind_reanalisado,'N') = 'S' then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' já foi reanalisado.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
               elsif nvl(v_ind_reanalise,'N') = 'S' then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' já é uma reanálise.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
              end if;
           end if;
           if p_ind_forma_abertura = 'RF' then
               if v_ind_situacao not in(33, 34) then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita a reversão da finalização.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
              end if;
           end if;
           if p_ind_forma_abertura = 'AL' then
               if v_cod_fase_processo in (4,5,7,8) then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita alteração.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
               end if;
           end if;
           if p_ind_forma_abertura = 'AS' then
                if v_cod_fase_processo not in (1, 2, 3) then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita atualizar a situação.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
                end if;
           end if;
           if p_ind_forma_abertura = 'DEV' then
                if v_ind_situacao <> 33 then
                    p_xml_retorno := '<?xml version="1.0"?>';
                    p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                    p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não está em situação que permita o sua devolução.</MSG_RETORNO>';
                    p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                    return;
                end if;
           end if;
        exception
            when no_data_found then
               p_xml_retorno := '<?xml version="1.0"?>';
               p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
               p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
               p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso não encontrado.</MSG_RETORNO>';
               p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
               return;
        end;
       end if;

        if nvl(p_xml_filtro,'X') <> 'X' then
            ts_cria_doc_xml(p_xml_filtro, v_doc, v_cod_retorno, v_msg_retorno);
            if v_cod_retorno <> 0 then
                p_xml_retorno := '<?xml version="1.0"?>';
                p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || v_msg_retorno || '</MSG_RETORNO>';
                p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                return;
            end if;
        else
            IF NVL(p_num_reembolso,0) = 0 THEN
                p_xml_retorno := '<?xml version="1.0"?>';
                p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Número do reembolso não informado.</MSG_RETORNO>';
                p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                return;
            END IF;
        end if;
        --
        if p_ind_forma_abertura = 'RF' and v_ind_situacao = 34 then
            v_situacao_item_pag := 0;
            begin
                select ind_situacao into v_situacao_item_pag from itens_pagamento where num_reembolso = p_num_reembolso;
            exception
                when others then
                    v_situacao_item_pag := 0;
            end;

            if v_situacao_item_pag not in (0,1,4) then
                p_xml_retorno := '<?xml version="1.0"?>';
                p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não pode ter sua finalização revertida, pois seu pagamento já foi liberado.</MSG_RETORNO>';
                p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                return;
            end if;
        end if;

        -- Verificar bloqueio de pedido
        RetornaParametro( 'RB_BLOQUEIA_PEDIDO' , v_usa_bloqueio_pedido,  'N' );
        --
        if v_usa_bloqueio_pedido = 'S' then
             --
             if p_ind_forma_abertura = 'DP' then --Desbloqueio do Pedido
                 --
                 if nvl(v_cod_usuario_analise,'X') = 'X' then
                     p_xml_retorno := '<?xml version="1.0"?>';
                     p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                     p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                     p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' não encontra-se bloqueado.</MSG_RETORNO>';
                     p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                     return;
                 end if;
                 --
             elsif p_ind_forma_abertura = 'HI' then
                 --
                 if nvl(v_cod_usuario_analise,p_cod_usuario) != p_cod_usuario then
                     p_xml_retorno := '<?xml version="1.0"?>';
                     p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                     p_xml_retorno := p_xml_retorno || '<COD_RETORNO>6</COD_RETORNO>';
                     p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Reembolso ' || p_num_reembolso || ' encontra-se em análise com ' || v_cod_usuario_analise || ' desde ' || to_char(v_dt_inicio_analise,'dd/mm/yyyy') || '.</MSG_RETORNO>';
                     p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                     return;
                 end if;
                 --
             end if;
        end if;

        --Montar XML do pedidos
        v_SQL := '';
        v_SQL := v_SQL || ' SELECT 0 COD_RETORNO';
        v_SQL := v_SQL || ' , nvl(pr.num_protocolo_ans, pr.num_protocolo) num_protocolo';
        v_SQL := v_SQL || ' , pr.num_reembolso';
        v_SQL := v_SQL || ' , pr.num_associado';
        v_SQL := v_SQL || ' , pr.nome_associado';
        v_SQL := v_SQL || ' , pr.num_contrato';
        v_SQL := v_SQL || ' , pr.cod_empresa';
        v_SQL := v_SQL || ' , pr.cod_ts';
        v_SQL := v_SQL || ' , pr.ind_situacao';
        v_SQL := v_SQL || ' , pr.ind_reanalise';
        v_SQL := v_SQL || ' , pr.ind_reanalisado';
        v_SQL := v_SQL || ' , pr.nome_prestador';
        v_SQL := v_SQL || ' , pr.num_insc_fiscal';
        v_SQL := v_SQL || ' , pr.ind_insc_fiscal';
        v_SQL := v_SQL || ' , pr.cod_motivo_reembolso';
        v_SQL := v_SQL || ' , pr.ind_tipo_emissao';
        v_SQL := v_SQL || ' , pr.val_latitude';
        v_SQL := v_SQL || ' , pr.val_longitude';
        v_SQL := v_SQL || ' , sr.sgl_situacao';
        v_SQL := v_SQL || ' , sr.tipo_situacao';
        v_SQL := v_SQL || ' , sr.nome_situacao';
        v_SQL := v_SQL || ' , sr.cod_fase_processo';
        v_SQL := v_SQL || ' , to_char(pr.dt_prevista_pgto,''DD/MM/YYYY'')     dt_prevista_pgto';
        v_SQL := v_SQL || ' , to_char(pr.dt_inclusao,''DD/MM/YYYY'')         dt_inclusao';
        v_SQL := v_SQL || ' , to_char(pr.dt_analise,''DD/MM/YYYY'')          dt_analise';
        v_SQL := v_SQL || ' , to_char(pr.dt_indeferimento,''DD/MM/YYYY'')    dt_indeferimento';
        v_SQL := v_SQL || ' , to_char(pr.dt_pagamento,''DD/MM/YYYY'')    dt_pagamento';
        v_SQL := v_SQL || ' , pr.ind_tipo_favorecido';
        v_SQL := v_SQL || ' , to_char(pr.val_informado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_comprovante';
        v_SQL := v_SQL || ' , to_char(pr.val_reembolsado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_reembolsado';
        v_SQL := v_SQL || ' , tr.nome_tipo_reembolso';
        v_SQL := v_SQL || ' , pr.ind_tipo_conta_reemb';
        v_SQL := v_SQL || ' , ( select to_char(ptr.val_protocolo,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') from protocolo_reembolso ptr where ptr.num_protocolo = pr.num_protocolo) val_protocolo';
        --
        if nvl(p_num_reembolso,0) > 0 then
            --GLOSA ANALISE
            v_SQL := v_SQL || ',(select count (*)';
            v_SQL := v_SQL || '  from   reembolso_glosa                a';
            v_SQL := v_SQL || '  where  a.num_reembolso                = :num_reembolso';
            v_SQL := v_SQL || '  and    nvl(a.num_seq_item,0)          = 0';
            v_SQL := v_SQL || '  and    nvl(a.ind_analisado,''N'')     = ''N''';
            v_SQL := v_SQL || '  and    nvl(a.ind_glosa_manual,''N'')  = ''N''';
            v_SQL := v_SQL || '  ) QTD_GLOSA_ANALISE ';
            --GLOSA ANALISADA
            v_SQL := v_SQL || ',(select count (*)';
            v_SQL := v_SQL || '  from   reembolso_glosa                a';
            v_SQL := v_SQL || '  where  a.num_reembolso                = :num_reembolso';
            v_SQL := v_SQL || '  and    nvl(a.num_seq_item,0)          = 0';
            v_SQL := v_SQL || '  and    nvl(a.ind_analisado,''N'')     = ''S''';
            v_SQL := v_SQL || '  and    nvl(a.ind_glosa_manual,''N'')  = ''N''';
            v_SQL := v_SQL || '  ) QTD_GLOSA_ANALISADA ';
            --GRUPO ANALISE
            v_SQL := v_SQL || ',(select count (*)';
            v_SQL := v_SQL || '  from   pedido_reembolso_grupo     a';
            v_SQL := v_SQL || '  where  a.num_reembolso            = :num_reembolso';
            v_SQL := v_SQL || ' ) QTD_GRUPO_ANALISE ';
        end if;
        --
        v_SQL := v_SQL || ' FROM pedido_reembolso     pr';
        v_SQL := v_SQL || '    , situacao_reembolso   sr';
        v_SQL := v_SQL || '    , tipo_reembolso tr  ';
        --
        v_SQL := v_SQL || ' WHERE pr.ind_situacao           = sr.cod_situacao';
        v_SQL := v_SQL || ' and   pr.ind_tipo_reembolso     = tr.ind_tipo_reembolso ';

        --
        IF nvl(p_xml_filtro,'X') <> 'X' THEN --FILTRANDO PELA TELA GENERICA
            v_cod_ts            := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/COD_TS');
            v_ind_situacao      := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/IND_SITUACAO');
            --
            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI') is not null then
                if ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI'), 'DD/MM/YYYY') then
                    v_dt_pedido_ini := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI'), 'DD/MM/YYYY');
                end if;
            end if;

            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM') is not null then
                if ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM'), 'DD/MM/YYYY') then
                    v_dt_pedido_fim := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM'), 'DD/MM/YYYY')+1;
                end if;
            end if;
            --

            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_INI') is not null and ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_INI'), 'DD/MM/YYYY') then
                v_dt_prevista_ini := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_INI'), 'DD/MM/YYYY');
            end if;
            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_FIM') is not null and ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_FIM'), 'DD/MM/YYYY') then
                v_dt_prevista_fim := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PREVISTA_FIM'), 'DD/MM/YYYY')+1;
            end if;
            --
            v_num_insc_fiscal       := ts_limpa_caracteres_especiais(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_INSC_FISCAL'));
            v_nome_prestador        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NOME_PRESTADOR');
            v_sigla_conselho        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/SIGLA_CONSELHO');
            v_num_crm               := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_CRM');
            v_uf_conselho           := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/UF_CONSELHO');
            v_cnes                  := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/CNES');
            --
            v_protocolo_inclusao    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_PROTOCOLO');
            --
            begin
              select num_protocolo
                into v_num_protocolo
                from ts.protocolo_reembolso
               where (num_protocolo = v_protocolo_inclusao
                  or num_protocolo_ans = v_protocolo_inclusao)
                 and rownum = 1;
            exception
               when others then
                 v_num_protocolo := null;
            end;
            --
            v_num_associado         := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_ASSOCIADO');
            v_ind_tipo_reemboslo    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/IND_TIPO_REEMBOLSO');
            v_cod_fase_processo_pesq     := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/COD_FASE_PROCESSO');
            v_tipo_acao_fase        := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/TIPO_ACAO_FASE');
            --
            --
            xmldom.freeDocument(v_doc);
            --
            if nvl(v_cod_ts,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.cod_ts = :cod_ts';
                add_parametro_sql ( p_nome_parametro => 'cod_ts' , p_valor_parametro => v_cod_ts );
            end if;
            --
            if nvl(v_num_associado,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.num_associado = :num_associado';
                add_parametro_sql ( p_nome_parametro => 'num_associado' , p_valor_parametro => v_num_associado );
            end if;
            --
            if nvl(v_ind_situacao,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.ind_situacao = :ind_situacao';
                add_parametro_sql ( p_nome_parametro => 'ind_situacao' , p_valor_parametro => v_ind_situacao );
            end if;
            --
            if nvl(v_ind_tipo_reemboslo,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.ind_tipo_reembolso = :ind_tipo_reemboslo';
                add_parametro_sql ( p_nome_parametro => 'ind_tipo_reemboslo' , p_valor_parametro => v_ind_tipo_reemboslo );
            end if;
            --
            if nvl(v_cod_tratamento,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.cod_tratamento = :cod_tratamento';
                add_parametro_sql ( p_nome_parametro => 'cod_tratamento' , p_valor_parametro => v_cod_tratamento );
            end if;
            --
            if nvl(v_num_insc_fiscal,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.num_insc_fiscal = :num_insc_fiscal';
                add_parametro_sql ( p_nome_parametro => 'num_insc_fiscal' , p_valor_parametro => v_num_insc_fiscal );
            end if;
            --
            if nvl(v_nome_prestador,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' AND UPPER(pr.nome_prestador) LIKE ' || chr(39) || UPPER(v_nome_prestador) || '%' || chr(39);
            end if;
            --
            if nvl(v_sigla_conselho,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' AND pr.sigla_conselho = :sigla_conselho';
                add_parametro_sql ( p_nome_parametro => 'sigla_conselho' , p_valor_parametro => v_sigla_conselho );
            end if;
            --
            if nvl(v_num_crm,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' AND pr.num_crm = :num_crm';
                add_parametro_sql ( p_nome_parametro => 'num_crm' , p_valor_parametro => v_num_crm );
            end if;
            --
            if nvl(v_uf_conselho,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' AND pr.uf_conselho = :uf_conselho';
                add_parametro_sql ( p_nome_parametro => 'uf_conselho' , p_valor_parametro => v_uf_conselho );
            end if;
            --
            if nvl(v_cnes,v_item_vazio) <> v_item_vazio then
                v_SQL := v_SQL || ' AND pr.cnes = :cnes';
                add_parametro_sql ( p_nome_parametro => 'cnes' , p_valor_parametro => v_cnes );
            end if;
            --
            if v_dt_pedido_ini is not null then
                v_SQL := v_SQL || ' AND pr.dt_pedido >= :dt_pedido_ini';
                add_parametro_sql ( p_nome_parametro => 'dt_pedido_ini' , p_valor_parametro => v_dt_pedido_ini);
            end if;
            --
            if v_dt_pedido_fim is not null then
                v_SQL := v_SQL || ' AND pr.dt_pedido < :dt_pedido_fim';
                add_parametro_sql ( p_nome_parametro => 'dt_pedido_fim' , p_valor_parametro => v_dt_pedido_fim);
            end if;
            --
            if v_dt_prevista_ini is not null and ts_util.isdate(to_char(v_dt_prevista_ini, 'dd/mm/yyyy'), 'dd/mm/yyyy') then
                v_SQL := v_SQL || ' AND pr.dt_prevista_pgto >= :dt_prevista_ini';
                add_parametro_sql ( p_nome_parametro => 'dt_prevista_ini' , p_valor_parametro => v_dt_prevista_ini );
            end if;
            --
            if v_dt_prevista_fim is not null and ts_util.isdate(to_char(v_dt_prevista_fim, 'dd/mm/yyyy'), 'dd/mm/yyyy') then
                v_SQL := v_SQL || ' AND pr.dt_prevista_pgto < :dt_prevista_fim';
                add_parametro_sql ( p_nome_parametro => 'dt_prevista_fim' , p_valor_parametro => v_dt_prevista_fim );
            end if;
            --
            if nvl(v_num_protocolo,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.num_protocolo = :num_protocolo';
                add_parametro_sql ( p_nome_parametro => 'num_protocolo' , p_valor_parametro => v_num_protocolo );
            end if;
            --
            if nvl(v_cod_fase_processo_pesq,'X') <> 'X' then
                if v_tipo_acao_fase = 'NOTIN' then
                    v_SQL := v_SQL || ' AND sr.cod_fase_processo not in ('||v_cod_fase_processo_pesq||')';
                else
                    v_SQL := v_SQL || ' AND sr.cod_fase_processo in ('||v_cod_fase_processo_pesq||')';
                end if;
            end if;
            --
        ELSE --FILTRANDO PELO NUMERO DE REEMBOLSO
            v_SQL := v_SQL || '   AND pr.num_reembolso = :num_reembolso';
            add_parametro_sql ( p_nome_parametro => 'num_reembolso' , p_valor_parametro => p_num_reembolso );
        END IF;
        --
        v_SQL := v_SQL || ' and rownum <= 100 ORDER BY pr.dt_inclusao desc, num_reembolso desc';
        --
        --
        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'PEDIDO'
                                   , p_nome_coluna    => 'DADOS'
                                   );
        --
    exception
        when others then
            --
            TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 99, 'Erro', ts_util.MsgErro || ' (' || ts.top_utl_padrao.msgerro  || ')' || chr(13) || v_SQL || chr(13) || p_xml_filtro || chr(13) || 'p_num_reembolso=' || p_num_reembolso, 'RetornaReembolso' );
            --
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || ' (' || ts.top_utl_padrao.msgerro  || ')' || '</MSG_RETORNO>';
            --p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
            p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
            return;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com as informações do reembolso
    ----------------------------------------------------------------------------
    Procedure RetornaReembolsoDuplicidade  ( p_num_reembolso       in  number
                                            , p_xml_retorno         out clob
                                            , p_xml_filtro          in  clob    default null
                                            , p_ind_forma_abertura  in varchar2 default null
                                            , p_cod_usuario         in varchar2 default null
                                            )
    is
        --Declarações:
        v_SQL                   varchar2(32000);
        v_doc                   xmldom.DOMDocument;
        v_cod_retorno           number;
        v_msg_retorno           varchar2(4000);
        v_num_associado         pedido_reembolso.num_associado%type;
    begin
    --Início
    --
    --Validação
        if nvl(p_xml_filtro,'X') <> 'X' then
            ts_cria_doc_xml(p_xml_filtro, v_doc, v_cod_retorno, v_msg_retorno);
            if v_cod_retorno <> 0 then
                p_xml_retorno := '<?xml version="1.0"?>';
                p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || v_msg_retorno || '</MSG_RETORNO>';
                p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                return;
            end if;
        end if;
        --

        --Montar XML do pedidos
        v_SQL := '';
        v_SQL := v_SQL || ' SELECT 0 COD_RETORNO';
        v_SQL := v_SQL || ' , nvl(pr.num_protocolo_ans, pr.num_protocolo) num_protocolo';
        v_SQL := v_SQL || ' , pr.num_reembolso';
        v_SQL := v_SQL || ' , pr.num_associado';
        v_SQL := v_SQL || ' , pr.nome_associado';
        v_SQL := v_SQL || ' , pr.num_contrato';
        v_SQL := v_SQL || ' , pr.cod_empresa';
        v_SQL := v_SQL || ' , pr.cod_ts';
        v_SQL := v_SQL || ' , pr.ind_situacao';
        v_SQL := v_SQL || ' , pr.ind_reanalise';
        v_SQL := v_SQL || ' , pr.ind_reanalisado';
        v_SQL := v_SQL || ' , pr.nome_prestador';
        v_SQL := v_SQL || ' , pr.num_insc_fiscal';
        v_SQL := v_SQL || ' , pr.ind_insc_fiscal';
        v_SQL := v_SQL || ' , pr.cod_motivo_reembolso';
        v_SQL := v_SQL || ' , pr.ind_tipo_emissao';
        v_SQL := v_SQL || ' , sr.sgl_situacao';
        v_SQL := v_SQL || ' , sr.tipo_situacao';
        v_SQL := v_SQL || ' , sr.nome_situacao';
        v_SQL := v_SQL || ' , sr.cod_fase_processo';
        v_SQL := v_SQL || ' , to_char(pr.dt_prevista_pgto,''DD/MM/YYYY'')     dt_prevista_pgto';
        v_SQL := v_SQL || ' , to_char(pr.dt_inclusao,''DD/MM/YYYY'')         dt_inclusao';
        v_SQL := v_SQL || ' , to_char(pr.dt_analise,''DD/MM/YYYY'')          dt_analise';
        v_SQL := v_SQL || ' , to_char(pr.dt_indeferimento,''DD/MM/YYYY'')    dt_indeferimento';
        v_SQL := v_SQL || ' , to_char(pr.dt_pagamento,''DD/MM/YYYY'')    dt_pagamento';
        v_SQL := v_SQL || ' , pr.ind_tipo_favorecido';
        v_SQL := v_SQL || ' , to_char(pr.val_informado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_comprovante';
        v_SQL := v_SQL || ' , to_char(pr.val_reembolsado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_reembolsado';
        v_SQL := v_SQL || ' , tr.nome_tipo_reembolso';
        v_SQL := v_SQL || ' , ( select to_char(ptr.val_protocolo,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') from protocolo_reembolso ptr where ptr.num_protocolo = pr.num_protocolo) val_protocolo';
        --
        if nvl(p_num_reembolso,0) > 0 then
            --GLOSA ANALISE
            v_SQL := v_SQL || ',(select count (*)';
            v_SQL := v_SQL || '  from   reembolso_glosa                a';
            v_SQL := v_SQL || '  where  a.num_reembolso                = :num_reembolso';
            v_SQL := v_SQL || '  and    nvl(a.num_seq_item,0)          = 0';
            v_SQL := v_SQL || '  and    nvl(a.ind_analisado,''N'')     = ''N''';
            v_SQL := v_SQL || '  and    nvl(a.ind_glosa_manual,''N'')  = ''N''';
            v_SQL := v_SQL || '  ) QTD_GLOSA_ANALISE ';
            --GLOSA ANALISADA
            v_SQL := v_SQL || ',(select count (*)';
            v_SQL := v_SQL || '  from   reembolso_glosa                a';
            v_SQL := v_SQL || '  where  a.num_reembolso                = :num_reembolso';
            v_SQL := v_SQL || '  and    nvl(a.num_seq_item,0)          = 0';
            v_SQL := v_SQL || '  and    nvl(a.ind_analisado,''N'')     = ''S''';
            v_SQL := v_SQL || '  and    nvl(a.ind_glosa_manual,''N'')  = ''N''';
            v_SQL := v_SQL || '  ) QTD_GLOSA_ANALISADA ';
            --GRUPO ANALISE
            v_SQL := v_SQL || ',(select count (*)';
            v_SQL := v_SQL || '  from   pedido_reembolso_grupo     a';
            v_SQL := v_SQL || '  where  a.num_reembolso            = :num_reembolso';
            v_SQL := v_SQL || ' ) QTD_GRUPO_ANALISE ';
        end if;
        --
        v_SQL := v_SQL || ' FROM pedido_reembolso     pr';
        v_SQL := v_SQL || '    , situacao_reembolso   sr';
        v_SQL := v_SQL || '    , tipo_reembolso tr  ';
        --
        v_SQL := v_SQL || ' WHERE pr.ind_situacao           = sr.cod_situacao';
        v_SQL := v_SQL || ' and   pr.ind_tipo_reembolso     = tr.ind_tipo_reembolso ';

        --
        IF nvl(p_xml_filtro,'X') <> 'X' THEN --FILTRANDO PELA TELA GENERICA
            --
            v_num_associado         := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_ASSOCIADO');
            --
            xmldom.freeDocument(v_doc);
            --

            --
            if nvl(v_num_associado,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.num_associado = :num_associado';
                add_parametro_sql ( p_nome_parametro => 'num_associado' , p_valor_parametro => v_num_associado );
            end if;
            --
            v_SQL := v_SQL || ' AND pr.ind_situacao NOT IN (26, 32, 33, 34, 35, 36, 39, 42, 46)';
            --
            v_SQL := v_SQL || ' AND pr.dt_pedido >= sysdate - 90';
            v_SQL := v_SQL || ' AND pr.dt_pedido <= sysdate';

            --
        END IF;
        --
        v_SQL := v_SQL || ' and rownum <= 100 ORDER BY pr.dt_inclusao desc, num_reembolso desc';
        --
        --
        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'PEDIDO'
                                   , p_nome_coluna    => 'DADOS'
                                   );
        --
    exception
        when others then
            --
            TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 99, 'Erro', ts_util.MsgErro || ' (' || ts.top_utl_padrao.msgerro  || ')' || chr(13) || v_SQL || chr(13) || p_xml_filtro || chr(13) || 'p_num_reembolso=' || p_num_reembolso, 'RetornaReembolso' );
            --
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || ' (' || ts.top_utl_padrao.msgerro  || ')' || '</MSG_RETORNO>';
            --p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
            p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
            return;
    end;
    --
    --
    ----------------------------------------
    -- Retornar os itens do Reembolso Dental
    ----------------------------------------
    procedure RetornaItensDental  ( p_num_reembolso in  number
                , p_xml_retorno   out clob
                )
    is
        --Declarações:
        v_SQL                   varchar2(32000);
        v_cod_procedimento      procedimento_reembolso.cod_procedimento%type;
        v_nome_procedimento     itens_medicos.nome_item%type;
        v_txt_memoria_calculo   memoria_reembolso.txt_memoria%type;
        v_qtd_informado         procedimento_reembolso.qtd_informado%type;
        v_ind_situacao          procedimento_reembolso.ind_situacao%type;
        v_ind_via               procedimento_reembolso.ind_via%type;
        v_ind_cirurgia          procedimento_reembolso.ind_cirurgia%type;
        v_xml_funcao            clob;
        v_qtd_funcoes           number;
    begin
        --Validação
        IF NVL(p_num_reembolso,0) = 0 THEN
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<PROCEDIMENTO><DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Número do reembolso não informado</MSG_RETORNO>';
            p_xml_retorno := p_xml_retorno || '</DADOS></PROCEDIMENTO>';
            return;
        END IF;
        --
        --Montar XML do pedidos
        v_SQL := '';
        v_SQL:= v_SQL || 'select 0                  COD_RETORNO,                                                      ';
        v_SQL:= v_SQL || '       b.item_medico                      COD_PROCEDIMENTO,                             ';
        v_SQL:= v_SQL || '       b.nome_item                        NOME_PROCEDIMENTO,                            ';
        v_SQL:= v_SQL || '       ''DENTAL''                         MODALIDADE,                                   ';
        v_SQL:= v_SQL || '       coalesce(pg.dt_pagamento,a.dt_pagamento,a.dt_pgto_prevista) DT_ATENDIMENTO_PROC, ';
        v_SQL:= v_SQL || '       b.qtd_solicitada                   QTD_INFORMADO,                                ';
        v_SQL:= v_SQL || '       b.qtd_liberada                     QTD_APROVADA,                                 ';
        v_SQL:= v_SQL || '       b.valor_informado                  VAL_INFORMADO,                                ';
        v_SQL:= v_SQL || '       b.valor_reembolsado                VAL_REEMBOLSADO,                              ';
        v_SQL:= v_SQL || '       b.num_seq_item                                                                   ';
        v_SQL:= v_SQL || '  from ts_odo.odo_reembolso       a                                                     ';
        v_SQL:= v_SQL || '     , ts_odo.odo_reembolso_item  b                                                     ';
        v_SQL:= v_SQL || '     , ts_odo.odo_itens_pagamento ip                                                    ';
        v_SQL:= v_SQL || '     , ts_odo.odo_pagamento       pg                                                    ';
        v_SQL:= v_SQL || '     , ts.beneficiario            ben                                                   ';
        v_SQL:= v_SQL || '     , ts.contrato_empresa         ce                                                   ';
        v_SQL:= v_SQL || ' where a.num_reembolso         = :num_reembolso                                         ';
        v_SQL:= v_SQL || '   and a.num_reembolso         = b.num_reembolso                                        ';
        v_SQL:= v_SQL || '   and a.num_associado         = ben.num_associado                                      ';
        v_SQL:= v_SQL || '   and a.num_item_pagamento_ts = ip.num_item_pagamento_ts(+)                            ';
        v_SQL:= v_SQL || '   and ip.num_pagamento_ts     = pg.num_pagamento_ts(+)                                 ';
        v_SQL:= v_SQL || '   and ben.cod_ts_contrato     = ce.cod_ts_contrato(+)                                  ';
        v_SQL:= v_SQL || '   and trunc(ce.data_inicio_vigencia)  <= trunc(sysdate)                                ';
        v_SQL:= v_SQL || '   and coalesce(pg.dt_pagamento,a.dt_pagamento,a.dt_pgto_prevista) is not null          ';
        v_SQL:= v_SQL || '   and a.cod_situacao = 10                                                              ';
        v_SQL:= v_SQL || ' group by a.num_reembolso,                                                              ';
        v_SQL:= v_SQL || '        b.item_medico,                                                                  ';
        v_SQL:= v_SQL || '        b.nome_item,                                                                    ';
        v_SQL:= v_SQL || '        COALESCE (pg.dt_pagamento,                                                      ';
        v_SQL:= v_SQL || '          a.dt_pagamento,                                                               ';
        v_SQL:= v_SQL || '          a.dt_pgto_prevista                                                            ';
        v_SQL:= v_SQL || '         ),                                                                             ';
        v_SQL:= v_SQL || '        b.qtd_solicitada,                                                               ';
        v_SQL:= v_SQL || '        b.qtd_liberada,                                                                 ';
        v_SQL:= v_SQL || '        b.valor_informado,                                                              ';
        v_SQL:= v_SQL || '        b.valor_reembolsado,                                                            ';
        v_SQL:= v_SQL || '        b.num_seq_item,                                                                 ';
        v_SQL:= v_SQL || '        a.num_associado                                                                 ';
        v_SQL:= v_SQL || ' order by a.num_associado                                                               ';
        --
        add_parametro_sql ( p_nome_parametro => 'num_reembolso' , p_valor_parametro => p_num_reembolso );
        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'PROCEDIMENTO'
                                   , p_nome_coluna    => 'DADOS'
                                   );

    exception
    when others then
        --
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 0, 'Erro não previsto', 'Erro:' || chr(13) || ts_util.MsgErro || chr(13) || ts.top_utl_padrao.msgerro || chr(13) || 'v_SQL:' || chr(13) || v_SQL, 'RetornaItensDental' );
        --
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<PROCEDIMENTO><DADOS>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
        p_xml_retorno := p_xml_retorno || '</DADOS></PROCEDIMENTO>';
        return;
    END;
    --
    --
    ----------------------------------
    -- Retornar os itens do Reembolso
    ----------------------------------
    procedure RetornaItens  ( p_num_reembolso in  number
                            , p_xml_retorno   out clob
                            )
    is
        --Declarações:
        v_SQL                   varchar2(32000);
        v_cod_procedimento      procedimento_reembolso.cod_procedimento%type;
        v_nome_procedimento     itens_medicos.nome_item%type;
        v_txt_memoria_calculo   memoria_reembolso.txt_memoria%type;
        v_qtd_informado         procedimento_reembolso.qtd_informado%type;
        v_ind_situacao          procedimento_reembolso.ind_situacao%type;
        v_ind_via               procedimento_reembolso.ind_via%type;
        v_ind_cirurgia          procedimento_reembolso.ind_cirurgia%type;
        v_xml_funcao            clob;
        v_qtd_funcoes           number;
    begin
        --Validação
        IF NVL(p_num_reembolso,0) = 0 THEN
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<PROCEDIMENTO><DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Número do reembolso não informado</MSG_RETORNO>';
            p_xml_retorno := p_xml_retorno || '</DADOS></PROCEDIMENTO>';
            return;
        END IF;
        --
        --Montar XML do pedidos
        v_SQL := '';
        v_SQL := v_SQL || ' SELECT DISTINCT 0 COD_RETORNO';
        v_SQL := v_SQL || ' , pr.num_seq_item';
        v_SQL := v_SQL || ' , pr.num_reembolso';
        v_SQL := v_SQL || ' , pr.sigla_moeda';
        v_SQL := v_SQL || ' , pr.cod_procedimento_cm item_medico ';
        v_SQL := v_SQL || ' , pr.cod_procedimento';
        v_SQL := v_SQL || ' , vp.nome_item nome_procedimento';
        v_SQL := v_SQL || ' , pr.qtd_informado';
        v_SQL := v_SQL || ' , pr.cod_tiss_unidade_medida';
        v_SQL := v_SQL || ' , pr.cod_tiss_unidade_medida_benef';
        v_SQL := v_SQL || ' , tum.desc_tiss_unidade_medida';
        v_SQL := v_SQL || ' , tumbenef.desc_tiss_unidade_medida as desc_tiss_uni_medida_benef';
        v_SQL := v_SQL || ' , tum.cod_termo';
        v_SQL := v_SQL || ' , tumbenef.cod_termo as cod_termo_benef';
        v_SQL := v_SQL || ' , pr.ind_funcao cod_funcao';
        v_SQL := v_SQL || ' , pr.cod_grupo_estatistico';
        v_SQL := v_SQL || ' , to_char(pr.val_calculado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_calculado';
        v_SQL := v_SQL || ' , to_char(pr.val_informado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_informado';
        v_SQL := v_SQL || ' , to_char(pr.val_reembolsado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_reembolsado';
        v_SQL := v_SQL || ' , to_char(pr.data_atendimento,''DD/MM/YYYY'')     dt_atendimento_proc';
        v_SQL := v_SQL || ' , NVL2(pr.hora_atendimento, SUBSTR(pr.hora_atendimento, 1, 2) || '':'' || SUBSTR(pr.hora_atendimento, 3, 4), pr.hora_atendimento) hr_atendimento_inicio';
        v_SQL := v_SQL || ' , NVL2(pr.hora_alta, SUBSTR(pr.hora_alta, 1, 2) || '':'' || SUBSTR(pr.hora_alta, 3, 4), pr.hora_alta) hr_atendimento_fim';
        v_SQL := v_SQL || ' , pr.ind_dhe';
        v_SQL := v_SQL || ' , pr.tipo_tecnica_utilizada ind_tecnica';
        v_SQL := v_SQL || ' , pr.ind_uti';
        v_SQL := v_SQL || ' , pr.ind_via';
        v_SQL := v_SQL || ' , pr.ind_doppler';
        v_SQL := v_SQL || ' , pr.ind_cirurgia';
        v_SQL := v_SQL || ' , pr.cod_motivo_glosa_man glosa_man';
        v_SQL := v_SQL || ' , mg.desc_motivo_glosa desc_motivo_glosa_man';
        v_SQL := v_SQL || ' , to_char(pr.val_glosa_man,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_glosa_man';
        v_SQL := v_SQL || ' , to_char(pr.val_glosa_man_calc,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_glosa_man_calc';
        v_SQL := v_SQL || ' , pr.qtd_aprovada';
        v_SQL := v_SQL || ' , pr.ind_situacao';
        v_SQL := v_SQL || ' , pr.txt_obs_glosa_man';
        v_SQL := v_SQL || ' , pr.ind_tipo_glosa_man';
        v_SQL := v_SQL || ' , pr.qtd_glosa_man';
        v_SQL := v_SQL || ' , pr.qtd_glosa';
        v_SQL := v_SQL || ' , to_char(pr.val_glosa,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_glosa_calc';
        v_SQL := v_SQL || ' , to_char(pr.val_franquia,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_franquia';
        v_SQL := v_SQL || ' , to_char(pr.val_aprovado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_aprovado';
        v_SQL := v_SQL || ' , to_char(pr.val_desc_copart,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_desc_copart';
        v_SQL := v_SQL || ' , to_char(pr.val_calculado_filme,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_calculado_filme';
        v_SQL := v_SQL || ' , pr.ind_insc_fiscal ind_insc_fiscal_prof';
        v_SQL := v_SQL || ' , pr.nome_profissional';
        v_SQL := v_SQL || ' , pr.num_crm num_crm_prof';
        v_SQL := v_SQL || ' , pr.sgl_uf_conselho uf_conselho_prof';
        v_SQL := v_SQL || ' , pr.sigla_conselho sigla_conselho_prof';
        v_SQL := v_SQL || ' , pr.num_insc_fiscal num_insc_fiscal_prof';
        v_SQL := v_SQL || ' , pr.ind_videolaparascopia';
        v_SQL := v_SQL || ' , pr.ind_videoendoscopia';
        v_SQL := v_SQL || ' , nvl(pr.ind_tipo_item,vp.tipo_item) ind_tipo_item';
    v_SQL := v_SQL || ' , vp.ind_tipo_mat_med';
        v_SQL := v_SQL || ' , tfa.cod_funcao || '' - '' || tfa.nome_funcao txt_funcao';
        v_SQL := v_SQL || ' , ge.nome_grupo_estatistico';
        v_SQL := v_SQL || ' , ge.cod_grupo_pai';
        v_SQL := v_SQL || ' , vp.tipo_item';
        v_SQL := v_SQL || ' , to_char(pr.dt_inclusao,''DD/MM/YYYY'')     dt_inclusao';
        v_SQL := v_SQL || ' , pr.cod_usuario_inclusao';
        v_SQL := v_SQL || ' , pr.ind_dobra_honorario';
        v_SQL := v_SQL || ' , pr.ind_negociacao_prest';
        v_SQL := v_SQL || ' , pr.cod_prestador_ts_neg';
        v_SQL := v_SQL || ' , pr.num_seq_item_negociacao';
        --GLOSA ANALISE
        v_SQL := v_SQL || ',(select count (*)';
        v_SQL := v_SQL || '  from   reembolso_glosa                a';
        v_SQL := v_SQL || '  where  a.num_reembolso                = :num_reembolso';
        v_SQL := v_SQL || '  and    nvl(a.num_seq_item,0)          = pr.num_seq_item';
        v_SQL := v_SQL || '  and    nvl(a.ind_analisado,''N'')     = ''N''';
        v_SQL := v_SQL || '  and    nvl(a.ind_glosa_manual,''N'')  = ''N''';
        v_SQL := v_SQL || '  ) QTD_GLOSA_ANALISE ';
        --GLOSA ANALISADA
        v_SQL := v_SQL || ',(select count (*)';
        v_SQL := v_SQL || '  from   reembolso_glosa                a';
        v_SQL := v_SQL || '  where  a.num_reembolso                = :num_reembolso';
        v_SQL := v_SQL || '  and    nvl(a.num_seq_item,0)          = pr.num_seq_item';
        v_SQL := v_SQL || '  and    nvl(a.ind_analisado,''N'')     = ''S''';
        v_SQL := v_SQL || '  and    nvl(a.ind_glosa_manual,''N'')  = ''N''';
        v_SQL := v_SQL || '  ) QTD_GLOSA_ANALISADA ';
        --VERIFICA SE PROCEDIMENTO POSSUI AUXILIAR OU ANESTESISTA NA TABELA CONTRATADA
        v_SQL := v_SQL || ' , case when mr.sigla_tabela_calc is not null then';
        v_SQL := v_SQL || '     ( select case when nvl(val.cod_porte,0) > 0 or nvl(val.qtd_auxiliares,0) > 0 then ''S'' else ''N'' end';
        v_SQL := v_SQL || '       from   valor_procedimento       val';
        v_SQL := v_SQL || '       where  val.sigla_tabela         = mr.sigla_tabela_calc';
        v_SQL := v_SQL || '       and    val.item_medico          = pr.cod_procedimento_cm';
        v_SQL := v_SQL || '     ) ';
        v_SQL := v_SQL || '   else ''N'' end ind_auxiliar_porte_anest';
        v_SQL := v_SQL || ' , mr.sigla_tabela_calc sigla_tabela_reembolso';
        v_SQL := v_SQL || ' , pr.cod_especialidade';
        v_SQL := v_SQL || ' , es.nome_especialidade';
        v_SQL := v_SQL || ' , nvl(im.ind_rol_procedimentos,''N'') ind_rol_procedimentos';
        v_SQL := v_SQL || ' , nvl(im.ind_diretriz,''N'') ind_diretriz';
        v_SQL := v_SQL || ' , nvl(im.ind_genetica,''N'') ind_genetica';
        --
        v_SQL := v_SQL || ' , (select LISTAGG(prc.cod_cid,'','') within group (order by prc.cod_cid) ';
        v_SQL := v_SQL || '    from   pedido_reemb_proc_cid prc  ';
        v_SQL := v_SQL || '    where  prc.num_reembolso = pr.num_reembolso and prc.num_seq_item = pr.num_seq_item ) as ind_cids ';
        --
        v_SQL := v_SQL || ' , (select count(*) ind_cid_2 from    PROCEDIMENTO_REEMBOLSO_CID where  item_medico = pr.cod_procedimento_cm ) as tot_cids ';
        --

        v_SQL := v_SQL || ' FROM  procedimento_reembolso    pr';
        v_SQL := v_SQL || '     , memoria_reembolso_detalhe mr';
        v_SQL := v_SQL || '     , vwm_procedimento          vp';
        v_SQL := v_SQL || '     , tipo_funcao_auxiliar      tfa';
        v_SQL := v_SQL || '     , motivo_glosa              mg';
        v_SQL := v_SQL || '     , grupo_estatistico         ge';
        v_SQL := v_SQL || '     , especialidade             es';
        v_SQL := v_SQL || '     , itens_medicos             im';
        v_SQL := v_SQL || '     , tiss_unidade_medida       tum';
        v_SQL := v_SQL || '     , tiss_unidade_medida       tumbenef';
        v_SQL := v_SQL || ' WHERE pr.num_reembolso          = :num_reembolso';
        v_SQL := v_SQL || ' AND   pr.num_reembolso          = mr.num_reembolso(+)';
        v_SQL := v_SQL || ' AND   pr.num_seq_item           = mr.num_seq_item(+)';
        v_SQL := v_SQL || ' AND   pr.cod_procedimento_cm    = vp.item_medico(+)';
        v_SQL := v_SQL || ' AND   pr.cod_procedimento_cm    = im.item_medico(+)';
        v_SQL := v_SQL || ' AND   pr.ind_funcao             = tfa.cod_funcao(+)';
        v_SQL := v_SQL || ' AND   pr.cod_motivo_glosa_man   = mg.cod_motivo_glosa(+)';
        v_SQL := v_SQL || ' AND   pr.cod_grupo_estatistico  = ge.cod_grupo_estatistico(+)';
        v_SQL := v_SQL || ' AND   pr.cod_especialidade      = es.cod_especialidade (+)';
        v_SQL := v_SQL || ' AND   pr.cod_tiss_unidade_medida = tum.cod_tiss_unidade_medida (+)';
        v_SQL := v_SQL || ' AND   pr.cod_tiss_unidade_medida_benef = tumbenef.cod_tiss_unidade_medida (+)';

        v_SQL := v_SQL || ' ORDER BY pr.num_seq_item';
        --
        add_parametro_sql ( p_nome_parametro => 'num_reembolso' , p_valor_parametro => p_num_reembolso );
        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'PROCEDIMENTO'
                                   , p_nome_coluna    => 'DADOS'
                                   );
    exception
    when others then
        --
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 0, 'Erro não previsto', 'Erro:' || chr(13) || ts_util.MsgErro || chr(13) || ts.top_utl_padrao.msgerro || chr(13) || 'v_SQL:' || chr(13) || v_SQL, 'RetornaItens' );
        --
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<PROCEDIMENTO><DADOS>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
        p_xml_retorno := p_xml_retorno || '</DADOS></PROCEDIMENTO>';
        return;
    END;
    --
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com as informações das Ocorrências
    ----------------------------------------------------------------------------
    function RetornaGrupoAnalise(p_num_reembolso in  number) return sys_refcursor
    is
    --Declarações:
    v_posicao               number;
    v_SQL                   varchar2(4000);
    c                       sys_refcursor;
    begin
        --Início
        v_posicao := 1;
        ---
        --Validação
        IF NVL(p_num_reembolso,0) = 0 THEN
            raise_application_error( -20001 , 'rb_reembolso.RetornaGrupoAnalise - Nº do Reembolso não informado');
        END IF;
        --
        v_posicao := 15;
        --Monta XML dos grupos de análise
        v_SQL := '';
        v_SQL := v_SQL || ' select b.nom_grupo                     , b.cod_grupo';
        v_SQL := v_SQL || '      , a.cod_usuario_liberacao         , a.txt_obs';
        v_SQL := v_SQL || '      , a.ind_situacao                  , a.num_seq_liberacao';
        v_SQL := v_SQL || '      , a.cod_usuario_encam';
        v_SQL := v_SQL || '      , to_char(a.dt_liberacao,''DD/MM/YYYY'')      dt_liberacao';
        v_SQL := v_SQL || '      , to_char(a.dt_encaminhamento,''DD/MM/YYYY'') dt_encaminhamento';
        v_SQL := v_SQL || ' from   pedido_reembolso_grupo          a';
        v_SQL := v_SQL || '      , reembolso_grupo_regra           b';
        v_SQL := v_SQL || ' where  a.num_reembolso                 = :num_reembolso';
        v_SQL := v_SQL || ' and    a.cod_grupo                     = b.cod_grupo';
        v_SQL := v_SQL || ' order by b.nom_grupo desc';
        --
        v_posicao := 16;
        --
        open  c
        for   v_SQL
        using p_num_reembolso;
        --
        return c;
    EXCEPTION
    WHEN OTHERS THEN
        ts_log_execucao ( 'RB_REEMBOSLO'
                        , 10
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                  || chr(13) || 'Erro-ORA:'               || ts_util.MsgErro
                                  || chr(13) || v_SQL
                        , 'RetornaGrupoAnalise' );
        --
        raise_application_error( -20001 , 'rb_reembolso.RetornaGrupoAnalise - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro);
    END;
    --
    --
    --
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com as glosas do Reembolso informado
    ----------------------------------------------------------------------------
    function RetornaGlosa ( p_num_reembolso         in  varchar2
                          , p_num_seq_item          in  number
                          )
    return sys_refcursor
    is
        --Declarações:
        v_parametro             varchar2(4000);
        v_SQL                   varchar2(4000);
        v_cod_retorno           number;
        v_msg_retorno           varchar2(4000);
        c                       sys_refcursor;
        v_posicao               pls_integer;
    begin
        --Início
        v_posicao := 10;
        v_parametro := 'p_num_reembolso = ' || p_num_reembolso;
        v_posicao := 20;
        v_parametro := 'p_num_seq_item = ' || p_num_seq_item;
        v_posicao := 30;
        --
        --Validação
        IF NVL(p_num_reembolso,0) = 0 THEN
           return get_cursor_vazio;
        END IF;
        --
        v_posicao := 40;
        --
        --Montar XML das s
        v_SQL :=  trim(' select a.cod_motivo_glosa                                                     ')
              || rtrim('      , nvl(b.desc_reembolso,b.desc_motivo_glosa) desc_motivo_glosa            ')
              || rtrim('      , num_seq_item                                                           ')
              || rtrim('      , a.txt_complemento                                                      ')
              || rtrim('      , a.cod_usuario_inclusao                                                 ')
              || rtrim('      , to_char(a.dt_inclusao,''dd/mm/yyyy'') dt_inclusao                      ')
              || rtrim('      , b.ind_tipo_glosa                                                       ')
              || rtrim('      , b.ind_implementado_rb                                                  ')
              || rtrim('      , b.ind_liberacao                                                        ')
              || rtrim('      , a.txt_obs                                                              ')
              || rtrim('      , nvl(a.ind_analisado,''N'')  ind_analisado                              ')
              || rtrim('      , a.cod_usuario_liberacao                                                ')
              || rtrim('      , a.dt_liberacao                                                         ')
              || rtrim('      , a.mot_liberacao                                                        ')
              || rtrim('      , a.solicitado_por         area_usuario_venda_benef                      ')
              || rtrim('      , c.cod_motivo_reembolso    motivo_reembolso_tab                         ')
              || rtrim('      , a.cod_tipo_acp                                                         ')
              || rtrim('      , trunc(c.dt_pedido)              dt_solicitacao                         ')
              || rtrim('      , c.cod_inspetoria_ts_contrato    cod_inspetoria_benef                   ')
              || rtrim(' from   reembolso_glosa                       a                                ')
              || rtrim('      , motivo_glosa                          b                                ')
              || rtrim('      , pedido_reembolso                      c                                ')
              || rtrim(' where  a.cod_motivo_glosa                    = b.cod_motivo_glosa             ')
              || rtrim(' and    a.num_reembolso                       = c.num_reembolso                ')
              || rtrim(' and    a.num_reembolso                       = :num_reembolso                 ')
              || rtrim(' and    a.num_seq_item                        = :num_seq_item                  ')
              || rtrim(' and    nvl(a.ind_glosa_manual,''N'')         = ''N''                          ')
              || rtrim(' order by a.cod_motivo_glosa                                                   ');
        --
        v_posicao := 50;
        --
        open  c
        for   v_Sql
        using p_num_reembolso
            , nvl(p_num_seq_item,0);
        --
        return c;
        --
    EXCEPTION
    WHEN OTHERS THEN
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO'
                        , v_posicao
                        , ts_util.MsgErro || ' - ' || ts.top_utl_padrao.msgerro
                        , 'Erro:' || chr(13) || ts_util.MsgErro || chr(13) || 'Parametros:' || chr(13) || v_parametro || chr(13) || v_SQL
                        , 'RetornaGlosa'
                        );
        --
        return get_cursor_vazio;
    END RetornaGlosa;
    --
    --
    -----------------------------------------
    -- Listar autorizações do beneficiário
    -----------------------------------------
    procedure RetornaAutorizacao ( p_num_associado  in  varchar2
                                 , p_cod_tratamento in  number default 0
                                 , p_ind_internado  in  varchar2 default 'N'
                                 , p_xml_retorno    out clob
                                 , p_dt_inicio      in  date
                                 , p_dt_fim         in  date
                                 , p_cod_situacao   in  number default 0
                                 )
    is
        --Declarações:
        v_SQL                   varchar2(4000);
    begin
        --Montar XML do pedidos
              v_SQL :=  trim (' select 0 COD_RETORNO                                                                 ')
                    || rtrim ('      , a.num_pedido                                                                  ')
                    || rtrim ('      , tt.nome_tratamento                                                            ')
                    || rtrim ('      , a.cod_cid_principal                                                           ')
                    || rtrim ('      , to_char(a.data_solicitacao,''dd/mm/yyyy'') data_solicitacao                   ')
                    || rtrim ('      , to_char(a.data_autorizacao,''dd/mm/yyyy'') data_autorizacao                   ')
                    || rtrim ('      , to_char(a.data_internacao,''dd/mm/yyyy'') data_internacao                     ')
                    || rtrim ('      , to_char(a.data_provavel_internacao,''dd/mm/yyyy'') data_provavel_internacao   ')
                    || rtrim ('      , nvl(ps.nome_prestador,a.nome_prestador) nome_executante                       ')
                    || RTRIM ('      , a.cod_situacao                                                                ')
                    || RTRIM ('      , asi.nom_situacao                                                              ')
                    || rtrim (' from   autorizacao          a                                                        ')
                    || rtrim ('      , tipo_tratamento      tt                                                       ')
                    || rtrim ('      , prestador_servico    ps                                                       ')
                    || rtrim ('      , ts.autorizacao_situacao asi                                                   ')
                    || rtrim (' where  a.cod_situacao       in (1, 2, 6, 7, 9,15, 16, 9, 22, 23)                                       ')
                    || RTRIM('  and    asi.cod_situacao        = a.cod_situacao                                                 ')
                    || rtrim (' and    a.num_associado      = :num_associado                                         ');

         IF p_dt_inicio  is not null and p_dt_fim is not null THEN
           v_SQL := v_SQL || RTRIM(' AND a.data_solicitacao between :dt_inicio AND :dt_fim');
         END IF;

        if p_cod_tratamento != 0 then
              v_SQL := v_SQL
                    || rtrim (' and    a.cod_tratamento     = :cod_tratamento                                        ');
        end if;

        IF  p_cod_situacao != 0 THEN
        v_SQL := v_SQL || RTRIM(' AND asi.cod_situacao = :cod_situacao ');
        END IF;
        if nvl(p_ind_internado,'N') = 'S' then
              v_SQL := v_SQL
                    || rtrim (' and    tt.ind_internado     = ''S''                                                  ');
        end if;
              v_SQL := v_SQL
                    || rtrim (' and    a.cod_tratamento     = tt.cod_tratamento                                      ')
                    || rtrim (' and    a.cod_prestador_exec = ps.cod_prestador_ts (+)                                ')
                    || rtrim (' order by a.data_autorizacao desc                                                     ');

         -- Adicionar parâmetros
        --
        add_parametro_sql ( p_nome_parametro => 'num_associado' , p_valor_parametro => p_num_associado );
        --
        if p_cod_tratamento != 0 then
            add_parametro_sql ( p_nome_parametro => 'cod_tratamento' , p_valor_parametro => p_cod_tratamento );
        end if;
         IF p_cod_situacao != 0 THEN
        add_parametro_sql(p_nome_parametro => 'cod_situacao', p_valor_parametro => p_cod_situacao);
    END IF;

     IF p_dt_inicio  is not null and p_dt_fim is not null THEN
       add_parametro_sql(p_nome_parametro => 'dt_inicio', p_valor_parametro => p_dt_inicio);
        add_parametro_sql(p_nome_parametro => 'dt_fim', p_valor_parametro => p_dt_fim);
    END IF;


        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'AUTORIZACAO'
                                   , p_nome_coluna    => 'DADOS'
                                   );
    exception
    when others then
        --
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 0, 'Erro não previsto', 'Erro:' || chr(13) || ts_util.MsgErro || chr(13) || ts.top_utl_padrao.msgerro || chr(13) || 'v_SQL:' || chr(13) || v_SQL, 'RetornaAutorizacao' );
        --
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<AUTORIZACAO><DADOS>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
        p_xml_retorno := p_xml_retorno || '</DADOS></AUTORIZACAO>';
        return;
    END;
    --
    procedure RetornaNumAutorizacao                 ( p_num_associado       in  varchar2
                                                    , p_num_pedido          in  varchar2
                                                    , p_msg_retorno         out varchar2)

    is
        --Declarações:
        v_possui                   number(1);
    begin
        --Montar XML do pedidos
         select 1
              into v_possui
              from   autorizacao          a
              where  a.num_pedido       = p_num_pedido
              and    a.num_associado      = p_num_associado;
         if v_possui = 1 then
            p_msg_retorno := '1';
         else
            p_msg_retorno := '0';
         end if;
        --
    exception
    when no_data_found then
           p_msg_retorno := '0';
    end;
    --
    function get_rsAcaoJudicial( p_xml_parametros in clob , p_ctr_logs in varchar2 default 'N' ) return sys_refcursor
    is
    result  sys_refcursor;
    tab_parans               top_utl_xml.tbl_fields;
    strQuery                 varchar2(32767);
    --
    cod_ts                   number;
    ind_tipo                 varchar2(1);
    num_associado            varchar2(17);
    cod_ts_contrato          varchar2(17);
    v_erro                   varchar2(500);
    --
    begin
       --
       tab_parans := top_utl_xml.toCollection( p_xml_parametros, 'consulta' );
       --
       if tab_parans.exists( 'cod_ts') then
          cod_ts := tab_parans('cod_ts').valor(1);
       else
          cod_ts :=null;
       end if;
       --
       if tab_parans.exists( 'ind_tipo') then
          ind_tipo := tab_parans('ind_tipo').valor(1);
       else
          ind_tipo :=null;
       end if;
       --
       if tab_parans.exists( 'num_associado') then
          num_associado := tab_parans('num_associado').valor(1);
       else
          num_associado :=null;
       end if;
       --
       if tab_parans.exists( 'cod_ts_contrato') then
          cod_ts_contrato := tab_parans('cod_ts_contrato').valor(1);
       else
          cod_ts_contrato :=null;
       end if;
       --
       --
       strquery := ' select /*ass_acao_judicial.get_rsDadosIniciais*/ ';
       strquery := strquery
       ||rtrim ('   aj.cod_ts, aj.cod_ts_contrato, aj.cod_acao_ts                        ')
       ||rtrim (' , to_char(dt_ini_acao, ''dd/mm/yyyy'') dt_ini_acao                     ')
       ||rtrim (' , to_char(dt_fim_acao, ''dd/mm/yyyy'') dt_fim_acao                     ')
       ||rtrim (' , aj.txt_obs, sa.nom_situacao, aj.num_processo                         ')
       ||rtrim (' , ( select nome_motivo_acao                                            ')
       ||rtrim ('       from motivo_acao_jud ma                                          ')
       ||rtrim ('      where aj.cod_motivo_acao = ma.cod_motivo_acao ) nome_motivo_acao  ')
       ;
       strquery := strquery
       ||rtrim (' from acao_jud_pgto aj                                                  ')
       ||rtrim ('    , situacao_associado sa                                             ')
       ;
       strquery := strquery
       ||rtrim (' where 1 = 1                                                            ')
       ||rtrim (' and aj.num_processo is not null                                        ')
       ||rtrim (' and aj.ind_situacao_durante = sa.ind_situacao                          ')
       ;
       --
       if ind_tipo = 'B' then
          if cod_ts is not null then
             strquery := strquery || ' and ( aj.cod_ts = :cod_ts
                                        or   aj.cod_ts_contrato = :cod_ts_contrato )
                                     ';
          else
             strquery := strquery || ' and nvl(:cod_ts,0) = 0 ';
             strquery := strquery || ' and nvl(:cod_ts_contrato,''X'') = ''X'' ';
          end if;
          strquery := strquery || ' and ( aj.ind_tipo = ''B'' or aj.ind_tipo = ''C'' ) ';
       else
          strquery := strquery || ' and nvl(:cod_ts,0) = 0 ';
          if cod_ts_contrato is not null then
             strquery := strquery || ' and aj.cod_ts_contrato = :cod_ts_contrato ';
          else
             strquery := strquery || ' and nvl(:cod_ts_contrato,''X'') = ''X'' ';
          end if;
          strquery := strquery || ' and aj.ind_tipo = ''C'' ';
       end if;
       --
       if num_associado is not null then
          strquery := strquery || ' and aj.num_associado = :num_associado ';
       else
          strquery := strquery || ' and nvl(:num_associado,''X'') = ''X'' ';
       end if;
       --
       strquery := strquery ||' order by to_date(dt_ini_acao, ''dd/mm/yyyy'') desc ';
       --
       if nvl(p_ctr_logs,'N') = 'S' then
          ts_log_execucao ('RB_REEMBOSLO', null, ts_util.MsgErro, strQuery ||'--'|| p_xml_parametros, 'Query');
       end if;
       --
       --
       begin
          open result
           for strquery
         using cod_ts
             , cod_ts_contrato
             , num_associado
             ;
       exception
          when no_data_found then null;
       end;
       --
       return result;
       --
    exception
       when others then
          v_erro := ts_util.MsgErro;
          ts_log_execucao ('RB_REEMBOSLO', null, v_erro, strQuery || ' -- xml =' || p_xml_parametros, 'Erro') ;
          raise;
    end;
    --
  function get_rs_pesquisa_protocolo            (  p_num_associado          in  varchar2 , p_num_protocolo in varchar2 ) RETURN sys_refcursor
  is
    --Declarações:
    v_SQL         varchar2(32000);
    rSet          sys_refcursor;
    tab_parans    top_utl_xml.tbl_fields;
    v_posicao     pls_integer;
  begin
    --
    v_posicao := 10;
    --
    v_SQL := '';
    v_SQL := v_SQL || ' SELECT nvl(a.num_protocolo_ans,a.num_protocolo) num_protocolo ';
    v_SQL := v_SQL || '      , to_char(a.dt_pedido,''dd/mm/yyyy'') as dt_pedido';
    v_SQL := v_SQL || '      , a.num_envelope';
    v_SQL := v_SQL || '      , a.cod_tipo_envio_envelope';
    v_SQL := v_SQL || '      , to_char(a.dt_envelope,''dd/mm/yyyy'') as dt_envelope';
    v_SQL := v_SQL || '      , a.nome_associado';
    v_SQL := v_SQL || '      , a.num_associado';
    v_SQL := v_SQL || '      , null situacao';
    v_SQL := v_SQL || '      , null num_reembolso';
    v_SQL := v_SQL || '      , a.nome_favorecido';
    v_SQL := v_SQL || ' from protocolo_reembolso a';
    v_SQL := v_SQL || ' where not exists  ( select null  ';
    v_SQL := v_SQL || '   from pedido_reembolso b ';
    v_SQL := v_SQL || '   where b.ind_situacao in (select cod_situacao from situacao_reembolso  where cod_fase_processo not in (1,6)';
    v_SQL := v_SQL || '                             and   a.num_protocolo    = b.num_protocolo ) ';
    v_SQL := v_SQL || '  )';
    v_SQL := v_SQL || ' and  exists  ( select null ';
    v_SQL := v_SQL || '                 from pedido_reembolso c ';
    v_SQL := v_SQL || '                 where c.num_titular = :p_num_associado ';
    v_SQL := v_SQL || '                 and   a.num_protocolo    = c.num_protocolo  ) ';
    --
    v_posicao := 20;
    --
    if p_num_protocolo is not null then
        v_SQL := v_SQL || ' and   (a.num_protocolo = :p_num_protocolo ';
        v_SQL := v_SQL || '  or    a.num_protocolo_ans = :p_num_protocolo) ';
    else
        v_SQL := v_SQL || ' and ( ''0''     = :p_num_protocolo ';
        v_SQL := v_SQL || ' or   ''0''     = :p_num_protocolo )';
    end if;
    --
    v_posicao := 30;
    --
    v_SQL := v_SQL || ' order by num_protocolo desc ';
    --
    v_posicao := 40;
    --
    open rSet
    for v_SQL
    using p_num_associado
        , case when p_num_protocolo is not null then p_num_protocolo   else '0' end
        , case when p_num_protocolo is not null then p_num_protocolo   else '0' end
        ;
    --
    return rSet;
    --
  EXCEPTION
    WHEN OTHERS THEN
        ts_log_execucao ( 'RB_REEMBOSLO'
                        , v_posicao
                        , ts_util.MsgErro || ' - ' || ts.top_utl_padrao.msgerro
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                  || chr(13) || 'Erro-ORA:'               || ts_util.MsgErro
                                  || chr(13) || v_SQL
                        , 'get_rs_pesquisa_protocolo'
                        );
        --
        raise_application_error( -20001 , 'rb_reembolso.RetornaGrupoAnalise - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro );
        return get_cursor_vazio;
        --
  END get_rs_pesquisa_protocolo;
  --
  ----------------------------------------------------------------------------
    -- Retorna dados de contato cadastrado
    ----------------------------------------------------------------------------
    function RetornaContatoReembolso(p_num_reembolso in  number) return sys_refcursor
    is
    --Declarações:
    v_posicao               number;
    v_SQL                   varchar2(4000);
    c                       sys_refcursor;
    begin
        --Início
        v_posicao := 1;
        --Monta XML dos grupos de análise
        v_SQL := '';
        v_SQL := v_SQL || ' select nvl(ind_tipo_emissao,''I'') ind_tipo_emissao';
        v_SQL := v_SQL || '      , txt_num_fax';
        v_SQL := v_SQL || '      , txt_ddd_fax';
        v_SQL := v_SQL || '      , txt_ramal_fax';
        v_SQL := v_SQL || '      , txt_email';
        v_SQL := v_SQL || ' from   pedido_reembolso';
        v_SQL := v_SQL || ' where  num_reembolso                 = :num_reembolso';
        --
        open  c
        for   v_SQL
        using p_num_reembolso;
        --
        return c;
    EXCEPTION
    WHEN OTHERS THEN
        ts_log_execucao ( 'RB_REEMBOLSO'
                        , 10
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                  || chr(13) || 'Erro-ORA:'               || ts_util.MsgErro
                                  || chr(13) || v_SQL
                        , 'retornaContato' );
        --
        raise_application_error( -20001 , 'rb_reembolso.RetornaContatoReembolso - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro);
    END;

    --

    procedure get_ind_courrier      (  p_xml_filtro          in  clob
                                    ,  p_ind_courrier        out varchar2
                                    )
      is
        --Declarações:
        v_SQL            varchar2(32000);
        rSet             sys_refcursor;
        tab_parans       top_utl_xml.tbl_fields;
      begin

      --
        tab_parans := ts.top_utl_xml.toCollection( p_xml_filtro , 'parametros' ); -- Retorna um MAP ( chave , valor ) com os nos do XML;
        --
        if  not tab_parans.exists('sCodPlano'               ) then tab_parans('sCodPlano'           ).valor(1) := null;
        end if;
        --
        if  not tab_parans.exists('sNumAssociado'           ) then tab_parans('sNumAssociado'       ).valor(1) := null;
        end if;
        --
        if  not tab_parans.exists('sCodTs'                  ) then tab_parans('sCodTs'              ).valor(1) := null;
        end if;
        --
        if  not tab_parans.exists('sCodTsContrato'          ) then tab_parans('sCodTsContrato'      ).valor(1) := null;
        end if;
        --
        p_ind_courrier := 'N';
        --
        if tab_parans('sCodPlano').valor(1) is not null then
            begin
                select ind_courier_reembolso
                  into p_ind_courrier
                  from plano_medico
                 where cod_plano = tab_parans('sCodPlano').valor(1);
            exception
                when others then
                    p_ind_courrier := 'N';
            end;
        end if;
        --
        if tab_parans('sCodTsContrato').valor(1) is not null and p_ind_courrier = 'N' then
            begin
                select ind_courier_reembolso
                  into p_ind_courrier
                  from contrato_adesao_plano
                 where cod_ts_contrato = tab_parans('sCodTsContrato').valor(1);
            exception
                when others then
                    p_ind_courrier := 'N';
            end;
        end if;
        --
        if tab_parans('sCodTs').valor(1) is not null and p_ind_courrier = 'N' then
            begin
                select ind_courier_reembolso
                  into p_ind_courrier
                  from beneficiario_contrato
                 where cod_ts = tab_parans('sCodTs').valor(1);
            exception
                when others then
                    p_ind_courrier := 'N';
            end;
        end if;
        --
        --return v_ind_courrier;
        --
      EXCEPTION
        WHEN OTHERS THEN
            raise;
      END;
      --
      ----------------------------------------------------------------------------
    -- Enviar fax
    ----------------------------------------------------------------------------
    procedure processar_comunicacao_fax ( p_cod_retorno          out pls_integer
                                        , p_msg_retorno          out varchar2
                                        , p_seq_comunicacao      out pls_integer
                                        , p_xml_parametro        in  clob
                                        )
    is
        v_cod_usuario       usuario.cod_usuario%type;
        v_num_pedido        autorizacao.num_pedido%type;
        v_num_ddd_fax       autorizacao.num_ddd_fax%type;
        v_num_fax           autorizacao.num_fax%type;
        tab_dados           top_utl_xml.tbl_fields;
    begin
        --
        --Passar o XML informado para uma coleção
        tab_dados := ts.top_utl_xml.toCollection(p_xml_parametro);
        --
        v_num_pedido    := case when tab_dados.exists( 'numReembolso'   ) and tab_dados( 'numReembolso'  ).valor(1) is not null then tab_dados( 'numReembolso'   ).valor(1) else null end;
        v_num_ddd_fax   := case when tab_dados.exists( 'numDDDFax'   ) and tab_dados( 'numDDDFax'  ).valor(1) is not null then tab_dados( 'numDDDFax'   ).valor(1) else null end;
        v_num_fax       := case when tab_dados.exists( 'numFax'      ) and tab_dados( 'numFax'     ).valor(1) is not null then tab_dados( 'numFax'      ).valor(1) else null end;
        v_cod_usuario   := case when tab_dados.exists( 'codUsuario'  ) and tab_dados( 'codUsuario' ).valor(1) is not null then tab_dados( 'codUsuario'  ).valor(1) else null end;
        --
        --
        if v_num_fax is null then return;
        end if;
        --
        v_num_fax := to_number(replace(v_num_fax,'-'));
        --
        select com_registro_seq.nextval
        into   p_seq_comunicacao
        from   dual;
        --

        insert
        into com_registro   ( seq_comunicacao       , ind_situacao      , dat_registro      , dat_atu
                            , ind_enviar_email      , ind_enviar_sms    , ind_enviar_tweet  , ind_enviar_fax
                            , cod_tipo_comunicacao)
        values              ( p_seq_comunicacao     , '0'               , sysdate           , sysdate
                            , 'N'                   , 'N'               , 'N'               ,'S'
                            , 2);
        --
        insert
        into com_fax       ( seq_comunicacao        , ind_situacao      , dat_envio         , pais
                           , ddd                    , numero            , retorno)
        values             ( p_seq_comunicacao      , '0'               , null              , 55
                           , v_num_ddd_fax          , v_num_fax         , null);
        --
        commit;
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
    end;
    --
    ----------------------------------------------------------------------------
    -- Chamar WebService para envio de FAX
    ----------------------------------------------------------------------------
    procedure enviar_fax ( p_cod_retorno      out number
                         , p_msg_retorno      out varchar2
                         , p_xml_dados        in clob
                         , p_xml_arquivos     in clob
                         )
    is
        --
        v_seq_comunicacao       pls_integer;
        v_XML                   clob;
        v_resultado             varchar2(4000);
        v_wsdl_url              controle_sistema.val_parametro%type;
        v_data                  varchar2(20)   := to_char(sysdate,'dd/mm/yyyy hh24:mi:ss');
        v_hash                  varchar2(100)  := '';
        v_orientacao            varchar2(50)   := '';
        v_arquivo               varchar2(4000) := '';
        v_qtd_arquivo           pls_integer    := 0;
        tab_dados               top_utl_xml.tbl_fields;
        --
        cursor cur_arquivos      (pXML in sys.XMLType)
        is
        select /*+cardinality(T,10)*/ extractValue( VALUE(T) , '//nome_arquivo') nome_arquivo
             , extractValue( VALUE(T) , '//orientacao'  ) orientacao
        from   table ( xmlsequence ( extract(pXML,'/arquivos/detalhe') ) ) T;
        --
        V_XMLType                          sys.XMLType;
        --
    begin
        --
        --Passar o XML informado para uma coleção
        tab_dados := ts.top_utl_xml.toCollection(p_xml_dados);
        --
        if not tab_dados.exists( 'numReembolso' ) or tab_dados( 'numReembolso' ).valor(1) is null then
            p_cod_retorno := 9;
            p_msg_retorno := 'Reembolso não informada';
            return;
        end if;
        --
        if not tab_dados.exists( 'numDDDFax' ) or tab_dados( 'numDDDFax' ).valor(1) is null then
            p_cod_retorno := 9;
            p_msg_retorno := 'DDD do Fax não informado';
            return;
        end if;
        --
        if not tab_dados.exists( 'numFax' ) or tab_dados( 'numFax' ).valor(1) is null then
            p_cod_retorno := 9;
            p_msg_retorno := 'Número do Fax não informado';
            return;
        end if;
        --
        --
        tab_dados( 'numFax'    ).valor(1) := to_number(replace(tab_dados( 'numFax'    ).valor(1),'-'));
        --
        -- Atualizar FAX
        update pedido_reembolso
        set    txt_num_fax      = tab_dados( 'numFax'    ).valor(1)
             , txt_ddd_fax      = tab_dados( 'numDDDFax' ).valor(1)
             , ind_tipo_emissao = 'F'
        where  num_reembolso    = tab_dados( 'numReembolso' ).valor(1);
        --
        -- Processar Comunicação (Está com erro ao enviar FAX)
        --processar_comunicacao ( p_cod_retorno, p_msg_retorno, v_seq_comunicacao, p_xml_dados );
        processar_comunicacao_fax ( p_cod_retorno, p_msg_retorno, v_seq_comunicacao, p_xml_dados );
        --
        --
        -- Montar o HASH
        select lower(TS_MD5('SISAMIL' || v_data || 'tld123'))
        into   v_hash
        from   dual;
        --
        -- Montar string dos arquivos + orientação
        --
        V_XMLType := sys.XMLType.createXML( p_xml_arquivos );
        --
        for rc_arquivos in cur_arquivos ( V_XMLType ) loop
            v_qtd_arquivo := v_qtd_arquivo + 1;
            v_arquivo     := v_arquivo    || case when v_qtd_arquivo > 1 then ';' else '' end || rc_arquivos.nome_arquivo;
            v_orientacao  := v_orientacao || case when v_qtd_arquivo > 1 then ';' else '' end || rc_arquivos.orientacao;
        end loop;
        --
        --Montar XML para chamada do WebService
        --http://tempuri.org/WSTeledata/recepcaofax
        v_xml := '<rec:DadosFax xmlns:rec="http://tempuri.org/WSTeledata/recepcaofax">
                     <rec:Login>SISAMIL</rec:Login>
                     <rec:DataHora>'      || v_data                           || '</rec:DataHora>
                     <rec:Hash>'          || v_hash                           || '</rec:Hash>
                     <rec:idSolicitacao>' || v_seq_comunicacao                || '</rec:idSolicitacao>
                     <rec:DDD>'           || tab_dados( 'numDDDFax').valor(1) || '</rec:DDD>
                     <rec:Tel>'           || tab_dados( 'numFax'   ).valor(1) || '</rec:Tel>
                     <rec:Ramal>'         || tab_dados( 'numRamal' ).valor(1) || '</rec:Ramal>
                     <rec:QdeDocs>'       || lpad(v_qtd_arquivo,2,'0')        || '</rec:QdeDocs>
                     <rec:Path>'          || v_arquivo                        || '</rec:Path>
                     <rec:Orientacao>'    || v_orientacao                     || '</rec:Orientacao>
                  </rec:DadosFax>';
        --
        ------------------------------------------------------------------------
        -- RECUPERAR A URL DO WSDL
        ------------------------------------------------------------------------
        RetornaParametro ('TS_WSDL_URL_FAX', v_wsdl_url, '');
        if v_wsdl_url = '' then
            p_cod_retorno := 9;
            p_msg_retorno := 'Parâmetro "TS_WSDL_URL_FAX" não cadastrado na tabela de parâmetros';
            return;
        end if;
        --
        --Chamar o WebService do FAX
        CALL_WS( p_wsdl_url     => v_wsdl_url
               , p_namespace    => 'http://tempuri.org/WSTeledata/recepcaofax'
               , p_service      => 'Enviofax'
               , p_port         => 'EnviofaxSoap'
               , p_operation    => 'DadosFax'
               , p_msg          => v_XML
               , p_resultado    => v_resultado
               , p_cod_retorno  => p_cod_retorno
               , p_msg_retorno  => p_msg_retorno
               );
        --
        if p_cod_retorno != 0 then
            ts_log_execucao ( 'RB_REEMBOLSO'
                            , 10
                            , 'Erro não previsto ao enviar FAX'
                            , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                      || chr(13) || 'Erro-ORA:'  || ts_util.MsgErro
                                      || chr(13) || 'XML ENVIO:' || v_xml
                                      || chr(13) || 'WSDL:'      || v_wsdl_url
                                      || chr(13) || 'XML Dados:' || p_xml_dados
                                      || chr(13) || 'XML Arq:'   || p_xml_arquivos
                                      || chr(13) || 'MSGRetorno:'|| p_msg_retorno
                            , 'enviar_fax' );
            --
        end if;
        --
        commit;
        --
        --
    exception
    when others then
        --
        ts_log_execucao ( 'RB_REEMBOLSO'
                        , 10
                        , 'Erro não previsto ao enviar FAX'
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                  || chr(13) || 'Erro-ORA:'  || ts_util.MsgErro
                                  || chr(13) || 'XML ENVIO:' || v_xml
                                  || chr(13) || 'WSDL:'      || v_wsdl_url
                                  || chr(13) || 'XML Dados:' || p_xml_dados
                                  || chr(13) || 'XML Arq:'   || p_xml_arquivos
                                  || chr(13) || 'MSGRetorno:'|| p_msg_retorno
                        , 'enviar_fax' );
        --
        --
        p_cod_retorno := 9;
        p_msg_retorno := 'Erro ao enviar fax : ' || ts.top_utl_padrao.msgerro || ' ( ' || ts_util.MsgErro || ' ) ';
        rollback;
        return;
    end;
    ----------------------------------------------------------------------------
    -- Retornar Nº pedido no SisAmil
    ----------------------------------------------------------------------------
    procedure get_num_pedido_cam    ( p_num_pedido                out    varchar2
                                    , p_cod_situacao              out    pls_integer
                                    , p_num_reembolso_operadora   in     varchar2
                                    , p_num_associado             in     varchar2
                                    )
    is
    begin
        --
        begin
            --
            select p.num_reembolso      , p.ind_situacao
            into   p_num_pedido         , p_cod_situacao
            from   pedido_reembolso     p
            where  p.num_reembolso         = p_num_reembolso_operadora
            and    p.num_associado         = p_num_associado;
            --
        exception
        when no_data_found then
            p_num_pedido  := '';
        end;
        --
        return;
        --
    exception
    when others then
    ts_log_execucao ( 'RB_REEMBOLSO'
                    , 10
                    , 'Erro não previsto'
                    , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                              || chr(13) || ts_util.MsgErro
                              || chr(13) || 'p_num_reembolso_operadora:'    || p_num_reembolso_operadora
                    , 'get_num_pedido_cam' );
    end;
    --

    ----------------------------------------------------------------------------
    -- Retorna xml com os motivos de recusa / negativa
    ----------------------------------------------------------------------------
    procedure RetornaMotivo(p_cod_motivo            in  number
                           ,p_xml_retorno           out clob)

    is

    --Declarações:
    v_posicao               number;
    v_SQL                   varchar2(4000);
    v_item_vazio            varchar2(3) := '¿¿¿';
    v_cod_retorno           number;
    v_msg_retorno           varchar2(4000);

    qryCtx                  DBMS_XMLGEN.ctxHandle;

    begin
        --Início

        v_posicao := 1;
        --Validação
        IF NVL(p_cod_motivo,0) = 0 THEN
            v_msg_retorno := 'Código do motivo não informado';
            goto trata_retorno_erro;
        END IF;

        v_posicao := 10;

        --Montar XML dos motivos
        v_SQL := '';
        v_SQL := v_SQL || ' SELECT  0 COD_RETORNO,';
        v_SQL := v_SQL || '         a.cod_motivo, a.desc_motivo, a.txt_mensagem, a.ind_tipo,';
        v_SQL := v_SQL || '         a.txt_justificativa, nvl(a.ind_carencia,''N'') ind_carencia, nvl(a.ind_exibe_canais_digitais, ''N'') ind_exibe_canais_digitais, ind_habilitado';
        v_SQL := v_SQL || '    FROM ts.REEMBOLSO_MOTIVO_INDEF a';
        v_SQL := v_SQL || '   WHERE a.cod_motivo = :cod_motivo';

        v_posicao := 12;

        qryCtx := dbms_xmlgen.newContext(v_SQL);
        dbms_xmlgen.setBindValue(qryCtx, 'cod_motivo', p_cod_motivo);
        dbms_xmlgen.setCheckInvalidChars(qryCtx, TRUE);
        dbms_xmlgen.useNullAttributeIndicator(qryCtx, TRUE);
        dbms_xmlgen.setRowSetTag ( qryCtx, 'MOTIVO');
        dbms_xmlgen.setRowTag (qryCtx, 'DADOS');
        p_xml_retorno := dbms_xmlgen.getXML(qryCtx);
        dbms_xmlgen.closeContext(qryCtx);

        return;

        <<trata_retorno_erro>>

        v_cod_retorno := 9;
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<MOTIVO>';
        p_xml_retorno := p_xml_retorno || '<DADOS>';
        p_xml_retorno := p_xml_retorno || '<COD_RETORNO>' || v_cod_retorno || '</COD_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || v_msg_retorno || '</MSG_RETORNO>';
        p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
        p_xml_retorno := p_xml_retorno || '</DADOS>';
        p_xml_retorno := p_xml_retorno || '</MOTIVO>';

        return;

    EXCEPTION
        WHEN OTHERS THEN
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<MOTIVO>';
            p_xml_retorno := p_xml_retorno || '<DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || '</MSG_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
            p_xml_retorno := p_xml_retorno || '</DADOS>';
            p_xml_retorno := p_xml_retorno || '</MOTIVO>';

            return;
    END;

       ----------------------------------------------------------------------------
    -- Gravar os motivos de indeferimento
    ----------------------------------------------------------------------------
    PROCEDURE GravaMotivo(p_ind_acao              in   varchar2,
                          p_cod_motivo            in   number,
                          p_ind_tipo              in   varchar2,
                          p_desc_motivo           in   varchar2,
                          p_txt_mensagem          in   varchar2,
                          p_txt_justificativa     in   varchar2,
                          p_ind_carencia          in   varchar2,
                          p_ind_exibe_canais_digitais   in   varchar2,
                          p_ind_habilitado        in   varchar2,
                          p_cod_retorno           out  number,
                          p_msg_retorno           out  varchar2) is

    v_posicao       number;
    v_item_vazio    varchar2(3) := '¿¿¿';
    v_qtd           number;

    begin

    v_posicao := 0;

    ---------------------------------------------------------------------------------

    v_posicao := 1;

    if nvl(p_cod_motivo,0) = 0 then
        p_cod_retorno := 1;
        p_msg_retorno := 'Código do motivo não informada';
        return;
    end if;

    v_posicao := 2;

    if nvl(p_desc_motivo,v_item_vazio) = v_item_vazio then
        p_cod_retorno := 1;
        p_msg_retorno := 'Descrição do motivo não informado';
        return;
    end if;

    if nvl(p_ind_tipo,v_item_vazio) = v_item_vazio then
        p_cod_retorno := 1;
        p_msg_retorno := 'Tipo do motivo não informado';
        return;
    end if;

    if p_ind_tipo NOT in ('R', 'C', 'X', 'A') then
        p_cod_retorno := 1;
        p_msg_retorno := 'Indicador do tipo inválido (' || p_ind_tipo || ')';
        return;
    end if;

    if p_ind_acao NOT in ('A', 'I', 'E') then
        p_cod_retorno := 1;
        p_msg_retorno := 'Indicador do tipo de ação inválido (' || p_ind_acao || ')';
        return;
    end if;

    v_posicao := 3;

    if p_ind_acao in ('A', 'I') then
        select count(*) into v_qtd
          from REEMBOLSO_MOTIVO_INDEF
           where UPPER(desc_motivo) = UPPER(p_desc_motivo)
             and cod_motivo <> p_cod_motivo;
        if v_qtd > 0 then
            p_cod_retorno := 1;
            p_msg_retorno := 'Descrição já utilizada para outro motivo';
            return;
        end if;
    end if;

    v_posicao := 4;

    if p_ind_acao = 'I' then

        begin
            insert into ts.REEMBOLSO_MOTIVO_INDEF
                            (cod_motivo,       desc_motivo,     ind_tipo,
                             txt_mensagem, txt_justificativa, ind_carencia, ind_exibe_canais_digitais,
                             ind_habilitado)
                 values     (p_cod_motivo,     p_desc_motivo,   p_ind_tipo,
                             p_txt_mensagem, p_txt_justificativa, nvl(p_ind_carencia,'N'), nvl(p_ind_exibe_canais_digitais,'N'),
                             nvl(p_ind_habilitado, 'S'));
        exception
            when dup_val_on_index then
                p_cod_retorno := 9;
                p_msg_retorno := 'Erro ao realizar inclusão do motivo: ' || ts_util.MsgErro;
                rollback;
        end;
    elsif p_ind_acao = 'A' then
        begin
            update ts.REEMBOLSO_MOTIVO_INDEF set
                   desc_motivo  = p_desc_motivo,
                   txt_mensagem = p_txt_mensagem,
                   ind_tipo     = p_ind_tipo,
                   txt_justificativa = p_txt_justificativa,
                   ind_carencia = nvl(p_ind_carencia,'N'),
                   ind_exibe_canais_digitais = nvl(p_ind_exibe_canais_digitais, 'N'),
                   ind_habilitado = nvl(p_ind_habilitado, 'S')
             where cod_motivo   = p_cod_motivo;
        exception
            when others then
                p_cod_retorno := 9;
                p_msg_retorno := 'Erro ao realizar alteração do motivo: ' || ts_util.MsgErro;
                rollback;
        end;
    elsif p_ind_acao = 'E' then

        --Validar se existe algum reembolso com o motivo
        select count(*) into v_qtd
          from ts.pedido_reembolso
           where cod_motivo_indeferimento = p_cod_motivo;
        if v_qtd > 0 then
            p_cod_retorno := 1;
            p_msg_retorno := 'Motivo não pode ser excluído pois está sendo utilizado por um reembolso';
            return;
        end if;

        begin
            delete from ts.REEMBOLSO_MOTIVO_INDEF
             where cod_motivo = p_cod_motivo;
        exception
            when others then
                p_cod_retorno := 9;
                p_msg_retorno := 'Erro ao realizar exclusão do motivo: ' || ts_util.MsgErro;
                rollback;
        end;
    end if;

    p_cod_retorno := 0;
    p_msg_retorno := null;

    commit;

    exception
        when others then

             p_cod_retorno := 9;
             p_msg_retorno := 'GravarMotivo - ' || v_posicao || ': ' || ts_util.MsgErro;
             rollback;

    end;
    --
    procedure getQtdFamilia                         ( p_cod_ts                      in   number
                                                    , p_qtd_familia                 out  number
                                                    )
    is
        v_cod_ts_tit number;
    begin
        --Início
        begin
         select cod_ts_tit
           into v_cod_ts_tit
           from associado
          where cod_ts = p_cod_ts;
        exception
            when others then
                p_qtd_familia := 0;
                return;
        end;
        --
        select count(*)
          into p_qtd_familia
          from associado
         where cod_ts_tit = v_cod_ts_tit;

        return;

    EXCEPTION
        WHEN OTHERS THEN
            p_qtd_familia := 0;
            return;
    END;
    --
    --
    procedure get_dados_prazo_pgto       ( p_cod_retorno                  in out nocopy number
                                         , p_msg_retorno                  in out nocopy clob
                                         , p_xml_param                    in            clob
                                         , p_qtd_dias_pgto_rbm               out        number
                                         , p_ind_tipo_dia                    out        varchar2
                                         , p_dt_provavel_pgto                out        date
                                         )
    is
     tab_parans             top_utl_xml.tbl_fields;
     tab_parans2            top_utl_xml.tbl_fields;
     --
     v_cod_sucursal         sucursal.cod_sucursal%type;
     v_cod_municipio        municipio.cod_municipio%type;
     v_cod_inspetoria_ts    inspetoria.cod_inspetoria_ts%type;
     --
     v_qtd_dias_pgto_rbm    number;
     v_ind_tipo_dia         varchar2(1);
     v_data_base            varchar2(10);
     v_dt_provavel_pgto     varchar2(10);
     v_date                 date;
     v_ind_mandatario       varchar2(2);
     --
     v_ind_tipo_dia_aux         varchar2(1);
     v_qtd_dias_pgto_rbm_aux    number;
     --
     v_xml_dados            clob;
     v_xml_prazo_cam        clob;
     --
     v_cod_retorno          number;
     v_msg_retorno          clob;

     v_qtd_dias             number;
     v_horario              varchar2(5);
     v_now                  varchar2(5);
    begin
         --
         tab_parans := top_utl_xml.toCollection( p_xml_param , 'parametros' );
         --
         if  not tab_parans.exists('codTsContrato'                 ) then tab_parans('codTsContrato').valor(1) := null;
         end if;
         --
         if  not tab_parans.exists('codPlano'                      ) then tab_parans('codPlano').valor(1) := null;
         end if;
         --
         if  not tab_parans.exists('codInspetoriaTs'               ) then tab_parans('codInspetoriaTs').valor(1) := null;
         end if;
         --
         if  not tab_parans.exists('codOperadora'                  ) then tab_parans('codOperadora').valor(1) := null;
         end if;
         --
         if  not tab_parans.exists('codMotivoReembolso'            ) then tab_parans('codMotivoReembolso').valor(1) := null;
         end if;
         --
         if  not tab_parans.exists('indTipoReembolso'              ) then tab_parans('indTipoReembolso').valor(1) := null;
         end if;
         --
         if  not tab_parans.exists('indCourrier'                   ) then tab_parans('indCourrier').valor(1) := 'N';
         end if;
         --
         if  not tab_parans.exists('dataSolicitacao'               ) then tab_parans('dataSolicitacao').valor(1) := null;
         end if;
         --
         if  not tab_parans.exists('indOrigemAssociado'            ) then tab_parans('indOrigemAssociado').valor(1) := null;
         end if;
         --
         if  not tab_parans.exists('numAssociado'                   ) then tab_parans('numAssociado').valor(1) := null;
         end if;
         --
        /* if tab_parans('dataSolicitacao').valor(1) is not null then
            tab_parans('dataSolicitacao').valor(1) := to_date(tab_parans('dataSolicitacao').valor(1), 'DD/MM/YYYY');
         end if;*/
         --





         v_cod_inspetoria_ts := tab_parans('codInspetoriaTs').valor(1);
         --
         begin
            select cod_sucursal
              into v_cod_sucursal
              from inspetoria
             where cod_inspetoria_ts = v_cod_inspetoria_ts;
        exception
         when others then
            v_cod_sucursal := null;
        end;
        --
        begin
            select qtd_dias_pgto
                 , ind_tipo_dia
                 , ind_mandatario
              into v_qtd_dias_pgto_rbm_aux
                 , v_ind_tipo_dia_aux
                 , v_ind_mandatario
              from ts.padrao_reembolso_prazo_pgto
             where cod_inspetoria_ts = v_cod_inspetoria_ts
               and cod_operadora     = tab_parans('codOperadora').valor(1)
               and cod_motivo        = tab_parans('codMotivoReembolso').valor(1);
        exception
            when others then
                v_qtd_dias_pgto_rbm_aux := null;
                v_ind_tipo_dia_aux      := null;
                v_ind_mandatario        := null;
        end;




        if nvl(v_ind_mandatario,'N') = 'N' then
            --
            -- Buscar o valor registrado no contrato
            --
            if tab_parans('indOrigemAssociado').valor(1) = 'BD' then
                --------------------------------------------------------------------------------
                --
                -- verifica se o valor foi inserido no contrato com validação de tipo de reembolso
                --
                begin
                    select  qtd_dias_pgto_rbm
                        ,   ind_tipo_dia
                    into    v_qtd_dias_pgto_rbm
                        ,   v_ind_tipo_dia
                    from    prazo_pgto_reembolso pgr
                    where   pgr.cod_ts_contrato         = tab_parans('codTsContrato').valor(1)
                      and   pgr.cod_plano               = tab_parans('codPlano').valor(1)
                      and   pgr.dt_ini_vigencia         = ( select max(cc.dt_ini_cobranca)
                                                         from contrato_cobranca cc
                                                        where cc.cod_ts_contrato = pgr.cod_ts_contrato
                                                          and cc.dt_ini_cobranca <= trunc(sysdate)
                                                          )
                      and   pgr.dt_ini_vigencia         <= trunc(sysdate)
                      and   pgr.ind_tipo_reembolso      = tab_parans('indTipoReembolso').valor(1)
                      and   rownum = 1;


                exception
                    when others then
                        v_ind_tipo_dia      := null;
                        v_qtd_dias_pgto_rbm := null;
                end;
                --
                -- Caso não encontre o prazo, procurar sem distinção de tipo de reemboloso
                --
                if nvl(v_qtd_dias_pgto_rbm,0) = 0 or nvl(v_ind_tipo_dia,'X') = 'X' then
                    begin
                        select  qtd_dias_pgto_rbm
                              ,   ind_tipo_dia
                        into    v_qtd_dias_pgto_rbm
                              ,   v_ind_tipo_dia
                        from    contrato_adesao_plano cap
                        where   cap.cod_ts_contrato                    = tab_parans('codTsContrato').valor(1)
                        and   cap.cod_plano                            = tab_parans('codPlano').valor(1)


                        and   cap.dt_ini_validade                     <= trunc(sysdate)
                        and   nvl(cap.dt_fim_validade,trunc(sysdate)) >= trunc(sysdate)
                        and   cap.dt_ini_vigencia                      = ( select max(cc.dt_ini_cobranca)
                                                                             from contrato_cobranca cc
                                                                            where cc.cod_ts_contrato = cap.cod_ts_contrato
                                                                              and cc.dt_ini_cobranca <= trunc(sysdate)
                                                                           )
                        and   cap.dt_ini_vigencia                     <= trunc(sysdate)
                        and   rownum = 1;
                    exception
                        when others then
                            v_ind_tipo_dia      := null;
                            v_qtd_dias_pgto_rbm := null;
                    end;
                end if;
            elsif tab_parans('indOrigemAssociado').valor(1) = 'WS' then
                 -- monta XML para chamada do webservice
                v_xml_dados := '<parametros>'
                            || '<numBeneficiario>'      || tab_parans('numAssociado').valor(1)          ||'</numBeneficiario>'
                            || '<codMotivoReembolso>'   || tab_parans('codMotivoReembolso').valor(1)    ||'</codMotivoReembolso>'
                            || '<modReembolso>'         || tab_parans('indTipoReembolso').valor(1)      ||'</modReembolso>'
                            || '<codFilialAmil>'        || tab_parans('codInspetoriaTs').valor(1)       ||'</codFilialAmil>'
                            || '</parametros>';
                --dbms_output.put_line(v_xml_dados);
                v_xml_prazo_cam := rbm_fch_integracao.get_xml_prazo_pagto(v_cod_retorno, v_msg_retorno, v_xml_dados);

                if v_cod_retorno <> 0 then
                    TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 00, 'ERRO CHAMADA WS', 'v_xml_dados(IN):' || v_xml_dados || chr(13) || 'v_xml_prazo_cam(OUT):' || v_xml_prazo_cam, 'Erro ocorrido na chamada do WS de dados de prazo de pagamento do reembolso do beneficiário:' || v_msg_retorno );
                    return;
                else
                    tab_parans2 := top_utl_xml.toCollection( v_xml_prazo_cam , 'prazoPgto' );

                    v_qtd_dias_pgto_rbm         := to_number(tab_parans2('numDiasPgto').valor(1));
                    v_ind_tipo_dia              := trim(tab_parans2('tpoDia').valor(1));
                end if;

            end if;
        end if;
        --

        if nvl(v_qtd_dias_pgto_rbm,0) = 0 or nvl(v_ind_tipo_dia,'X') = 'X' then
            v_qtd_dias_pgto_rbm := v_qtd_dias_pgto_rbm_aux;
            v_ind_tipo_dia      := v_ind_tipo_dia_aux;
        end if;
        --
        if tab_parans('indCourrier').valor(1) = 'S' then
            v_qtd_dias_pgto_rbm := v_qtd_dias_pgto_rbm + 1;
        end if;
        --
        select cod_municipio
          into v_cod_municipio
          from sucursal
         where cod_sucursal = v_cod_sucursal;
        --

        --
        if v_ind_tipo_dia = 'C' then
            --calculo para dias corridos
            if tab_parans('dataSolicitacao').valor(1) is null then
                v_data_base :=    to_char(sysdate + v_qtd_dias_pgto_rbm,'dd/mm/yyyy');
            else
                v_data_base :=    to_char(to_date(tab_parans('dataSolicitacao').valor(1), 'DD/MM/YYYY') + v_qtd_dias_pgto_rbm,'dd/mm/yyyy');
            end if;
            v_date          :=    to_date(sur_obtem_prox_dia_util ( v_data_base
                                                          , v_cod_municipio
                                                          ),'dd/mm/yyyy');

        elsif v_ind_tipo_dia = 'U' then
            --calculo para dias uteis
            if tab_parans('dataSolicitacao').valor(1) is null then
                v_data_base :=    to_char(sysdate,'dd/mm/yyyy');
            else
                v_data_base :=    tab_parans('dataSolicitacao').valor(1);
            end if;
            --
            v_date    := to_date(ts.sur_obtem_prox_dia_util ( v_data_base
                                                           , v_cod_municipio),'dd/mm/yyyy');
            FOR dd IN 1.. v_qtd_dias_pgto_rbm
            LOOP
                v_date                := v_date + 1;
                v_dt_provavel_pgto    := ts.sur_obtem_prox_dia_util (to_char(v_date,'dd/mm/yyyy'), v_cod_municipio);
                v_date                := to_date(v_dt_provavel_pgto,'dd/mm/yyyy');
            END LOOP;
        end if;






        IF v_qtd_dias_pgto_rbm = 1 or (tab_parans('indCourrier').valor(1) = 'S' AND v_qtd_dias_pgto_rbm = 2 ) then



            BEGIN

                   SELECT qtd_dias
                        , horario
                     INTO v_qtd_dias
                        , v_horario
                     FROM reembolso_prazo_operadora
                    WHERE cod_operadora = tab_parans('codOperadora').valor(1)
                      AND cod_inspetoria_ts = v_cod_inspetoria_ts;



                   select to_char(sysdate,'HH24:MI') INTO v_now from dual;

                   IF to_date(v_horario,'HH24:SS') >= TO_DATE(v_now,'HH24:SS') THEN

                        v_ind_tipo_dia      := 'U';
                        p_cod_retorno := 0;

                         v_date    := trunc(sysdate);



                        if tab_parans('indCourrier').valor(1) = 'S' then
                            v_date    := trunc(sysdate + 1);

                        end if;


                        v_date    := to_date(ts.sur_obtem_prox_dia_util ( to_char(v_date,'DD/MM/YYYY'), v_cod_municipio),'dd/mm/yyyy');

                    END IF;





             EXCEPTION
                 WHEN no_data_found THEN
                    null;
             END;

        END IF;



        p_qtd_dias_pgto_rbm := v_qtd_dias_pgto_rbm;
        p_ind_tipo_dia      := v_ind_tipo_dia;
        p_dt_provavel_pgto  := v_date;



    exception
        when others then
            TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 00, 'Erro', ts.top_utl_padrao.msgerro, 'ERRO NO CALCULO DA DATA' );
    end;
    --
    ----------------------------------------------------------------
    -- Retorna se o usuário informado é suporvisor
    ----------------------------------------------------------------
    procedure valida_usuario_supervisor ( p_cod_usuario   in varchar2
                                        , p_ind_retorno   out varchar2
                                        )
    is
        v_qtd       pls_integer;
    begin
        begin
            --
            select 'S'
            into   p_ind_retorno
            from   usuario_area
            where  cod_usuario      = p_cod_usuario
            and    ind_supervisor   = 'S'
            and    rownum           < 2;
        exception
            when no_data_found then
                p_ind_retorno := 'N';
        end;
        --
        return;
        --
    end;
    --

    function get_table_familia_cam              ( num_associado number )
    return tbl_familia_beneficiario
    pipelined
    is
        cursor cur_familia      (pXML in sys.XMLType)
        is
        select extractValue( VALUE(T) , '//numBeneficiario'  ) num_associado
             , extractValue( VALUE(T) , '//nomeBeneficiario' ) nome_associado
        from   table ( xmlsequence ( extract(pXML,'/familiaBeneficiario/beneficiario') ) ) T;
        --
        V_XML                           sys.XMLType;
        v_xml_dados                     clob;
        v_xml_param                     clob;
        v_cod_erro                      number;
        v_msg_erro                      clob;
        result                          tbl_familia_beneficiario := tbl_familia_beneficiario();
        i                               number;
        --
    begin
        --
        v_xml_param :=  '<parametros>'
                    || '<numBeneficiario>'|| num_associado    ||'</numBeneficiario>'
                    || '<datAtendimento>' || to_char(sysdate, 'DD/MM/YYYY')     ||'</datAtendimento>'
                    || '</parametros>';


        v_xml_dados :=  rbm_fch_integracao.get_xml_familia_beneficiario  ( v_cod_erro
                                                                         , v_msg_erro
                                                                         , v_xml_param
                                                                          );
        --
--        dbms_output.put_line(v_xml_dados);
        --
        V_XML := sys.XMLType.createXML( v_xml_dados );
        --
        i := 1;
        --
        for rc_familia in cur_familia (V_XML) loop
            result.EXTEND(1);
            --
            result(i).num_associado  := rc_familia.num_associado;
            result(i).nome_associado := rc_familia.nome_associado;
            --
            pipe row(result(i));
            --
            i := i + 1;
        end loop;

        return;

    end;
    --
    function get_familia_cam              ( p_num_associado number )
    return sys_refcursor
    is
        c   sys_refcursor;
    begin
        begin
            open c
            for select * from table ( ts.rb_reembolso.get_table_familia_cam(p_num_associado) );
        exception
        when others then
            open c
            for select * from dual where 1 = 2;
        end;

        return c;
    end;
    --
    procedure get_tabela_reemb_cam ( p_xml_param in clob
                                   , p_sigla_tabela out varchar2
                                   , p_cod_retorno out number
                                   , p_msg_retorno out varchar2
                                   )
    is
         tab_parans             top_utl_xml.tbl_fields;
         tab_parans2            top_utl_xml.tbl_fields;
         --
         v_xml_dados            clob;
         x                      number;
         v_sigla_tabela         varchar2(100);
         v_cod_proc_pesq_cam    procedimento_reembolso.cod_procedimento%type;
         v_xml_contrato_cam     clob;
         v_cod_padrao           varchar2(20);
         --
         v_cod_retorno          number;
         v_msg_retorno          varchar2(200);
    begin
        --
        tab_parans := top_utl_xml.toCollection( p_xml_param , 'parametros' );
        --
        if  not tab_parans.exists('numBeneficiario'              ) then tab_parans('numBeneficiario').valor(1) := null;
        end if;
        --
        if  not tab_parans.exists('grupoBeneficio'               ) then tab_parans('grupoBeneficio').valor(1) := null;
        end if;
        --
        if  not tab_parans.exists('datAtendimento'               ) then tab_parans('datAtendimento').valor(1) := null;
        end if;
        --
        if  not tab_parans.exists('numProcedimentos'             ) then tab_parans('numProcedimentos').valor(1) := 0;
        end if;
        --
        if  not tab_parans.exists('codOperadora'                 ) then tab_parans('codOperadora').valor(1) := null;
        end if;
        --
        if  not tab_parans.exists('codInspetoriaTsAbertura'      ) then tab_parans('codInspetoriaTsAbertura').valor(1) :=  null;
        end if;
        --
        if nvl(tab_parans('numProcedimentos').valor(1),0) = 0  then
            p_cod_retorno := 1;
            return;
        end if;
        --
        for x in 1..tab_parans('numProcedimentos').valor(1) loop
            --
            if  not tab_parans.exists('codProcedimento'||x       ) then tab_parans('codProcedimento'||x).valor(1) := null;
            end if;
            --

            if v_cod_padrao = 'AMB' then
                v_cod_proc_pesq_cam := cm_converte_amb_cbhpm_s(tab_parans('codProcedimento'||x).valor(1),tab_parans('datAtendimento').valor(1),'CBHPM');
            else
                v_cod_proc_pesq_cam := tab_parans('codProcedimento'||x).valor(1);
            end if;
            --
            v_xml_dados := '<parametros>'
                        || '<numBeneficiario>'  || tab_parans('numBeneficiario').valor(1)                        ||'</numBeneficiario>'
                        || '<datAtendimento>'   || to_char(tab_parans('datAtendimento').valor(1), 'yyyymmdd')    ||'</datAtendimento>'
                        || '<grpBeneficio>'     || tab_parans('grupoBeneficio').valor(1)                         ||'</grpBeneficio>'
                        || '<codProcedimento>'  || v_cod_proc_pesq_cam                                           ||'</codProcedimento>'
                        || '</parametros>';

            v_xml_contrato_cam := rbm_fch_integracao.get_xml_valida_reembolso(v_cod_retorno, v_msg_retorno, v_xml_dados);
            tab_parans2 := top_utl_xml.toCollection( v_xml_contrato_cam , 'reembolso' );
            if v_cod_retorno = 0 then
                v_sigla_tabela   := tab_parans2('tabelaHonorario').valor(1);
            end if;

            EXIT WHEN v_sigla_tabela is not null;
        end loop;
        --
        if v_sigla_tabela is null then
            begin
                select sigla_tabela_reembolso
                  into v_sigla_tabela
                  from padrao_reembolso_anestesia
                 where cod_operadora        = tab_parans('codOperadora').valor(1)
                   and cod_inspetoria_ts    = tab_parans('codInspetoriaTsAbertura').valor(1)
                   and dt_ini_vigencia     <= trunc(sysdate)
                   and rownum               = 1;
            exception
                when others then
                    v_sigla_tabela := null;
            end;
        end if;
        --
        p_sigla_tabela := v_sigla_tabela;
        --
    end;
    --
    function get_dados_tabela_dp ( p_xml_param in clob  )
    return sys_refcursor
    is
        v_cod_retorno          number;
        v_msg_retorno          varchar2(200);
        v_sigla_tabela         varchar2(50);
        c                      sys_refcursor;
    begin
          get_tabela_reemb_cam( p_xml_param, v_sigla_tabela, v_cod_retorno, v_msg_retorno );

          open c
          for select * from valor_funcao where sigla_tabela  = v_sigla_tabela;

          return c;

    exception
        when others then
            open c
            for select * from dual where 1 = 2;

            return c;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Bloquear pedido informado
    ----------------------------------------------------------------------------
    procedure lock_pedido ( p_num_reembolso in  varchar2
                          , p_cod_usuario   in  varchar2
                          , p_cod_retorno   out pls_integer
                          , p_msg_retorno   out varchar2
                          )
    as
    --
        v_dt_inicio_analise    varchar2(20);
        v_cod_usuario_analise  varchar2(20);
        v_cod_situacao         pedido_reembolso.ind_situacao%type;
        v_nom_usuario          usuario.nom_usuario%type;
        v_cod_parametro        controle_sistema.cod_parametro%type;
        v_bloqueia_pedido      controle_sistema.val_parametro%type;
        v_cod_fase_processo    situacao_reembolso_fase.cod_fase_processo%type;
        --
    begin
        --VERIFICA USO DO BLOQUEIO
        RetornaParametro ( 'RB_BLOQUEIA_PEDIDO', v_bloqueia_pedido, 'N' );
        --
        if nvl(v_bloqueia_pedido,'N') = 'N' then
            p_cod_retorno := 0;
            p_msg_retorno := '';
            return;
        end if;
        --
        if p_cod_usuario = 'CALLCENTER' or p_cod_usuario = 'CALLCENTERG2' then
            p_cod_retorno := 1;
            p_msg_retorno := 'Não é possível assumir o pedido com o usuário informado.';
            return;
        end if;
        --
        begin
            select /*  aut_fch_pedido_autorizacao.processa_lock_pedido */
                   a.cod_usuario_analise
                 , to_char(a.dt_inicio_analise,'dd/mm/yyyy hh24:mi:ss')
                 , a.ind_situacao
                 , u.nom_usuario
            into   v_cod_usuario_analise
                 , v_dt_inicio_analise
                 , v_cod_situacao
                 , v_nom_usuario
            from   pedido_reembolso a       , usuario u
            where  a.num_reembolso          = p_num_reembolso
            and    a.cod_usuario_analise    = u.cod_usuario(+);
            --
            if v_cod_usuario_analise = p_cod_usuario then
                p_cod_retorno := 0;
                p_msg_retorno := '';
                return;
            elsif v_cod_usuario_analise is not null then
                p_cod_retorno := 1;
                p_msg_retorno := 'Reembolso encontra-se em análise com "' || v_cod_usuario_analise || ' - ' || v_nom_usuario || '" ';
                --
                if v_dt_inicio_analise is not null then p_msg_retorno := p_msg_retorno || ' desde ' || v_dt_inicio_analise;
                end if;
                return;
            end if;
            --
            select cod_fase_processo
              into v_cod_fase_processo
              from situacao_reembolso
             where cod_situacao = v_cod_situacao;
            --
            if v_cod_fase_processo in (1, 3, 6) then
                --
                update /*  rb_reembolso.lock_pedido */
                       pedido_reembolso
                set    cod_usuario_analise  = p_cod_usuario
                     , dt_inicio_analise    = sysdate
                where  num_reembolso        = p_num_reembolso;
                --
                if sql%rowcount = 0  then
                    --
                    select /*  rb_reembolso.lock_pedido */
                           p.cod_usuario_analise
                         , to_char(p.dt_inicio_analise,'dd/mm/yyyy hh24:mi:ss')
                         , u.nom_usuario
                    into   v_cod_usuario_analise
                         , v_dt_inicio_analise
                         , v_nom_usuario
                    from   pedido_reembolso p       , usuario u
                    where  p.num_reembolso          = p_num_reembolso
                    and    p.cod_usuario_analise    = u.cod_usuario(+);
                    --
                    if v_cod_usuario_analise is not null then
                        p_cod_retorno := 1;
                        p_msg_retorno := 'Reembolso encontra-se em análise com "' || v_cod_usuario_analise || ' - ' || v_nom_usuario || '" ';
                        --
                        if v_dt_inicio_analise is not null then p_msg_retorno := p_msg_retorno || ' desde ' || v_dt_inicio_analise;
                        end if;
                        return;
                    else
                        p_cod_retorno := 1;
                        p_msg_retorno := 'Reembolso não pode ser atualizado, verifique.';
                        return;
                    end if;
                end if;
            end if;
        exception
        when no_data_found then
            p_cod_retorno := 2;
            p_msg_retorno := 'Reembolso não encontrado.';
            return;
        end;
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
--        commit;   Linha de Commit comentada pois pode está ocasionando duplicidade de protocolo
        --
    exception
    when others then
        p_cod_retorno := 9;
        p_msg_retorno := 'Bloquear Reembolso:' || ts_util.MsgErro;
        rollback;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Desbloquear pedido de autorização
    ----------------------------------------------------------------------------
    procedure unlock_pedido ( p_num_reembolso       in  varchar2
                            , p_cod_usuario         in  varchar2
                            , p_cod_retorno         out varchar2
                            , p_msg_retorno         out varchar2
                            , p_ind_gera_ocorrencia in varchar2 default 'N'
                            )
    is
        v_posicao                   number;
        v_cod_usuario_analise       varchar2(20);
        v_cod_parametro             controle_sistema.cod_parametro%type;
        v_bloqueia_pedido           controle_sistema.val_parametro%type;
    begin
        --
        --
        --VERIFICA USO DO BLOQUEIO
        RetornaParametro ( 'RB_BLOQUEIA_PEDIDO', v_bloqueia_pedido, 'N' );
        --
        if nvl(v_bloqueia_pedido,'N') = 'N' then
            p_cod_retorno := 0;
            p_msg_retorno := '';
            return;
        end if;
        --
        begin
            select /*  rb_reembolso.processa_unlock_pedido */
                   cod_usuario_analise
            into   v_cod_usuario_analise
            from   pedido_reembolso
            where  num_reembolso = p_num_reembolso;
            --
            if v_cod_usuario_analise is null then
                p_cod_retorno := 0;
                p_msg_retorno := '';--NAO MANDAR MSG, APENAS NAOP FAZER MAIS NADA - Pedido não se encontra em análise';
                return;
            end if;
            --
            update /*  rb_reembolso.processa_unlock_pedido */
                   pedido_reembolso
            set    cod_usuario_analise  = null
                 , dt_inicio_analise    = null
            where  num_reembolso        = p_num_reembolso;
            --
            if sql%rowcount = 0  then
                p_cod_retorno := 0;
                p_msg_retorno := '';--NAO MANDAR MSG, APENAS NAOP FAZER MAIS NADA - Pedido não se encontra em análise';
                return;
            end if;
            --
            if p_ind_gera_ocorrencia = 'S' then
                -- Gerar ocorrência de Desbloqueio
                GeraOcorrencia ( p_num_reembolso, 39, null,null,p_cod_usuario, p_cod_retorno,p_msg_retorno);
            end if;
        exception
        when no_data_found then
            p_cod_retorno := 2;
            p_msg_retorno := 'Reembolso não encontrado';
            return;
        end;
        --
        p_cod_retorno := 0;
        p_msg_retorno := '  ';
        commit;
        --
    exception
    when others then
        p_cod_retorno := 9;
        p_msg_retorno := 'Desbloqueia reembolso:' || v_posicao || ': ' || ts_util.MsgErro;
        rollback;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Trocar o usuário que está analisando o pedido
    ----------------------------------------------------------------------------
    procedure trocar_analise_pedido ( p_cod_retorno   out pls_integer
                                    , p_msg_retorno   out varchar2
                                    , p_num_reembolso    in  varchar2
                                    , p_cod_usuario   in  varchar2
                                    )
    is
    --
    begin
        --
        if p_cod_usuario = 'CALLCENTER' or p_cod_usuario = 'CALLCENTERG2' then
            p_cod_retorno := 9;
            p_msg_retorno := 'Não é possível assumir o pedido com o usuário informado.';
            return;
        end if;
        --
        unlock_pedido ( p_num_reembolso       => p_num_reembolso
                      , p_cod_usuario         => p_cod_usuario
                      , p_cod_retorno         => p_cod_retorno
                      , p_msg_retorno         => p_msg_retorno
                      , p_ind_gera_ocorrencia => 'S'
                      );
        --
        if p_cod_retorno != 0 then return;
        end if;
        --
        lock_pedido ( p_num_reembolso  => p_num_reembolso
                    , p_cod_usuario    => p_cod_usuario
                    , p_cod_retorno    => p_cod_retorno
                    , p_msg_retorno    => p_msg_retorno
                    );
        --
        if p_cod_retorno != 0 then return;
        end if;
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
        return;
    end;
    --
    --
    procedure libera_documentos_pedido ( p_num_reembolso in varchar2
                                        , p_cod_usuario   in varchar2
                                        , p_cod_retorno   out varchar2
                                        , p_msg_retorno   out varchar2
                                        , ind_commit      in varchar default 'S'
                                        , p_dt_provavel_pgto  out date
                                        , p_cod_altera_mot    out number
                                        , p_ind_copiar        in varchar default 'N')
    is
        CURSOR c_documento IS select rd.nom_documento
                                from reembolso_documento rd
                                   , reembolso_documentacao_pedido rdp
                               where rdp.num_reembolso = p_num_reembolso
                                 and rdp.cod_documento = rd.cod_documento;

        v_cod_operadora          ts.pedido_reembolso.cod_operadora_contrato%type;
        v_cod_origem             ts.pedido_reembolso.cod_origem%type;
        v_cod_sucursal           ts.associado.cod_sucursal%type;
        v_cod_municipio          ts.pedido_reembolso.cod_municipio_execucao%type;
        v_desc_motivo_dt_pgto    ts.motivo_alter_dt_pgto.desc_motivo_alter_dt_pgto%type;
        v_dt_provavel_pgto_atg   ts.pedido_reembolso.dt_prevista_pgto%type;
        rsReembolsoPag           ts.pedido_reembolso%rowtype;
        v_dt_pgto                ts.pedido_reembolso.dt_prevista_pgto%type;
        v_dt_provavel_pgto       VARCHAR2(10);
        v_qtd_dia                NUMBER;
        v_data_base              VARCHAR2(10);
        v_date                   DATE;
        v_num_protocolo          NUMBER(15);
        v_xml_param              clob;
    BEGIN
        --
        p_dt_provavel_pgto := null;
        p_cod_altera_mot   := null;
        --
        FOR c IN c_documento
        LOOP
            GeraOcorrencia(p_num_reembolso,58,c.nom_documento,null,p_cod_usuario,p_cod_retorno,p_msg_retorno);
        END LOOP;

        DELETE FROM reembolso_documentacao_pedido
            WHERE num_reembolso = p_num_reembolso;

--Início CL00547564 - Data de Provável de Pagamento por AGD
         --
         SELECT ma.desc_motivo_alter_dt_pgto
           INTO v_desc_motivo_dt_pgto
           FROM ts.motivo_alter_dt_pgto ma
          WHERE ma.cod_motivo_alter_dt_pgto = 11;
         --
         BEGIN
         ----------------------------------------------------------------------------------------------------------------------------------------------------------------

            select *
              into rsReembolsoPag
              from pedido_reembolso
             where num_reembolso = p_num_reembolso;

            v_xml_param := '<parametros>'
                        || '<numAssociado>'         ||  rsReembolsoPag.num_associado                   ||  '</numAssociado>'
                        || '<codTsContrato>'        ||  rsReembolsoPag.cod_ts_contrato                 ||  '</codTsContrato>'
                        || '<codPlano>'             ||  rsReembolsoPag.cod_plano                       ||  '</codPlano>'
                        || '<codInspetoriaTs>'      ||  rsReembolsoPag.cod_inspetoria_ts_abertura      ||  '</codInspetoriaTs>'
                        || '<codOperadora>'         ||  rsReembolsoPag.cod_operadora_contrato          ||  '</codOperadora>'
                        || '<codMotivoReembolso>'   ||  rsReembolsoPag.cod_motivo_reembolso            ||  '</codMotivoReembolso>'
                        || '<codUsuarioSolic>'      ||  rsReembolsoPag.cod_usuario_solic               ||  '</codUsuarioSolic>'
                        || '<indTipoReembolso>'     ||  rsReembolsoPag.ind_tipo_reembolso              ||  '</indTipoReembolso>'
                        || '<indCourrier>'          ||  rsReembolsoPag.ind_utiliza_courrier            ||  '</indCourrier>'
                        || '<dataSolicitacao>'      ||  to_char(sysdate,'dd/mm/yyyy')                   ||  '</dataSolicitacao>'
                        || '<indOrigemAssociado>'   ||  rsReembolsoPag.ind_origem_associado            ||  '</indOrigemAssociado>'
                        || '</parametros>';
             --

            rb_reembolso.get_dados_prazo_pgto ( p_cod_retorno
                                              , p_msg_retorno
                                              , v_xml_param
                                              , rsReembolsoPag.qtd_dias_reembolso
                                              , rsReembolsoPag.ind_tipo_dia
                                              , rsReembolsoPag.dt_prevista_pgto_calc
                                              );

            if p_cod_retorno = 0 then
               --
               v_dt_pgto := rsReembolsoPag.dt_prevista_pgto_calc;
               v_qtd_dia := rsReembolsoPag.qtd_dias_reembolso;
            end if;

         ----------------------------------------------------------------------------------------------------------------------------------------------------------------

            SELECT pdr.cod_operadora_contrato
                 , a.cod_sucursal
                 , pdr.dt_prevista_pgto
                 , num_protocolo
              INTO v_cod_operadora
                 , v_cod_sucursal
                 , v_dt_provavel_pgto_atg
                 , v_num_protocolo
              FROM ts.pedido_reembolso pdr
                 , ts.associado a
             WHERE pdr.cod_ts        = a.cod_ts
               AND pdr.num_reembolso = p_num_reembolso;
         EXCEPTION
           WHEN OTHERS THEN
               v_cod_operadora := null;
               v_cod_origem :=  null;
               v_cod_sucursal := null;
               v_dt_provavel_pgto_atg := null;
         END;

         SELECT cod_municipio
          INTO v_cod_municipio
          FROM ts.sucursal
         WHERE cod_sucursal = v_cod_sucursal;
         --
            FOR dd IN 1.. v_qtd_dia
            LOOP
                v_date                := v_dt_pgto;
            END LOOP;

            if p_ind_copiar = 'S' then
                FOR c IN (select num_reembolso
                            from pedido_reembolso
                           where num_protocolo = v_num_protocolo
                             and ind_situacao in (32,48)
                         )
                LOOP
                  GeraOcorrencia( c.num_reembolso
                              , 22
                              , to_char(v_dt_provavel_pgto_atg,'dd/mm/rrrr')
                                || ' foi alterada para : '
                                || to_char(v_date,'dd/mm/rrrr')
                                || ' - Motivo:'
                                || v_desc_motivo_dt_pgto
                              , null
                              , p_cod_usuario
                              ,p_cod_retorno
                              ,p_msg_retorno);

                  UPDATE TS.PEDIDO_REEMBOLSO PR
                   SET PR.IND_SITUACAO = 28
                         , PR.DT_PREVISTA_PGTO = v_date
                         , PR.DT_PREVISTA_PGTO_CALC = v_date
                         , PR.COD_MOTIVO_ALTER_DT_PGTO = 11
                   WHERE PR.NUM_REEMBOLSO = c.num_reembolso;
                END LOOP;
            else
                GeraOcorrencia( p_num_reembolso
                              , 22
                              , to_char(v_dt_provavel_pgto_atg,'dd/mm/rrrr')
                                || ' foi alterada para : '
                                || to_char(v_date,'dd/mm/rrrr')
                                || ' - Motivo:'
                                || v_desc_motivo_dt_pgto
                              , null
                              , p_cod_usuario
                              ,p_cod_retorno
                              ,p_msg_retorno);
            --
                UPDATE TS.PEDIDO_REEMBOLSO PR
                   SET PR.IND_SITUACAO = 28
                         , PR.DT_PREVISTA_PGTO = v_date
                         , PR.DT_PREVISTA_PGTO_CALC = v_date
                         , PR.COD_MOTIVO_ALTER_DT_PGTO = 11
                 WHERE PR.NUM_REEMBOLSO = p_num_reembolso;
           end if;
            --
           p_dt_provavel_pgto := v_date;
           p_cod_altera_mot   := 11;

--  fim CL00547564


        if nvl(ind_commit,'S') = 'S' then
            COMMIT;
        end if;

        p_cod_retorno := 0;
        p_msg_retorno :=  'Documentos recebidos';

        EXCEPTION
          WHEN OTHERS THEN
             p_cod_retorno := 9;
             p_msg_retorno :=  'Operação não realizada';
             RETURN;
    END;
    --
    --
    ----------------------------------------------------------------------------
    -- Retorna xml com as informações do reembolso ( pesquisa usada apenas na tela de atendimento CAM ou G3 )
    ----------------------------------------------------------------------------
    Procedure RetornaReembolsoCam   ( p_num_reembolso       in  number
                                    , p_xml_retorno         out clob
                                    , p_xml_filtro          in  clob
                                    )
    is
        --Declarações:
        v_SQL                   varchar2(32000);
        v_doc                   xmldom.DOMDocument;
        v_cod_retorno           number;
        v_msg_retorno           varchar2(4000);
        v_item_vazio            varchar2(3) := '¿¿¿';
        v_cod_ts                pedido_reembolso.cod_ts%type;
        v_ind_situacao          pedido_reembolso.ind_situacao%type;
        v_cod_tratamento        pedido_reembolso.cod_tratamento%type;
        v_dt_pedido_ini         pedido_reembolso.dt_inclusao%type;
        v_dt_pedido_fim         pedido_reembolso.dt_inclusao%type;
        v_num_insc_fiscal       pedido_reembolso.num_insc_fiscal%type;
        v_nome_prestador        pedido_reembolso.nome_prestador%type;
        v_sigla_conselho        pedido_reembolso.sigla_conselho%type;
        v_num_crm               pedido_reembolso.num_crm%type;
        v_uf_conselho           pedido_reembolso.uf_conselho%type;
        v_cnes                  pedido_reembolso.cnes%type;
        v_num_protocolo         pedido_reembolso.num_protocolo%type;
        v_num_associado         pedido_reembolso.num_associado%type;
        v_cod_fase_processo     number;
        v_ind_reanalise         varchar2(1);
        v_ind_reanalisado       varchar2(1);
        v_situacao_item_pag     number;
        v_usa_bloqueio_pedido   varchar2(1);
        v_dt_inicio_analise     pedido_reembolso.dt_inicio_analise%type;
        v_cod_usuario_analise   pedido_reembolso.cod_usuario_analise%type;
        v_ind_tipo_reemboslo    pedido_reembolso.ind_tipo_reembolso%type;
    begin
    --Início
    --
        if nvl(p_xml_filtro,'X') <> 'X' then
            ts_cria_doc_xml(p_xml_filtro, v_doc, v_cod_retorno, v_msg_retorno);
            if v_cod_retorno <> 0 then
                p_xml_retorno := '<?xml version="1.0"?>';
                p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
                p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
                p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || v_msg_retorno || '</MSG_RETORNO>';
                p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
                return;
            end if;
        end if;

        --Montar XML do pedidos
        v_SQL := '';
        v_SQL := ' select * from ( ';
        v_SQL := v_SQL || ' SELECT 0 COD_RETORNO';
        v_SQL := v_SQL || ' , nvl(pr.num_protocolo_ans,pr.num_protocolo) num_protocolo';
        v_SQL := v_SQL || ' , pr.num_reembolso';
        v_SQL := v_SQL || ' , to_char(SYSDATE,''DD/MM/YYYY'') data_atual';
        v_SQL := v_SQL || ' , pr.num_associado';
        v_SQL := v_SQL || ' , pr.nome_associado';
        v_SQL := v_SQL || ' , pr.ind_situacao';
        v_SQL := v_SQL || ' , to_char(pr.dt_inclusao,''DD/MM/YYYY'')         dt_inclusao';
        v_SQL := v_SQL || ' , to_char(pr.dt_pagamento,''DD/MM/YYYY'')    dt_pagamento';
        v_SQL := v_SQL || ' , sr.tipo_situacao';
        v_SQL := v_SQL || ' , sr.nome_situacao';
        v_SQL := v_SQL || ' , sr.cod_fase_processo';
        v_SQL := v_SQL || ' , pr.cod_inspetoria_ts_abertura';
        v_SQL := v_SQL || ' , to_char(pr.dt_prevista_pgto,''DD/MM/YYYY'')     dt_prevista_pgto';
        v_SQL := v_SQL || ' , to_char(pr.dt_prevista_pgto_calc,''DD/MM/YYYY'')     dt_prevista_pgto_calc';
        v_SQL := v_SQL || ' , tr.nome_tipo_reembolso';
        v_SQL := v_SQL || ' , ia.nome_inspetoria';
        v_SQL := v_SQL || ' , sa.nome_sucursal';
        v_SQL := v_SQL || ' , to_char(pr.val_reembolsado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_pago';
        v_SQL := v_SQL || ' , to_char(pr.val_informado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_informado';
        v_SQL := v_SQL || ' , pr.ind_reanalise';
        v_SQL := v_SQL || ' , pr.ind_tipo_comprovante';
        v_SQL := v_SQL || ' , (select LISTAGG(txt_descricao, '''|| '&#13' ||''')';
        v_SQL := v_SQL || '      WITHIN GROUP (ORDER BY txt_descricao) as DESCRICAO';
        v_SQL := v_SQL || '    from (';
        v_SQL := v_SQL || '      select nvl(ta.nom_tipo_anexo, a.txt_descricao) AS txt_descricao';
        v_SQL := v_SQL || '        from TS.REEMBOLSO_ANEXO a';
        v_SQL := v_SQL || '        ,TS.RBM_TIPO_ANEXO_REEMBOLSO ta';
        v_SQL := v_SQL || '        where a.cod_tipo_anexo = ta.cod_tipo_anexo (+)';
        v_SQL := v_SQL || '         and a.num_reembolso = pr.num_reembolso';
        v_SQL := v_SQL || '        group by nvl(ta.nom_tipo_anexo, a.txt_descricao)';
        v_SQL := v_SQL || '        order by txt_descricao';
        v_SQL := v_SQL || '    )) tipo_anexo';
        v_SQL := v_SQL || ',  (SELECT LISTAGG(TO_CHAR(proc_r.DATA_ATENDIMENTO, ''dd/mm/yyyy''), CHR(10)) ';
        v_SQL := v_SQL || '    WITHIN GROUP (ORDER BY proc_r.DATA_ATENDIMENTO) AS DATA_ATENDIMENTO ';
        v_SQL := v_SQL || '      FROM (SELECT DISTINCT proc_r.DATA_ATENDIMENTO ';
        v_SQL := v_SQL || '              FROM TS.PROCEDIMENTO_REEMBOLSO proc_r ';
        v_SQL := v_SQL || '             WHERE proc_r.num_reembolso = pr.num_reembolso) proc_r) DATA_ATENDIMENTO';
        v_SQL := v_SQL || ',	(SELECT LISTAGG(DISTINCT es.nome_especialidade, CHR(10))';
        v_SQL := v_SQL || ' 	   FROM TS.PROCEDIMENTO_REEMBOLSO proc_r, TS.ESPECIALIDADE es';
        v_SQL := v_SQL || '       WHERE proc_r.num_reembolso = pr.num_reembolso';
        v_SQL := v_SQL || '         AND proc_r.cod_especialidade = es.cod_especialidade) NOME_ESPECIALIDADE';
		v_SQL := v_SQL || ' FROM pedido_reembolso     pr';
        v_SQL := v_SQL || '    , situacao_reembolso   sr';
        v_SQL := v_SQL || '    , tipo_reembolso tr  ';
--        v_SQL := v_SQL || '    , protocolo_reembolso ptr  ';
        v_SQL := v_SQL || '    , inspetoria ia  ';
        v_SQL := v_SQL || '    , sucursal sa  ';
        --
        v_SQL := v_SQL || ' WHERE pr.ind_situacao           = sr.cod_situacao';
        v_SQL := v_SQL || ' AND   pr.ind_tipo_reembolso     = tr.ind_tipo_reembolso ';
--        v_SQL := v_SQL || ' and   pr.num_protocolo          = ptr.num_protocolo ';
        v_SQL := v_SQL || ' and   pr.cod_inspetoria_ts_abertura    = ia.cod_inspetoria_ts ';
        v_SQL := v_SQL || ' and   ia.cod_sucursal           = sa.cod_sucursal ';
        --
        IF nvl(p_xml_filtro,'X') <> 'X' THEN --FILTRANDO PELA TELA GENERICA
            --
            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI') is not null and ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI'), 'DD/MM/YYYY') then
                v_dt_pedido_ini := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_INI'), 'DD/MM/YYYY');
            end if;
            if ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM') is not null and ts.TS_UTIL.IsDate(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM'), 'DD/MM/YYYY') then
                v_dt_pedido_fim := to_date(ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/DT_PEDIDO_FIM'), 'DD/MM/YYYY')+1;
            end if;
            --
            v_ind_situacao          := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/IND_SITUACAO');
            v_num_associado         := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/NUM_ASSOCIADO');
            v_ind_tipo_reemboslo    := ts_obtem_dados_xml(v_doc,'REEMBOLSO','FILTRO/IND_TIPO_REEMBOLSO');
            --
            xmldom.freeDocument(v_doc);
            --
            if nvl(v_num_associado,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.num_associado = :num_associado';
                add_parametro_sql ( p_nome_parametro => 'num_associado' , p_valor_parametro => v_num_associado );
            end if;
            --
            if nvl(v_ind_situacao,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.ind_situacao = :ind_situacao';
                add_parametro_sql ( p_nome_parametro => 'ind_situacao' , p_valor_parametro => v_ind_situacao );
            end if;
            --
            if nvl(v_ind_tipo_reemboslo,0) <> 0 then
                v_SQL := v_SQL || ' AND pr.ind_tipo_reembolso = :ind_tipo_reemboslo';
                add_parametro_sql ( p_nome_parametro => 'ind_tipo_reemboslo' , p_valor_parametro => v_ind_tipo_reemboslo );
            end if;
            --
            if v_dt_pedido_ini is not null and ts_util.isdate(to_char(v_dt_pedido_ini, 'dd/mm/yyyy'), 'dd/mm/yyyy') then
                v_SQL := v_SQL || ' AND dt_inclusao >= :dt_pedido_ini';
                add_parametro_sql ( p_nome_parametro => 'dt_pedido_ini' , p_valor_parametro => v_dt_pedido_ini );
            end if;
            --
            if v_dt_pedido_fim is not null and ts_util.isdate(to_char(v_dt_pedido_fim, 'dd/mm/yyyy'), 'dd/mm/yyyy') then
                v_SQL := v_SQL || ' AND dt_inclusao < :dt_pedido_fim';
                add_parametro_sql ( p_nome_parametro => 'dt_pedido_fim' , p_valor_parametro => v_dt_pedido_fim );
            end if;
            --
        END IF;
        --
        v_SQL := v_SQL || ' ORDER BY pr.dt_inclusao desc, num_reembolso desc )';
        v_SQL := v_SQL || ' where rownum <= 100';
        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'PEDIDO'
                                   , p_nome_coluna    => 'DADOS'
                                   );
        --
    exception
        when others then
            --
            TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 99, 'Erro', ts_util.MsgErro || ' (' || ts.top_utl_padrao.msgerro  || ')' || chr(13) || v_SQL || chr(13) || p_xml_filtro || chr(13) || 'p_num_reembolso=' || p_num_reembolso, 'RetornaReembolso' );
            --
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<PEDIDO><DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || ' (' || ts.top_utl_padrao.msgerro  || ')' || '</MSG_RETORNO>';
            --p_xml_retorno := p_xml_retorno || '<SQL>' || v_SQL || '</SQL>';
            p_xml_retorno := p_xml_retorno || '</DADOS></PEDIDO>';
            return;
    end;
    --
    --

    function get_rs_memoria ( p_num_reembolso in  number
                            , p_num_seq_item  in  number
                            )
    return sys_refcursor
    is
        v_cod_retorno          number;
        v_msg_retorno          varchar2(200);
        c                       sys_refcursor;
    begin


          open c
          for select pr.num_reembolso
                  , nvl(pr.num_protocolo_ans,pr.num_protocolo) num_protocolo
                  , pr.ind_situacao
                  , s.nome_situacao
                  , pr.num_associado
                  , pr.nome_associado
                  , pr.num_contrato
                  , pr.cod_empresa
                  , pr.nome_contrato
                  , mrd.cod_procedimento_calc cod_procedimento
                  , p.nome_item nome_procedimento
                  , mrd.sigla_tabela_calc sigla_tabela
                  , pr.ind_tipo_reembolso
                  , t.nome_tipo_reembolso
                  , mrd.tipo_composicao_reembolso
                  , pr.cod_acomodacao
                  , a.nome_acomodacao
                  , pr.nome_prestador
                  , pr.num_insc_fiscal
                  , pro.data_atendimento
                  , pro.hora_atendimento
                  , pro.hora_alta
                  , pro.ind_tipo_item
                  , mrd.val_item_mat_med
                  , DECODE(mrd.ind_calc_urgencia,'S','SIM','NÃO') urgencia
                  --, mrd.pct_urgencia
                  , DECODE(mrd.ind_via,'M','Mesma Via','D','Diferentes Via','Via Única') via
                  --, mrd.pct_cirurgia_multipla pct_via
                  , DECODE(pro.ind_doppler,'P','Pulsado e Continuo','C','Colorido',null) doppler
                  , null qtd_diarias
                  , null qtd_sessoes
                  , null val_beneficio
                  , to_char(mrd.val_beneficio_anual,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_beneficio_anual
                  , to_char(mrd.val_utilizado_beneficio,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_utilizado_beneficio
                  , to_char(mrd.saldo_beneficio_anual,'FM999G999G999G990D00','nls_numeric_characters='',.')   saldo_beneficio_anual
                  , to_char(mrd.val_limite,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_limite
                  , to_char(mrd.val_fixo,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_fixo
                  , to_char(mrd.val_limite_copart,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_limite_copart
                  , mrd.saldo_sessoes_anual
                  , mrd.qtd_sessoes_anual
                  , mrd.qtd_utilizado_sessoes
                  , mrd.qtd_honorario
                  , pro.ind_funcao
                  , f.nome_funcao
                  , mrd.pct_funcao
                  , mrd.cod_porte
                  , mrd.val_porte
                  --, mrd.pct_porte_auxiliar
                  , mrd.sigla_moeda
                  , mrd.cotacao_reembolso
                  --, to_char( mrd.qtd_honorario * mrd.cotacao_reembolso,'FM999G999G999G990D00','nls_numeric_characters='',.') val_honorario
                  --, mrd.pct_recibo
                  , mrd.pct_copart
                  , to_char(mrd.val_copart,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_copart
                  --, mrd.qtd_co
                  , mrd.qtd_filme
                  , mrd.cotacao_filme
                  , to_char(mrd.val_filme,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_filme
                  , mrd.qtd_vezes_tabela
                  , pro.qtd_informado
                  , to_char(mrd.val_tax_materiais,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_tax_materiais
                  , to_char(pro.val_informado,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_informado
                  , to_char(pro.val_calculado,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_calculado
                  , to_char(pro.val_reembolsado,'FM999G999G999G990D00','nls_numeric_characters='',.')   val_reembolsado
                  , pro.qtd_aprovada
                  , mrd.cod_padrao_valoracao
                  , mrd.val_uco_proc
                  , mrd.cod_porte_proc
                  , mrd.cotacao_uco_proc
                  , mrd.val_porte_proc
                  , mrd.fracao_porte_proc
             from pedido_reembolso pr
                , procedimento_reembolso pro
                , situacao_reembolso s
                , tipo_reembolso t
                , vwm_procedimento p
                , memoria_reembolso_detalhe mrd
                , tipo_funcao_auxiliar f
                , tipo_acomodacao a
             where pr.num_reembolso          = mrd.num_reembolso
               and pro.num_reembolso         = mrd.num_reembolso
               and pro.num_seq_item          = mrd.num_seq_item
               and pr.ind_situacao           = s.cod_situacao
               and pr.ind_tipo_reembolso     = t.ind_tipo_reembolso
               and mrd.cod_procedimento_calc = p.item_medico
               and pro.ind_funcao            = f.cod_funcao  (+)
               and pr.cod_acomodacao         = a.cod_acomodacao (+)
               and mrd.num_reembolso         = p_num_reembolso
               and mrd.num_seq_item          = p_num_seq_item;

          return c;

    exception
        when others then
            open c
            for select * from dual where 1 = 2;

            return c;

    end;
--
     procedure rb_atualiza_sit_cancela_pgto ( p_num_pagamento_ts            in             number
                                            , p_cod_usuario_canc            in             varchar2
                                            , p_txt_obs_canc                in             varchar2
                                            , p_msg_retorno                     out        varchar2
                                            , p_cod_retorno                     out        number
                                            )
     is
        v_posicao             number;
        v_texto_cancamento    pagamento.txt_obs_canc%type;
        v_xml_saldo           clob;
        v_cod_retorno         number;
        v_msg_retorno         varchar2(32000);
        v_tem_item_pagamento  number;
        v_item_pagamento_ts   ts.itens_pagamento.num_item_pagamento_ts%type;
        v_num_pagamento_ts    ts.itens_pagamento.num_item_pagamento_ts%type;
        v_ind_retorno         varchar2(2);
        --
     begin
        v_posicao := 1;
        --
        if  p_num_pagamento_ts is null then
            p_cod_retorno := 1;
            p_msg_retorno := 'Identificação do pagamento não informado';
            return;
        end if;
        --
        for c_relacao in ( select pr.rowid rowid_pedido
                                , ip.rowid rowid_item
                                , pr.num_reembolso
                                , ip.num_item_pagamento_ts
                             from ts.pedido_reembolso pr
                                , ts.itens_pagamento ip
                            where pr.num_item_pagamento_ts = ip.num_item_pagamento_ts
                              and ip.num_pagamento_ts      = p_num_pagamento_ts
                               )
        loop
            v_posicao     := 4;
            BEGIN
              update ts.pedido_reembolso a
                 set ind_situacao             = 46
                   , dt_pagamento             = null
                   , num_item_pagamento_ts    = null
               where rowid = c_relacao.rowid_pedido;
               --
               TS.AGENDA_NOTIFICACAO_REEMBOLSO(c_relacao.num_reembolso, 2,42);
               --
            EXCEPTION
               WHEN OTHERS THEN
                  p_cod_retorno := 9;
                  p_msg_retorno := 'rb_atualiza_sit_cancela_pgto - Erro na atualização da tabela PEDIDO_REEMBOLSO. num_reembolso ('||c_relacao.num_reembolso||').' || v_posicao || ': ' || ts_util.MsgErro;
                  return;
            END;
            v_posicao  := 5;
            BEGIN
                 DELETE itens_pagamento
                  WHERE rowid = c_relacao.rowid_item;
            EXCEPTION
                WHEN OTHERS THEN
                  p_cod_retorno := 9;
                  p_msg_retorno := 'rb_atualiza_sit_cancela_pgto - Erro na exclusão da tabela ITENS_PAGAMENTO. num_item_pagamento_ts ('||c_relacao.num_item_pagamento_ts||').' || v_posicao || ': ' || ts_util.MsgErro;
                  return;
            END;
            v_posicao  := 6;
            --
            GeraOcorrencia(p_num_reembolso=>c_relacao.num_reembolso,
                           p_cod_ocorrencia=>59,   --- Pagamento não efetuado
                           p_txt_obs=>null,
                           p_txt_reembolso=>p_txt_obs_canc,
                           p_cod_usuario=>p_cod_usuario_canc,
                           p_cod_retorno=>p_cod_retorno,
                           p_msg_retorno=>p_msg_retorno,
                           p_num_seq_item=>null);
            if  p_cod_retorno <> 0 then
               return;
            end if;
            -- INICIO DA ALTERAÇÃO SD1591536
            -- Gravar memória para calculo do saldo de reembolso
            v_xml_saldo := '<PARAMETROS>';
            v_xml_saldo := v_xml_saldo || '<NUM_REEMBOLSO>' || c_relacao.num_reembolso || '</NUM_REEMBOLSO>';
            v_xml_saldo := v_xml_saldo || '<IND_ORIGEM>R</IND_ORIGEM>';
            v_xml_saldo := v_xml_saldo || '<IND_TIPO>C</IND_TIPO>';
            v_xml_saldo := v_xml_saldo || '<IND_COMMIT>N</IND_COMMIT>';
            v_xml_saldo := v_xml_saldo || '<COD_USUARIO>' || p_cod_usuario_canc || '</COD_USUARIO>';
            v_xml_saldo := v_xml_saldo || '</PARAMETROS>';
            --
            rb_calcula_reembolso.gravar_memoria_saldo (v_xml_saldo, v_cod_retorno , v_msg_retorno);
            --
            if v_cod_retorno <> 0 then
                ts_log_execucao ('RB_REEMBOLSO'
                      , NULL
                      , ts_util.MsgErro
                      , v_msg_retorno
                              , 'Erro: rb_atualiza_sit_cancela_pgto' ) ;
            end if;
            -- Gravar memória para calculo do saldo de sessoes
            v_xml_saldo := '<PARAMETROS>';
            v_xml_saldo := v_xml_saldo || '<NUM_REEMBOLSO>' || c_relacao.num_reembolso || '</NUM_REEMBOLSO>';
            v_xml_saldo := v_xml_saldo || '<IND_ORIGEM>R</IND_ORIGEM>';
            v_xml_saldo := v_xml_saldo || '<IND_TIPO>C</IND_TIPO>';
            v_xml_saldo := v_xml_saldo || '<IND_COMMIT>N</IND_COMMIT>';
            v_xml_saldo := v_xml_saldo || '<COD_USUARIO>' || p_cod_usuario_canc || '</COD_USUARIO>';
            v_xml_saldo := v_xml_saldo || '</PARAMETROS>';
            --
            rb_calcula_reembolso.gravar_memoria_sessoes (v_xml_saldo, v_cod_retorno , v_msg_retorno);
            --
            if v_cod_retorno <> 0 then
                 ts_log_execucao ('RB_REEMBOLSO'
                       , NULL
                       , ts_util.MsgErro
                       , v_msg_retorno
                       , 'Erro: rb_atualiza_sit_cancela_pgto'
                       ) ;
            end if;
            v_xml_saldo := '<PARAMETROS>';
            v_xml_saldo := v_xml_saldo || '<NUM_REEMBOLSO>' || c_relacao.num_reembolso || '</NUM_REEMBOLSO>';
            v_xml_saldo := v_xml_saldo || '<IND_ORIGEM>R</IND_ORIGEM>';
            v_xml_saldo := v_xml_saldo || '<IND_TIPO>C</IND_TIPO>';
            v_xml_saldo := v_xml_saldo || '<IND_COMMIT>N</IND_COMMIT>';
            v_xml_saldo := v_xml_saldo || '<COD_USUARIO>' || p_cod_usuario_canc || '</COD_USUARIO>';
            v_xml_saldo := v_xml_saldo || '</PARAMETROS>';
            --
            rb_calcula_reembolso.gravar_memoria_procedimentos (v_xml_saldo, v_cod_retorno , v_msg_retorno);
            --
            if v_cod_retorno <> 0 then
               ts_log_execucao ('RB_REEMBOLSO'
                     , NULL
                     , ts_util.MsgErro
                     , v_msg_retorno
                     , 'Erro: rb_atualiza_sit_cancela_pgto'
                     ) ;
            end if;
            --
            -- FIM DA ALTERAÇÃO SD1591536
        end loop;
        --
        v_posicao     := 6;
        p_cod_retorno := 0;
        p_msg_retorno := '  ';
        --
    exception
    when others then
         p_cod_retorno := 9;
         p_msg_retorno := 'RB_ATUALIZA_SIT_CANCELA_PGTO-' || v_posicao || ': ' || ts_util.MsgErro;
         rollback;
         return;
    end;
    --
    PROCEDURE rb_atualiza_situacao_pgto(p_num_pagamento_ts IN     NUMBER
                                       ,p_dt_pagamento     IN     DATE
                                       ,p_ind_situacao     IN     VARCHAR2
                                       ,p_cod_ocorrencia   IN     NUMBER
                                       ,p_cod_usuario      IN     VARCHAR2
                                       ,p_txt_obs          IN     VARCHAR2
                                       ,p_msg_retorno         OUT VARCHAR2
                                       ,p_cod_retorno         OUT NUMBER) IS
      --
      v_posicao     PLS_INTEGER;
      v_envia_email VARCHAR2(1);
      --
    BEGIN
      --
      v_posicao := 0;
      IF p_num_pagamento_ts IS NULL THEN
        p_cod_retorno := 1;
        p_msg_retorno := 'Identificação do pagamento não informado';
        RETURN;
      END IF;
      --
      v_posicao := 5;
      FOR c_relacao IN (SELECT ip.num_reembolso
                              ,pr.txt_email
                          FROM itens_pagamento  ip
                              ,pedido_reembolso pr
                         WHERE num_pagamento_ts = p_num_pagamento_ts
                           AND ip.num_reembolso = pr.num_reembolso)
      LOOP
        --
        v_posicao := 10;
        UPDATE ts.pedido_reembolso a
           SET ind_situacao   = p_ind_situacao
             , a.dt_pagamento = p_dt_pagamento
         WHERE num_reembolso = c_relacao.num_reembolso;
        --
        TS.AGENDA_NOTIFICACAO_REEMBOLSO(c_relacao.num_reembolso, 2,p_ind_situacao);
        --
        v_posicao := 15;
        --
        GeraOcorrencia(p_num_reembolso  => c_relacao.num_reembolso
                      ,p_cod_ocorrencia => p_cod_ocorrencia
                      ,p_txt_obs        => NULL
                      ,p_txt_reembolso  => p_txt_obs
                      ,p_cod_usuario    => p_cod_usuario
                      ,p_cod_retorno    => p_cod_retorno
                      ,p_msg_retorno    => p_msg_retorno
                      ,p_num_seq_item   => NULL);
        --
        IF p_cod_retorno <> 0 THEN
          RETURN;
        END IF;
        --
        IF p_ind_situacao = '46' THEN
          --
          BEGIN
            SELECT NVL(ind_envia_email, 'N')
              INTO v_envia_email
              FROM situacao_reembolso
             WHERE cod_situacao = TO_NUMBER(p_ind_situacao);
          EXCEPTION
            WHEN no_data_found THEN
              v_envia_email := 'N';
          END;
          --
          -- Envia o Email
          IF v_envia_email = 'S' THEN  -- envia email somente para PNE, o restante ser¿ pela rotina de garva¿¿o do reembolso.
            --
            ts.rbm_comunicacao_situacao(TO_NUMBER(p_ind_situacao)
                                       ,c_relacao.num_reembolso
                                       ,NULL
                                       ,NULL
                                       ,NULL
                                       ,c_relacao.txt_email
                                       ,p_cod_retorno
                                       ,p_msg_retorno
                                       , 'N' -- p_versao
                                       , null -- num_reemb_multi
                                       , p_txt_obs
                                       );
            --
            IF p_cod_retorno != 0 THEN
              RETURN;
            END IF;
            --
          END IF;
          --
        END IF;
        --
      END LOOP;
      --
      v_posicao     := 20;
      p_cod_retorno := 0;
      p_msg_retorno := ' ';
      --
    EXCEPTION
      WHEN OTHERS THEN
        p_cod_retorno := 9;
        p_msg_retorno := 'RB_ATUALIZA_SITUACAO_PGTO - ' || v_posicao || ': ' || ts_util.MsgErro;
        ROLLBACK;
        RETURN;
    END rb_atualiza_situacao_pgto;
    --
    --
    function  get_rs_favorecidos( p_cod_ts_contrato     in varchar2
                                , p_num_associado       in varchar2
                                , p_ind_retorna_count   in varchar2 default 'N'
                                )
    return sys_refcursor
    is
        c                           sys_refcursor;
        v_Sql                       varchar2(4000) := '';
        v_ind_tipo_pessoa_contrato  varchar2(2);
        v_linha                     pls_integer;
    begin
        --
        begin
            select  ind_tipo_pessoa_contrato
              into  v_ind_tipo_pessoa_contrato
              from  beneficiario
              where cod_ts_contrato = p_cod_ts_contrato
                and num_associado   = p_num_associado;
        exception
            when others then
              v_ind_tipo_pessoa_contrato := null;
        end;
        --
        v_linha := 30;
        --
        if nvl(p_ind_retorna_count,'N') = 'S' then
            v_Sql := ' select sum(total) total from (
                                    select count(*) total';
        else
            v_Sql := v_Sql || ' select a.nome_associado
                                , a.cod_entidade_ts
                                , be.num_cpf
                                , a.tipo_associado
                                , a.num_associado';
        end if;
        --
        v_linha := 40;
        --
        v_Sql := v_Sql || ' from  associado a
                                , beneficiario_entidade be
                           where a.cod_ts_tit in ( select cod_ts_tit from associado where num_associado = :num_associado )
                           and a.cod_entidade_ts = be.cod_entidade_ts
                           and be.num_cpf        is not null
                           and a.num_associado   != :num_associado
                           and ts_calcula_idade (be.data_nascimento,TRUNC (SYSDATE),''A'') > 17
                           and a.tipo_associado != ''T''

                           UNION

                           select
                           ';


        -- executa a pesquisa de responsavel legal na contrato contratante apenas se for pessoa fisica
        v_linha := 50;
        if v_ind_tipo_pessoa_contrato = 'F' then

             if nvl(p_ind_retorna_count,'N') = 'S' then
                 v_Sql := v_Sql || ' count(*) total';
             else
                 v_Sql := v_Sql || '  es.nome_entidade nome_associado
                           , cc.cod_entidade_ts
                           , es.num_cpf
                           , ''R'' tipo_associado
                           , null  num_associado';
             end if;
             --
             v_linha := 60;
             --
             v_Sql := v_Sql || ' from  contrato_contratante cc
                                     , entidade_sistema es
                            where cc.cod_entidade_ts = es.cod_entidade_ts
                              and cc.cod_ts_contrato = :cod_ts_contrato
                              and num_cpf            is not null

                              UNION

                              select
                             ';
        end if;
        --
        v_linha := 70;
        --
        if nvl(p_ind_retorna_count,'N') = 'S' then
            v_Sql := v_Sql || ' count(*) total';
        else
            v_Sql := v_Sql || ' bf.nome_resp_reemb nome_associado
                                , null cod_entidade_ts
                                , bf.num_cpf_resp_reemb num_cpf
                                , ''R'' tipo_associado
                                , null num_associado';
        end if;
        --
        v_linha := 80;
        --
        v_Sql := v_Sql || ' from  beneficiario_faturamento bf
                           where bf.cod_ts = ( select cod_ts_tit from associado where num_associado = :num_associado )
                             and bf.nome_resp_reemb is not null
                             and bf.num_cpf_resp_reemb is not null
                           ';
        --
        v_linha := 90;
        --
        if nvl(p_ind_retorna_count,'N') = 'S' then
            v_Sql := v_Sql || ' ) ';
        end if;
        --
        v_linha := 100;
        --
        if v_ind_tipo_pessoa_contrato = 'F' then
            open c for v_Sql
            using p_num_associado, p_num_associado, p_cod_ts_contrato, p_num_associado;
        else
            open c for v_Sql
            using p_num_associado, p_num_associado, p_num_associado;
        end if;
        --
        return c;
        --
    exception
    when others then
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO'
                        , v_linha
                        , 'ERRO AO BUSCAR FAVORECIDOS'
                        , ts.top_utl_padrao.msgerro
                        , 'get_rs_favorecidos'
                        );
        open c for select * from dual where 1 = 2;
        return c;
    end get_rs_favorecidos;
    --
    procedure get_consulta_sessoes ( p_xml_parametos       in clob
                                   , p_xml_retorno         out clob
                                   , p_cod_retorno         out number
                                   , p_msg_retorno         out varchar2
                                   )
    is
        tab_parans                  top_utl_xml.tbl_fields;

        v_num_reembolso             pedido_reembolso.num_reembolso%type;
        v_cod_ts_contrato           pedido_reembolso.cod_ts_contrato%type;
        v_num_contrato              pedido_reembolso.num_contrato%type;
        v_cod_procedimento          procedimento_reembolso.cod_procedimento_cm%type;
        v_num_associado             pedido_reembolso.num_associado%type;
        v_cod_ts_tit                pedido_reembolso.cod_ts_tit%type;
        v_num_titular               pedido_reembolso.num_titular%type;
        v_dt_referencia             varchar2(20);
        v_cod_ts                    number;
        v_qtd_limite_ano            number;

        v_qtd_limite_ano_saldo      number;
        v_qtd_limite_ano_ultilizado number;
        v_qtd_limite                number;
        v_dt_ini_vigencia           VARCHAR2(30);
        v_cod_operadora             VARCHAR2(30);

        v_xml_saldo                 clob;
    begin
        --

        --
        p_cod_retorno := 0;
        --
        tab_parans := ts.top_utl_xml.toCollection( p_xml_parametos ); -- Retorna um MAP ( chave , valor ) com os nós do XML;
        --
        if  ( not tab_parans.exists('COD_TS_CONTRATO') ) or nvl(tab_parans('COD_TS_CONTRATO').valor(1),'X') = 'X' then
            v_cod_ts_contrato := null;
        else
            v_cod_ts_contrato := tab_parans('COD_TS_CONTRATO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_CONTRATO') ) or nvl(tab_parans('NUM_CONTRATO').valor(1),'X') = 'X' then
            v_num_contrato := null;
        else
            v_num_contrato := tab_parans('NUM_CONTRATO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_TS_TIT') ) or nvl(tab_parans('COD_TS_TIT').valor(1),0) = 0 then
            v_cod_ts_tit := null;
        else
            v_cod_ts_tit := tab_parans('COD_TS_TIT').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_TITULAR') ) or nvl(tab_parans('NUM_TITULAR').valor(1),0) = 0 then
            v_num_titular := null;
        else
            v_num_titular := tab_parans('NUM_TITULAR').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_PROCEDIMENTO') ) or nvl(tab_parans('COD_PROCEDIMENTO').valor(1),0) = 0 then
            v_cod_procedimento := null;
        else
            v_cod_procedimento := tab_parans('COD_PROCEDIMENTO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_TS') ) or nvl(tab_parans('COD_TS').valor(1),'X') = 'X' then
            v_cod_ts := null;
        else
            v_cod_ts := tab_parans('COD_TS').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_ASSOCIADO') ) or nvl(tab_parans('NUM_ASSOCIADO').valor(1),'X') = 'X' then
            v_num_associado := null;
        else
            v_num_associado := tab_parans('NUM_ASSOCIADO').valor(1);
        end if;

        if  ( not tab_parans.exists('COD_OPERADORA') ) or nvl(tab_parans('COD_OPERADORA').valor(1),'X') = 'X' then
            v_cod_operadora := null;
        else
            v_cod_operadora := tab_parans('COD_OPERADORA').valor(1);
        end if;

        if v_cod_operadora !=14 then
            if  ( not tab_parans.exists('DT_INI_VIGENCIA_BENEF') ) or nvl(tab_parans('DT_INI_VIGENCIA_BENEF').valor(1),'X') = 'X' then
                v_dt_ini_vigencia := null;
            else
                v_dt_ini_vigencia := tab_parans('DT_INI_VIGENCIA_BENEF').valor(1);
            end if;

        else
            if  ( not tab_parans.exists('DT_INI_VIGENCIA_EMP') ) or nvl(tab_parans('DT_INI_VIGENCIA_EMP').valor(1),'X') = 'X' then
                v_dt_ini_vigencia := null;
            else
                v_dt_ini_vigencia := tab_parans('DT_INI_VIGENCIA_EMP').valor(1);
            end if;
        end if;

        --
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<SESSOES>';
        --
        /*if v_cod_ts_contrato is not null then
             begin
                  select max(dt_ini_cobranca)
                   into v_dt_ini_vigencia
                   from contrato_cobranca
                  where cod_ts_contrato    = v_cod_ts_contrato
                    and dt_ini_cobranca   <= trunc(sysdate);
             exception
                 when others then
                     v_qtd_limite_ano := null;
             end;
        else
            begin
             select max(dt_ini_contrato)
               into v_dt_ini_vigencia
               from reemb_mig_cont_sessoes
               where num_associado = v_num_associado
                 and num_contrato = v_num_contrato;
             exception
                 when others then
                     v_qtd_limite_ano := null;
             end;
        end if;*/
        --
        for item
        in ( select im.item_medico, im.nome_item, im.qtd_limite
             from   ts.itens_medicos im
             where  im.item_medico       in ( '62504037', '62504029', '60101016', '62504010', '20104219' )
           )
        loop

              v_xml_saldo := '<PARAMETROS>';
              v_xml_saldo := v_xml_saldo || '<NUM_ASSOCIADO>'     || v_num_associado               || '</NUM_ASSOCIADO>';
              v_xml_saldo := v_xml_saldo || '<COD_TS_CONTRATO>'   || v_cod_ts_contrato             || '</COD_TS_CONTRATO>';
              v_xml_saldo := v_xml_saldo || '<DT_REFERENCIA>'     || to_char(sysdate,'dd/mm/yyyy') || '</DT_REFERENCIA>';
              v_xml_saldo := v_xml_saldo || '<COD_PROCEDIMENTO>'  || item.item_medico              || '</COD_PROCEDIMENTO>';
              v_xml_saldo := v_xml_saldo || '<QTD_LIMITE_ANUAL>'  || item.qtd_limite               || '</QTD_LIMITE_ANUAL>';
              v_xml_saldo := v_xml_saldo || '<COD_OPERADORA>'     || v_cod_operadora               || '</COD_OPERADORA>';
              v_xml_saldo := v_xml_saldo || '<NUM_TITULAR>'       || v_num_titular                 || '</NUM_TITULAR>';
              v_xml_saldo := v_xml_saldo || '<NUM_CONTRATO>'      || v_num_contrato                || '</NUM_CONTRATO>';
              v_xml_saldo := v_xml_saldo || '<DT_INI_VIGENCIA>'   || v_dt_ini_vigencia             || '</DT_INI_VIGENCIA>';
              v_xml_saldo := v_xml_saldo || '</PARAMETROS>';
              --
              ts.rb_calcula_reembolso.get_saldo_sessoes(v_xml_saldo,v_qtd_limite_ano_saldo,v_qtd_limite_ano_ultilizado, v_qtd_limite,p_cod_retorno,p_msg_retorno);
              --
              if p_cod_retorno <> 0 then
                return;
              end if;
              --
              p_xml_retorno := p_xml_retorno || '<DADOS>';
              p_xml_retorno := p_xml_retorno || '<ITEM_MEDICO>'                 || item.item_medico               || '</ITEM_MEDICO>';
              p_xml_retorno := p_xml_retorno || '<NOME_ITEM>'                   || item.nome_item                 || '</NOME_ITEM>';
              p_xml_retorno := p_xml_retorno || '<QTD_LIMITE_ANO>'              || v_qtd_limite                   || '</QTD_LIMITE_ANO>';
              p_xml_retorno := p_xml_retorno || '<QTD_LIMITE_ANO_SALDO>'        || v_qtd_limite_ano_saldo         || '</QTD_LIMITE_ANO_SALDO>';
              p_xml_retorno := p_xml_retorno || '<QTD_LIMITE_ANO_UTILIZADO>'    || v_qtd_limite_ano_ultilizado    || '</QTD_LIMITE_ANO_UTILIZADO>';
              p_xml_retorno := p_xml_retorno || '</DADOS>';

        end loop;
        --
        p_xml_retorno := p_xml_retorno || '</SESSOES>';
        return;
        --
    exception
    when others then

        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 00, 'Erro', ts.top_utl_padrao.msgerro, 'ERRO AO BUSCAR FAVORECIDOS' );

        p_cod_retorno := 9;
        p_msg_retorno := 'Ocorreu um erro na busca dos dados de sessões';


    end;

    --------------------------------------------------------------------------------------------------
    -- VERIFICA SALDO DE PROCEDIMENTOS
    --------------------------------------------------------------------------------------------------

    procedure get_consulta_saldo_proc ( p_xml_parametos       in clob
                                   , p_xml_retorno         out clob
                                   , p_cod_retorno         out number
                                   , p_msg_retorno         out varchar2
                                   )
    is
        tab_parans                  top_utl_xml.tbl_fields;

        v_num_reembolso             pedido_reembolso.num_reembolso%type;
        v_cod_ts_contrato           pedido_reembolso.cod_ts_contrato%type;
        v_num_contrato              pedido_reembolso.num_contrato%type;
        v_cod_procedimento          procedimento_reembolso.cod_procedimento_cm%type;
        v_num_associado             pedido_reembolso.num_associado%type;
        v_cod_ts_tit                pedido_reembolso.cod_ts_tit%type;
        v_num_titular               pedido_reembolso.num_titular%type;
        v_dt_referencia             varchar2(20);
        v_cod_ts                    number;
        v_qtd_limite_ano            number;

        v_qtd_limite_ano_saldo      number;
        v_qtd_limite_ano_ultilizado number;
        v_qtd_limite                number;
        v_dt_ini_vigencia           date;

        v_xml_saldo                 clob;
    begin
        --
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 00, 'Erro', ts.top_utl_padrao.msgerro, 'ERRO AO BUSCAR FAVORECIDOS' );
        --
        p_cod_retorno := 0;
        --
        tab_parans := ts.top_utl_xml.toCollection( p_xml_parametos ); -- Retorna um MAP ( chave , valor ) com os nós do XML;
        --
        if  ( not tab_parans.exists('COD_TS_CONTRATO') ) or nvl(tab_parans('COD_TS_CONTRATO').valor(1),'X') = 'X' then
            v_cod_ts_contrato := null;
        else
            v_cod_ts_contrato := tab_parans('COD_TS_CONTRATO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_CONTRATO') ) or nvl(tab_parans('NUM_CONTRATO').valor(1),'X') = 'X' then
            v_num_contrato := null;
        else
            v_num_contrato := tab_parans('NUM_CONTRATO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_TS_TIT') ) or nvl(tab_parans('COD_TS_TIT').valor(1),0) = 0 then
            v_cod_ts_tit := null;
        else
            v_cod_ts_tit := tab_parans('COD_TS_TIT').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_TITULAR') ) or nvl(tab_parans('NUM_TITULAR').valor(1),0) = 0 then
            v_num_titular := null;
        else
            v_num_titular := tab_parans('NUM_TITULAR').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_PROCEDIMENTO') ) or nvl(tab_parans('COD_PROCEDIMENTO').valor(1),0) = 0 then
            v_cod_procedimento := null;
        else
            v_cod_procedimento := tab_parans('COD_PROCEDIMENTO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_TS') ) or nvl(tab_parans('COD_TS').valor(1),'X') = 'X' then
            v_cod_ts := null;
        else
            v_cod_ts := tab_parans('COD_TS').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_ASSOCIADO') ) or nvl(tab_parans('NUM_ASSOCIADO').valor(1),'X') = 'X' then
            v_num_associado := null;
        else
            v_num_associado := tab_parans('NUM_ASSOCIADO').valor(1);
        end if;
        --
        p_xml_retorno := '<?xml version="1.0"?>';
        p_xml_retorno := p_xml_retorno || '<SESSOES>';
        --
        if v_cod_ts_contrato is not null then
             begin
                  select max(dt_ini_cobranca)
                   into v_dt_ini_vigencia
                   from contrato_cobranca
                  where cod_ts_contrato    = v_cod_ts_contrato
                    and dt_ini_cobranca   <= trunc(sysdate);
             exception
                 when others then
                     v_qtd_limite_ano := null;
             end;
        end if;
        --
        for item
        in ( select im.item_medico, im.nome_item, im.qtd_limite
             from   ts.itens_medicos im
             where  im.item_medico       in ( '62504037', '62504029', '60101016', '62504010', '20104219' )
           )
        loop

              v_xml_saldo := '<PARAMETROS>';
              v_xml_saldo := v_xml_saldo || '<NUM_ASSOCIADO>'     || v_num_associado               || '</NUM_ASSOCIADO>';
              v_xml_saldo := v_xml_saldo || '<COD_TS_CONTRATO>'   || v_cod_ts_contrato             || '</COD_TS_CONTRATO>';
              v_xml_saldo := v_xml_saldo || '<DT_REFERENCIA>'     || to_char(sysdate,'dd/mm/yyyy') || '</DT_REFERENCIA>';
              v_xml_saldo := v_xml_saldo || '<COD_PROCEDIMENTO>'  || item.item_medico              || '</COD_PROCEDIMENTO>';
              v_xml_saldo := v_xml_saldo || '<QTD_LIMITE_ANUAL>'  || item.qtd_limite               || '</QTD_LIMITE_ANUAL>';
              v_xml_saldo := v_xml_saldo || '<NUM_TITULAR>'       || v_num_titular                 || '</NUM_TITULAR>';
              v_xml_saldo := v_xml_saldo || '<NUM_CONTRATO>'      || v_num_contrato                || '</NUM_CONTRATO>';
              v_xml_saldo := v_xml_saldo || '<DT_INI_VIGENCIA>'   || v_dt_ini_vigencia             || '</DT_INI_VIGENCIA>';
              v_xml_saldo := v_xml_saldo || '</PARAMETROS>';
              --
              if p_cod_retorno <> 0 then
                return;
              end if;
              --
              p_xml_retorno := p_xml_retorno || '<DADOS>';
              p_xml_retorno := p_xml_retorno || '<ITEM_MEDICO>'                 || item.item_medico               || '</ITEM_MEDICO>';
              p_xml_retorno := p_xml_retorno || '<NOME_ITEM>'                   || item.nome_item                 || '</NOME_ITEM>';
              p_xml_retorno := p_xml_retorno || '<QTD_LIMITE_ANO>'              || v_qtd_limite                   || '</QTD_LIMITE_ANO>';
              p_xml_retorno := p_xml_retorno || '<QTD_LIMITE_ANO_SALDO>'        || v_qtd_limite_ano_saldo         || '</QTD_LIMITE_ANO_SALDO>';
              p_xml_retorno := p_xml_retorno || '<QTD_LIMITE_ANO_UTILIZADO>'    || v_qtd_limite_ano_ultilizado    || '</QTD_LIMITE_ANO_UTILIZADO>';
              p_xml_retorno := p_xml_retorno || '</DADOS>';

        end loop;
        --
        p_xml_retorno := p_xml_retorno || '</SESSOES>';
        return;
        --
    exception
    when others then

        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 00, 'Erro', ts.top_utl_padrao.msgerro, 'ERRO AO BUSCAR FAVORECIDOS' );

        p_cod_retorno := 9;
        p_msg_retorno := 'Ocorreu um erro na busca dos dados de sessões';


    end;
    --
    --
    PROCEDURE get_funcoes_procedimento ( p_xml_parametros       in clob
                                   , p_xml_retorno         out clob
                                   , p_cod_retorno         out number
                                   , p_msg_retorno         out varchar2
                                   )
    is

    tab_parans              top_utl_xml.tbl_fields;
    v_sigla_tabela_reembolso    varchar2(20);

    v_posicao                   number;
    v_ind_funcao_0              varchar2(1);
    v_ind_funcao_1              varchar2(1);
    v_ind_funcao_2              varchar2(1);
    v_ind_funcao_3              varchar2(1);
    v_ind_funcao_4              varchar2(1);
    v_ind_funcao_5              varchar2(1);
    v_ind_funcao_6              varchar2(1);
    v_ind_funcao_7              varchar2(1);
    v_ind_funcao_8              varchar2(1);
    v_ind_funcao_9              varchar2(1);
    v_ind_funcao_10             varchar2(1);
    v_ind_funcao_11             varchar2(1);
    v_ind_funcao_12             varchar2(1);
    v_ind_funcao_13             varchar2(1);
    v_cod_motivo_reembolso      varchar2(5);

    v_cur                       sys_refcursor;
    v_xml_dados                 clob;

    v_cod_ts_contrato           pedido_reembolso.cod_ts_contrato%type;
    v_dt_atendimento            date;
    v_dt_ini_vigencia           date;
    v_cod_plano                 pedido_reembolso.cod_plano%type;
    v_cod_inspetoria_ts         pedido_reembolso.cod_inspetoria_ts_abertura%type;
    v_cod_operadora             pedido_reembolso.cod_operadora_contrato%type;
    v_cod_procedimento          procedimento_reembolso.cod_procedimento%type;

    v_nome_item                 itens_medicos.nome_item%type;
    v_item_medico               itens_medicos.item_medico%type;
    v_ind_perfusionista         itens_medicos.ind_perfusionista%type;
    v_ind_pediatra_sala_parto   itens_medicos.ind_pediatra_sala_parto%type;
    v_ind_auxiliar_sadt         itens_medicos.ind_auxiliar_sadt%type;
    v_ind_cirurgia              itens_medicos.ind_cirurgia%type;
    v_ind_instrumentador        itens_medicos.ind_pgto_instrumentador%type;
    v_cod_porte                 valor_procedimento.cod_porte%type;
    v_qtd_auxiliares            valor_procedimento.qtd_auxiliares%type;
    v_cod_capitulo_amb          itens_medicos.cod_capitulo%type;

    v_ind_auxiliar_anestesista  varchar2(1);
    v_ind_instrumentador_porte  varchar2(1);

    BEGIN
        --
        tab_parans := ts.top_utl_xml.toCollection( p_xml_parametros ); -- Retorna um MAP ( chave , valor ) com os nós do XML;
        --
        if  ( not tab_parans.exists('COD_TS_CONTRATO') ) or nvl(tab_parans('COD_TS_CONTRATO').valor(1),'X') = 'X' then
            v_cod_ts_contrato := null;
        else
            v_cod_ts_contrato := tab_parans('COD_TS_CONTRATO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('DT_ATENDIMENTO') ) or nvl(tab_parans('DT_ATENDIMENTO').valor(1),'X') = 'X' then
            v_dt_atendimento := null;
        else
            v_dt_atendimento := to_date(tab_parans('DT_ATENDIMENTO').valor(1),'DD/MM/YYYY');
        end if;
        --
        if  ( not tab_parans.exists('COD_PLANO') ) or nvl(tab_parans('COD_PLANO').valor(1),'X') = 'X' then
            v_cod_plano := null;
        else
            v_cod_plano := tab_parans('COD_PLANO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_INSPETORIA_TS') ) or nvl(tab_parans('COD_INSPETORIA_TS').valor(1),'X') = 'X' then
            v_cod_inspetoria_ts := null;
        else
            v_cod_inspetoria_ts := tab_parans('COD_INSPETORIA_TS').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_OPERADORA') ) or nvl(tab_parans('COD_OPERADORA').valor(1),'X') = 'X' then
            v_cod_operadora := null;
        else
            v_cod_operadora := tab_parans('COD_OPERADORA').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_MOTIVO_REEMBOLSO') ) or nvl(tab_parans('COD_MOTIVO_REEMBOLSO').valor(1),'X') = 'X' then
            v_cod_motivo_reembolso := null;
        else
            v_cod_motivo_reembolso := tab_parans('COD_MOTIVO_REEMBOLSO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_PROCEDIMENTO') ) or nvl(tab_parans('COD_PROCEDIMENTO').valor(1),'X') = 'X' then
            v_cod_procedimento := null;
        else
            v_cod_procedimento := tab_parans('COD_PROCEDIMENTO').valor(1);
        end if;
        --
        p_cod_retorno := 0 ;
        p_msg_retorno := ' ';
        --
         begin
             select max(dt_ini_cobranca)
               into v_dt_ini_vigencia
               from contrato_cobranca
              where cod_ts_contrato    = v_cod_ts_contrato
                and dt_ini_cobranca   <= v_dt_atendimento;
         exception
            when others then
                v_dt_ini_vigencia := null;
         end;
         --
         begin
             select sigla_tabela_reembolso
               into v_sigla_tabela_reembolso
               from contrato_adesao_plano
              where cod_plano       = v_cod_plano
                and cod_ts_contrato = v_cod_ts_contrato
                and dt_ini_vigencia = v_dt_ini_vigencia;
         exception
            when others then
                v_sigla_tabela_reembolso := null;
         end;

         if v_sigla_tabela_reembolso is null then
            begin
                select  sigla_tabela_reembolso
                  into v_sigla_tabela_reembolso
                  from padrao_reembolso_anestesia
                 where  cod_operadora      =   v_cod_operadora
                   and  dt_ini_vigencia in ( select max(dt_ini_vigencia)
                                               from padrao_reembolso_anestesia
                                              where cod_operadora     = v_cod_operadora
                                                and cod_inspetoria_ts = v_cod_inspetoria_ts
                                            )
                   and  cod_inspetoria_ts = v_cod_inspetoria_ts
                   and  rownum < 2;
            exception
                when others then
                    v_sigla_tabela_reembolso := null;
            end;
         end if;
         --
         v_xml_dados := '<DADOS>';
         --
         begin
             select  a.nome_item
                   , a.item_medico
                   , a.ind_perfusionista
                   , a.ind_pediatra_sala_parto
                   , a.ind_auxiliar_sadt
                   , a.ind_cirurgia
                   , a.ind_pgto_instrumentador ind_instrumentador
                   , b.cod_porte
                   , b.qtd_auxiliares
                   , a.cod_capitulo cod_capitulo_amb
               into
                     v_nome_item
                   , v_item_medico
                   , v_ind_perfusionista
                   , v_ind_pediatra_sala_parto
                   , v_ind_auxiliar_sadt
                   , v_ind_cirurgia
                   , v_ind_instrumentador
                   , v_cod_porte
                   , v_qtd_auxiliares
                   , v_cod_capitulo_amb
               from  itens_medicos a, valor_procedimento b
              where  a.item_medico         =  v_cod_procedimento
                and  b.sigla_tabela        =  v_sigla_tabela_reembolso
                and  a.item_medico         =  b.item_medico;
         exception
            when others then
                 v_nome_item := null;
                 v_item_medico := null;
                 v_ind_perfusionista := null;
                 v_ind_pediatra_sala_parto := null;
                 v_ind_auxiliar_sadt := null;
                 v_ind_cirurgia := null;
                 v_ind_instrumentador := null;
                 v_cod_porte := null;
                 v_qtd_auxiliares := null;
                 v_cod_capitulo_amb:= null;
         end;


            v_ind_funcao_0   := 'N';
            v_ind_funcao_1   := 'N';
            v_ind_funcao_2   := 'N';
            v_ind_funcao_3   := 'N';
            v_ind_funcao_4   := 'N';
            v_ind_funcao_5   := 'N';
            v_ind_funcao_6   := 'N';
            v_ind_funcao_7   := 'N';
            v_ind_funcao_8   := 'N';
            v_ind_funcao_9   := 'N';
            v_ind_funcao_10  := 'N';
            v_ind_funcao_11  := 'N';
            v_ind_funcao_12  := 'N';
            v_ind_funcao_13  := 'N';

            if v_cod_motivo_reembolso <> 'ANE' then
                if substr(v_item_medico,1,2) <> '16'  then
                     if  v_ind_cirurgia = 'S' then
                         --- gera cirurgião
                         v_ind_funcao_0 := 'S';
                     else
                         --- gera clínico
                         v_ind_funcao_12 := 'S';
                     end if;

                end if;

                if  nvl(v_ind_cirurgia,'X') = 'S' then
                    if nvl(v_qtd_auxiliares,0) > 0  then
                        case
                            when v_qtd_auxiliares = 1 then
                                v_ind_funcao_1 := 'S';
                            when v_qtd_auxiliares = 2 then
                                v_ind_funcao_1 := 'S';
                                v_ind_funcao_2 := 'S';
                            when v_qtd_auxiliares = 3 then
                                v_ind_funcao_1 := 'S';
                                v_ind_funcao_2 := 'S';
                                v_ind_funcao_3 := 'S';
                            when v_qtd_auxiliares = 4 then
                                v_ind_funcao_1 := 'S';
                                v_ind_funcao_2 := 'S';
                                v_ind_funcao_3 := 'S';
                                v_ind_funcao_4 := 'S';
                            else null;
                        end case;
                    end if;
              end if;

            end if;

            if nvl(v_cod_porte,0) > 0  or v_cod_motivo_reembolso = 'ANE' then

                v_ind_funcao_6 := 'S';

                begin
                   select ind_auxiliar_anestesista,     ind_instrumentador_porte
                      into v_ind_auxiliar_anestesista,  v_ind_instrumentador_porte
                           from valor_porte
                                where sigla_tabela = v_sigla_tabela_reembolso
                                  and cod_porte    = v_cod_porte;
                exception
                   when no_data_found then
                        v_ind_auxiliar_anestesista := 'N';
                end;

                if v_ind_auxiliar_anestesista = 'S' or nvl(v_ind_perfusionista,'X') = 'S'  then
                   v_ind_funcao_7    := 'S';
                end if;

            end if;

            if v_cod_motivo_reembolso <>  'ANE' then
                if nvl(v_qtd_auxiliares,0) > 0 then
                    v_ind_funcao_5  := 'S';
                end if;
                --- gera função perfusionista
                if nvl(v_ind_perfusionista,'X') = 'S' then
                   v_ind_funcao_9  := 'S';
                end if;
                --- gera pediatra sala de parto
                if nvl(v_ind_pediatra_sala_parto,'X') = 'S' and  nvl(v_cod_capitulo_amb,0) <> 1 then
                   v_ind_funcao_10 := 'S';
                end if;
                --- gera função auxiliar de sadt
                if nvl(v_ind_auxiliar_sadt,'X') = 'S' then
                   v_ind_funcao_11  := 'S';
                end if;
            end if;
            --
            v_xml_dados := v_xml_dados || '<ITEM>';
            v_xml_dados := v_xml_dados || '<ITEM_MEDICO>'   || v_item_medico   || '</ITEM_MEDICO>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_0>'  || v_ind_funcao_0  || '</COD_FUNCAO_0>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_1>'  || v_ind_funcao_1  || '</COD_FUNCAO_1>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_2>'  || v_ind_funcao_2  || '</COD_FUNCAO_2>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_3>'  || v_ind_funcao_3  || '</COD_FUNCAO_3>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_4>'  || v_ind_funcao_4  || '</COD_FUNCAO_4>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_5>'  || v_ind_funcao_5  || '</COD_FUNCAO_5>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_6>'  || v_ind_funcao_6  || '</COD_FUNCAO_6>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_7>'  || v_ind_funcao_7  || '</COD_FUNCAO_7>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_8>'  || v_ind_funcao_8  || '</COD_FUNCAO_8>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_9>'  || v_ind_funcao_9  || '</COD_FUNCAO_9>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_10>' || v_ind_funcao_10 || '</COD_FUNCAO_10>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_11>' || v_ind_funcao_11 || '</COD_FUNCAO_11>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_12>' || v_ind_funcao_12 || '</COD_FUNCAO_12>';
            v_xml_dados := v_xml_dados || '<COD_FUNCAO_13>' || v_ind_funcao_13 || '</COD_FUNCAO_13>';
            v_xml_dados := v_xml_dados || '</ITEM>';
            --

         v_xml_dados := v_xml_dados || '</DADOS>';

         p_xml_retorno := v_xml_dados;
    exception
        when others then
            p_cod_retorno := 9;
            p_msg_retorno := 'Ocorreu um erro na busca das funcoes';
    end;
    --
    procedure altera_data_pagamento ( p_xml_parametros       in clob
                                    , p_cod_usuario          in varchar2
                                    , p_cod_retorno         out number
                                    , p_msg_retorno         out varchar2
                                    )
    is
        tab_parans              top_utl_xml.tbl_fields;

        v_num_reembolsos            varchar2(200);
        v_num_reembolso             varchar2(10);
        v_dt_prevista_pgto          date;
        v_cod_motivo_alter_dt_pgto  ts.pedido_reembolso.cod_motivo_alter_dt_pgto%type;
        v_ind_tipo_favorecido       ts.pedido_reembolso.ind_tipo_favorecido%type;
        v_nome_favorecido           ts.pedido_reembolso.nome_favorecido%type;
        v_num_cpf_favorecido        ts.pedido_reembolso.num_cpf_favorecido%type;
        v_ind_forma_pgto            ts.pedido_reembolso.ind_forma_pgto%type;
        v_cod_banco                 ts.pedido_reembolso.cod_banco%type;
        v_cod_agencia               ts.pedido_reembolso.cod_agencia%type;
        v_num_dv_agencia            ts.pedido_reembolso.num_dv_agencia%type;
        v_num_conta_corrente        ts.pedido_reembolso.num_conta_corrente%type;
        v_num_dv_cc                 ts.pedido_reembolso.num_dv_cc%type;
        v_num_protocolo             ts.pedido_reembolso.num_protocolo%type;
        v_num_favorecido            ts.pedido_reembolso.num_favorecido%type;
        v_txt_email                 varchar2(200);
        v_motivo_alter_dt_pgto      varchar2(1000);
        v_ind_banco_bloqueado       varchar2(5);

    begin
        --
        p_cod_retorno := 0;
        p_msg_retorno := 'Executado com sucesso';
        --
        TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', 00, 'Erro', p_xml_parametros, 'ALTERA DATA DE PAGAMENTO' );
        --
        tab_parans := ts.top_utl_xml.toCollection( p_xml_parametros );
        --
        if  ( not tab_parans.exists('REEMBOLSOS') ) or nvl(tab_parans('REEMBOLSOS').valor(1),'X') = 'X' then
            v_num_reembolsos := null;
        else
            v_num_reembolsos := tab_parans('REEMBOLSOS').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_PROTOCOLO') ) or nvl(tab_parans('NUM_PROTOCOLO').valor(1),'X') = 'X' then
            v_num_protocolo := null;
        else
            v_num_protocolo := tab_parans('NUM_PROTOCOLO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('DT_PREVISTA_PGTO') ) or nvl(tab_parans('DT_PREVISTA_PGTO').valor(1),'X') = 'X' then
            v_dt_prevista_pgto := null;
        else
            v_dt_prevista_pgto := to_date(tab_parans('DT_PREVISTA_PGTO').valor(1),'DD/MM/YYYY');
        end if;
        --
        if  ( not tab_parans.exists('COD_MOTIVO_ALTER_DT_PGTO') ) or nvl(tab_parans('COD_MOTIVO_ALTER_DT_PGTO').valor(1),'X') = 'X' then
            v_cod_motivo_alter_dt_pgto := null;
        else
            v_cod_motivo_alter_dt_pgto := tab_parans('COD_MOTIVO_ALTER_DT_PGTO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('IND_TIPO_FAVORECIDO') ) or nvl(tab_parans('IND_TIPO_FAVORECIDO').valor(1),'X') = 'X' then
            v_ind_tipo_favorecido := null;
        else
            v_ind_tipo_favorecido := tab_parans('IND_TIPO_FAVORECIDO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NOME_FAVORECIDO') ) or nvl(tab_parans('NOME_FAVORECIDO').valor(1),'X') = 'X' then
            v_nome_favorecido := null;
        else
            v_nome_favorecido := tab_parans('NOME_FAVORECIDO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_FAVORECIDO') ) or nvl(tab_parans('NUM_FAVORECIDO').valor(1),'X') = 'X' then
            v_num_favorecido := null;
        else
            v_num_favorecido := tab_parans('NUM_FAVORECIDO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_CPF_FAVORECIDO') ) or nvl(tab_parans('NUM_CPF_FAVORECIDO').valor(1),'X') = 'X' then
            v_num_cpf_favorecido := null;
        else
            v_num_cpf_favorecido :=  replace(replace(replace(tab_parans('NUM_CPF_FAVORECIDO').valor(1),'.',''),'-',''),'/','');
        end if;
        --
        if  ( not tab_parans.exists('IND_FORMA_PGTO') ) or nvl(tab_parans('IND_FORMA_PGTO').valor(1),'X') = 'X' then
            v_ind_forma_pgto := null;
        else
            v_ind_forma_pgto := tab_parans('IND_FORMA_PGTO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_BANCO') ) or nvl(tab_parans('COD_BANCO').valor(1),'X') = 'X' then
            v_cod_banco := null;
        else
            v_cod_banco := tab_parans('COD_BANCO').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('COD_AGENCIA') ) or nvl(tab_parans('COD_AGENCIA').valor(1),'X') = 'X' then
            v_cod_agencia := null;
        else
            v_cod_agencia := tab_parans('COD_AGENCIA').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_DV_AGENCIA') ) or nvl(tab_parans('NUM_DV_AGENCIA').valor(1),'X') = 'X' then
            v_num_dv_agencia := null;
        else
            v_num_dv_agencia := trim(tab_parans('NUM_DV_AGENCIA').valor(1));
        end if;
        --
        if  ( not tab_parans.exists('NUM_CONTA_CORRENTE') ) or nvl(tab_parans('NUM_CONTA_CORRENTE').valor(1),'X') = 'X' then
            v_num_conta_corrente := null;
        else
            v_num_conta_corrente := tab_parans('NUM_CONTA_CORRENTE').valor(1);
        end if;
        --
        if  ( not tab_parans.exists('NUM_DV_CC') ) or nvl(tab_parans('NUM_DV_CC').valor(1),'X') = 'X' then
            v_num_dv_cc := null;
        else
            v_num_dv_cc := tab_parans('NUM_DV_CC').valor(1);
        end if;
        --
        if v_dt_prevista_pgto is null then
             p_cod_retorno := 9;
             p_msg_retorno := 'Data prevista de pagamento não preenchida.';
             rollback;
             return;
         end if;
         --
         if v_dt_prevista_pgto < trunc(sysdate) then
             p_cod_retorno := 9;
             p_msg_retorno := 'Data prevista de pagamento não pode ser menor que a data atual.';
             rollback;
             return;
         end if;
        --
         begin
            select desc_motivo_alter_dt_pgto
            into   v_motivo_alter_dt_pgto
            from   motivo_alter_dt_pgto
            where  cod_motivo_alter_dt_pgto = v_cod_motivo_alter_dt_pgto;
         exception
            when others then
                v_motivo_alter_dt_pgto := null;
         end;
         --
         if v_ind_forma_pgto = 1 then

            if length(trim(v_num_dv_agencia)) > 1 then
                 p_cod_retorno := 9;
                 p_msg_retorno := 'Só é permitido 1 dígito para o DV da agência.';
                 return;
            end if;

        else
            v_cod_banco                   := null;
            v_cod_agencia                 := null;
            v_num_dv_agencia              := null;
            v_num_conta_corrente          := null;
            v_num_dv_cc                   := null;
        end if;
        --
        if v_cod_banco is not null then
            begin
               select ind_bloqueio into v_ind_banco_bloqueado from banco where cod_banco = v_cod_banco;
            exception
                when others then
                    v_ind_banco_bloqueado := null;
            end;

            if v_ind_banco_bloqueado = 'S' then
               p_cod_retorno := 9;
               p_msg_retorno := 'Não é permitido o cadastro do banco informado, banco bloqueado.';
               return;
            end if;

        end if;
        --
        for rb in (select /*+cardinality(x,10)*/
                          pr.num_reembolso, pr.dt_prevista_pgto, pr.txt_email
                   from   table( SPLIT_VARCHAR2(v_num_reembolsos , ',')) x, pedido_reembolso pr where pr.num_reembolso = x.column_value )
        loop
            GeraOcorrencia(rb.num_reembolso,22,to_char(rb.dt_prevista_pgto,'dd/mm/yyyy') || ' foi alterada para : ' || to_char(v_dt_prevista_pgto,'dd/mm/yyyy') || ' - Motivo:' || v_motivo_alter_dt_pgto, null , p_cod_usuario,p_cod_retorno,p_msg_retorno);
            --
            v_txt_email     := rb.txt_email;
            v_num_reembolso := rb.num_reembolso;
            --
        end loop;
        --
        begin
            update ts.pedido_reembolso
               set dt_prevista_pgto = v_dt_prevista_pgto
                 , cod_motivo_alter_dt_pgto = v_cod_motivo_alter_dt_pgto
                 , ind_tipo_favorecido = v_ind_tipo_favorecido
                 , num_cpf_favorecido = v_num_cpf_favorecido
                 , ind_forma_pgto = v_ind_forma_pgto
                 , cod_banco = v_cod_banco
                 , cod_agencia = v_cod_agencia
                 , num_dv_agencia = v_num_dv_agencia
                 , num_conta_corrente = v_num_conta_corrente
                 , num_dv_cc = v_num_dv_cc
                 , cod_usuario_atu = p_cod_usuario
                 , num_favorecido  = v_num_favorecido
             where num_reembolso in ( v_num_reembolsos );
         exception
            when others then
                p_cod_retorno := 9;
                p_msg_retorno := 'Ocorreu um erro na atualização dos reembolsos.';
                return;
         end;
         --
         begin
             update ts.protocolo_reembolso
               set dt_prevista_pgto = v_dt_prevista_pgto
                 , ind_tipo_favorecido = v_ind_tipo_favorecido
                 , num_cpf_favorecido = v_num_cpf_favorecido
                 , ind_forma_pgto = v_ind_forma_pgto
                 , cod_banco = v_cod_banco
                 , cod_agencia = v_cod_agencia
                 , num_dv_agencia = v_num_dv_agencia
                 , num_conta_corrente = v_num_conta_corrente
                 , num_dv_cc = v_num_dv_cc
                 , cod_usuario_atu = p_cod_usuario
                 , num_favorecido  = v_num_favorecido
             where num_protocolo = v_num_protocolo;
         exception
            when others then
                p_cod_retorno := 9;
                p_msg_retorno := 'Ocorreu um erro na atualização do protocolo.';
                return;
         end;
         --
        ts.rbm_comunicacao_situacao ( null
                                    , v_num_reembolso
                                    , 'S'
                                    , null
                                    , null
                                    , v_txt_email
                                    , p_cod_retorno
                                    , p_msg_retorno
                                    ,  'N'
                                    , v_num_reembolsos
                                    );
        --
        if p_cod_retorno = 0 then
            p_msg_retorno := 'Data prevista atualiza e-mail enviado com sucesso.';
        else
            p_msg_retorno := 'Data prevista atualiza, porém ocorreu um erro no envio do e-mail.';
        end if;
        --
    exception
        when others then
            p_cod_retorno := 9;
            p_msg_retorno := 'O ocorreu um erro na execução da rotiuna.' || ts.top_utl_padrao.msgerro;
    end;
    --
    ----------------------------------
    -- Gravar o Procotocolo / Reembolsos / Procedimentos
    ----------------------------------
    procedure grava_protocolo_completo ( p_xml_dados                in     clob
                                       , p_num_protocolo            out varchar2
                                       , p_num_reembolsos           out varchar2
                                       , p_cod_retorno              out number
                                       , p_msg_retorno              out varchar2
                                       , p_xml_anexo_retorno        out clob
                                       )
    is
        --Declarações:
        v_posicao                       number;
        v_item_vazio                    varchar2(3) := '¿¿¿';
        v_doc_protocolo                 xmldom.DOMDocument;
        v_doc_itens                     xmldom.DOMDocument;
        v_doc_pedido_recibo             xmldom.DOMDocument;
        v_doc_pedidos                   xmldom.DOMDocument;
        v_doc_ped                       xmldom.DOMDocument;
        --
        v_num_protocolo                 pedido_reembolso.num_protocolo%type;
        v_num_reembolso                 pedido_reembolso.num_reembolso%type;
        --
        v_cod_retorno                   number;
        v_msg_retorno                   varchar2(400);
        --
        v_qtd_reembolso                 number;
        v_qtd_proc_old                  number;
        v_qtd_proc                      number;
        v_ind_inter_old                 VARCHAR2(1);
        v_ind_inter                     VARCHAR2(1);
        v_ind_insc_fiscal_old           VARCHAR2(1);
        v_ind_insc_fiscal               VARCHAR2(1);
        v_dt_comprovante_old            VARCHAR2(10);
        v_dt_comprovante                VARCHAR2(10);
        v_num_nota_fiscal_old           NUMBER(14,0);
        v_num_nota_fiscal               NUMBER(14,0);
        v_ind_excluir                   VARCHAR2(1);
        --
        v_xml_pedido                    clob;
        x_xml_item                      clob;
        x_xml_anexo                     clob;
        v_xml_dados_ocr                 clob;
        v_xml_reembolso                 clob;
        v_xml_retorno                   clob;
        x_xml_pedidos                   clob;
        x_xml_pedido_item               clob;
        v_xml_anexo_retorno             clob;
        --
        v_num_reembolsos                varchar2(1000);
        v_num_protocolo_ans             varchar2(20);
        --
        v_txt_obs                       ts.atd_controle.txt_obs%type;
        v_cod_operadora_atd             pedido_reembolso.cod_operadora_contrato%type;
        v_cod_ts_atd                    pedido_reembolso.cod_ts%type;
        v_cod_usuario_atd               pedido_reembolso.cod_usuario_inclusao%type;
        v_nome_associado                protocolo_reembolso.nome_associado%type;
        --
        v_qtde_req                      number;
        --
        cursor cur_xml_anexo (p_xml in sys.xmltype, p_root varchar2) is
        select extractValue( value(T) , '//NUM_REEMBOLSO') num_reembolso
          from table (xmlsequence(extract(p_xml, p_root))) T;
        --
        v_xml sys.xmltype;
        --
        v_xml_itens varchar2(100);

    begin
        --
        --Início
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --Ler informações do XML
        ts_cria_doc_xml(p_xml_dados, v_doc_protocolo, p_cod_retorno, p_msg_retorno);
        --
        v_posicao := 20;
        --

        v_posicao := 25;
        --
        if p_cod_retorno <> 0 then
           p_msg_retorno := 'Erro ao gravar protocolo. - '|| p_msg_retorno;
           TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'ERRO', p_xml_dados || chr(13) || ts.ts_util.msgerro, 'grava_protoclo_completo - XML' );
           return;
        end if;
        --
        v_posicao := 30;
        --
        v_num_protocolo := null;
        --
        v_qtd_reembolso := ts_obtem_dados_xml(v_doc_protocolo,'PROTOCOLO_REEMBOLSO','QTD_REEMBOLSOS');
        --
        v_posicao := 40;
        --
        v_xml_pedido    := ts_obtem_dados_xml(v_doc_protocolo,'PROTOCOLO_REEMBOLSO','DADOS_PEDIDO');
        --
        v_posicao := 50;
        --
        v_xml_pedido := REPLACE(v_xml_pedido, 'BEGIN_CDATA', '<![CDATA[');
        --
        v_posicao := 60;
        --
        v_xml_pedido := REPLACE(v_xml_pedido, 'END_CDATA', ']]>');
        --
        v_posicao := 70;
        --
        v_xml_retorno := '<XML_RETORNO>';
        --
        v_qtd_proc_old := NULL;
        v_qtd_proc     := null;
        v_num_reembolsos := null;
        p_xml_anexo_retorno := '';
        --
        for x in 1 .. nvl(v_qtd_reembolso,0) loop
            --
            v_xml_reembolso  := null;
            --
            v_posicao := 80;
            --
            if v_num_protocolo is not null and x > 1 then
                v_xml_pedido := REPLACE(v_xml_pedido, '<NUM_PROTOCOLO></NUM_PROTOCOLO>', '<NUM_PROTOCOLO>'||v_num_protocolo||'</NUM_PROTOCOLO>');
            end if;
            --busca os xmls para os itens
            --x_xml_item        := ts_obtem_dados_xml(v_doc_protocolo,'PROTOCOLO_REEMBOLSO','ITENS_'||x);
            v_xml_itens := 'ITENS_' || x;
            select extract(VALUE(T) , '//' ||v_xml_itens).GetClobVal()
              into x_xml_item
              from table ( xmlsequence ( extract(sys.XMLType.createXML( p_xml_dados ),'/PROTOCOLO_REEMBOLSO') ) ) T;

             x_xml_item := replace(replace(x_xml_item, ']]>' , ''), '<![CDATA[' , '');
             x_xml_item := replace(replace(x_xml_item, '<'||v_xml_itens||'>' , ''), '</'||v_xml_itens||'>' , '');



            v_posicao := 90;
            x_xml_anexo       := ts_obtem_dados_xml(v_doc_protocolo,'PROTOCOLO_REEMBOLSO','ANEXOS_'||x);
            v_posicao := 100;
            x_xml_pedidos     := ts_obtem_dados_xml(v_doc_protocolo,'PROTOCOLO_REEMBOLSO','PEDIDOS_'||x);
            --
            v_posicao := 110;
            --
            v_qtd_proc_old          := v_qtd_proc;
            v_ind_inter_old         := v_ind_inter;
            v_ind_insc_fiscal_old   := v_ind_insc_fiscal;
            v_dt_comprovante_old    := v_dt_comprovante;
            v_num_nota_fiscal_old   := v_num_nota_fiscal;
            --
            v_posicao := 120;
            ts_cria_doc_xml(x_xml_item, v_doc_itens, p_cod_retorno, p_msg_retorno);
            v_posicao := 130;
            ts_cria_doc_xml(x_xml_pedidos, v_doc_pedidos, p_cod_retorno, p_msg_retorno);
            v_posicao := 140;
            --
            v_qtd_proc              := nvl(ts_obtem_dados_xml(v_doc_itens,'REEMBOLSO_ITEM','QTD_PROCEDIMENTO'),0);
            v_posicao := 150;
            v_ind_inter             := nvl(ts_obtem_dados_xml(v_doc_itens,'REEMBOLSO_ITEM','IND_INTERNACIONAL'),'N');
            v_posicao := 160;
            v_ind_insc_fiscal       := ts_obtem_dados_xml(v_doc_itens,'REEMBOLSO_ITEM','IND_INSC_FISCAL');
            v_posicao := 170;
            v_dt_comprovante        := ts_obtem_dados_xml(v_doc_itens,'REEMBOLSO_ITEM','DT_COMPROVANTE');
            v_posicao := 180;
            v_num_nota_fiscal       := ts_obtem_dados_xml(v_doc_itens,'REEMBOLSO_ITEM','NUM_NOTA_FISCAL');
            v_posicao := 190;
            --
            x_xml_pedidos := REPLACE(x_xml_pedidos, 'BEGIN_CDATA', '<![CDATA[');
            v_posicao := 200;
            x_xml_pedidos := REPLACE(x_xml_pedidos, 'END_CDATA', ']]>');
            v_posicao := 210;
            x_xml_pedido_item := REPLACE(v_xml_pedido, '<PED></PED>', x_xml_pedidos);
            --
            v_posicao := 220;
            x_xml_pedidos := '<DADOS>' || x_xml_pedidos ||'</DADOS> ';
            v_posicao := 230;
            ts_cria_doc_xml(x_xml_pedidos, v_doc_ped, p_cod_retorno, p_msg_retorno);
            --
            v_posicao := 240;
            v_ind_excluir     := ts_obtem_dados_xml(v_doc_ped,'DADOS','IND_EXCLUIR');
            v_posicao := 250;
            --
            -- executa replace para CDATAS internos
            x_xml_item := REPLACE(x_xml_item, 'BEGIN_CDATA', '<![CDATA[');
            v_posicao := 260;
            x_xml_item := REPLACE(x_xml_item, 'END_CDATA', ']]>');
            --
            v_posicao := 270;
            x_xml_anexo := REPLACE(x_xml_anexo, 'BEGIN_CDATA', '<![CDATA[');
            v_posicao := 271;
            x_xml_anexo := REPLACE(x_xml_anexo, 'END_CDATA', ']]>');
			--
            v_posicao := 280;
			v_xml_dados_ocr := ts_obtem_dados_xml(v_doc_protocolo,'PROTOCOLO_REEMBOLSO','DADOSOCR_'||x);
			--
            -- monta xml do reembolso para gravação
            v_xml_reembolso := '<?xml version="1.0" encoding="ISO-8859-1"?>';
            v_xml_reembolso := v_xml_reembolso || '<REEMBOLSO>';
            v_xml_reembolso := v_xml_reembolso || x_xml_pedido_item;
            v_xml_reembolso := v_xml_reembolso || x_xml_item;
            v_xml_reembolso := v_xml_reembolso || x_xml_anexo;
            v_xml_reembolso := v_xml_reembolso || '<DADOSOCR><![CDATA[' || v_xml_dados_ocr || ']]></DADOSOCR>';
            v_xml_reembolso := v_xml_reembolso || '</REEMBOLSO>';
            v_posicao := 290;
            if nvl(v_ind_excluir,'N') ='N' then
                --
                v_posicao := 300;
                -- executa a gravação do reembolso
                GravaReembolso  ( v_xml_reembolso
                                , v_num_reembolso
                                , v_num_protocolo
                                , v_cod_retorno
                                , v_msg_retorno
                                , v_xml_anexo_retorno
                                , 'S'
                                );
                v_posicao := 310;
                p_xml_anexo_retorno := p_xml_anexo_retorno || v_xml_anexo_retorno;
                v_posicao := 320;
                if nvl(v_num_reembolsos,'X') = 'X' then
                    v_num_reembolsos := v_num_reembolso;
                else
                    v_num_reembolsos := v_num_reembolsos||',' || v_num_reembolso;
                end if;
                v_posicao := 330;
                v_xml_retorno := v_xml_retorno || '<RETORNO>';
                v_xml_retorno := v_xml_retorno || '<INDICE>'        || x               || '</INDICE>';
                v_xml_retorno := v_xml_retorno || '<NUM_REEMBOLSO>' || v_num_reembolso || '</NUM_REEMBOLSO>';
                v_xml_retorno := v_xml_retorno || '<MSG_RETORNO>'   || v_msg_retorno || '</MSG_RETORNO>';
                v_xml_retorno := v_xml_retorno || '<COD_RETORNO>'   || v_cod_retorno || '</COD_RETORNO>';
                v_xml_retorno := v_xml_retorno || '</RETORNO>';
                v_posicao := 340;
                if v_cod_retorno <> 0 and v_cod_retorno <> 22 then
                    p_cod_retorno := 9;
                    if v_cod_retorno = 10 then
                       --
                       -- verifica se o pedido duplicado está na mesma requisição do lote
                       v_xml := sys.xmltype.createxml(p_xml_anexo_retorno);
                       --
                       for rc_xml in cur_xml_anexo(v_xml, 'ANEXO_REEMBOLSO') loop
                          --
                          begin
                            select count(1)
                              into v_qtde_req
                              from table(split_varchar2(v_num_reembolsos , ',')) x
                             where x.column_value = rc_xml.num_reembolso;
                          exception
                            when others then
                              v_qtde_req := 0;
                          end;
                          --
                          if nvl(v_qtde_req, 0) > 0 then
                            v_msg_retorno := 'Reembolso já solicitado na mesma requisição.';
                            exit;
                          end if;
                          --
                       end loop;
                       --
                       p_msg_retorno := v_msg_retorno;
                    else
                       p_msg_retorno := 'Ocorreu um erro na inclusão do reembolso de número ' || x || '.<br>' || v_msg_retorno;
                    end if;
                    rollback;
                    return;
                end if;
            end if;
        end loop;
        --
        v_xml_retorno := v_xml_retorno || '<NUM_PROTOCOLO>' || v_num_protocolo || '</NUM_PROTOCOLO>';
        v_xml_retorno := v_xml_retorno || '</XML_RETORNO>';
        v_posicao := 350;
        --
        begin
           SELECT distinct(num_protocolo_ans)
                , cod_operadora_contrato
                , cod_ts_tit
                , cod_usuario_atu
                , nome_associado
             INTO v_num_protocolo_ans
                , v_cod_operadora_atd
                , v_cod_ts_atd
                , v_cod_usuario_atd
                , v_nome_associado
             FROM ts.pedido_reembolso
            WHERE num_protocolo = v_num_protocolo
              AND rownum = 1;
        exception
           when others then
             p_cod_retorno := 9;
             p_msg_retorno := 'Ocorreu um erro na busca do protocolo ANS';
             rollback;
            return;
        end;
        --
        v_posicao := 360;
        v_txt_obs := 'Reembolso(s) cadastrado(s) no sistema: ';
        --
        v_txt_obs := v_txt_obs || v_nome_associado ||' - '||v_num_reembolsos;
        --
        begin
           --
           insert
           into   atd_protocolo_geral
                ( num_protocolo
                , id_solicitante
                , cod_operadora
                , cod_qualificacao_solicitante
                , cod_sistema_solicitante
                , dt_geracao
                , COD_USUARIO_SOLICITANTE
                )
           values
                ( v_num_protocolo_ans
                , null
                , v_cod_operadora_atd
                , null
                , null
                , sysdate
                , v_cod_usuario_atd
                ) ;
           --
        end;
        --
        v_posicao := 370;
        --
        begin
            insert into ts.atd_controle
              (num_atendimento_ts,
               data_inicio_atendimento,
               data_fim_atendimento,
               ind_situacao,
               ind_origem_atendimento,
               ind_forma_retorno,
               sgl_area,
               cod_usuario,
               cod_operadora,
               cod_sucursal,
               cod_inspetoria_ts,
               cod_ts,
               cod_ts_contrato,
               cod_prestador_ts,
               cod_corretor_ts,
               num_cpf_benef_event,
               nom_benef_event,
               txt_obs,
               cod_sucursal_atd,
               cod_atendimento,
               historico_navegacao,
               num_seq_proposta_ts,
               cod_praca,
               cod_celula)
            values
              (v_num_protocolo_ans,
               sysdate,
               null,
               '2',
               '9',
               null,
               'REEMBOLSO',
               v_cod_usuario_atd,
               v_cod_operadora_atd,
               null,
               null,
               v_cod_ts_atd,
               null,
               null,
               null,
               null,
               null,
               v_txt_obs,
               null,
               1,
               'Inclusão de Reembolso',
               null,
               null,
               null);
         exception
           when others then
                rollback;
         end;
         --
         v_posicao := 380;
         --
         begin
            insert into ts.atd_motivo
              (num_atendimento_ts, cod_motivo, dt_atu, cod_usuario_atu)
            values
              (v_num_protocolo_ans, '300', sysdate, v_cod_usuario_atd);
         exception
           when others then
                rollback;
         end;
        --
        v_posicao := 390;
        --
        if v_cod_retorno <> 0 and v_cod_retorno <> 22 then
             p_cod_retorno := 9;
             p_msg_retorno := 'Ocorreu um erro na inclusão do reembolso de número <br>' || v_msg_retorno;
             TS_LOG_EXECUCAO ( 'RB_REEMBOLSO', v_posicao, 'Entrada', v_xml_retorno || chr(13) || ts.ts_util.msgerro, 'grava_protoclo_completo - XML' );
             rollback;
            return;
        else
            p_msg_retorno := 'Protocolo ' || v_num_protocolo_ans || ' criado com sucesso';
        end if;
        --
        v_posicao := 400;
        --
        p_num_protocolo := v_num_protocolo;
        --
        if v_cod_retorno = 22 then
          p_cod_retorno := 0;
        else
        p_cod_retorno := v_cod_retorno;
        end if;
        p_num_reembolsos := v_num_reembolsos;
        p_xml_anexo_retorno := '<DADOS>' || p_xml_anexo_retorno || '</DADOS>';
        v_posicao := 410;
        commit;
        return;
    EXCEPTION
        WHEN OTHERS THEN
        p_cod_retorno := 9;
        p_msg_retorno := 'Erro ao incluir reembolso completo: ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
        return;
    end grava_protocolo_completo;
    --

    --

    ----------------------------------------------------------------------------

    -- Retornar os dados do procedimento

    ----------------------------------------------------------------------------

    procedure RetornaProcedimentoCompleto( p_xml_parametros         in clob
                                         , p_xml_retorno            out clob
                                         )

    is
        v_SQL                       varchar2(4000);
        tab_parans                  top_utl_xml.tbl_fields;
        v_dt_ini_vigencia           date;
        v_sigla_tabela_reembolso    varchar2(20);
        v_sigla                          VARCHAR2(8);
        v_sigla_benef                    VARCHAR2(8);
        v_desc_tiss_unidade_medida       VARCHAR2(50);


         v_ind_tipo_mat_med              VARCHAR(1);
        v_posicao                   pls_integer;
    v_ind_brasindice_e_simpro   varchar2(1);
    begin
        --
        v_posicao := 10;
        --
        tab_parans := ts.top_utl_xml.toCollection( p_xml_parametros,'PESQUISA');
        --
        v_posicao := 20;
        --
        if not tab_parans.exists( 'COD_TS_CONTRATO'     ) or tab_parans( 'COD_TS_CONTRATO'  ).valor(1) is null then tab_parans( 'COD_TS_CONTRATO'   ).valor(1) := null; end if;
        v_posicao := 30;
        if not tab_parans.exists( 'DT_ATENDIMENTO'      ) or tab_parans( 'DT_ATENDIMENTO'   ).valor(1) is null then tab_parans( 'DT_ATENDIMENTO'    ).valor(1) := to_char(trunc(sysdate),'dd/mm/yyyy'); end if;
        v_posicao := 40;
        if not tab_parans.exists( 'COD_PLANO'           ) or tab_parans( 'COD_PLANO'        ).valor(1) is null then tab_parans( 'COD_PLANO'         ).valor(1) := null; end if;
        v_posicao := 50;
        if not tab_parans.exists( 'COD_INSPETORIA_TS'   ) or tab_parans( 'COD_INSPETORIA_TS').valor(1) is null then tab_parans( 'COD_INSPETORIA_TS' ).valor(1) := null; end if;
        v_posicao := 60;
        if not tab_parans.exists( 'COD_OPERADORA'       ) or tab_parans( 'COD_OPERADORA'    ).valor(1) is null then tab_parans( 'COD_OPERADORA'     ).valor(1) := null; end if;
        v_posicao := 70;
        if not tab_parans.exists( 'ITEM_MEDICO'         ) or tab_parans( 'ITEM_MEDICO'      ).valor(1) is null then tab_parans( 'ITEM_MEDICO'       ).valor(1) := null; end if;
        v_posicao := 80;
    if tab_parans.exists( 'IND_BRASINDICE_E_SIMPRO')then
          v_ind_brasindice_e_simpro := nvl(tab_parans( 'IND_BRASINDICE_E_SIMPRO' ).valor(1), 'N');
        end if;
    v_posicao := 90;
        --Validação
        if  tab_parans('ITEM_MEDICO').valor(1) is null then
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<PROCEDIMENTO><DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>Procedimento / Serviço não encontrado</MSG_RETORNO>';
            p_xml_retorno := p_xml_retorno || '</DADOS></PROCEDIMENTO>';
            return;
        END IF;
        --
        v_posicao := 100;
        --Buscar tabela de reembolso do contrato
         begin
            select max(dt_ini_cobranca)
            into   v_dt_ini_vigencia
            from   contrato_cobranca
            where  cod_ts_contrato    = tab_parans('COD_TS_CONTRATO').valor(1)
            and    dt_ini_cobranca   <= to_date(tab_parans('DT_ATENDIMENTO').valor(1),'dd/mm/yyyy');
            --
            v_posicao := 110;
            --
            select sigla_tabela_reembolso
            into   v_sigla_tabela_reembolso
            from   contrato_adesao_plano
            where  cod_plano       = tab_parans('COD_PLANO').valor(1)
            and    cod_ts_contrato = tab_parans('COD_TS_CONTRATO').valor(1)
            and    dt_ini_vigencia = v_dt_ini_vigencia;
            --
        exception
        when others then
            v_sigla_tabela_reembolso := null;
        end;
        --
        v_posicao := 120;
        --Se não achou reembolso para o contrato buscar a tabela de reembolso padrão
        if v_sigla_tabela_reembolso is null then
            begin
                select sigla_tabela_reembolso
                into   v_sigla_tabela_reembolso
                from   padrao_reembolso_anestesia
                where  cod_operadora        = tab_parans('COD_OPERADORA').valor(1)
                and    cod_inspetoria_ts    = tab_parans('COD_INSPETORIA_TS').valor(1)
                and    dt_ini_vigencia      in ( select max(dt_ini_vigencia)
                                                 from   padrao_reembolso_anestesia
                                                 where  cod_operadora     = tab_parans('COD_OPERADORA').valor(1)
                                                 and    cod_inspetoria_ts = tab_parans('COD_INSPETORIA_TS').valor(1)
                                               )
                and    rownum               < 2;
            exception
            when others then
                v_sigla_tabela_reembolso := null;
            end;
        end if;
        --
       v_posicao := 130;
        --

      v_sigla := TS.RBM_MATMED.RETORNA_SGL_FRAC_MATMED(tab_parans('ITEM_MEDICO').valor(1),tab_parans('COD_PLANO').valor(1),tab_parans('COD_TS_CONTRATO').valor(1));
      v_desc_tiss_unidade_medida := TS.RBM_MATMED.RETORNA_DESC_FRAC_MATMED(tab_parans('ITEM_MEDICO').valor(1),tab_parans('COD_PLANO').valor(1),tab_parans('COD_TS_CONTRATO').valor(1));

        --
        --
        v_posicao := 180;
        --
        v_Sql :=  trim(' select vp.*                                                                                                    ')
              || rtrim('      , 0 cod_retorno                                                                                           ')
              || rtrim('      , ge.nome_grupo_estatistico                                                                               ')
              || rtrim('      , nvl(ge.cod_grupo_pai, ge.cod_grupo_estatistico) cod_grupo_pai                                           ')
              || rtrim('      , ( rb_reembolso.cm_converte_amb_cbhpm_s(VP.item_medico, sysdate, decode(VP.cod_padrao,''AMB'',''CBHPM'',''AMB'') ) ) cod_procedimento ')
              --Verificar se procedimento possui auxiliar ou porte anestésico
              || case when v_sigla_tabela_reembolso is not null then
                 rtrim('      , ( select case when nvl(val.cod_porte,0) > 0 or nvl(val.qtd_auxiliares,0) > 0 then ''S'' else ''N'' end  ')
              || rtrim('          from   valor_procedimento       val                                                                   ')
              || rtrim('          where  val.sigla_tabela         = :sigla_tabela_reembolso                                             ')
              || rtrim('          and    val.item_medico          = vp.item_medico                                                      ')
                  || rtrim('        ) ind_auxiliar_porte_anest                                                                              ')
                 else
                 rtrim('      , ''N'' ind_auxiliar_porte_anest                                                                          ')
                 end
              || rtrim('      , :sigla_tabela_reembolso sigla_tabela_reembolso                                                          ')

              || rtrim('      , :cod_termo  cod_termo                                                                                   ')

              || rtrim('      , :desc_tiss_unidade_medida  desc_tiss_unidade_medida                                                     ')

              || rtrim('      , nvl(im.ind_genetica,''N'') ind_genetica                                                                 ')
              || rtrim('      , nvl(im.ind_diretriz,''N'') ind_diretriz                                                                 ')
              || rtrim('      , nvl(im.ind_rol_procedimentos,''N'') ind_rol_procedimentos                                               ')

              --
              || rtrim('      , ''''                                       as ind_cids                                                  ')
              --
              || rtrim('      , (select count(*) ind_cid_2 from    PROCEDIMENTO_REEMBOLSO_CID where  item_medico = vp.item_medico) as tot_cids  ')
              --

              || rtrim(' from   vwm_procedimento  vp                                                                                    ')
              || rtrim('      , grupo_estatistico ge                                                                                    ')
              || rtrim('      , ts.itens_medicos  im                                                                                    ')
              || rtrim(' where  vp.item_medico           = :item_medico                                                                 ')
        || case when v_ind_brasindice_e_simpro = 'S' then
                    rtrim(' and vp.tipo_item in (''I'',''S'',''P'',''M'')    ')
                 else
                    rtrim(' and vp.tipo_item in (''I'',''S'',''P'') ')
         end
              || rtrim(' and    vp.cod_grupo_estatistico = ge.cod_grupo_estatistico(+)                                                  ')
              || rtrim(' and    vp.item_medico           = im.item_medico(+)                                                  ')
              || rtrim(' order by 2                                                                                                     ');
        --
        v_posicao := 190;
        --

        add_parametro_sql ( p_nome_parametro => 'cod_termo' , p_valor_parametro => v_sigla );
        --add_parametro_sql ( p_nome_parametro => 'cod_termo_benef' , p_valor_parametro => v_sigla_benef );
        add_parametro_sql ( p_nome_parametro => 'desc_tiss_unidade_medida' , p_valor_parametro => v_desc_tiss_unidade_medida );
        add_parametro_sql ( p_nome_parametro => 'sigla_tabela_reembolso' , p_valor_parametro => v_sigla_tabela_reembolso );
        add_parametro_sql ( p_nome_parametro => 'item_medico'            , p_valor_parametro => tab_parans('ITEM_MEDICO').valor(1) );
        --
        v_posicao := 200;
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_sql            => v_SQL
                                   , p_nome_cabecalho => 'PROCEDIMENTO'
                                   , p_nome_coluna    => 'DADOS'
                                   );
        --
        ts_log_execucao ( 'RB_REEMBOLSO'
                            , v_posicao
                            , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro || chr(13) || ts_util.MsgErro
                            , v_Sql || chr(13) || p_xml_parametros || 'Sigla:' || v_sigla || 'Sigla Benef.:' || v_sigla_benef ||' Tipo MatMed: ' || v_ind_tipo_mat_med
                            , 'RetornaProcedimentoCompleto' );
        --
        v_posicao := 210;
        --
        return;
        --
    EXCEPTION
        WHEN OTHERS THEN
            --
            ts_log_execucao ( 'RB_REEMBOLSO'
                            , v_posicao
                            , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro || chr(13) || ts_util.MsgErro
                            , v_Sql || chr(13) || p_xml_parametros
                            , 'RetornaProcedimentoCompleto' );
            --
            p_xml_retorno := '<?xml version="1.0"?>';
            p_xml_retorno := p_xml_retorno || '<PROCEDIMENTO>';
            p_xml_retorno := p_xml_retorno || '<DADOS>';
            p_xml_retorno := p_xml_retorno || '<COD_RETORNO>9</COD_RETORNO>';
            p_xml_retorno := p_xml_retorno || '<MSG_RETORNO>' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')' || '</MSG_RETORNO>';
            p_xml_retorno := p_xml_retorno || '</DADOS>';
            p_xml_retorno := p_xml_retorno || '</PROCEDIMENTO>';
            return;
    END RetornaProcedimentoCompleto;

    ------------------------------------------------------------------------------------
    -- Retornar o Cids de item médico de reembolso
    -----------------------------------------------------------------------------------

    --
    function RetornaCidsProcedimento( p_xml_parametros  in  clob) return sys_refcursor
    is
        v_SQL                       varchar2(4000);
        tab_parans                  top_utl_xml.tbl_fields;
        v_posicao                   pls_integer;
        result                      sys_refcursor;
    begin
        --
        v_posicao := 10;
        --
        tab_parans := ts.top_utl_xml.toCollection( p_xml_parametros,'PESQUISA');
        --
        --
        if not tab_parans.exists( 'ITEM_MEDICO') or tab_parans( 'ITEM_MEDICO').valor(1) is null then
           tab_parans( 'ITEM_MEDICO').valor(1) := null;
        end if;
        --
        if not tab_parans.exists( 'NUM_REEMBOLSO') or tab_parans( 'NUM_REEMBOLSO').valor(1) is null then
           tab_parans( 'NUM_REEMBOLSO').valor(1) := null;
        end if;
        --
        if not tab_parans.exists( 'NUM_SEQ_ITEM') or tab_parans( 'NUM_SEQ_ITEM').valor(1) is null then
           tab_parans( 'NUM_SEQ_ITEM').valor(1) := null;
        end if;
        --
        --
        v_Sql := ' select p.num_seq_reemb_proc_cid,
                          p.item_medico,
                          p.cod_cid,
                          p.num_reembolso,
                          p.num_seq_item,
                          p.dt_atu,
                          p.cod_usuario,
                          ci.nome_cid
                    from pedido_reemb_proc_cid p, cid ci
                   where p.cod_cid = ci.cod_cid
                     and p.item_medico = :item_medico
                     and p.num_reembolso = :num_reembolso
                     and p.num_seq_item = :num_seq_item ';

        --
        ts_log_execucao ( 'RB_REEMBOLSO'
                            , v_posicao
                            , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro || chr(13) || ts_util.MsgErro
                            , v_Sql || chr(13) || p_xml_parametros
                            , 'RetornaCidsProcedimento');

        v_posicao := 20;

        open  result
        for   v_Sql
        using tab_parans('ITEM_MEDICO').valor(1),
              tab_parans('NUM_REEMBOLSO').valor(1),
              tab_parans('NUM_SEQ_ITEM').valor(1);

        return result;
        --
    EXCEPTION
        WHEN OTHERS THEN
            --
            ts_log_execucao ( 'RB_REEMBOLSO'
                            , v_posicao
                            , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro || chr(13) || ts_util.MsgErro
                            , v_Sql || chr(13) || p_xml_parametros
                            , 'RetornaProcedimentoCompleto' );
            --
            raise;
    END RetornaCidsProcedimento;

    ------------------------------------------------------------------------------------
    -- Retornar o Numero de reembolso existe no protocolo do reembolso informado
    -----------------------------------------------------------------------------------

    --
    procedure getNumReembProt (  p_num_reembolso     in varchar2
                               , p_qtd_reembolso      out number
                               , p_num_protocolo     out number
                                )
    is
        --
        v_num_reembolso         varchar2(20);
        v_tamanho_reembolso     number;
        --
    begin
        p_qtd_reembolso := 0;
        p_num_protocolo := 0;
        --
        select length(p_num_reembolso)
          into v_tamanho_reembolso
          from dual;
        --
        if v_tamanho_reembolso > 15 then
          select p.num_protocolo
            into v_num_reembolso
            from ts.protocolo_reembolso p
           where p.num_protocolo_ans = p_num_reembolso;
        else
          v_num_reembolso := p_num_reembolso;
        end if;
        --
        begin
            select num_protocolo
              into p_num_protocolo
              from pedido_reembolso
             where (num_protocolo = v_num_reembolso
                or num_reembolso = v_num_reembolso)
              and rownum = 1;
        exception
            when others then
                p_num_protocolo := NULL;
        end;
        --
        begin
            select  count(*)
              into   p_qtd_reembolso
              from   pedido_reembolso pr, situacao_reembolso sr
              where  pr.num_protocolo = p_num_protocolo
                and  pr.ind_situacao  = sr.cod_situacao
                and  sr.cod_fase_processo in (1,2,3,6);
        exception
             when others then
                 p_qtd_reembolso := 0;
       end;

        --
        return;
    end;
    --
    --
    procedure retornaQtdVezesTabela  ( p_xml_parametros       in     clob
                                     , p_qtd_vezes_tabela        out number
                                     )
    is
      v_sigla_tabela_reembolso        varchar2(50);
      v_val_cotacao_reembolso         number;
      v_qtd_vezes_tabela              number;
      v_sigla_moeda                   varchar2(50);
      v_val_fixo                      number;
      v_val_limite                    number;
      v_pct_recibo                    number;
      v_ind_tipo_composicao           varchar2(50);
      v_cod_reembolso                 varchar2(50);
      v_qtd_prazo_pgto_dias           number;
      v_cod_procedimento_para         varchar2(50);
      v_val_limite_ano                number;
      v_qtd_limite_ano_proc           number;
      v_tabela_hosp_contrato          varchar2(50);
      v_val_cotacao_taxa              number;
      v_msg_retorno                   varchar2(50);
      v_cod_retorno                   number;
      tab_parans                      top_utl_xml.tbl_fields;
      v_cod_grupo_estatistico_pai     varchar2(20);
      v_posicao                       pls_integer;
      v_ind_controle_cob              number;

    begin
        --
        v_posicao := 10;
        --
        tab_parans := ts.top_utl_xml.toCollection(p_xml_parametros);
        --
        v_posicao := 20;
        --
        if not tab_parans.exists( 'COD_TS_CONTRATO'       ) or tab_parans( 'COD_TS_CONTRATO'         ).valor(1) is null then tab_parans( 'COD_TS_CONTRATO'         ).valor(1) := null; end if;
        if not tab_parans.exists( 'DT_ATENDIMENTO'        ) or tab_parans( 'DT_ATENDIMENTO'          ).valor(1) is null then tab_parans( 'DT_ATENDIMENTO'          ).valor(1) := to_char(trunc(sysdate),'dd/mm/yyyy'); end if;
        if not tab_parans.exists( 'DT_NASCIMENTO'         ) or tab_parans( 'DT_NASCIMENTO'           ).valor(1) is null then tab_parans( 'DT_NASCIMENTO'           ).valor(1) := null; end if;
        if not tab_parans.exists( 'COD_PLANO'             ) or tab_parans( 'COD_PLANO'               ).valor(1) is null then tab_parans( 'COD_PLANO'               ).valor(1) := null; end if;
        if not tab_parans.exists( 'COD_INSPETORIA_TS'     ) or tab_parans( 'COD_INSPETORIA_TS'       ).valor(1) is null then tab_parans( 'COD_INSPETORIA_TS'       ).valor(1) := null; end if;
        if not tab_parans.exists( 'COD_OPERADORA'         ) or tab_parans( 'COD_OPERADORA'           ).valor(1) is null then tab_parans( 'COD_OPERADORA'           ).valor(1) := null; end if;
        if not tab_parans.exists( 'ITEM_MEDICO'           ) or tab_parans( 'ITEM_MEDICO'             ).valor(1) is null then tab_parans( 'ITEM_MEDICO'             ).valor(1) := null; end if;
        if not tab_parans.exists( 'COD_TRATAMENTO'        ) or tab_parans( 'COD_TRATAMENTO'          ).valor(1) is null then tab_parans( 'COD_TRATAMENTO'          ).valor(1) := null; end if;
        if not tab_parans.exists( 'COD_CID'               ) or tab_parans( 'COD_CID'                 ).valor(1) is null then tab_parans( 'COD_CID'                 ).valor(1) := null; end if;
        if not tab_parans.exists( 'IND_SEXO'              ) or tab_parans( 'IND_SEXO'                ).valor(1) is null then tab_parans( 'IND_SEXO'                ).valor(1) := null; end if;
        if not tab_parans.exists( 'COD_GRUPO_ESTATISTICO' ) or tab_parans( 'COD_GRUPO_ESTATISTICO'   ).valor(1) is null then tab_parans( 'COD_GRUPO_ESTATISTICO'   ).valor(1) := null; end if;
        --
        v_posicao := 30;
        --
        v_cod_grupo_estatistico_pai := cm_obtem_ge_pai(tab_parans('COD_GRUPO_ESTATISTICO').valor(1));
        --
        v_posicao := 40;
        --
        ts.rb_calcula_reembolso.rb_obtem_reembolso_contrato  ( tab_parans('COD_TS_CONTRATO').valor(1)
                                                             , tab_parans('ITEM_MEDICO').valor(1)
                                                             , tab_parans('COD_GRUPO_ESTATISTICO').valor(1)
                                                             , v_cod_grupo_estatistico_pai
                                                             , tab_parans('COD_TRATAMENTO').valor(1)
                                                             , tab_parans('COD_CID').valor(1)
                                                             , tab_parans('COD_PLANO').valor(1)
                                                             , to_date(tab_parans('DT_ATENDIMENTO').valor(1),'DD/MM/YYYY')
                                                             , to_date(tab_parans('DT_NASCIMENTO').valor(1),'DD/MM/YYYY')
                                                             , tab_parans('IND_SEXO').valor(1)
                                                             , v_sigla_tabela_reembolso
                                                             , v_val_cotacao_reembolso
                                                             , v_qtd_vezes_tabela
                                                             , v_sigla_moeda
                                                             , v_val_fixo
                                                             , v_val_limite
                                                             , v_pct_recibo
                                                             , v_ind_tipo_composicao
                                                             , v_cod_reembolso
                                                             , v_qtd_prazo_pgto_dias
                                                             , v_cod_procedimento_para
                                                             , v_val_limite_ano
                                                             , v_qtd_limite_ano_proc
                                                             , v_tabela_hosp_contrato
                                                             , v_val_cotacao_taxa
                                                             , v_msg_retorno
                                                             , v_cod_retorno
                                                             , 0 -- INC0085264
                                                             ,v_ind_controle_cob) ;
        --
        v_posicao := 50;
        --
        if v_cod_retorno = 0 then
           p_qtd_vezes_tabela := v_qtd_vezes_tabela;
        else
           p_qtd_vezes_tabela := 0;
        end if;
        --
        v_posicao := 60;
        --
        return;
    exception
       when others then
         ts_log_execucao ( 'RB_REEMBOLSO'
                        , v_posicao
                        , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro || chr(13) || ts_util.MsgErro
                        , 'Erro:' || top_utl_padrao.MsgErro
                        , 'retornaQtdVezesTabela'
                        );
    end retornaQtdVezesTabela;
    --

    procedure getProtocolo(  p_cod_operadora_atd in  varchar2
                          , p_cod_usuario_atd in  varchar2
                          , p_cod_ts_atd      in  varchar2
                          , p_cod_retorno    out varchar2
                          , p_msg_retorno    out varchar2
                          , p_num_protocolo  out varchar2
                          , p_ind_commit     in varchar2 default 'S'
                          )
    is
        tab_parans                       top_utl_xml.tbl_fields;
        --
        v_dt_ultima_geracao              date;
        v_seq_protocolo                  number;
        v_num_registro_ans               varchar2(6);
    --
        v_cod_operadora                  atd_protocolo_geral.cod_operadora%type;
        v_cod_qualificacao_solicitante   atd_protocolo_geral.cod_qualificacao_solicitante%type;
        v_cod_usuario_solicitante        atd_protocolo_geral.cod_usuario_solicitante%type;
        v_id_solicitante                 atd_protocolo_geral.id_solicitante%type;
        v_cod_sistema_solicitante        atd_protocolo_geral.cod_sistema_solicitante%type;
        --
        v_cod_retorno                    varchar2(3) := 0;
        v_msg_retorno                    varchar2(100);
        --
    begin
        --
        p_cod_retorno      := '0';
        p_msg_retorno      := 'Protocolo gerado com sucesso.';
        v_num_registro_ans := '326305';
        --
        --
        ts.get_protocolo(p_num_protocolo, v_num_registro_ans);
        --
        /*begin
            --
             gravaProtocolo( p_num_protocolo                => p_num_protocolo
                          , p_cod_ts                       => p_cod_ts_atd
                          , p_cod_operadora                => p_cod_operadora_atd
                          , p_dt_geracao                   => sysdate
                          , p_cod_usuario      => p_cod_usuario_atd
                          ) ;
            --
        exception
            when others then
                 p_num_protocolo := null;
                p_cod_retorno := '1';
                p_msg_retorno := 'Não foi possível gerar um número de protocolo.' || v_msg_retorno;
                rollback;
        end;*/
        --
        if p_ind_commit = 'S' then
           commit;
        end if;
        --
    exception
        when others then
            p_num_protocolo := null;
            p_cod_retorno := '1';
            p_msg_retorno := 'Não foi possível gerar um número de protocolo.' || ts_util.MsgErro;
            rollback;
    end;
    --
    --
    --
  procedure gravaProtocolo (  p_num_protocolo                in  atd_protocolo_geral.num_protocolo%type
                           , p_cod_ts                       in  pedido_reembolso_previa.cod_ts%type
                           , p_cod_operadora                in  atd_protocolo_geral.cod_operadora%type
                           , p_dt_geracao                   in  atd_protocolo_geral.dt_geracao%type
                           , p_cod_usuario      in  usuario.cod_usuario%type
                           )
  is
  v_txt_obs                ts.atd_controle.txt_obs%type;
  i                        number;
  begin

    --
    v_txt_obs := 'Reembolso(s) cadastrado(s) no sistema: ';
    i := 0;
    --
    for c_rb in
         (  select a.num_reembolso
              from pedido_reembolso a
             where a.num_protocolo_ans    = p_num_protocolo)
    loop
    --
       if i = 0 then
         v_txt_obs := v_txt_obs || c_rb.num_reembolso;
         i := i + 1;
       else
         v_txt_obs := v_txt_obs || ', ' || c_rb.num_reembolso;
       end if;
    --
    end loop;
      --
      begin
         --
         insert
         into   atd_protocolo_geral
              ( num_protocolo
              , id_solicitante
              , cod_operadora
              , cod_qualificacao_solicitante
              , cod_sistema_solicitante
              , dt_geracao
              , COD_USUARIO_SOLICITANTE
              )
         values
              ( p_num_protocolo
              , null
              , p_cod_operadora
              , null
              , null
              , p_dt_geracao
              , p_cod_usuario
              ) ;
         --
      end;
      --
      begin
          insert into ts.atd_controle
            (num_atendimento_ts,
             data_inicio_atendimento,
             data_fim_atendimento,
             ind_situacao,
             ind_origem_atendimento,
             ind_forma_retorno,
             sgl_area,
             cod_usuario,
             cod_operadora,
             cod_sucursal,
             cod_inspetoria_ts,
             cod_ts,
             cod_ts_contrato,
             cod_prestador_ts,
             cod_corretor_ts,
             num_cpf_benef_event,
             nom_benef_event,
             txt_obs,
             cod_sucursal_atd,
             cod_atendimento,
             historico_navegacao,
             num_seq_proposta_ts,
             cod_praca,
             cod_celula)
          values
            (p_num_protocolo,
             sysdate,
             null,
             '2',
             '9',
             null,
             'REEMBOLSO',
             p_cod_usuario,
             p_cod_operadora,
             null,
             null,
             p_cod_ts,
             null,
             null,
             null,
             null,
             null,
             v_txt_obs,
             null,
             1,
             'Inclusão de Reembolso',
             null,
             null,
             null);
       exception
         when others then
              rollback;
       end;
       --
       begin
          insert into ts.atd_motivo
            (num_atendimento_ts, cod_motivo, dt_atu, cod_usuario_atu)
          values
            (p_num_protocolo, '300', sysdate, p_cod_usuario);
       exception
         when others then
              rollback;
       end;
  --
  exception
        when others then
            rollback;
   end;

    --
    --
    procedure atualizarDadosBancarios  (p_num_reembolso       IN  VARCHAR2
                                       ,p_num_conta_corrente  IN  VARCHAR2
                                       ,p_cod_agencia         IN  VARCHAR2
                                       ,p_num_dv_agencia      IN  VARCHAR2
                                       ,p_num_dv_cc           IN  VARCHAR2
                                       ,p_cod_banco           IN  VARCHAR2
                     ,p_ind_tipo_conta_reemb IN VARCHAR2
                                       ,p_cpf_favorecido      IN  NUMBER
                                       ,p_num_associado       IN  VARCHAR2
                                       ,p_nome_favorecido     IN  VARCHAR2
                                       ,p_ind_site            IN  VARCHAR2 default 'N' -- parametro adicionado para indicar que veio do site
                                       ,p_msg_retorno         OUT VARCHAR2
                                       ,p_cod_retorno         OUT NUMBER)
    IS
      v_SQL                             varchar2(4000);
      rsReembolso                       pedido_reembolso%rowtype;
      V_COUNT                           NUMBER;
      v_xml_reemb                       clob;
      v_xml_param                       clob;
      v_num_pagamento_ts                itens_pagamento.num_pagamento_ts%type;
      v_nome_banco                      banco.nome_banco%type;
      v_num_reembolso                   REEMBOLSO_ANEXO.num_reembolso%type;
      v_cod_municipio                   number;
      v_cod_inspetoria_ts               number;
      v_cod_sucursal                    number;
      v_dias_operadora                  number;
      v_dias_intervalo                  number;
      v_dt_prevista_pgto_nova           date;
      v_usuario_logado                  ts_sec.usuario.cod_usuario%type := ts_read_client_info;
      v_checagem                        number;
      --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      --ALTERAÇÃO PARA GRAVAR MOTIVO DE ALTERAÇÃO DE PAGAMENTO - 20 QUANDO VIER VIA SITE
      --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      v_cod_motivo_alter_dt_pgto         number;
      v_dt_prevista_pgto_ant             date;
      V_MOTIVO_ALTER_DT_PGTO             motivo_alter_dt_pgto.desc_motivo_alter_dt_pgto%type;
      v_ind_ppr                          varchar2(1);
      v_linha                            pls_integer;
      --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BEGIN
      --
      v_linha := 10;
      begin
        --SD3184686
        --Verifica o usuário que esta vindo da ts_read_client_info
        --caso seja um usuário logado, continua com o meso valor
        --quando a conxão for feita com do serviço
        --vai trocar para SITE, pois o serviço não alterar o
        --ts_read_client_info para o usuário logado,
        --assim o mesmo assumo o usuário parametrizado no web.config
        select 1
          into v_checagem
          from ts_sec.usuario
         where cod_usuario = v_usuario_logado;
      exception
        when no_data_found then
           v_usuario_logado := 'SITE';
      end;
      --
      v_linha := 20;
      BEGIN
        SELECT *
          INTO rsReembolso
          FROM pedido_reembolso
         WHERE num_reembolso = p_num_reembolso;
      EXCEPTION
        WHEN no_data_found THEN
            p_cod_retorno := 9;
            p_msg_retorno := 'Reembolso não encontrado (' || p_num_reembolso ||')';
        RETURN;
      END;
      --
      v_linha := 30;
      BEGIN
        IF (rsReembolso.ind_forma_pgto <> 1 and rsReembolso.ind_forma_pgto <> 3) THEN
          p_cod_retorno := 9;
          p_msg_retorno := 'A Forma de Pagamento do reembolso, não permite alterar os dados da conta corrente';
          RETURN;
        END IF;

        IF rsReembolso.ind_situacao <> 42 THEN
          IF rsReembolso.ind_situacao <> 46 THEN
            p_cod_retorno := 9;
            p_msg_retorno := 'Não é permito realizar alteração em reembolso com Situação diferente de: "42 - Pagamento Não Efetuado e 46 - Pagamento Não Efetuado AF"';
            RETURN;
          END IF;
        END IF;
      END;
      v_linha := 40;
      --
      p_cod_retorno := 0;
      --
      BEGIN
        --Validação dos Dependentes
        --O Favorecido deve ser um dos dependentes do contrato ou um responsável legal ou um responsável por reembolso
        --O Favorecido deve possuir 18 anos ou mais
        SELECT /*+ FIRST_ROWS(1)*/
               COUNT(1)
          INTO V_COUNT
          FROM ts.beneficiario_entidade be
             , ts.beneficiario          b
             , ts.beneficiario          b2
             , ts.beneficiario_entidade be2
             , ts.contrato_empresa      ce
             , ts.entidade_sistema      es
             , ts.beneficiario_faturamento      bf
         WHERE be.cod_entidade_ts = b.cod_entidade_ts
           and b2.cod_ts_tit = b.cod_ts
           and be2.cod_entidade_ts = b2.cod_entidade_ts
           and b.cod_ts_contrato = ce.cod_ts_contrato
           and ce.cod_resp_pgto = es.cod_entidade_ts(+)
           and b.cod_ts = bf.cod_ts(+)
           and be.num_cpf = rsReembolso.num_cpf_titular                              -- Titular
           and (be2.num_cpf = p_cpf_favorecido  or es.num_cpf = p_cpf_favorecido or bf.num_cpf_resp_reemb = p_cpf_favorecido)     -- Dependente ou Responsável
           and ce.ind_tipo_produto = 1                                               -- Medica
           and (es.num_cpf = p_cpf_favorecido or bf.num_cpf_resp_reemb = p_cpf_favorecido or                                      -- Responsável ou beneficiario ter mais de 18 anos
               (SELECT TS.ts_calcula_idade(be2.DATA_NASCIMENTO,trunc(SYSDATE),'A')
                  FROM dual
               ) >= 18);
        IF V_COUNT = 0 THEN
            p_cod_retorno := 9;
            p_msg_retorno := 'O Favorecido informado não é um beneficiário ou responsável do contrato do titular do Reembolso';
            RETURN;
        END IF;
      END;
      -- Consulta próximo dia útil
      v_linha := 50;
      -- Retorna um Código Sucursal
      SELECT cod_sucursal
        INTO v_cod_sucursal
        FROM ts.inspetoria
       WHERE cod_inspetoria_ts = rsReembolso.cod_inspetoria_ts_abertura;
      v_linha := 60;
      -- Retorna um Código de Município
      SELECT cod_municipio
        INTO v_cod_municipio
        FROM ts.sucursal
       WHERE cod_sucursal = v_cod_sucursal;
      --///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      --CALCULAR DATA_PREVISTA_PGTO (ADICIONADO POR LEONARDO MENDES
      --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      v_linha := 70;
      v_dt_prevista_pgto_ant := rsReembolso.dt_prevista_pgto;

      --------------------- Consulta quantidade de Dias por Operadora para prorrogacao--------------------------
      FOR cur IN (SELECT ROWNUM dias,
                        ', ' || val_parametro || ',' val_parametro
                     FROM ts.controle_sistema
                    WHERE cod_parametro LIKE 'REEMB_AGUARDANDO_DOC_DIAS_%'
                 ORDER BY cod_parametro)
      LOOP
        IF    (INSTR (cur.val_parametro, ',' || rsReembolso.cod_operadora_contrato || ',') > 0)
           OR (INSTR (cur.val_parametro, ', ' || rsReembolso.cod_operadora_contrato || ',') > 0)
        THEN
           v_dias_operadora := cur.dias;
        END IF;
      END LOOP;
      v_linha := 80;
      ------- Calcula quantidade de dias entre a troca do status para AGUARDANDO_DOCUMENTACAO ate o envio da documentacao -------
      BEGIN
          SELECT ROUND(DT_PREVISTA_PGTO - DT_SITUACAO_PEDIDO)
            INTO v_dias_intervalo
            FROM TS.pedido_reembolso
           WHERE num_reembolso = p_num_reembolso
             and DT_PREVISTA_PGTO < sysdate;
      EXCEPTION
        WHEN no_data_found THEN
              v_dias_intervalo:=0;
      END;
      v_linha := 90;
      IF (v_dias_intervalo < 0 OR v_dias_intervalo IS NULL) THEN
        v_dias_intervalo := 0;
      END IF;
      v_linha := 100;
      IF (v_dias_operadora < 0 OR v_dias_operadora IS NULL) THEN
        v_dias_operadora := 0;
      END IF;
      v_linha := 120;
      ----- Soma Quantidade de dias por operadora com Quantidade de dias ate o envio da documentacao -------
      SELECT trunc(dt_prevista_pgto)
        INTO v_dt_prevista_pgto_nova
        FROM TS.pedido_reembolso
       WHERE num_reembolso = p_num_reembolso;
      v_linha := 130;
      if (v_dt_prevista_pgto_nova > sysdate) then
          -- pega a data prevista do reembolso e acrescenta mais um dia
          v_dt_prevista_pgto_nova := v_dt_prevista_pgto_nova + 1;
          v_linha := 140;
          FOR i IN 1..v_dias_operadora-1 LOOP
                  v_dt_prevista_pgto_nova := (to_date(ts.sur_obtem_prox_dia_util(to_char(v_dt_prevista_pgto_nova+1,'DD/MM/YYYY'),63118),'dd/mm/yyyy'));
          END LOOP;
          v_linha := 150;
          v_dt_prevista_pgto_nova := v_dt_prevista_pgto_nova;
      else
          v_linha := 160;
          v_dt_prevista_pgto_nova := sysdate;
          -- pega a data prevista do reembolso e acrescenta mais um dia
          v_dt_prevista_pgto_nova := v_dt_prevista_pgto_nova + 1;
          v_linha := 170;
          FOR i IN 1..v_dias_operadora-1 LOOP
                  v_dt_prevista_pgto_nova := (to_date(ts.sur_obtem_prox_dia_util(to_char(v_dt_prevista_pgto_nova+1,'DD/MM/YYYY'),63118),'dd/mm/yyyy'));
          END LOOP;
          v_linha := 180;
          v_dt_prevista_pgto_nova := v_dt_prevista_pgto_nova;
      end if;
        -- Consulta proximo dia util
      v_linha := 190;
        -- Retorna um Codigo de Inspetoria
        SELECT pr.cod_inspetoria_ts_abertura
          INTO v_cod_inspetoria_ts
          FROM ts.pedido_reembolso pr
         WHERE pr.num_reembolso = p_num_reembolso;
      v_linha := 200;
        -- Retorna um Codigo Sucursal
        SELECT cod_sucursal
          INTO v_cod_sucursal
          FROM ts.inspetoria
         WHERE cod_inspetoria_ts = v_cod_inspetoria_ts;
      v_linha := 210;
        -- Retorna um Codigo de Municipio
        SELECT cod_municipio
          INTO v_cod_municipio
          FROM ts.sucursal
         WHERE cod_sucursal = v_cod_sucursal;
      v_linha := 220;
      --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      --ALTERAÇÃO PARA GRAVAR MOTIVO DE ALTERAÇÃO DE PAGAMENTO - 20 QUANDO VIER VIA SITE
      --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      if p_ind_site = 'S' then
         v_cod_motivo_alter_dt_pgto := 20;
      else
        v_cod_motivo_alter_dt_pgto := v_cod_motivo_alter_dt_pgto;
      end if;
      v_linha := 230;
      --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      IF rsReembolso.ind_situacao = 42 THEN
        --
        v_linha := 240;
        UPDATE TS.PEDIDO_REEMBOLSO
          SET
            NUM_CONTA_CORRENTE  = p_num_conta_corrente,
            COD_AGENCIA         = p_cod_agencia,
            NUM_DV_AGENCIA      = p_num_dv_agencia,
            NUM_DV_CC           = p_num_dv_cc,
            COD_BANCO           = p_cod_banco,
      IND_TIPO_CONTA_REEMB = p_ind_tipo_conta_reemb,
          --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          --ALTERAÇÃO PARA GRAVAR MOTIVO DE ALTERAÇÃO DE PAGAMENTO - 20 QUANDO VIER VIA SITE
          --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            COD_MOTIVO_ALTER_DT_PGTO = v_cod_motivo_alter_dt_pgto,
          --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          --DT_PREVISTA_PGTO    = trunc(to_date(ts.sur_obtem_prox_dia_util(to_char(sysdate,'DD/MM/YYYY'),v_cod_municipio),'dd/mm/yyyy')),
            DT_PREVISTA_PGTO    = trunc(v_dt_prevista_pgto_nova), -- UTILIZAR DATA CALCULADA ACIMA
          --///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            IND_SITUACAO        = 28, --Em processamento
            NUM_CPF_FAVORECIDO  = p_cpf_favorecido,
            NOME_FAVORECIDO     = p_nome_favorecido
          WHERE
            NUM_REEMBOLSO = p_num_reembolso;
        --
        v_linha := 250;
        TS.AGENDA_NOTIFICACAO_REEMBOLSO(p_num_reembolso, 2,36);
        v_linha := 260;
        --
        COMMIT;
        --
        --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        --ALTERAÇÃO PARA GRAVAR MOTIVO DE ALTERAÇÃO DE PAGAMENTO - 20 QUANDO VIER VIA SITE
        --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        begin
            v_linha := 270;
            SELECT B.DESC_MOTIVO_ALTER_DT_PGTO
              INTO V_MOTIVO_ALTER_DT_PGTO
              FROM TS.pedido_REEMBOLSO A
              JOIN TS.MOTIVO_ALTER_DT_PGTO B ON (A.COD_MOTIVO_ALTER_DT_PGTO = B.COD_MOTIVO_ALTER_DT_PGTO)
             WHERE A.NUM_REEMBOLSO = RSREEMBOLSO.NUM_REEMBOLSO;

            v_ind_ppr := 'S'; -- indica que é pedido prorrogado para envio de email;

        exception
            when others then
                v_motivo_alter_dt_pgto := null;
                v_ind_ppr := 'N';
        end;
        --
        v_linha := 280;
        GeraOcorrencia(p_num_reembolso,22,to_char(v_dt_prevista_pgto_ant,'dd/mm/yyyy') || ' foi alterada para : ' || to_char(v_dt_prevista_pgto_nova,'dd/mm/yyyy') || ' - Motivo:' || v_motivo_alter_dt_pgto, null , 'SITE',p_cod_retorno,p_msg_retorno);
        --
      ELSE
          IF rsReembolso.ind_situacao = 46 THEN
            v_linha := 290;
            SELECT num_pagamento_ts
             INTO v_num_pagamento_ts
             FROM ts.itens_pagamento
            WHERE num_item_pagamento_ts = rsReembolso.num_item_pagamento_ts
              AND ROWNUM < 2;
            v_linha := 300;
            SELECT nome_banco
              INTO v_nome_banco
              FROM ts.banco
             WHERE cod_banco = p_cod_banco
               AND ROWNUM < 2;
            v_linha := 310;
            v_xml_reemb := '<ALTERA_FAVORECIDO>';
            v_xml_reemb := v_xml_reemb || '<NUM_PAGAMENTO_TS>'      || v_num_pagamento_ts ||                        '</NUM_PAGAMENTO_TS>';

            IF rsReembolso.DT_PREVISTA_PGTO is not null THEN
              v_xml_reemb := v_xml_reemb || '<DT_PAGAMENTO>' || TO_CHAR(trunc(rsReembolso.DT_PREVISTA_PGTO),'DD/MM/YYYY') || '</DT_PAGAMENTO>';
            ELSE
              v_xml_reemb := v_xml_reemb || '<DT_PAGAMENTO></DT_PAGAMENTO>';
            END IF;

            v_xml_reemb := v_xml_reemb || '<DT_PAGAMENTO_ALT>'      || TO_CHAR(trunc(to_date(ts.sur_obtem_prox_dia_util(to_char(sysdate,'DD/MM/YYYY'),v_cod_municipio),'dd/mm/yyyy')), 'DD/MM/YYYY') || '</DT_PAGAMENTO_ALT>';
            v_xml_reemb := v_xml_reemb || '<NUM_ASSOCIADO>'         || NVL(rsReembolso.num_associado, '') ||        '</NUM_ASSOCIADO>';
            v_xml_reemb := v_xml_reemb || '<NUM_ASSOCIADO_ALT>'     || NVL(p_num_associado, '') ||                  '</NUM_ASSOCIADO_ALT>';
            v_xml_reemb := v_xml_reemb || '<NOME_FAVORECIDO>'       || NVL(rsReembolso.nome_favorecido, '') ||      '</NOME_FAVORECIDO>';
            v_xml_reemb := v_xml_reemb || '<NOME_FAVORECIDO_ALT>'   || NVL(p_nome_favorecido, '') ||                '</NOME_FAVORECIDO_ALT>';
            v_xml_reemb := v_xml_reemb || '<NUM_CPF>'               || NVL(rsReembolso.num_cpf_favorecido, '0') ||    '</NUM_CPF>';
            v_xml_reemb := v_xml_reemb || '<NUM_CPF_ALT>'           || NVL(p_cpf_favorecido, '0') ||                  '</NUM_CPF_ALT>';
            v_xml_reemb := v_xml_reemb || '<IND_FORMA_PGTO>' || rsReembolso.ind_forma_pgto || '</IND_FORMA_PGTO>';
            v_xml_reemb := v_xml_reemb || '<IND_FORMA_PGTO_ALT>1</IND_FORMA_PGTO_ALT>';
            v_xml_reemb := v_xml_reemb || '<NOME_FORMA_PGTO>Depósito / Transferência Bancária</NOME_FORMA_PGTO>';
            v_xml_reemb := v_xml_reemb || '<COD_BANCO>'             || NVL(rsReembolso.cod_banco, '0') ||             '</COD_BANCO>';
            v_xml_reemb := v_xml_reemb || '<COD_BANCO_ALT>'         || NVL(p_cod_banco, '0') ||                       '</COD_BANCO_ALT>';
            v_xml_reemb := v_xml_reemb || '<NOME_BANCO>'            || NVL(v_nome_banco, '') ||                     '</NOME_BANCO>';
            v_xml_reemb := v_xml_reemb || '<COD_AGENCIA>'           || NVL(rsReembolso.cod_agencia, '') ||          '</COD_AGENCIA>';
            v_xml_reemb := v_xml_reemb || '<COD_AGENCIA_ALT>'       || NVL(p_cod_agencia, '') ||                    '</COD_AGENCIA_ALT>';
            v_xml_reemb := v_xml_reemb || '<NUM_DV_AGENCIA>'        || NVL(rsReembolso.num_dv_agencia, '') ||       '</NUM_DV_AGENCIA>';
            v_xml_reemb := v_xml_reemb || '<NUM_DV_AGENCIA_ALT>'    || NVL(p_num_dv_agencia, '') ||                 '</NUM_DV_AGENCIA_ALT>';
            v_xml_reemb := v_xml_reemb || '<NUM_CONTA_CORRENTE>'    || NVL(rsReembolso.num_conta_corrente, '') ||   '</NUM_CONTA_CORRENTE>';
            v_xml_reemb := v_xml_reemb || '<NUM_CONTA_CORRENTE_ALT>' || NVL(p_num_conta_corrente, '') ||            '</NUM_CONTA_CORRENTE_ALT>';
            v_xml_reemb := v_xml_reemb || '<NUM_DV_CC>'             || NVL(rsReembolso.num_dv_cc, '') ||            '</NUM_DV_CC>';
            v_xml_reemb := v_xml_reemb || '<NUM_DV_CC_ALT>'         || NVL(p_num_dv_cc, '') ||                      '</NUM_DV_CC_ALT>';
            v_xml_reemb := v_xml_reemb || '<COD_MUNICIPIO>'         || NVL(v_cod_municipio, '') ||                  '</COD_MUNICIPIO>';
            v_xml_reemb := v_xml_reemb || '<COD_OPERADORA>'         || rsReembolso.cod_operadora_contrato ||        '</COD_OPERADORA>';
      v_xml_reemb := v_xml_reemb || '<IND_TIPO_CONTA_REEMB>'       || NVL(p_ind_tipo_conta_reemb, 'C') ||                     '</IND_TIPO_CONTA_REEMB>';
      v_xml_reemb := v_xml_reemb || '<IND_ALTERA_DADOS_BANCARIO>'        || 'N' ||                '</IND_ALTERA_DADOS_BANCARIO>';
            --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            --ALTERAÇÃO PARA GRAVAR MOTIVO DE ALTERAÇÃO DE PAGAMENTO - 20 QUANDO VIER VIA SITE
            --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            v_xml_reemb := v_xml_reemb || '<IND_SITE>'              || nvl(p_ind_site,null) ||                      '</IND_SITE>';
            --//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            v_xml_reemb := v_xml_reemb || '<IND_TIPO_FAVORECIDO />';
            v_xml_reemb := v_xml_reemb || '</ALTERA_FAVORECIDO>';
            v_linha := 320;
            ts.PAG_ALTERA_FAVORECIDO.get_AlteraPgto(v_xml_reemb,v_usuario_logado,p_cod_retorno,p_msg_retorno);

            if p_cod_retorno <> 0 then
              return;
            end if;

          END IF;
      END IF;

      p_cod_retorno       := 0;
      p_msg_retorno       := 'Operação realizada.';


    EXCEPTION
        WHEN OTHERS THEN
        p_cod_retorno := 9;
        p_msg_retorno := 'Erro ao alterar os dados de conta corrente: ' || ts_util.MsgErro || '(' || top_utl_padrao.MsgErro || ')';
         ts_log_execucao ( 'RB_REEMBOLSO'
                        , v_linha
                        , 'Erro ao alterar os dados de conta corrente: ' || ts_util.MsgErro || '(' || top_utl_padrao.MsgErro || ')'
                        , 'Erro:' || top_utl_padrao.MsgErro
                        , 'atualizarDadosBancarios' );
        return;
    end atualizarDadosBancarios;
    --

    ----------------------------------------------------------------------------
    -- Anexar / Excluir arquivos informados
    ----------------------------------------------------------------------------
    PROCEDURE GravaAnexoAdicional ( p_xml_dados       in   clob, -- xml contendo a informação a ser gravada/atualizada/excluída
                                    p_cod_retorno     out  number,
                                    p_msg_retorno     out  varchar2)   is

    -----  documento transformado
    v_doc          xmldom.DOMDocument;

    -----  retorno
    v_cod_retorno     number;
    v_msg_retorno     varchar2(200);

    v_posicao         number;
    v_qtd             number;
    v_num_reembolso   REEMBOLSO_ANEXO.num_reembolso%type;
    v_num_protocolo   REEMBOLSO_ANEXO.num_protocolo%type;
    v_nom_arq_anexo   REEMBOLSO_ANEXO.nom_arq_anexo%type;
    v_txt_descricao   REEMBOLSO_ANEXO.txt_descricao%type;
    v_cod_usuario     REEMBOLSO_ANEXO.cod_usuario%type;
    v_txt_obs         REEMBOLSO_OCORRENCIA.txt_obs%type;
    v_cod_anexo_ts    anexo_ts.cod_anexo_ts%type;
  v_cod_tipo_anexo REEMBOLSO_ANEXO.COD_TIPO_ANEXO%type;
    v_ind_exclusao    varchar2(1);
    v_qtd_exclusao    number;
    i                 number;
    v_xml_anexo       clob;
    --------------------------------------------------------------------------------
    v_cod_operadora   PEDIDO_REEMBOLSO.cod_operadora_contrato%type;
    v_ind_situacao    situacao_reembolso.cod_situacao%type;
    v_val_parametro   controle_sistema.val_parametro%type;
    v_dias_operadora  number;
    v_dias_intervalo  number;
    v_dt_prevista_pgto_antiga PEDIDO_REEMBOLSO.DT_PREVISTA_PGTO%type;
    v_dt_prevista_pgto_nova   PEDIDO_REEMBOLSO.DT_PREVISTA_PGTO%type;
    --------------------------------------------------------------------------------
    v_cod_municipio       number;
    v_cod_inspetoria_ts   number;
    v_cod_sucursal        number;
    rsReembolsoPag                  pedido_reembolso%rowtype;
    v_xml_param                     clob;
    --------------------------------------------------------------------------------
    BEGIN
      --
      v_posicao := 0;
      --
      ts_cria_doc_xml(p_xml_dados,v_doc,v_cod_retorno,v_msg_retorno);
      --
      if v_cod_retorno <> 0 then
          p_cod_retorno := v_cod_retorno;
          p_msg_retorno := v_msg_retorno;
          return;
      end if;
      --
      v_posicao := 2;
      --
      v_num_reembolso     := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','NUM_REEMBOLSO');
      v_num_protocolo     := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','NUM_PROTOCOLO');
    v_cod_tipo_anexo    := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','COD_TIPO_ANEXO');
      --
      if NVL(v_num_reembolso,0) = 0 and NVL(v_num_protocolo,0) = 0 then
          p_cod_retorno := 9;
          p_msg_retorno := 'Nº do reembolso/protocolo não informado';
          return;
      end if;
      --
      begin
          v_txt_descricao     := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','TXT_DESCRICAO');
      exception
        when others then
          p_cod_retorno := 9;
          p_msg_retorno := 'Descrição do anexo maior que o limite do campo (200)';
          return;
      end;
      --
      begin
          v_nom_arq_anexo     := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','NOM_ARQ_ANEXO');
      exception
        when others then
          p_cod_retorno := 9;
          p_msg_retorno := 'Nome do anexo maior que o limite do campo (255)';
          return;
      end;
      --
      v_cod_usuario       := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','COD_USUARIO');
      --
      v_posicao := 3;
      --
      if not v_nom_arq_anexo is null then
          --
          select count(*)
          into   v_qtd
          from   reembolso_anexo
          where  num_reembolso        = v_num_reembolso
          and    num_protocolo        = v_num_protocolo
          and    Upper(nom_arq_anexo) = upper(v_nom_arq_anexo);
          --
          v_posicao := 4;
          --
          if v_qtd > 0 then
              p_cod_retorno := 9;
              p_msg_retorno := 'Arquivo ' || v_nom_arq_anexo || ' já anexado no reembolso.';
              return;
          end if;
          --
          v_xml_anexo := '<PARAMETROS>';
          v_xml_anexo := v_xml_anexo || '<COD_MODULO>79</COD_MODULO>';
          v_xml_anexo := v_xml_anexo || '<NOME_ARQUIVO>'|| ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','NOME_ARQUIVO_ORIG') ||'</NOME_ARQUIVO>';
          v_xml_anexo := v_xml_anexo || '<PARAMETRO_CAMINHO>RBM_CAMINHO_ANEXO</PARAMETRO_CAMINHO>';
          v_xml_anexo := v_xml_anexo || '<USUARIO_LOGADO>'|| ts_read_client_info || '</USUARIO_LOGADO>';
          v_xml_anexo := v_xml_anexo || '<LOCAL_CHAMADA>TS.RB_REEMBOLSO.GravaAnexoAdicional</LOCAL_CHAMADA>';
          v_xml_anexo := v_xml_anexo || '</PARAMETROS>';
          --
          ts.top_utl_file.saveFile( v_xml_anexo
                                  , v_cod_anexo_ts
                                  , p_cod_retorno
                                  , p_msg_retorno
                                  );
          --
          if p_cod_retorno <> 0 then
              xmldom.freeDocument(v_doc);
              rollback;
              return;
          end if;
          --
          v_posicao := 5;
          --
          insert into
                  reembolso_anexo (num_protocolo, num_reembolso,       nom_arq_anexo,      txt_descricao,
                                   cod_usuario,         dt_anexado, cod_anexo_ts, cod_tipo_anexo)
                           values (v_num_protocolo, v_num_reembolso,     v_nom_arq_anexo,    v_txt_descricao,
                                   v_cod_usuario,       sysdate, v_cod_anexo_ts, v_cod_tipo_anexo);

          v_posicao := 6;
          --
          ---- gera ocorrencia de inclusão de anexo
          GeraOcorrencia(v_num_reembolso,8,'Arquivo:' || v_nom_arq_anexo,null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
          if p_cod_retorno <> 0 then
              xmldom.freeDocument(v_doc);
              rollback;
              return;
          end if;
          --
      end if;
      --
      v_posicao := 7;
      --
      v_qtd_exclusao      := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','EXCLUSAO/QTD_EXCLUSAO');
      --
      if v_qtd_exclusao is null then v_qtd_exclusao:=0;
      end if;
      --
      -- deletar os marcados
      --
      v_txt_obs := '';
      --
      for i in 1 .. v_qtd_exclusao loop
          --
          v_nom_arq_anexo   := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','EXCLUSAO/NOM_ARQ_ANEXO_' || i);
          v_cod_anexo_ts    := ts_obtem_dados_xml(v_doc,'ANEXO_REEMBOLSO','EXCLUSAO/COD_ANEXO_TS_' || i);
          --
          v_posicao := 8;
          --
          if nvl(v_cod_anexo_ts,0) <> 0 then
              delete from anexo_ts
               where cod_anexo_ts = v_cod_anexo_ts;
          end if;
          --
          delete from reembolso_anexo
          where  num_reembolso        = v_num_reembolso
          and    num_protocolo        = v_num_protocolo
          and    upper(nom_arq_anexo) = upper(v_nom_arq_anexo);
          --
          if i > 1 then v_txt_obs := v_txt_obs || ', ';
          end if;
          --
          v_txt_obs := v_txt_obs || v_nom_arq_anexo;
          --

      end loop;
      --
      ---- gera ocorrencia de exclusão de anexo
      --
      v_posicao := 9;
      --
      if v_qtd_exclusao>0 then
          v_txt_obs := 'Arquivo(s) : ' || v_txt_obs;
          --
          GeraOcorrencia(v_num_reembolso,9,v_txt_obs,null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
          if p_cod_retorno <> 0 then
              xmldom.freeDocument(v_doc);
              rollback;
              return;
          end if;
      end if;
      --
      -- liberação do xml ------------------------------------------------------------
      --
      xmldom.freeDocument(v_doc);
      --
      v_posicao  := 10;
      ------------------ Altera a situacao do reembolso ------------------------------
      if v_num_reembolso is null then
          p_msg_retorno := 'O reembolso não informado, impossível atualizar situação.';
           p_cod_retorno := 9;
           return;
      else
          begin
              select ind_situacao, cod_operadora_contrato, dt_prevista_pgto
                  into v_ind_situacao, v_cod_operadora, v_dt_prevista_pgto_antiga
                       from pedido_reembolso
                              where num_reembolso = v_num_reembolso;
          exception
              when no_data_found then
                     p_msg_retorno := 'O reembolso ' || v_num_reembolso || ' não foi identificado, impossível atualizar situação.';
                     p_cod_retorno := 9;
                     rollback;
                     return;
          end;
          --
          v_posicao  := 11;
          --
          begin
              select val_parametro
                into v_val_parametro
                from ts.controle_sistema
               where cod_parametro = 'AGUARDANDO_DOCUMENTACAO';
          exception
              when no_data_found then
                 p_msg_retorno := 'O parâmetro AGUARDANDO_DOCUMENTACAO da tabela controle_sistema não foi encontrado.';
                 p_cod_retorno := 9;
                 rollback;
                 return;
          end;
          --
          if v_ind_situacao <> v_val_parametro  then
              p_msg_retorno := 'O reembolso ' || v_num_reembolso || ' não está em situação que permita a inclusão de anexo.' ;
              p_cod_retorno := 9;
              rollback;
              return;
          end if;
          --
      end if;
      --
      v_posicao  := 12;
      --
      begin
          select val_parametro
            into v_val_parametro
            from ts.controle_sistema
           where cod_parametro = 'EM_PROCESSAMENTO';
       exception
          when no_data_found then
                 p_msg_retorno := 'O parâmetro EM_PROCESSAMENTO da tabela controle_sistema não foi encontrado.';
                 p_cod_retorno := 9;
                 rollback;
                 return;
       end;
      --
      v_posicao  := 13;
      --
      if v_cod_usuario is null then
         p_msg_retorno := 'Usuário não informado';
         p_cod_retorno := 9;
         rollback;
         return;
      end if;
      --
      GeraOcorrencia(v_num_reembolso,21,null,null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
      --
      if p_cod_retorno <> 0 then
          rollback;
          return;
      end if;
      --
      v_posicao  := 14;
      -------------------- Consulta quantidade de Dias por Operadora para prorrogação--------------------------
      SELECT *
       INTO rsReembolsoPag
      FROM pedido_reembolso
      WHERE num_reembolso = v_num_reembolso;
      v_xml_param := '<parametros>'
                  || '<numAssociado>'         ||  rsReembolsoPag.num_associado                   ||  '</numAssociado>'
                  || '<codTsContrato>'        ||  rsReembolsoPag.cod_ts_contrato                 ||  '</codTsContrato>'
                  || '<codPlano>'             ||  rsReembolsoPag.cod_plano                       ||  '</codPlano>'
                  || '<codInspetoriaTs>'      ||  rsReembolsoPag.cod_inspetoria_ts_abertura      ||  '</codInspetoriaTs>'
                  || '<codOperadora>'         ||  rsReembolsoPag.cod_operadora_contrato          ||  '</codOperadora>'
                  || '<codMotivoReembolso>'   ||  rsReembolsoPag.cod_motivo_reembolso            ||  '</codMotivoReembolso>'
                  || '<codUsuarioSolic>'      ||  rsReembolsoPag.cod_usuario_solic               ||  '</codUsuarioSolic>'
                  || '<indTipoReembolso>'     ||  rsReembolsoPag.ind_tipo_reembolso              ||  '</indTipoReembolso>'
                  || '<indCourrier>'          ||  rsReembolsoPag.ind_utiliza_courrier            ||  '</indCourrier>'
                  || '<dataSolicitacao>'      ||  to_char(sysdate,'dd/mm/yyyy')                   ||  '</dataSolicitacao>'
                  || '<indOrigemAssociado>'   ||  rsReembolsoPag.ind_origem_associado            ||  '</indOrigemAssociado>'
                  || '</parametros>';
      --

      rb_reembolso.get_dados_prazo_pgto ( p_cod_retorno
                                      , p_msg_retorno
                                      , v_xml_param
                                      , rsReembolsoPag.qtd_dias_reembolso
                                      , rsReembolsoPag.ind_tipo_dia
                                      , rsReembolsoPag.dt_prevista_pgto_calc
                                      );

      if p_cod_retorno = 0 then
          --
          v_dt_prevista_pgto_nova := rsReembolsoPag.dt_prevista_pgto_calc;
      end if;
      --
      UPDATE pedido_reembolso
         SET ind_situacao      = v_val_parametro,
             dt_prevista_pgto  = v_dt_prevista_pgto_nova,
             cod_motivo_alter_dt_pgto = 11 -- AGUARDANDO DOCUMENTACAO conforme tabela ts.motivo_alter_dt_pgto
       WHERE num_reembolso   = v_num_reembolso;
      ---- Grava ocorencia com a informação de histórico de alteracao
      GeraOcorrencia(v_num_reembolso,22, to_char(v_dt_prevista_pgto_antiga, 'dd/MM/yyyy') || ' foi alterada para : ' || to_char(v_dt_prevista_pgto_nova, 'dd/MM/yyyy') || ' - Motivo: Aguardando Documentação',null,v_cod_usuario,p_cod_retorno,p_msg_retorno);
      if p_cod_retorno <> 0 then
          rollback;
          return;
      end if;
      --
      commit;
      --
      v_posicao     := 15;
      p_cod_retorno := 0;
      p_msg_retorno := 'Operação realizada.';
      --
    exception
        when others then
            --
            p_cod_retorno := 9;
            p_msg_retorno := 'GravaAnexo-' || v_posicao || ': ' || ts_util.MsgErro || '(' || ts.ts_util.msgerro || ')';
            --
            rollback;
            --
            if v_posicao > 1 then
                xmldom.freeDocument(v_doc);
            end if;
            --
    end;
    --

    ----------------------------------------------------------------------------
    -- Consulta dados do favorecido do contrato
    ----------------------------------------------------------------------------
  procedure RetornaDadosFavorecido( p_num_associado       in varchar2
                                  , p_ctr_logs            in varchar2 default 'N'
                                  , p_cod_retorno         out number
                                  , p_msg_retorno         out varchar2
                                  , p_cur_dados           out sys_refcursor)
  is
    -----  retorno
    v_cod_retorno          number;
    v_msg_retorno          varchar2(200);
    v_erro                 varchar2(1200);
    v_cod_ts_tit           ts.beneficiario.cod_ts_tit%type;
    v_cod_ts_contrato      ts.beneficiario.cod_ts_contrato%type;
    v_sql                  varchar2(4000);
    v_TipoPessoa           varchar2(2000);
    --
  begin
     --
     begin
        execute
      immediate 'select cod_ts_tit
                      , cod_ts_contrato
                   from ts.beneficiario
                  where num_associado = :num_associado '
        into v_cod_ts_tit
           , v_cod_ts_contrato
       using p_num_associado;

     exception
        when no_data_found then
        p_cod_retorno := 9;
        p_msg_retorno := 'Não foi encontrado um titular para a MO: ' || p_num_associado || '(' || top_utl_padrao.MsgErro || ')';

         ts_log_execucao ( 'RB_REEMBOLSO'
                        , 0
                        , 'Erro tratado'
                        , 'Erro:' || top_utl_padrao.MsgErro
                        , 'RetornaDadosFavorecido' );
     end;
     --

     v_TipoPessoa := '';

     begin

        select
             a.ind_tipo_pessoa_contrato
        into
             v_TipoPessoa
        from
             ts.beneficiario a
        where
             a.cod_ts = to_number(v_cod_ts_tit);

     exception
       when no_data_found then
            p_cod_retorno := 9;
            p_msg_retorno := 'Não foi encontrado o beneficiário para o código ts_titular: ' || v_cod_ts_tit || ' (' || top_utl_padrao.MsgErro || ')';
            ts_log_execucao ('RB_REEMBOLSO'
                             , 0
                             , 'Erro tratado'
                             , 'Erro: ' || top_utl_padrao.MsgErro
                             , 'RetornaDadosFavorecido'
                             );
     end;

     -- CORREÇÃO DEFINITIVA PARA OS ERROS NA LISTAGEM DOS FAVORECIDOS, NAS SOLICITAÇÕES DE REEMBOLSO
     -- INC0018620, INC0019677, INC0020733: Responsável Legal não estava sendo exibido na lista de favorecidos.
     -- o valor do campo idade_associado foi fixado em 99 para não duplicar registros com os "UNION", não havendo impacto no serviço e no site, não obrigando a fazer uma alteração mais radical.
     -- o valor do campo tipo_associado foi fixado em X para não duplicar registros com os "UNION", não havendo impacto no serviço e no site, não obrigando a fazer uma alteração mais radical.
     -- em caso de nova alteração, favor testar os casos dos chamados SD3597609 e SD3609975.
     v_sql := 'select /*TS.RB_REEMBOLSO.RetornaDadosFavorecido*/
                      ass.nome_associado                                                                                                nome_associado
                    , 99                                                                                                                idade_associado
                    , be.num_cpf                                                                                                        num_cpf
                    , ''X''                                                                                                             TIPO_ASSOCIADO
                 from ts.associado                   ass
                    , ts.beneficiario_entidade       be
                where ass.cod_entidade_ts = be.cod_entidade_ts
                  and be.num_cpf          is not null
                  and ass.cod_ts_tit      = :v_cod_ts_tit
                  and ass.ind_situacao    = ''A''
                  and ts.ts_calcula_idade (be.data_nascimento, sysdate, ''A'') > 17
                union
               select
                      bf.nome_resp_reemb
                    , 99
                    , bf.num_cpf_resp_reemb
                    , ''X''
                 from ts.beneficiario_faturamento bf
                 join ts.beneficiario b
                   on b.cod_ts = bf.cod_ts
                 join ts.beneficiario_entidade be
                   on be.cod_entidade_ts = b.cod_entidade_ts
                where bf.cod_ts = :v_cod_ts_tit
                  and bf.num_cpf_resp_reemb is not null
              ';

      IF NVL(v_TipoPessoa, '') = 'F' then
            v_sql := v_sql || '
                 union
                 select es.nome_entidade                                                                                                 nome_associado
                      , 99                                                                                                               idade_associado
                      , es.num_cpf                                                                                                       num_cpf
                      , ''X''                                                                                                            TIPO_ASSOCIADO
                   from ts.contrato_contratante cc
                      , ts.entidade_sistema     es
                  where cc.cod_entidade_ts = es.cod_entidade_ts
                    and cod_ts_contrato    = :v_cod_ts_contrato
                ';

          open p_cur_dados
          for v_sql
          using v_cod_ts_tit, v_cod_ts_tit, v_cod_ts_contrato;

        else

          open p_cur_dados
          for v_sql
          using v_cod_ts_tit, v_cod_ts_tit;

        END IF;

     --
  exception
     when others then
        p_cod_retorno := 9;
        p_msg_retorno := 'Não foi encontrado um titular para a MO: ' || p_num_associado || '(' || top_utl_padrao.MsgErro || ')';
        ts_log_execucao ( 'RB_REEMBOLSO'
                        , 1
                        , 'Erro:' || top_utl_padrao.MsgErro
                        , v_sql                                       || chr(10) ||
                          '/*'                                        || chr(10) ||
                          'v_cod_ts_tit = '      || v_cod_ts_tit      || chr(10) ||
                          'v_cod_ts_contrato = ' || v_cod_ts_contrato || chr(10) ||
                          '/*'
                        , 'RetornaDadosFavorecido' );
  end RetornaDadosFavorecido;
  --
  --

  ----------------------------------------------------------------------------
  -- Retornar RecordSet com a quantidade de reembolso
  ----------------------------------------------------------------------------
  function RetornaQtdReembBeneficiario (p_num_associado in varchar2) return sys_refcursor
  is

    c sys_refcursor;

  begin
      --
      open c
      for  select COUNT(1) QtdReembolso
              from TS.PEDIDO_REEMBOLSO
              where ind_situacao not in (26, 32, 33, 34, 35, 36, 39, 42, 46)
              and num_associado = p_num_associado
              and (dt_pedido >= sysdate - 90)
              and dt_pedido <= sysdate;
      --
      return c;
  end;

  --
  --

  ----------------------------------------------------------------------------
  -- Retornar Motivo de Indeferimento de Reembolso
  ----------------------------------------------------------------------------
  PROCEDURE RetornarMotivoIndReembolso (P_NUM_REEMBOLSO IN VARCHAR2, P_CURSOR OUT SYS_REFCURSOR)
  IS

    RESULT    SYS_REFCURSOR;

  BEGIN
      --
      BEGIN
          OPEN RESULT
          FOR
              SELECT
                    RMI.DESC_MOTIVO, RMI.TXT_JUSTIFICATIVA
              FROM
                    TS.REEMBOLSO_PEDIDO_INDEF RPI
              INNER JOIN
                    TS.REEMBOLSO_MOTIVO_INDEF RMI
              ON
                    RPI.COD_MOTIVO = RMI.COD_MOTIVO
              WHERE
                    RPI.NUM_REEMBOLSO = P_NUM_REEMBOLSO;
      --
      EXCEPTION
          WHEN NO_DATA_FOUND THEN NULL;
      END;

      P_CURSOR := RESULT;
  END;

  --
  --

  ----------------------------------------------------------------------------
  -- Consultar Documentos Pendentes por Reembolso
  ----------------------------------------------------------------------------
  PROCEDURE ConsultarDocsPendentes (P_NUM_REEMBOLSO IN VARCHAR2, P_CURSOR OUT SYS_REFCURSOR)
  IS

    RESULT    SYS_REFCURSOR;

  BEGIN
      --
      BEGIN
          OPEN RESULT
          FOR
              SELECT
                      RD.NOM_DOCUMENTO, RD.TXT_JUSTIFICATIVA
              FROM
                      TS.REEMBOLSO_DOCUMENTACAO_PEDIDO RDP
              INNER JOIN
                      TS.REEMBOLSO_DOCUMENTO RD
              ON
                      RDP.COD_DOCUMENTO = RD.COD_DOCUMENTO
              WHERE
                      RDP.NUM_REEMBOLSO = P_NUM_REEMBOLSO;
      --
      EXCEPTION
          WHEN NO_DATA_FOUND THEN NULL;
      END;

      P_CURSOR := RESULT;

  END;
  --
    Procedure BuscaInteresseEnvioDocs( P_Num_Associado       IN  ts.REEMBOLSO_SUSPENSAO.Num_Associado%Type,
                                       P_Ind_Tipo_Reembolso  IN  ts.REEMBOLSO_SUSPENSAO.IND_TIPO_REEMBOLSO%Type,
                                       P_Dt_Solicitacao      IN  date,
                                       P_Cod_Origem          IN  ts.ORIGEM_REEMBOLSO.Cod_Origem%Type,
                                       P_Val_Reembolso       IN  Number,
                                       P_AplicaRegra         Out char ,
                                       p_ValorLimite         Out Number,
                               P_DataFinalSuspensao  Out varchar2,
                                       P_cod_retorno         OUT NUMBER,
                                       P_msg_retorno         OUT VARCHAR2) IS
    /*P_Val_Limite        Number(14,4);
    Qtd_Registros       Number;*/
    /*
    Tipo de Reembolso -> tabela TIPO_REEMBOLSO
    1 - Consulta
    2 - Exames e Procedimentos
    3 - Internação

    Cod_Origem  ->Tabela ts.ORIGEM_REEMBOLSO
    */
  p_SuspensaoTotal Number;
    BEGIN

        Select Nvl(Count(*),0) into p_SuspensaoTotal
    From ts.REEMBOLSO_SUSPENSAO
    Where Num_Associado=p_Num_Associado
    And IND_TIPO_REEMBOLSO=P_Ind_Tipo_Reembolso
    And nvl(IND_EXCLUSAO,'S')='S';

    If(p_SuspensaoTotal)>0 then
       P_AplicaRegra := 'N';
       p_cod_retorno := 0;
       p_ValorLimite :=0;
       p_msg_retorno := 'Beneficiário excluido da opção de suspensão de entrega de documentos';
       return;
    End if;

    Select Nvl(Val_Parametro,0) into p_ValorLimite
    From ts.Controle_Sistema
    Where cod_parametro = Case P_Ind_Tipo_Reembolso
                When '1' Then
                  'VAL_COMPROV_REEMB_CONSULTA'
                When '2' Then
                  'VAL_COMPROV_REEMB_EXAME/PROCED'
                When '3' Then
                  'VAL_COMPROV_REEMB_INTERNACAO'
                End;

    Select Max(to_char(trunc(DT_FIM),'dd/mm/yyyy')) into P_DataFinalSuspensao
    From ts.REEMBOLSO_SUSPENSAO
    Where Num_Associado=p_Num_Associado
    And trunc(P_Dt_Solicitacao) Between trunc(DT_INICIO) And trunc(DT_FIM)
    And Cod_Origem=P_Cod_Origem
    And IND_TIPO_REEMBOLSO=P_Ind_Tipo_Reembolso
    And nvl(IND_EXCLUSAO,'N')='N';

    if NVL(p_ValorLimite,0)=0 THEN
        P_AplicaRegra := 'N';
        p_cod_retorno := 0;
            p_msg_retorno := '';
      return;
    End if;

        If Nvl(P_Val_Reembolso,0)=0 AND NVL(p_ValorLimite,0)> 0  Then
      if P_DataFinalSuspensao is not null Then
          P_AplicaRegra := 'N';
        ELSE
          P_AplicaRegra := 'S';
      End if;
        Else
      If P_Val_Reembolso <= p_ValorLimite and P_ValorLimite > 0 and P_DataFinalSuspensao is null Then
        P_AplicaRegra := 'S';
      Else
        P_AplicaRegra := 'N';
        If P_Val_Reembolso > p_ValorLimite Then
                P_DataFinalSuspensao :='';
              End if;
      End if;
    End if;

        p_cod_retorno := 0;
        p_msg_retorno := '';

    Exception
     When Others Then
       p_cod_retorno := 1;
       p_msg_retorno := 'BuscaInteresseEnvioDocs Erro:' || ts_util.MsgErro ;

    END BuscaInteresseEnvioDocs;

    Procedure GravaSuspensaoEnvioDocs (P_Num_Associado       ts.REEMBOLSO_SUSPENSAO.Num_Associado%Type,
                                       P_Ind_Tipo_Reembolso  ts.REEMBOLSO_SUSPENSAO.IND_TIPO_REEMBOLSO%Type,
                                       P_Dt_Solicitacao      IN  date,
                                       P_Cod_Origem          IN  ts.ORIGEM_REEMBOLSO.Cod_Origem%Type,
                                       P_Val_Reembolso       IN  Number,
                                       p_cod_usuario         IN ts.REEMBOLSO_SUSPENSAO.Cod_Usuario%Type,
                                       P_DataFinalSuspensao  Out varchar2,
                                       p_cod_retorno         OUT NUMBER,
                                       p_msg_retorno         OUT VARCHAR2 ) Is

        Qtd_Meses  Number;

    /*
    Tipo de Reembolso -> tabela TIPO_REEMBOLSO
      1 - Consulta
      2 - Exames e Procedimentos
      3 - Internação
      Cod_Origem  ->Tabela ts.ORIGEM_REEMBOLSO
    */
    Begin

       if Nvl(P_Val_Reembolso,0)=0 Then
          p_cod_retorno := 0;
          p_msg_retorno := 'Valor de reembolso zerado!';
          Return;
        End if;

        if Nvl(P_Num_Associado,0)=0 Then
          p_cod_retorno := 0;
          p_msg_retorno := 'Numero do associado deve ser informado!';
          Return;
        End if;

        if P_Dt_Solicitacao is null Then
          p_cod_retorno := 0;
          p_msg_retorno := 'A data de solicitação deve ser informada';
          Return;
        End if;

        if P_Ind_Tipo_Reembolso is null Then
          p_cod_retorno := 0;
          p_msg_retorno := 'O tipo de reembolso deve ser informado';
          Return;
        End if;

        Select Max(to_char(Trunc(DT_FIM),'dd/mm/yyyy')) into P_DataFinalSuspensao
        From ts.REEMBOLSO_SUSPENSAO
        Where Num_Associado=P_Num_Associado
        And Ind_Tipo_Reembolso=P_Ind_Tipo_Reembolso
        And COD_ORIGEM=p_COD_ORIGEM
        And trunc(P_Dt_Solicitacao) Between trunc(DT_INICIO) AND trunc(DT_FIM)
        And nvl(IND_EXCLUSAO,'N')='N';

        if P_DataFinalSuspensao is null Then


            Select Nvl(Val_Parametro,0) into Qtd_Meses
            From ts.Controle_Sistema
            Where cod_parametro = Case P_Ind_Tipo_Reembolso
                                    When '1' Then
                                      'QTDE_MESES_OPTIN_REEMB_CONSULTA'
                                    When '2' Then
                                      'QTDE_MESES_OPTIN_REEMB_EXAME/PROCED'
                                    When '3' Then
                                      'QTDE_MESES_OPTIN_REEMB_INTERNACAO'
                                  End;

           P_DataFinalSuspensao := TO_CHAR(Trunc(add_Months(Sysdate,Qtd_Meses)),'dd/mm/yyyy') ;

           Insert into ts.REEMBOLSO_SUSPENSAO  (NUM_SEQ
                                               ,COD_TS
                                               ,NUM_ASSOCIADO
                                               ,COD_TS_TIT
                                               ,DT_INICIO
                                               ,DT_FIM
                                               ,IND_EXCLUSAO
                                               ,IND_TIPO_REEMBOLSO
                                               ,DT_ATU
                                               ,COD_ORIGEM
                                               ,COD_USUARIO)

      Select TS.TS_REEMBOLSO_SUSPENSAO_SEQ.NextVal    as NUM_SEQ,
           Ben.Cod_ts                               as Cod_Ts,
           Ben.Num_Associado                        as Num_Associado,
           Ben.Cod_Ts_Tit                           as CodTitular,
           P_Dt_Solicitacao                         as DT_INICIO,
           Trunc(add_Months(Sysdate,Qtd_Meses))     as DT_FIM  ,
           'N'                                      as IND_EXCLUSAO ,
           P_Ind_Tipo_Reembolso                     as IND_TIPO_REEMBOLSO,
           Sysdate                                  as DT_ATU,
           P_Cod_Origem                             as CodOrigem,
           Upper(p_cod_usuario)                     as Cod_Usuario
      FROM TS.BENEFICIARIO A
      LEFT JOIN TS.BENEFICIARIO Ben
        ON A.COD_TS_TIT=Ben.COD_TS_TIT
        AND Ben.NUM_ASSOCIADO=CASE A.TIPO_ASSOCIADO
                  WHEN 'T' THEN
                    Ben.NUM_ASSOCIADO
                  WHEN 'D' THEN
                    A.NUM_ASSOCIADO
                  WHEN 'A' THEN
                    A.NUM_ASSOCIADO
                   END
      Where A.NUM_ASSOCIADO=P_Num_Associado;

            p_cod_retorno := 0;
            p_msg_retorno := 'Registro gravado com sucesso';

        Else

            Select Max(to_char(DT_FIM,'dd/mm/yyyy')) Into P_DataFinalSuspensao
            From ts.REEMBOLSO_SUSPENSAO
            Where Num_Associado=P_Num_Associado
            And Ind_Tipo_Reembolso=P_Ind_Tipo_Reembolso
            And COD_ORIGEM=p_COD_ORIGEM
            And nvl(IND_EXCLUSAO,'N')='N'
            And trunc(P_Dt_Solicitacao) Between trunc(DT_INICIO) AND trunc(DT_FIM);

            p_cod_retorno := 0;
            p_msg_retorno := 'O registro já existe';
        End If;

        Commit;
    Exception
     When Others Then
       p_cod_retorno := 1;
       p_msg_retorno := 'GravaSuspensaoEnvioDocs Erro:' || ts_util.MsgErro ;
    END GravaSuspensaoEnvioDocs;

----------------------------------------------------------------------------
  -- Retorna xml com as informações das Ocorrências
  ----------------------------------------------------------------------------
  function RetornaGrupoRegra (p_num_reembolso in  number) return sys_refcursor
  is
   --Declarações:
   v_posicao               number;
   v_SQL                   varchar2(4000);
   c                       sys_refcursor;
   begin
       --Início
       v_posicao := 1;
       ---
       --Validação
       IF NVL(p_num_reembolso,0) = 0 THEN
           raise_application_error( -20001 , 'rb_reembolso.RetornaGrupoRegra - Nº do Reembolso não informado');
       END IF;
       --
       v_posicao := 15;
       --Monta XML dos grupos de análise
       v_SQL := '';
       v_SQL := v_SQL || '   SELECT distinct  rrg.cod_regra_grupo ||'' - '' || rrg.nom_regra_grupo desc_regra                                ';
       v_SQL := v_SQL || '        , decode(rrg.cod_tipo_reembolso,''1'',''Encaminhamento'',''2'',''Análise de Fraude'',''3'',''Liberação Automática'') ind_acao   ';
       v_SQL := v_SQL || '        , rrg.ind_tipo_validacao';
       v_SQL := v_SQL || '         ,rrg.cod_regra_grupo';
       v_SQL := v_SQL || '         ,rrg.cod_grupo_encaminha';
       v_SQL := v_SQL || '     FROM ts.pedido_reembolso_regra prg                                                                  ';
       v_SQL := v_SQL || '        , ts.reembolso_regra_grupo rrg                                                                   ';
       v_SQL := v_SQL || '    WHERE prg.cod_regra     = rrg.cod_regra_grupo                                                        ';
       v_SQL := v_SQL || '      AND prg.num_reembolso = :num_reembolso                                                             ';
       v_SQL := v_SQL || ' ORDER BY desc_regra desc                                                                       ';
       --
       --
       v_posicao := 16;
       --
       open  c
       for   v_SQL
       using p_num_reembolso;
       --
       return c;
   EXCEPTION
   WHEN OTHERS THEN
      ts_log_execucao ( 'RB_REEMBOLSO'
                       , 10
                       , 'Erro não previsto'
                       , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                 || chr(13) || 'Erro-ORA:'               || ts_util.MsgErro
                                 || chr(13) || v_SQL
                       , 'RetornaGrupoRegra' );
       --
       raise_application_error( -20001 , 'rb_reembolso.RetornaGrupoRegra - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro);
   END;
   --
  --
      function get_rs_pedidos_duplicados (p_num_reembolso in number) return sys_refcursor
  is
  cur                 sys_refcursor;
  begin

     open cur for
           SELECT R.NUM_REEMBOLSO, SR.NOME_SITUACAO
           FROM TS.PEDIDO_REEMBOLSO_FORMA_PGTO PR,
                TS.PEDIDO_REEMBOLSO            R,
                TS.SITUACAO_REEMBOLSO          SR
          WHERE PR.NUM_REEMBOLSO = R.NUM_REEMBOLSO
            AND R.IND_SITUACAO IN (34, 35, 36, 37)
            AND R.IND_SITUACAO = SR.COD_SITUACAO
            AND PR.TXT_DESC_COD_VERIFICACAO in
                (SELECT txt_desc_cod_verificacao
                   FROM TS.PEDIDO_REEMBOLSO_FORMA_PGTO
                  WHERE NUM_REEMBOLSO = p_num_reembolso);
       return cur;
     exception
     when others then
        ts_log_execucao ( 'RB_REEMBOLSO', 99, 'get_rs_pedidos_duplicados', ts.top_utl_padrao.msgerro, 'ERRO' );
        raise_application_error( -20001 , 'RB_REEMBOLSO.get_rs_pedidos_duplicados - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro);

	end;
  ----------------------------------------------------------------------------
  -- Retorna informações das parametrizações do Face ID
  ----------------------------------------------------------------------------
  procedure RetornaReembolsoFaceId(p_num_associado      in varchar2,
                          p_dt_pedido          in date,
                          p_ind_tipo_reembolso in varchar2,
                          p_val_reembolso      in number,
                          p_ind_faceid         out varchar2,
                          p_val_confiabilidade out number,
                          p_num_tentativas     out number,
                          p_cod_retorno        out number,
                          p_msg_retorno        out varchar2) is
    --
    v_cod_operadora varchar2(10);
    --
  begin
	--

	begin
	  --
      select b.cod_operadora
	  into v_cod_operadora
	  from ts.beneficiario b
	  where b.num_associado = p_num_associado;
	  --
    exception
      when no_data_found then
        --
        p_cod_retorno        := 1;
        p_msg_retorno        := 'Beneficiário não encontrado.';
        p_ind_faceid         := null;
        p_val_confiabilidade := null;
        p_num_tentativas     := null;
        --
        return;
        --
    end;
    --
    select 'S', val_confiabilidade, num_tentativas
      into p_ind_faceid, p_val_confiabilidade, p_num_tentativas
      from ts.rbm_param_faceid
     where ind_habilitado = 'S'
       and (cod_operadora = '99' or
           cod_operadora =
           (select b.cod_operadora from ts.beneficiario b where b.num_associado = p_num_associado))
       and p_dt_pedido between dt_ini_vigencia and nvl(dt_fim_vigencia, trunc(sysdate))
       and ind_tipo_reembolso = p_ind_tipo_reembolso
       and p_val_reembolso between nvl(val_min_reembolso, 0) and
           nvl(val_max_reembolso, 999999999999)
     order by cod_operadora, dt_ini_vigencia desc
     fetch first 1 rows only;
    --
  exception
    when no_data_found then
      --
      p_cod_retorno        := 0;
      p_msg_retorno        := null;
      p_ind_faceid         := 'N';
      p_val_confiabilidade := null;
      p_num_tentativas     := null;
      --
    when others then
      --
      ts_log_execucao ( 'RB_REEMBOLSO'
                       , 10
                       , 'Erro não previsto'
                       , 'Erro:' || chr(13) || ts.top_utl_padrao.msgerro
                                 || chr(13) || 'Erro-ORA:'               || ts_util.MsgErro
                                 || chr(13) || 'p_num_associado: '       || p_num_associado
                                 || chr(13) || 'p_dt_pedido: '           || p_dt_pedido
                                 || chr(13) || 'p_ind_tipo_reembolso: '  || p_ind_tipo_reembolso
                                 || chr(13) || 'p_val_reembolso: '       || p_val_reembolso
                       , 'RetornaReembolsoFaceId' );
       --
       p_cod_retorno := 1;
       p_msg_retorno := 'BuscaInteresseEnvioDocs Erro:' || ts_util.MsgErro ;
       --
       raise_application_error( -20001 , 'rb_reembolso.RetornaReembolsoFaceId - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro);
      --
  end;
  --
  --
  procedure RetornaReembolsoDocs(p_num_associado      in varchar2,
                              p_dt_pedido          in date,
                              p_ind_tipo_reembolso in varchar2,
                              p_val_reembolso      in number,
                              p_cursor             out sys_refcursor,
                              p_cod_retorno        out number,
                              p_msg_retorno        out varchar2) is
    --
  begin
    --
    open p_cursor for
      with par as
         (select pd.cod_param
            from rbm_param_obrigatoriedade_doc pd,
                 (select a.cod_operadora, p_ind_tipo_reembolso ind_tipo_reembolso, p_dt_pedido dt_pedido
                    from associado a
                   where a.num_associado = p_num_associado) pr
           where ind_habilitado = 'S'
             and (pd.cod_operadora = '99' or pd.cod_operadora = pr.cod_operadora)
             and pd.ind_tipo_reembolso = pr.ind_tipo_reembolso
             and pr.dt_pedido between pd.dt_ini_vigencia and nvl(pd.dt_fim_vigencia, sysdate)
           order by pd.cod_operadora, pd.dt_ini_vigencia desc
           fetch first 1 rows only),
        doc as
         (select dc.cod_param, ta.cod_tipo_anexo, ta.nom_tipo_anexo
            from rbm_tipo_anexo_reembolso ta,
                 rbm_documentos_obrigatorios dc,
                 (select p_val_reembolso val_reembolso from dual) pr
           where ta.cod_tipo_anexo = dc.cod_tipo_anexo
             and dc.ind_obrigatorio = 'S'
             and nvl(dc.val_parametrizado, pr.val_reembolso) <= pr.val_reembolso),
        exc as
         (select ed.cod_param, ed.cod_tipo_anexo
            from rbm_param_obrig_excec_doc ed,
                 (select a.cod_ts_contrato, a.cod_plano from associado a where a.num_associado = p_num_associado) pr
           where exists (select null
                    from rbm_param_obrig_excec_plano ep
                    where ep.cod_param = ed.cod_param
                     and ep.cod_ts_contrato = ed.cod_ts_contrato
                     and ep.cod_ts_contrato = pr.cod_ts_contrato
                     and ep.cod_plano = pr.cod_plano))
        select doc.cod_tipo_anexo, doc.nom_tipo_anexo
         from par, doc
         where par.cod_param = doc.cod_param
           and not exists (select null
                  from exc
                 where par.cod_param = exc.cod_param
                   and exc.cod_tipo_anexo = doc.cod_tipo_anexo);
    --
  exception
    when no_data_found then
      --
      p_cod_retorno := 0;
      p_msg_retorno := null;
      p_cursor      := null;
      --
    when others then
      --
      ts_log_execucao('RB_REEMBOLSO',
                      10,
                      'Erro não previsto',
                      'Erro:' || chr(13) || ts.top_utl_padrao.msgerro || chr(13) || 'Erro-ORA:' ||
                      ts_util.msgerro || chr(13) || 'p_num_associado: ' || p_num_associado || chr(13) ||
                      'p_dt_pedido: ' || p_dt_pedido || chr(13) || 'p_ind_tipo_reembolso: ' ||
                      p_ind_tipo_reembolso || chr(13) || 'p_val_reembolso: ' || p_val_reembolso,
                      'RetornaReembolsoDocs');
      --
      raise_application_error(-20001,
                              'rb_reembolso.RetornaReembolsoDocs - Ocorreu o seguinte erro: ' ||
                              ts.top_utl_padrao.msgerro);
      --
      end;
  --
  function get_rs_pedido_nota_fiscal (p_num_reembolso in number) return sys_refcursor
  is
  cur                 sys_refcursor;
  v_num_insc_fiscal   pedido_reembolso.num_insc_fiscal%type;
  v_num_nota_fiscal   pedido_reembolso.num_nota_fiscal%type;
  begin

 begin
        select num_insc_fiscal, num_nota_fiscal
        into   v_num_insc_fiscal, v_num_nota_fiscal
        from   pedido_reembolso
        where  num_reembolso = p_num_reembolso;
     exception
        when no_data_found then
            v_num_insc_fiscal := 0;
            v_num_nota_fiscal := null;
     end;

     open cur for
          select pr.num_reembolso, sr.nome_situacao
                             from ts.pedido_reembolso pr, ts.situacao_reembolso sr
                            where pr.num_nota_fiscal         = v_num_nota_fiscal
                              and nvl(pr.num_insc_fiscal,0)  = nvl(v_num_insc_fiscal,0)
                              and pr.ind_situacao not in (27,33,39,40,41,13,16,26)
                              and pr.ind_tipo_comprovante    = 'N'
                              and pr.num_reembolso          <> p_num_reembolso
                              AND pr.ind_situacao = sr.cod_situacao
                              and rownum                  = 1;
       return cur;
     exception
     when others then
        ts_log_execucao ( 'RB_REEMBOLSO', 99, 'get_rs_pedido_nota_fiscal', ts.top_utl_padrao.msgerro, 'ERRO' );
        raise_application_error( -20001 , 'RB_REEMBOLSO.get_rs_pedido_nota_fiscal - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro);
  end;
  --
  function get_rs_duplicidade_pedidos (p_num_reembolso in number,
                                       p_cod_motivo_glosa in number,
                                       p_dt_atendimento in varchar2,
                                       p_num_associado in varchar2 ,
                                       p_cod_funcao in number,
                                       p_cod_procedimento in varchar2,
                                       p_num_crm in varchar2,
                                       p_sigla_conselho in varchar2,
                                       p_cod_especialidade in varchar2,
                                       p_num_seq_item in number) return sys_refcursor
  IS
  CUR                 sys_refcursor;
  v_cod_padrao                itens_medicos.cod_padrao%type;
  v_cod_padrao_dest           itens_medicos.cod_padrao%type;
  v_cod_procedimento          ctm_itens_contas.cod_procedimento_cm%type;
  v_num_insc_fiscal           pedido_reembolso.num_insc_fiscal%type;
  v_ind_cirurgia              itens_medicos.ind_cirurgia%type;
  v_ind_acesso_multiplo       number := 1;
  v_ind_internado             tipo_tratamento.ind_internado%type;
  v_pct_cirurgia_multipla     number := 100;

  begin
  ts_log_execucao ( 'RB_REEMBOLSO'
                       , 10
                       , 'get_rs_duplicidade_pedidos'
                       , 'Erro:' || chr(13) || 'p_num_reembolso: ' ||p_num_reembolso || ' p_cod_motivo_glosa: ' || p_cod_motivo_glosa ||
                      ' p_dt_atendimento: '|| p_dt_atendimento || ' p_num_associado: ' || p_num_associado || ' p_cod_funcao: ' || p_cod_funcao || ' p_cod_procedimento: ' || p_cod_procedimento ||' p_num_crm: '|| p_num_crm ||
                      ' p_sigla_conselho: '|| p_sigla_conselho || ' p_cod_especialidade: ' || p_cod_especialidade || ' p_num_seq_item: ' || p_num_seq_item
                       , 'get_rs_duplicidade_pedidos' );
  begin
    select a.num_insc_fiscal,  nvl(ind_internado,'N')
        into v_num_insc_fiscal, v_ind_internado
           from pedido_reembolso a,   tipo_tratamento b
             where num_reembolso    = p_num_reembolso
               and a.cod_tratamento = b.cod_tratamento (+);
   exception
            when others then
               null;
               end;

   begin
    select  nvl(ind_cirurgia,'N'),cod_padrao
           into v_ind_cirurgia, v_cod_padrao
             from itens_medicos
               where item_medico = p_cod_procedimento;
    exception
            when others then
               null;
               end;

    if v_ind_cirurgia = 'S' then
         begin
            select nvl(a.pct_cirurgia_multipla,100) into v_pct_cirurgia_multipla
              from procedimento_reembolso a
              where a.cod_procedimento = p_cod_procedimento
              and a.num_seq_item = p_num_seq_item;
            if nvl(v_pct_cirurgia_multipla,100) <> 100 then
               v_ind_acesso_multiplo := 2;
            end if;
         exception
            when others then
               null;
         end;
      end if;

     begin
       if v_cod_padrao = 'AMB' then
          v_cod_padrao_dest := 'CBHPM';
       else
          v_cod_padrao_dest := 'AMB';
       end if;
       v_cod_procedimento := cm_converte_amb_cbhpm_s(p_cod_procedimento,p_dt_atendimento,v_cod_padrao_dest,'O');
    exception
       when others then
       v_cod_procedimento := p_cod_procedimento;
    end;


    if p_cod_motivo_glosa = 1576 then
      open CUR for
      select dup.num_reembolso_duplicado as num_reembolso,
             (select nome_situacao
                from situacao_reembolso  SR,
                     pedido_reembolso    PR
               where DUP.num_reembolso_duplicado = PR.num_reembolso
                 and PR.ind_situacao = SR.cod_situacao) as nome_situacao
        from TS.rbm_ocr_duplicidade DUP
       where DUP.num_reembolso = p_num_reembolso;
       return CUR;
      end if;

      if p_cod_motivo_glosa = 882 then
      open CUR for

     select x.num_reembolso, x.nome_situacao from (
        select p.num_reembolso,
               sr.nome_situacao
          from ctm_procedimento_realizado a, pedido_reembolso p, situacao_reembolso sr
         where a.cod_ts_sinistro = p.num_reembolso(+)
           and a.num_associado = p_num_associado
           and a.cod_funcao = nvl(p_cod_funcao, 0)
           and a.cod_procedimento in (p_cod_procedimento,v_cod_procedimento)
           and trunc(a.dt_utilizacao) = trunc(to_date(p_dt_atendimento,'dd/mm/rrrr'))
           and a.ind_tipo = 'C'
           and p.ind_situacao = sr.cod_situacao

    union

        select p.num_reembolso,
               sr.nome_situacao
          from ctm_consulta_realizada a, pedido_reembolso p, situacao_reembolso sr
         where a.cod_ts_sinistro = p.num_reembolso(+)
           and a.num_associado = p_num_associado
           and nvl(a.cod_especialidade, '0110') =
               nvl(p_cod_especialidade, '0110')
           and a.cod_procedimento in (p_cod_procedimento,v_cod_procedimento)
           and a.num_cr = nvl(p_num_crm, '99999')
           and a.sgl_cr = nvl(p_sigla_conselho, 'CRM')
           and trunc(a.dt_atendimento) = trunc(to_date(p_dt_atendimento,'dd/mm/rrrr'))
           and a.cod_ts_sinistro <> p_num_reembolso
           and p.ind_situacao = sr.cod_situacao

     union

        select a.num_reembolso,
               sr.nome_situacao
          from pedido_reembolso a, procedimento_reembolso b, situacao_reembolso sr
         where a.num_reembolso = p_num_reembolso
           and a.num_reembolso = b.num_reembolso
           and nvl(b.cod_especialidade, '0110') =
               nvl(p_cod_especialidade, '0110')
           and b.cod_procedimento = p_cod_procedimento
           and b.cod_ts_sinistro_dup is null
           and trunc(b.data_atendimento) = trunc(to_date(p_dt_atendimento,'dd/mm/rrrr'))
           and a.ind_situacao = sr.cod_situacao
           )x;
     return CUR;

      end if;
    if p_cod_motivo_glosa = 982 then
      open CUR for
      select x.num_reembolso,x.nome_situacao from(
          select p.num_reembolso, sr.nome_situacao
          from ctm_procedimento_realizado a,
               tipo_tratamento            c,
               pedido_reembolso           p,
               situacao_reembolso         sr
               where a.num_associado = p_num_associado
                 and a.cod_funcao = nvl(p_cod_funcao, 0)
                 and a.cod_tratamento = c.cod_tratamento
                 and nvl(c.ind_internado, 'N') = v_ind_internado
                 and a.cod_procedimento in (p_cod_procedimento, v_cod_procedimento)
                 and trunc(a.dt_utilizacao) = trunc(to_date(p_dt_atendimento,'dd/mm/rrrr'))
                 and a.cod_ts_sinistro <> p_num_reembolso
                 and a.cod_ts_sinistro = p.num_reembolso
                 and p.ind_situacao = sr.cod_situacao
                 and p.ind_situacao not in (16, 26, 39)
  union
          select p.num_reembolso, sr.nome_situacao
          from ctm_procedimento_realizado a,
               tipo_tratamento            c,
               pedido_reembolso           p,
               situacao_reembolso         sr
               where a.num_associado = p_num_associado
                 and a.cod_funcao = nvl(p_cod_funcao, 0)
                 and a.cod_tratamento = c.cod_tratamento
                 and nvl(c.ind_internado, 'N') = v_ind_internado
                 and a.cod_procedimento in (p_cod_procedimento, v_cod_procedimento)
                 and trunc(a.dt_utilizacao) = trunc(to_date(p_dt_atendimento,'dd/mm/rrrr'))
                 and a.cod_ts_sinistro <> p_num_reembolso
                 and a.cod_ts_sinistro = p.num_reembolso
                 and p.ind_situacao = sr.cod_situacao
                 and p.ind_situacao not in (16, 26, 39)
                 and p.num_insc_fiscal = v_num_insc_fiscal
  union
        select a.num_reembolso, sr.nome_situacao
          from pedido_reembolso       a,
               procedimento_reembolso b,
               situacao_reembolso     sr
         where a.num_reembolso = p_num_reembolso
           and a.num_reembolso = b.num_reembolso
           and a.ind_situacao = sr.cod_situacao
           and b.cod_ts_sinistro_dup is null
           and b.cod_procedimento = p_cod_procedimento
           and nvl(b.ind_funcao, '0') = nvl(p_cod_funcao, '0')
           and decode(nvl(pct_cirurgia_multipla, 100), 100, 1, 2) =
               v_ind_acesso_multiplo
           and not EXISTS
         (select 1
                  from reembolso_glosa rg
                 where rg.num_reembolso = p_num_reembolso
                   and b.num_seq_item = rg.num_seq_item
                   and rg.cod_motivo_glosa in (883, 882, 982, 983))
           and b.data_atendimento = trunc(to_date(p_dt_atendimento,'dd/mm/rrrr'))
)x;
      return CUR;
      end if;
   exception
     when others then
        ts_log_execucao ( 'RB_REEMBOLSO', 99, 'get_rs_pedidos_duplicados', ts.top_utl_padrao.msgerro, 'ERRO' );
        raise_application_error( -20001 , 'RB_REEMBOLSO.get_rs_pedidos_duplicados - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro);

	end;
  --
  function get_rs_pedidos_mesmo_horarios( p_num_reembolso in number
                                        , p_num_seq_item  in number) return sys_refcursor
  is

    v_num_associado         varchar2(25 byte);
    v_hora_atendimento      varchar2(4 byte);
    v_hora_alta             varchar2(4 byte);
    v_data_atendimento      date;

    cur sys_refcursor;
  begin

    begin
        select prc.num_associado
             , ped.hora_atendimento
             , ped.hora_alta
             , ped.data_atendimento
          into v_num_associado
             , v_hora_atendimento
             , v_hora_alta
             , v_data_atendimento
          from ts.pedido_reembolso       prc
             , ts.procedimento_reembolso ped
         where prc.num_reembolso = ped.num_reembolso
           and ped.num_reembolso = p_num_reembolso
           and ped.num_seq_item = p_num_seq_item;
    exception
    when no_data_found then
        return null;
    end;

    open cur for

        select pdr.num_reembolso NUM_REEMBOLSO
             , (select nome_situacao from ts.situacao_reembolso where cod_situacao = pdr.ind_situacao) NOME_SITUACAO
          from ts.pedido_reembolso       pdr
             , ts.procedimento_reembolso pre
         where pre.num_reembolso = pdr.num_reembolso
           and pdr.num_associado = v_num_associado
           and pre.data_atendimento = v_data_atendimento
           and (pre.ind_dhe is null or pre.ind_dhe = 'N')
           and pdr.ind_situacao in (34,36,37)
           and pdr.num_reembolso <> p_num_reembolso
           and ((pre.hora_atendimento = v_hora_atendimento or pre.hora_alta = v_hora_alta)
            or nvl2(v_hora_atendimento, SUBSTR(v_hora_atendimento, 1, 2) || ':' || SUBSTR(v_hora_atendimento, 3, 4), v_hora_atendimento) between nvl2(pre.hora_atendimento, substr(pre.hora_atendimento, 1, 2) || ':' || substr(pre.hora_atendimento, 3, 4), pre.hora_atendimento)
               and nvl2(pre.hora_alta, substr(pre.hora_alta, 1, 2) || ':' || substr(pre.hora_alta, 3, 4), pre.hora_alta)
            or nvl2(v_hora_alta, substr(v_hora_alta, 1, 2) || ':' || substr(v_hora_alta, 3, 4), v_hora_alta) between nvl2(pre.hora_atendimento, substr(pre.hora_atendimento, 1, 2) || ':' || substr(pre.hora_atendimento, 3, 4), pre.hora_atendimento)
               and nvl2(pre.hora_alta, substr(pre.hora_alta, 1, 2) || ':' || substr(pre.hora_alta, 3, 4), pre.hora_alta));

       return cur;
     exception
     when others then
        ts_log_execucao ( 'RB_REEMBOLSO', 99, 'get_rs_pedidos_duplicados', ts.top_utl_padrao.msgerro, 'ERRO' );
        raise_application_error( -20001 , 'RB_REEMBOLSO.get_rs_pedidos_duplicados - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro);

  end;
  --
  procedure RetornaJustivicativaRecusa( p_cod_motivo        in number
                                      , p_txt_justificativa out varchar2)
  is
  v_txt_justificativa varchar2(2000);
  begin

    select txt_justificativa
      into v_txt_justificativa
      from ts.reembolso_motivo_indef
     where cod_motivo = p_cod_motivo;

    p_txt_justificativa := v_txt_justificativa;

  exception
  when others then
    p_txt_justificativa := '';
  end;
  --
 function  get_rs_frequencia_pedidos (p_num_reembolso IN NUMBER, p_cod_regra_grupo IN NUMBER) RETURN SYS_REFCURSOR IS
    -- Declarações:
    result SYS_REFCURSOR;
    v_dt_ini DATE;
    v_dt_fim DATE;
    v_SQL VARCHAR2(32700);
    v_cod_inicial NUMBER;
    v_cod_final NUMBER;
    v_qtd_dias NUMBER;
    v_item_procedimento VARCHAR2(1);
    v_tem_proc NUMBER;
    rReembolso pedido_reembolso%ROWTYPE;
    rReembolsoProced procedimento_reembolso%ROWTYPE;

    CURSOR cur_grupo IS
        SELECT *
        FROM reembolso_regra_grupo
        where cod_regra_grupo = p_cod_regra_grupo
        ORDER BY 1;

    r_grupo cur_grupo%ROWTYPE;

BEGIN
    -- Obter informações do pedido de reembolso
    SELECT *
    INTO rReembolso
    FROM pedido_reembolso
    WHERE num_reembolso = p_num_reembolso;

    v_item_procedimento := 'S';

    -- Verifica a existência de procedimentos de reembolso
    BEGIN
        SELECT COUNT(*)
        INTO v_tem_proc
        FROM procedimento_reembolso
        WHERE num_reembolso = p_num_reembolso;
    EXCEPTION
        WHEN OTHERS THEN
            v_item_procedimento := 'N';
    END;

    IF v_tem_proc = 0 THEN
        v_item_procedimento := 'N';
    END IF;

    -- Loop para processar cada grupo
    FOR r_grupo IN cur_grupo LOOP
        FOR rReembolsoProced IN (
            SELECT *
            FROM TS.PROCEDIMENTO_REEMBOLSO
            WHERE num_reembolso = p_num_reembolso
        ) LOOP
            IF r_grupo.qtd_dias_ocorrencias = 1 THEN
                v_qtd_dias := 0;
            ELSE
                v_qtd_dias := r_grupo.qtd_dias_ocorrencias;
            END IF;

            -- Construção da consulta SQL dinâmica
            v_SQL := 'SELECT pr.num_reembolso,
                             (SELECT nome_situacao
                              FROM ts.situacao_reembolso
                              WHERE cod_situacao = pr.ind_situacao) nome_situacao
                      FROM ts.pedido_reembolso pr
                      , ts.procedimento_reembolso prr
                      , ts.pedido_reembolso_regra prg
                      WHERE pr.ind_situacao NOT IN (''11'', ''26'', ''33'', ''39'')
                      AND pr.num_reembolso = prr.num_reembolso
                      AND pr.num_reembolso = prg.num_reembolso
                      AND pr.num_reembolso <> :pNumReembolso';

            -- Tipo de reembolso
            IF r_grupo.ind_tipo_reembolso = 1 THEN
                v_SQL := v_SQL || ' AND pr.ind_tipo_reembolso = 1 ';
            ELSIF r_grupo.ind_tipo_reembolso = 2 THEN
                v_SQL := v_SQL || ' AND pr.ind_tipo_reembolso = 2 ';
            ELSIF r_grupo.ind_tipo_reembolso = 3 THEN
                v_SQL := v_SQL || ' AND pr.ind_tipo_reembolso = 3 ';
            END IF;

            -- Controlado por
            IF r_grupo.ind_incidencia_ocorrencia_1 = 'B' THEN
                v_SQL := v_SQL || ' AND pr.num_associado = :pNumAssociado ';
            ELSIF r_grupo.ind_incidencia_ocorrencia_1 = 'F' THEN
                v_SQL := v_SQL || ' AND pr.cod_ts_tit = :pCodTsTit ';
            ELSIF r_grupo.ind_incidencia_ocorrencia_1 = 'P' THEN
                v_SQL := v_SQL || ' AND pr.num_associado = :pNumAssociado
                                      AND pr.num_insc_fiscal = :pInscFiscal ';
            ELSIF r_grupo.ind_incidencia_ocorrencia_1 = 'G' THEN
                v_SQL := v_SQL || ' AND pr.cod_ts_tit = :pCodTsTit
                                      AND pr.num_insc_fiscal = :pInscFiscal ';
            END IF;

            -- Contato por
            IF v_item_procedimento = 'S' AND v_qtd_dias IS NOT NULL THEN
                v_SQL := v_SQL || ' AND TRUNC(prr.data_atendimento) BETWEEN :pDtIni AND :pDtFim ';
                v_dt_ini := TRUNC(rReembolsoProced.Data_Atendimento) - v_qtd_dias;
                v_dt_fim := TRUNC(rReembolsoProced.Data_Atendimento) + v_qtd_dias;
            END IF;

            -- Procedimento
            IF r_grupo.cod_procedimento_inicial IS NOT NULL AND r_grupo.cod_procedimento_final IS NOT NULL THEN
                v_SQL := v_SQL || ' AND prr.cod_procedimento_cm BETWEEN :pCodInicial AND :pCodFinal';
                v_cod_inicial := r_grupo.cod_procedimento_inicial;
                v_cod_final := r_grupo.cod_procedimento_final;
            ELSE
                v_SQL := v_SQL || ' AND :pCodInicial = :pCodFinal';
                v_cod_inicial := 1;
                v_cod_final := 1;
            END IF;

            -- Finaliza a consulta SQL
            v_SQL := v_SQL || ' GROUP BY pr.num_reembolso, pr.ind_situacao
                                ORDER BY pr.num_reembolso';

            -- Executa a consulta SQL dinâmica com os parâmetros adequados
            IF r_grupo.ind_incidencia_ocorrencia_1 = 'B' THEN
                OPEN result FOR v_SQL USING p_num_reembolso, rReembolso.Num_Associado, v_dt_ini, v_dt_fim, v_cod_inicial, v_cod_final;
            ELSIF r_grupo.ind_incidencia_ocorrencia_1 = 'F' THEN
                OPEN result FOR v_SQL USING p_num_reembolso, rReembolso.Cod_Ts_Tit, v_dt_ini, v_dt_fim, v_cod_inicial, v_cod_final;
            ELSIF r_grupo.ind_incidencia_ocorrencia_1 = 'P' THEN
                OPEN result FOR v_SQL USING p_num_reembolso, rReembolso.Num_Associado, rReembolso.Num_Insc_Fiscal, v_dt_ini, v_dt_fim, v_cod_inicial, v_cod_final;
            ELSIF r_grupo.ind_incidencia_ocorrencia_1 = 'G' THEN
                OPEN result FOR v_SQL USING p_num_reembolso, rReembolso.Cod_Ts_Tit, rReembolso.Num_Insc_Fiscal, v_dt_ini, v_dt_fim, v_cod_inicial, v_cod_final;
            ELSE
                OPEN result FOR v_SQL USING p_num_reembolso, v_cod_inicial, v_cod_final;
            END IF;

            -- Retorna o resultado após processar todos os loops
            RETURN result;

        END LOOP;
    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        -- Log do erro
        ts_log_execucao('RB_REEMBOLSO', 10, 'Erro não previsto',
                         'Erro: ' || chr(13) || ts.top_utl_padrao.msgerro ||
                         chr(13) || 'Erro-ORAv_ind_tipo_reembolso:' || ts_util.MsgErro ||
                         chr(13) || v_SQL, 'RetornaGrupoRegra');
        RAISE_APPLICATION_ERROR(-20001, 'rb_reembolso.RetornaGrupoRegra - Ocorreu o seguinte erro: ' || ts.top_utl_padrao.msgerro);
END;
  ----------------------------------------------------------------------------
  -- Retorna xml com as duplicidades de protocolo de atendimento da carta de autorização
  ----------------------------------------------------------------------------
  function RetornaDuplicidadeProtocoloAtendimento ( p_num_reembolso         in  varchar2
                        )
  return sys_refcursor
  is
     --Declarações:
     v_parametro             varchar2(4000);
     v_SQL                   varchar2(4000);
     v_cod_retorno           number;
     v_msg_retorno           varchar2(4000);
     c                       sys_refcursor;
     v_posicao               pls_integer;
     v_num_protocolo_atendimento varchar2(25);
 begin
     --Início
     v_posicao := 10;
     v_parametro := 'p_num_reembolso = ' || p_num_reembolso;
     v_posicao := 20;
     --
     --Validação
     IF NVL(p_num_reembolso,0) = 0 THEN
        return get_cursor_vazio;
     END IF;
     --
     v_posicao := 40;
     --
     begin
       select rbc.num_protocolo_atendimento
         into v_num_protocolo_atendimento
         from reembolso_carta_autorizacao rbc
        where rbc.num_reembolso = p_num_reembolso;
    exception
       when no_data_found then
          v_num_protocolo_atendimento := null;
    end;
     --Montar XML das s
     v_SQL :=  trim(' select pr.num_reembolso                                                 ')
           || rtrim('      , sr.nome_situacao                                                 ')
           || rtrim('   from ts.reembolso_carta_autorizacao rbc                               ')
           || rtrim('      , ts.pedido_reembolso            pr                                ')
           || rtrim('      , ts.situacao_reembolso          sr                                ')
           || rtrim('  where pr.ind_situacao in (34,36,37)                                    ')
           || rtrim('    and pr.num_reembolso = rbc.num_reembolso                             ')
           || rtrim('    and pr.num_reembolso != :p_num_reembolso                              ')
           || rtrim('    and pr.ind_situacao  = sr.cod_situacao                               ')
           || rtrim('    and rbc.num_protocolo_atendimento = :v_num_protocolo_atendimento      ');
     --
     v_posicao := 50;
     --
     open  c
     for   v_Sql
     using p_num_reembolso
         , v_num_protocolo_atendimento;
     --
     return c;
     --
 EXCEPTION
 WHEN OTHERS THEN
     TS_LOG_EXECUCAO ( 'RB_REEMBOLSO'
                     , v_posicao
                     , ts_util.MsgErro || ' - ' || ts.top_utl_padrao.msgerro
                     , 'Erro:' || chr(13) || ts_util.MsgErro || chr(13) || 'Parametros:' || chr(13) || v_parametro || chr(13) || v_SQL
                     , 'RetornaDuplicidadeProtocoloAtendimento'
                     );
     --
     return get_cursor_vazio;
 END;
  --
  ----------------------------------------------------------------------------
  -- Retorna se o login tem permissão para enviar carta autorizacao
  ----------------------------------------------------------------------------
  procedure RetornaPermissaoCarta ( p_cod_usuario         in  varchar2
                                  , p_cod_motivo          in  varchar2
                                  , p_ind_permissao       out varchar2
                                  )
  is
     --Declarações:
     v_count      number;
 begin
     --Início
     --
     begin
        SELECT count(*)
          INTO v_count
          FROM ts.reembolso_login_carta_excepcional rlc
         WHERE rlc.cod_motivo_reembolso = p_cod_motivo
           AND rlc.cod_usuario          = p_cod_usuario
           AND trunc(sysdate) between rlc.dt_inicio and nvl(rlc.dt_fim, sysdate);
    exception
       when others then
          v_count := 0;
    end;
    --
    IF v_count > 0  THEN
      p_ind_permissao := 'S';
    ELSE
      p_ind_permissao := 'N';
    END IF;
     --
 EXCEPTION
 WHEN OTHERS THEN
     TS_LOG_EXECUCAO ( 'RB_REEMBOLSO'
                     , p_cod_motivo
                     , ts_util.MsgErro || ' - ' || ts.top_utl_padrao.msgerro
                     , 'Erro:' || chr(13) || ts_util.MsgErro || chr(13) || 'p_cod_motivo:' || chr(13) || p_cod_motivo
                     , 'RetornaPermissaoCarta'
                     );
     p_ind_permissao := 'N';
     --
 END;
  --
END rb_reembolso;
