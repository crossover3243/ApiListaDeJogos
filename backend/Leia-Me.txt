CREATE OR REPLACE PACKAGE "RBM_RCS_PREVIA_PED_REEMB" is
    --
    -- Author  : TOPDOWN
    -- Created : 06/10/2009 17:53
    -- Purpose : Realizar todas as consultas no banco da funcionalidade Situação Pedido
    --
    function p_versao                       return varchar2;
    --
    procedure get_data                      ( p_data          out varchar2
                                            , p_cod_formato   in  varchar2    default 'DD/MM/YYYY'
                                            );
    --
    procedure get_controle_sistema          ( p_val_parametro  out varchar
                                            , p_cod_parametro  in  varchar
                                            , p_val_default    in  varchar2    default ''
                                            );
    --
    procedure get_pedido_analise            ( p_ind_retorno      out varchar2 --S/N
                                            , p_num_pedido       in  varchar2
                                            , p_cod_usuario      in  varchar2
                                            );
    --
    procedure get_grupos_pedidos            ( p_txt_retorno      out clob
                                            , p_num_pedido       in  varchar2
                                            , p_ind_situacao     in  number
                                            );
    --
    procedure get_qtd_itens_negados         ( p_qtd_item_negado    out pls_integer
                                            , p_num_pedido         in  varchar2
                                            , p_cod_usuario        in  varchar2
                                            );
    --
    procedure get_criterio_especial         ( p_ind_retorno               out varchar2 --S/N
                                            , p_num_pedido                in varchar2
                                            , p_cod_usuario               in varchar2
                                            , p_ind_liberacao             in varchar2
                                            , p_ind_analise               in varchar2
                                            , p_cod_grupo_encaminhamento  in varchar2
                                            );
    --
    function  get_cursor                    ( p_nome_tabela       in varchar
                                            , p_campo_value       in varchar
                                            , p_campo_desc        in varchar
                                            , p_order             in varchar default null
                                            , p_where             in varchar default null
                                            )
    return sys_refcursor;
    --
    procedure get_nome_item                 ( p_nome_item        out varchar2
                                            , p_item_medico      in  varchar2
                                            );
    --
    procedure get_xml_funcao                ( p_xml_retorno      out clob
                                            , p_cod_retorno      out number
                                            , p_msg_retorno      out varchar2
                                            , p_cod_usuario      in  varchar2
                                            , p_cod_tipo_usuario in  varchar2
                                            );
    --
    procedure get_contrato                  ( p_num_contrato      in  varchar2
                                            , p_cod_ts_contrato   out varchar2
                                            , p_nome_contrato     out varchar2
                                            );
    --
    procedure get_xml_qtd_total             ( p_xml_retorno      out clob
                                            , p_cod_retorno      out number
                                            , p_msg_retorno      out varchar2
                                            , p_xml_parametro    in  clob );
    --
    function get_rs_tipo_tratamento         ( p_ind_padrao_tiss  in varchar2 default 'S'
                                            , p_ind_internacao   in varchar2 default null
                                            )
    return sys_refcursor;
    --
    procedure get_xml_pesquisa_situacao     ( p_xml_resultado  out clob
                                            , p_cod_retorno    out number
                                            , p_msg_retorno    out varchar2
                                            , p_xml_filtro     in  clob
                                            );
    --
    procedure get_xml_pesquisa_wpd          ( p_xml_resultado  out clob
                                            , p_cod_retorno    out number
                                            , p_msg_retorno    out varchar2
                                            , p_xml_filtro     in  clob
                                            );
    --
    procedure get_xml_benef_situacao        ( p_xml_retorno    out clob
                                            , p_cod_retorno    out number
                                            , p_msg_retorno    out varchar2
                                            , p_cod_ts         in number
                                            , p_num_associado  in varchar2
                                            , p_data_ini       in varchar2
                                            , p_data_fim       in varchar2
                                            );
    --
    procedure get_xml_benef_procedimento    ( p_xml_retorno    out clob
                                            , p_cod_retorno    out number
                                            , p_msg_retorno    out varchar2
                                            , p_xml_filtro     in clob
                                            );
    --
    procedure RetornaXMLTabela              ( p_xml_retorno      out clob
                                            , p_cod_retorno      out number
                                            , p_msg_retorno      out varchar2
                                            , p_nome_tabela      in  varchar2
                                            , p_campo_01         in  varchar2
                                            , p_campo_02         in  varchar2
                                            );
    --
    function RetornaRsPedidoPendente        ( p_ind_tipo_rel     in varchar2
                                            , p_data_ini         in varchar2
                                            , p_data_fim         in varchar2
                                            , p_ordenacao        in varchar2 default ''
                                            )
    return sys_refcursor;
    --
    procedure RetornaXMLConfirmacaoPedido   ( p_xml_retorno    out clob
                                            , p_xml_filtro     in clob
                                            );
    --
    procedure get_dados_prestador           ( p_nome_prestador       out varchar2
                                            , p_ind_vinculacao       out varchar2
                                            , p_ind_tipo_pessoa      out varchar2
                                            , p_cod_prestador        in out nocopy varchar2
                                            , p_cod_prestador_ts     in out nocopy pls_integer
                                            );
    --
    procedure get_dados_prestador           ( p_nome_prestador          out        varchar2
                                            , p_ind_vinculacao          out        varchar2
                                            , p_ind_tipo_pessoa         out        varchar2
                                            , p_cod_prestador_ts        out        pls_integer
                                            , p_cod_prestador        in out nocopy varchar2
                                            , p_cod_usuario          in            varchar2
                                            );
    --
    procedure RetornaPedidoComGlosa         ( p_ind_retorno            out varchar2 --S/N
                                            , p_num_pedido          in     varchar2
                                            );
    --
    function get_rs_pesquisa_local_int      ( p_xml_filtro          in clob )    return sys_refcursor;
    --
    procedure get_xml_nome_executante       ( p_xml_retorno      out clob
                                             , p_xml_filtro       in  clob
                                            );
    --
    function get_pedidos                    ( p_ind_alterar                 in varchar2, p_cod_usuario   in varchar2 )           return sys_refcursor;

    --
    function get_rs_grupo_usuario           ( p_cod_usuario             in varchar2 , p_num_pedido                 in varchar2 default null ) return sys_refcursor;

    --
     function get_in_unidade_usuario ( p_cod_usuario           in varchar2 )
    return varchar2;

    function get_in_operadora_usuario ( p_cod_usuario           in varchar2 )
    return varchar2;
    function get_cursor_tab_auxiliar ( p_ind_tipo      in varchar2
                                   , p_cod_filtro    in varchar2     default null
                                   , p_cod_filtro_ts in varchar2     default null
                                   , p_ctr_logs      in varchar2     default 'N'
                                   )
  return sys_refcursor;
    --
    procedure get_situacao_pedido_grupo  ( p_txt_retorno      out clob
                                         , p_num_pedido       in  varchar2
                                         , p_qtd_grupos       out  number
                                         );
end rbm_rcs_previa_ped_reemb;
/
CREATE OR REPLACE PACKAGE BODY "RBM_RCS_PREVIA_PED_REEMB"
is
    --
    type param_xml_reg  is record ( nome     varchar2(50)
                                  , valor    varchar2(500)
                                  , tipo     varchar2(1)
                                  );
    --
    type param_xml_map  is table of param_xml_reg;
    --
    param_xml           param_xml_map := param_xml_map();
    --
    --
    tab_filtro          top_utl_xml.tbl_fields;
    --
    function p_versao return varchar2 is
    begin
        return 'Versão CVS SPEC:: 1.3 - BODY:: 1.6';
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Verifica se a data informada é uma data válida
    ----------------------------------------------------------------------------
    function IsDate( p_valor varchar2 , p_formato varchar2 default null ) return boolean is
       vlr date;
       fmt varchar2(30);
    begin
        --
        if p_valor is null then return false;
        end if;
        --
        if  p_formato is not null then
            fmt := p_formato;
        else
            case length( p_valor )
                 when 6  then fmt := 'yyyymm';
                 when 7  then fmt := 'mm/yyyy';
                 when 8  then fmt := 'ddmmyyyy';
                 when 10 then fmt := 'dd/mm/yyyy';
                         else fmt := 'dd/mm/yyyy hh24:mi:ss';
            end case;
        end if;
        --
        vlr := to_date( p_valor, FMT );
        return true;
        --
    exception
         when others then return false;
    end;
    ----------------------------------------------------------------------------
    -- Retornar o parametro informado da controle_sistema
    ----------------------------------------------------------------------------
    function get_controle_sistema ( p_cod_parametro  in  varchar
                                  , p_val_default    in  varchar2    default ''
                                  )
    return varchar2
    is
        v_val_parametro      controle_sistema.val_parametro%type;
    begin
        begin
            select  val_parametro
            into    v_val_parametro
            from    controle_sistema
            where   cod_parametro       = p_cod_parametro;
        exception
            when no_data_found then
                v_val_parametro         := p_val_default;
        end;
        --
        return v_val_parametro;
        --
    end;
    --
    ----------------------------------------------------------------------------
    -- Add o parametro para geração do XML
    ----------------------------------------------------------------------------
    procedure AdicionarParametroSQL ( p_nome_parametro      in varchar2
                                    , p_valor_parametro     in varchar2
                                    , p_tipo_parametro      in varchar2 default 'S'
                                    )
    is
    begin
        param_xml.extend;
        param_xml(param_xml.count).tipo  := p_tipo_parametro;
        param_xml(param_xml.count).nome  := p_nome_parametro;
        param_xml(param_xml.count).valor := p_valor_parametro;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar o valor do parametro da tabela controle_sistema
    ----------------------------------------------------------------------------
    procedure get_controle_sistema ( p_val_parametro  out varchar
                                     , p_cod_parametro  in  varchar
                                     , p_val_default    in  varchar2    default ''
                                     )
    is
    --
    begin
        begin
            select  val_parametro
            into    p_val_parametro
            from    controle_sistema
            where   cod_parametro       = p_cod_parametro;
        exception
            when no_data_found then
                p_val_parametro         := p_val_default;
        end;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar a data atual do sistema
    ----------------------------------------------------------------------------
    procedure get_data    ( p_data          out varchar2
                          , p_cod_formato   in  varchar2    default 'DD/MM/YYYY'
                          )
    is
    --
    begin
        --
        begin
            select to_char(sysdate, nvl(p_cod_formato,'DD/MM/YYYY')) into p_data
              from dual;
        exception
            when others then
                p_data := null;
        end;
        --
        return;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar a cursor vazio
    ----------------------------------------------------------------------------
    function get_cursor_vazio
    return sys_refcursor
    is
        c           sys_refcursor;
    --
    begin
        --
        open c for select * from dual where 1 = 2;
        --
        return c;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar se o pedido informado está em analise em pelo menos
    -- um grupo do usuario
    ----------------------------------------------------------------------------
    procedure get_pedido_analise   ( p_ind_retorno      out varchar2 --S/N
                                   , p_num_pedido       in  varchar2
                                   , p_cod_usuario      in  varchar2
                                   )
    is
        --
        v_qtd               pls_integer := 0;
        --
    begin
        begin
            select 1
            into   v_qtd
            from   usuario_analise              ua
                 , autorizacao_liberacao        al
            where  al.num_pedido                = p_num_pedido
            and    al.ind_situacao              = 1
            and    upper(ua.cod_usuario)        = p_cod_usuario
            and    ua.cod_grupo_encaminhamento  = al.cod_grupo_encaminhamento
            and    rownum                       < 2;
        exception
            when no_data_found then
                v_qtd := 0;
        end;
        --
        p_ind_retorno := case when v_qtd > 0 then 'S' else 'N' end;
        --
        return;
    exception
    when others then
        raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.get_pedido_analise - Ocorreu o seguinte erro: ' || sqlerrm);
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Add o parametro para geração do XML
    ----------------------------------------------------------------------------
    procedure add_parametro_sql ( p_nome_parametro      in varchar2
                                , p_valor_parametro     in varchar2
                                , p_tipo_parametro      in varchar2 default 'S'
                                )
    is
    begin
        param_xml.extend;
        param_xml(param_xml.count).tipo  := p_tipo_parametro;
        param_xml(param_xml.count).nome  := p_nome_parametro;
        param_xml(param_xml.count).valor := p_valor_parametro;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar se o pedido informado está em analise em pelo menos
    -- um grupo do usuario
    ----------------------------------------------------------------------------
    procedure RetornaPedidoComGlosa ( p_ind_retorno      out varchar2 --S/N
                                    , p_num_pedido       in  varchar2
                                    )
    is
        --
        v_qtd               pls_integer := 0;
        --
    begin
        begin
            select 1
            into   v_qtd
            from   autorizacao_msg
            where  num_pedido       = p_num_pedido
            and    ind_analise      = 'N'
            and    rownum           < 2;
        exception
        when no_data_found then
            v_qtd := 0;
        end;
        --
        p_ind_retorno := case when v_qtd > 0 then 'S' else 'N' end;
        --
        return;
    exception
        when others then
            raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.RetornaPedidoComGlosa - Ocorreu o seguinte erro: ' || sqlerrm);
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retorna o total de itens negados do pedido informado
    ----------------------------------------------------------------------------
    procedure get_qtd_itens_negados  ( p_qtd_item_negado    out pls_integer
                                     , p_num_pedido         in  varchar2
                                     , p_cod_usuario        in  varchar2
                                     )
    is
        --
    begin
        --
        begin
            select 1
            into   p_qtd_item_negado
            from   autorizacao_item
            where  num_pedido               = p_num_pedido
            and    nvl(ind_situacao,'A')    = 'N'
            and    rownum                   < 2;
        exception
            when no_data_found then
                p_qtd_item_negado := 0;
        end;
        --
        return;
    exception
        when others then
            raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.get_qtd_itens_negados - Ocorreu o seguinte erro: ' || sqlerrm);
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar os grupos de usuários do pedido / situação informados
    ----------------------------------------------------------------------------
    procedure get_grupos_pedidos  ( p_txt_retorno      out clob
                                  , p_num_pedido       in  varchar2
                                  , p_ind_situacao     in  number
                                  )
    is
    begin
        --
        p_txt_retorno := '';
        --
        for c_grupo in
        (


          select ga.nom_grupo_previa
              from   ts.pedido_reembolso_previa_grupo al
                   , ts.reemb_previa_grupo ga
              where  al.num_reembolso = p_num_pedido
              and    al.cod_grupo_previa  = ga.cod_grupo_previa
              and    al.ind_situacao     = 1
              group by ga.nom_grupo_previa
              order by ga.nom_grupo_previa

        )
        loop
            --
            p_txt_retorno := case when nvl(p_txt_retorno,'X') = 'X' then c_grupo.nom_grupo_previa
                                                                    else p_txt_retorno || '<BR>' || c_grupo.nom_grupo_previa
                             end;
            --
        end loop;
        --
        return;
    exception
    when others then
        raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.get_grupos_pedidos - Ocorreu o seguinte erro: ' || sqlerrm);
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar os grupos de usuários do pedido não analisados e quantidade de grupos
    ----------------------------------------------------------------------------
    procedure get_situacao_pedido_grupo  ( p_txt_retorno      out clob
                                         , p_num_pedido       in  varchar2
                                         , p_qtd_grupos       out  number
                                         )
    is
    begin
        --
        p_txt_retorno := '';
        --
        select count(*)
          into p_qtd_grupos
        from  ts.pedido_reembolso_previa_grupo al
        where al.num_reembolso = p_num_pedido;
        --
        for c_grupo in
        (


          select ga.nom_grupo_previa
              from   ts.pedido_reembolso_previa_grupo al
                   , ts.reemb_previa_grupo ga
              where  al.num_reembolso = p_num_pedido
              and    al.cod_grupo_previa  = ga.cod_grupo_previa
              and    al.ind_situacao     = 1
              group by ga.nom_grupo_previa
              order by ga.nom_grupo_previa

        )
        loop
            --
            p_txt_retorno := case when nvl(p_txt_retorno,'X') = 'X' then c_grupo.nom_grupo_previa
                                                                    else p_txt_retorno || '<BR>' || c_grupo.nom_grupo_previa
                             end;
            --
        end loop;
        --
        return;
    exception
    when others then
        raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.get_grupos_pedidos - Ocorreu o seguinte erro: ' || sqlerrm);
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar o nome do item informado
    ----------------------------------------------------------------------------
    procedure get_nome_item   ( p_nome_item        out varchar2
                              , p_item_medico      in  varchar2
                              )
    is
        --
    begin
        --
        begin
            select nome_item
            into   p_nome_item
            from   itens_medicos
            where  item_medico  = p_item_medico;
        exception
            when no_data_found then
                --
                begin
                    select nome_item
                    into   p_nome_item
                    from   pacotes
                    where  cod_pacote  = p_item_medico;
                exception
                    when no_data_found then
                        --
                        begin
                            select nome_item
                            into   p_nome_item
                            from   ts.itens_servicos
                            where  item_servico  = p_item_medico;
                        exception
                            when no_data_found then
                                p_nome_item := '';
                        end;
                        --
                end;
                --
        end;
        --
        return;
    exception
        when others then
            raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.get_nome_item - Ocorreu o seguinte erro: ' || sqlerrm);
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar XML do SQL informado
    ----------------------------------------------------------------------------
    function gerar_xml ( p_cod_retorno       out number
                       , p_msg_retorno       out varchar2
                       , p_sql               in varchar2
                       , p_nome_cabecalho    in varchar2     default null
                       , p_nome_coluna       in varchar2     default null
                       , p_ind_max_linha     in varchar2     default 'N'    --Indica se deve ser limitado a qtd do parametro AT_QTD_MAX_SITUACAO
                       , p_somar_max_linha   in varchar2     default 'N'    --Indica se deve retornar o MAX + 1
                       )
    return clob
    is
        qryCtx                  DBMS_XMLGEN.ctxHandle;
        vXML                    clob;
        idx                     pls_integer;
        v_qtd_max               controle_sistema.val_parametro%type;
    begin
        --
        ts_util.ValidarSQL ( p_cod_retorno  => p_cod_retorno
                           , p_msg_retorno  => p_msg_retorno
                           , stringSql      => p_sql
                           );
        --
        if p_cod_retorno <> 0 then
            ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                            , 999
                            , 'Erro ao ValidarSQL'
                            , 'Erro:' || chr(13) || ts.ts_util.msgerro
                                      || chr(13) || 'SQL:' || p_sql
                            , 'gerar_xml'
                            );

            return '';
        end if;
        --
        if p_ind_max_linha = 'S' then
            get_controle_sistema ( p_val_parametro => v_qtd_max
                                 , p_cod_parametro => 'AT_QTD_MAX_SITUACAO'
                                 , p_val_default   => '100'
                                 );
            --
            if p_somar_max_linha = 'S' then v_qtd_max := v_qtd_max + 1;
            end if;
            --
        end if;
        --
        qryCtx := dbms_xmlgen.newContext         ( p_sql );
        --
        -- Colocar os parametros
        idx := param_xml.first;
        while idx is not null loop
            --
            if    param_xml ( idx ).tipo = 'D' then
                  dbms_xmlgen.setBindValue         ( qryCtx
                                                   , param_xml ( idx ).nome
                                                   , to_date(trim(param_xml ( idx ).valor), 'dd/mm/yyyy')
                                                   );
            elsif param_xml ( idx ).tipo = 'N' then
                  dbms_xmlgen.setBindValue         ( qryCtx
                                                   , param_xml ( idx ).nome
                                                   , to_number(trim(param_xml ( idx ).valor))
                                                   );
            else
                  sys.dbms_xmlgen.setBindValue     ( qryCtx
                                                   , param_xml ( idx ).nome
                                                   , trim(param_xml ( idx ).valor)
                                                   );
            end if;
            --
            idx := param_xml.next            ( idx );
        end loop;
        --
        param_xml.delete;
        --
        if  p_nome_cabecalho is not null then  dbms_xmlgen.setRowSetTag   ( qryCtx , p_nome_cabecalho );
        end if;
        if  p_nome_coluna is not null then     dbms_xmlgen.setRowTag      ( qryCtx , p_nome_coluna);
        end if;
        --
        if  p_ind_max_linha = 'S' then         dbms_xmlgen.setMaxRows           ( qryCtx , to_number(v_qtd_max));
        end if;
        --
        dbms_xmlgen.setCheckInvalidChars     ( qryCtx , TRUE);
        dbms_xmlgen.useNullAttributeIndicator( qryCtx , TRUE);
        --
        vXML := dbms_xmlgen.getXML           ( qryCtx );
        dbms_xmlgen.closeContext             ( qryCtx );
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
        return vXML;
        --
    exception
        when others then
            --
            p_cod_retorno := 9;
            p_msg_retorno := 'Ocorreu o seguinte erro: ' || sqlerrm || ' ( ' || ts_util.msgerro  || ' )';
            --
            ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                            , 999
                            , 'Erro não previsto'
                            , 'Erro:' || chr(13) || ts.ts_util.msgerro
                                      || chr(13) || 'SQL:' || p_sql
                            , 'gerar_xml'
                            );
            return '';
            --
    end;
    --
    ----------------------------------------------------------------------------
    -- Retornar se o pedido informado cai no criterio especial
    ----------------------------------------------------------------------------
    procedure get_criterio_especial   ( p_ind_retorno               out varchar2 --S/N
                                      , p_num_pedido                in varchar2
                                      , p_cod_usuario               in varchar2
                                      , p_ind_liberacao             in varchar2
                                      , p_ind_analise               in varchar2
                                      , p_cod_grupo_encaminhamento  in varchar2
                                      )
    is
        --
        v_qtd               pls_integer := 0;
        --
    begin
        --
        if p_ind_liberacao = 'S' then --Supervisor
            --
            begin
                select 1
                into   v_qtd
                from   autorizacao_msg am
                     , motivo_glosa mg
                where  am.num_pedido            = p_num_pedido
                and    am.cod_motivo_glosa      = mg.cod_motivo_glosa
                and    mg.ind_liberacao         = '2'
                and    am.ind_analise           = 'N'
                and    rownum                   < 2;
            exception
                when no_data_found then
                    v_qtd := 0;
            end;
            --
        elsif p_ind_liberacao = 'E' then --Específico
            --
            begin
                select 1
                into   v_qtd
                from   autorizacao_liberacao
                where  num_pedido               = p_num_pedido
                and    cod_grupo_encaminhamento = p_cod_grupo_encaminhamento
                and    ind_situacao             = 1
                and    rownum                   < 2;
            exception
                when no_data_found then
                    v_qtd := 0;
            end;
            --
        elsif p_ind_liberacao = 'P' then --Apenas as que o usuario participa
            --
            get_pedido_analise   ( p_ind_retorno    => p_ind_retorno
                                 , p_num_pedido     => p_num_pedido
                                 , p_cod_usuario    => p_cod_usuario
                                 );
            --
            return;
            --
        elsif p_ind_liberacao = 'A' then --Com pendência Analisada
            --
            begin
                select 1
                into   v_qtd
                from   autorizacao_liberacao        al
                where  al.num_pedido                = p_num_pedido
                and    al.ind_situacao              = 2
                and    rownum                       < 2;
            exception
                when no_data_found then
                    v_qtd := 0;
            end;
            --
        elsif p_ind_liberacao = 'T' then --Todos
            --
            begin
                select 1
                into   v_qtd
                from   autorizacao_liberacao        al
                where  al.num_pedido                = p_num_pedido
                and    rownum                       < 2;
            exception
                when no_data_found then
                    v_qtd := 0;
            end;
            --
        end if;
        --
        p_ind_retorno := case when v_qtd > 0 then 'S' else 'N' end;
        --
        return;
    exception
        when others then
            raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.get_criterio_especial - Ocorreu o seguinte erro: ' || sqlerrm);
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um cursor com os parametros informados
    ----------------------------------------------------------------------------
    function  get_cursor   ( p_nome_tabela       in varchar
                           , p_campo_value       in varchar
                           , p_campo_desc        in varchar
                           , p_order             in varchar default null
                           , p_where             in varchar default null
                           )
    return sys_refcursor
    is
        c                         sys_refcursor;
        v_Sql                     Varchar2(4000) := '';
        v_item_vazio              varchar2(3) := '¿¿¿';
    begin
        --
        v_Sql := v_Sql || ' SELECT ';
        --
        if    NVL(p_campo_value,v_item_vazio) <> v_item_vazio
           or NVL(p_campo_desc,v_item_vazio) <> v_item_vazio then
            --
            if NVL(p_campo_value,v_item_vazio) <> v_item_vazio then
                v_Sql := v_Sql || p_campo_value;
            end if;
            --
            if NVL(p_campo_desc,v_item_vazio) <> v_item_vazio then
                --
                if NVL(p_campo_value,v_item_vazio) <> v_item_vazio then v_Sql := v_Sql || ' ,';
                end if;
                --
                v_Sql := v_Sql || p_campo_desc;
                --
            end if;
            --
        else
            --
            v_Sql := v_Sql || ' * ';
            --
        end if;
        --
        v_Sql := v_Sql || ' From ' || p_nome_tabela;
        --
        if p_where is not null then
            v_Sql := v_Sql || ' ' || p_where;
        end if;
        --
        if p_order is not null then
            v_Sql := v_Sql || ' ' || p_order;
        elsif p_campo_desc is not null then
            v_Sql := v_Sql || ' order by ' || p_campo_desc;
        else
            v_Sql := v_Sql || ' order by ' || p_campo_value;
        end if;
        --
        open c for v_Sql;
        --
        return c;
        --
    exception
        when others then
            raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.get_cursor - Ocorreu o seguinte erro: ' || sqlerrm || '<BR>' || v_Sql);
            return null;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um cursor com os tipos de tratamentos habilitados para usuario
    -- normal ou adiministrador
    ----------------------------------------------------------------------------
    function get_rs_tipo_tratamento ( p_ind_padrao_tiss  in varchar2 default 'S'
                                    , p_ind_internacao   in varchar2 default null )
    return sys_refcursor
    is
        cur         sys_refcursor;
        cur_sql     varchar2(32000) := '';
    begin
        --
        cur_sql :=  trim (' select cod_tratamento                                                   ')
                ||  trim ('        || ''_'' || ind_tipo                                             ')
                ||  trim ('        || ''_'' || ind_utilizacao                                       ')
                ||  trim ('        || ''_'' || ind_internado cod_tratamento                         ')
                ||  trim ('      , nome_tratamento                                                  ')
                || rtrim (' from   tipo_tratamento tt                                               ')
                || rtrim (' where  not exists (select 1                                             ')
                || rtrim ('                    from   tipo_tratamento tt2                           ')
                || rtrim ('                    where  tt.cod_tratamento = tt2.cod_tratamento_pai    ')
                || rtrim ('                   )                                                     ')
                || rtrim (' and    tt.ind_tipo       != ''ODO''                                     ')
                || rtrim (' and    tt.ind_padrao_tiss = :ind_padrao_tiss                            ')
                || rtrim (' and  (   exists ( select 1                                              ')
                || rtrim ('                   from   atendimento_origem_tratamento aot              ')
                || rtrim ('                   where  aot.cod_tratamento   = tt.cod_tratamento       ')
                || rtrim ('                   and    aot.ind_acao        != ''4''                   ')
                || rtrim ('                   and    aot.cod_origem_aut   = ''9''                   ')
                || rtrim ('                 )                                                       ')
                || rtrim ('       or ( select count (*)                                             ')
                || rtrim ('            from   atendimento_origem_tratamento aot2                    ')
                || rtrim ('            where  aot2.ind_acao       != ''4''                          ')
                || rtrim ('            and    aot2.cod_origem_aut  = ''9'') = 0                     ')
                || rtrim ('          )                                                              ')
                || case when p_ind_internacao = 'S' then
                   rtrim (' and    tt.ind_internado   = ''S''                                       ')
                || rtrim (' and    tt.cod_tratamento != 10                                          ') --Retirar SADT Internado
                   end
                || rtrim ('order by nome_tratamento                                                 ');
        --
        open  cur
        for   cur_sql
        using p_ind_padrao_tiss;
        --
        return cur;
        --
    exception
    when others then
        ts_log_execucao ( 'rbm_rcs_previa_ped_reemb', 9, 'Erro:' || sqlerrm, cur_sql, 'get_rs_tipo_tratamento' );
        --
        raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.get_rs_tipo_tratamento - Ocorreu o seguinte erro: ' || sqlerrm);
        return null;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Pesquisar Local de internação ou local execução para usuários do tipo prestador
    ----------------------------------------------------------------------------
    function get_rs_pesquisa_local_int ( p_xml_filtro  in clob )
    return sys_refcursor
    is
        cur         sys_refcursor;
        cur_sql     varchar2(32000) := '';
    begin
        --
        tab_filtro := ts.top_utl_xml.toCollection(p_xml_filtro);
        --
        if not tab_filtro.exists( 'tipoPesquisa' ) or tab_filtro( 'tipoPesquisa' ).valor(1) is null then tab_filtro( 'tipoPesquisa' ).valor(1) := 'LI'; --Default como Local Internação
        end if;
        --
        cur_sql := trim(' select /*rbm_rcs_previa_ped_reemb.get_rs_pesquisa_local_int*/              ')
                ||rtrim('         ps.cod_prestador                                                  ')
                ||rtrim('       , ps.cod_prestador_ts                                               ')
                ||rtrim('       , ps.nome_prestador                                                 ')
                ||rtrim('       , ep.nom_municipio                                                  ')
                ||rtrim('       , ep.sgl_uf                                                         ')
                ||rtrim('       , ep.cod_municipio                                                  ')
                ||rtrim('       , ep.seq_endereco                                                   ')
                ||rtrim('       , ep.end_prestador                                                  ')
                ||rtrim(' from    prestador_servico          ps                                     ')
                ||rtrim('       , entidade_sistema           es                                     ')
                ||rtrim('       , prestador_operadora        po                                     ')
                ||rtrim('       ,( select endp.cod_prestador_ts                                     ')
                ||rtrim('               , m.sgl_uf                                                  ')
                ||rtrim('               , endp.cod_municipio                                        ')
                ||rtrim('               , m.nom_municipio                                           ')
                ||rtrim('               , endp.seq_endereco                                         ')
                ||rtrim('               , endp.num_cnes                                             ')
                ||rtrim('               , endp.end_prestador                                        ')
                ||rtrim('          from   endereco_prestador endp                                   ')
                ||rtrim('               , prestador_servico  ps                                     ')
                ||rtrim('               , municipio          m                                      ')
                ||rtrim('          where  ps.cod_prestador_ts = endp.cod_prestador_ts (+)           ')
                ||rtrim('          and    endp.cod_municipio  = m.cod_municipio                     ')
                ||rtrim('        )ep                                                                ')
                ||rtrim(' where   ps.cod_prestador_ts     = po.cod_prestador_ts      (+)            ')
                ||rtrim(' and     ps.cod_entidade_ts      = es.cod_entidade_ts       (+)            ')
                ||rtrim(' and     ps.cod_prestador_ts     = ep.cod_prestador_ts      (+)            ')
                ||rtrim(' and     ps.cod_prestador_ts     = ep.cod_prestador_ts      (+)            ')
                ||rtrim(' and     po.ind_situacao         = ''A''                                   ')
                ||rtrim(' and     es.ind_tipo_pessoa      = ''J''                                   ')
                ||rtrim(' and     po.cod_operadora        = :codOperadora                           ')
                ||rtrim(' and     ps.cod_inspetoria_ts    = :codInspetoriaTS                        ')
                || case when tab_filtro( 'tipoPesquisa' ).valor(1) = 'LI' then
                  rtrim(' and   ( select  Decode(Count(*),0,''N'',''S'')                            ')
                ||rtrim('         from    tipo_prestador tp,    prestador_tipo pt                   ')
                ||rtrim('         where   pt.cod_prestador_ts   = ps.cod_prestador_ts               ')
                ||rtrim('         and     tp.cod_tipo_prestador = pt.cod_tipo_prestador             ')
                ||rtrim('         and     pt.cod_operadora      = po.cod_operadora                  ')
                ||rtrim('         and   (    nvl(tp.ind_day_hospital,''N'')    = ''S''              ')
                ||rtrim('                 or nvl(tp.ind_internacao,''N'')      = ''S'' )            ')
                ||rtrim('       ) = ''S''                                                           ')
                   else
                  rtrim(' and   ( select  Decode(Count(*),0,''N'',''S'')                            ')
                ||rtrim('         from    prestador_tipo pt                                         ')
                ||rtrim('         where   pt.cod_prestador_ts   = ps.cod_prestador_ts               ')
                ||rtrim('         and     pt.cod_operadora      = po.cod_operadora                  ')
                ||rtrim('         and     pt.cod_tipo_prestador in (8,9,10)                         ')
                ||rtrim('       ) = ''S''                                                           ')
                   end;
        --
        if tab_filtro.exists( 'nomePrestador' ) and tab_filtro( 'nomePrestador' ).valor(1) is not null then
            cur_sql := cur_sql
                ||rtrim(' and (   upper(ps.nome_prestador)    like upper(:nomePrestador)            ')
                ||rtrim('      OR upper(es.nome_razao_social) like upper(:nomePrestador) )          ');
        else
            cur_sql := cur_sql
                ||rtrim(' and   ''X''                   = :nomePrestador                            ')
                ||rtrim(' and   ''X''                   = :nomePrestador                            ');
        end if;
        --
        if tab_filtro.exists( 'sglUF' ) and tab_filtro( 'sglUF' ).valor(1) is not null then
            cur_sql := cur_sql
                ||rtrim(' and   upper(ep.sgl_uf)        = :sglUF                                    ');
        else
            cur_sql := cur_sql
                ||rtrim(' and   ''X''                   = :sglUF                                    ');
        end if;
        --
        cur_sql := cur_sql
                ||rtrim(' order by ps.nome_prestador                                                ');
        --
        --ts_log_execucao ( 'rbm_rcs_previa_ped_reemb', 9, 'SQL', p_xml_filtro || chr(13) || cur_sql, 'get_dados_prestador' );
        --
        open  cur
        for   cur_sql
        using tab_filtro( 'codOperadora' ).valor(1)
            , tab_filtro( 'codInspetoriaTS' ).valor(1)
            , case when tab_filtro.exists( 'nomePrestador' ) and tab_filtro( 'nomePrestador' ).valor(1) is not null then '%' || tab_filtro( 'nomePrestador' ).valor(1) || '%' else 'X' end
            , case when tab_filtro.exists( 'nomePrestador' ) and tab_filtro( 'nomePrestador' ).valor(1) is not null then '%' || tab_filtro( 'nomePrestador' ).valor(1) || '%' else 'X' end
            , case when tab_filtro.exists( 'sglUF'         ) and tab_filtro( 'sglUF'         ).valor(1) is not null then upper( tab_filtro( 'sglUF'         ).valor(1))       else 'X' end
            ;
        --
        return cur;
        --
    exception
    when others then
        ts_log_execucao ( 'rbm_rcs_previa_ped_reemb', 99, 'Erro não previsto', 'Erro:' || chr(13) || sqlerrm || chr(13) || cur_sql || chr(13) || p_xml_filtro, 'get_rs_pesquisa_local_int' );
        raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.get_rs_pesquisa_local_int - Ocorreu o seguinte erro: ' || sqlerrm);
        return null;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar o cod_ts e nome do num contrato informado
    ----------------------------------------------------------------------------
    procedure get_contrato    ( p_num_contrato      in  varchar2
                              , p_cod_ts_contrato   out varchar2
                              , p_nome_contrato     out varchar2
                              )
    is
    --
    begin

        begin
            select ce.cod_ts_contrato
                 , es.nome_entidade
            into   p_cod_ts_contrato
                 , p_nome_contrato
            from   contrato_empresa ce
                 , entidade_sistema es
            where  ce.cod_titular_contrato  = es.cod_entidade_ts
            and    ce.num_contrato          = p_num_contrato;
        exception
            when no_data_found then
                p_cod_ts_contrato := '';
                p_nome_contrato := '';
        end;
        --
        return;
        --
    exception
        when others then
            raise_application_error( -20001 , 'rbm_rcs_previa_ped_reemb.get_contrato - Ocorreu o seguinte erro: ' || sqlerrm);
    end;
    --
    --
    ----------------------------------------------------------------------------
    --Retornar informações do prestador de serviço
    ----------------------------------------------------------------------------
    procedure get_dados_prestador  ( p_nome_prestador       out varchar2
                                   , p_ind_vinculacao       out varchar2
                                   , p_ind_tipo_pessoa      out varchar2
                                   , p_cod_prestador        in out nocopy varchar2
                                   , p_cod_prestador_ts     in out nocopy pls_integer
                                   )
    is
    --
    --Declarações:
    v_posicao               pls_integer;
    v_parametro             varchar2(4000);
    --
    begin
        --Início
        v_posicao := 0;
        v_parametro := 'p_cod_prestador = ' || p_cod_prestador;
        v_parametro := v_parametro || CHR(13) || 'p_cod_prestador_ts = ' || p_cod_prestador_ts;
        --
        --
        if nvl(p_cod_prestador_ts,0) > 0 then
            --
            begin
                select nome_prestador           , cod_prestador
                     , ind_vinculacao           , ind_tipo_pessoa
                into   p_nome_prestador         , p_cod_prestador
                     , p_ind_vinculacao         , p_ind_tipo_pessoa
                from   prestador_servico
                where  cod_prestador_ts         = p_cod_prestador_ts;
            exception
                when no_data_found then
                    p_nome_prestador    := '';
                    p_cod_prestador     := '';
            end;
            --
        else
            begin
                select nome_prestador           , cod_prestador_ts          , cod_prestador
                     , ind_vinculacao           , ind_tipo_pessoa
                into   p_nome_prestador         , p_cod_prestador_ts        , p_cod_prestador
                     , p_ind_vinculacao         , p_ind_tipo_pessoa
                from   prestador_servico
                where  cod_prestador_editado    = p_cod_prestador;
            exception
                when no_data_found then
                    --
                    -- Se não achar pelo editado (sem o digito), deve procurar pelo cod_prestador (completo)
                    begin
                        select nome_prestador           , cod_prestador_ts
                             , ind_vinculacao           , ind_tipo_pessoa
                        into   p_nome_prestador         , p_cod_prestador_ts
                             , p_ind_vinculacao         , p_ind_tipo_pessoa
                        from   prestador_servico
                        where  cod_prestador            = p_cod_prestador;
                    exception
                        when no_data_found then
                            p_nome_prestador    := '';
                            p_cod_prestador_ts  := '';
                            p_ind_vinculacao    := '';
                            p_ind_tipo_pessoa   := '';
                    end;
            end;
        end if;
        --
        return;
        --
    exception
    when others then
        ts_log_execucao ( 'rbm_rcs_previa_ped_reemb', v_posicao, 'Erro não previsto', 'Erro:' || chr(13) || sqlerrm || chr(13) || 'Parametros:' || chr(13) || v_parametro || chr(13), 'get_dados_prestador' );
    end;
    --
    --
    ----------------------------------------------------------------------------
    --Retornar informações do prestador de serviço (do usuário logado)
    ----------------------------------------------------------------------------
    procedure get_dados_prestador  ( p_nome_prestador          out        varchar2
                                   , p_ind_vinculacao          out        varchar2
                                   , p_ind_tipo_pessoa         out        varchar2
                                   , p_cod_prestador_ts        out        pls_integer
                                   , p_cod_prestador        in out nocopy varchar2
                                   , p_cod_usuario          in            varchar2
                                   )
    is
    --
    --Declarações:
    v_parametro             varchar2(100);
    v_cod_identificacao_ts  usuario.cod_identificacao_ts%type;
    v_cod_tipo_usuario      usuario.cod_tipo_usuario%type;
    --
    begin
        --Início
        v_parametro := 'p_cod_usuario = ' || p_cod_usuario;
        --
        begin
            select cod_identificacao_ts     , cod_tipo_usuario
            into   v_cod_identificacao_ts   , v_cod_tipo_usuario
            from   usuario
            where  cod_usuario              = upper(p_cod_usuario);
        exception
        when no_data_found then return; --Usuário não encontrado
        end;
        --
        if v_cod_tipo_usuario in (1,20) and nvl(v_cod_identificacao_ts,0) = 0 then return;
        end if;
        --
        if v_cod_tipo_usuario = 1 then
            ---------------
            -- CREDENCIADO
            ---------------
            begin
                select nome_prestador           , cod_prestador
                     , ind_vinculacao           , ind_tipo_pessoa
                     , cod_prestador_ts
                into   p_nome_prestador         , p_cod_prestador
                     , p_ind_vinculacao         , p_ind_tipo_pessoa
                     , p_cod_prestador_ts
                from   prestador_servico
                where  cod_prestador_ts         = v_cod_identificacao_ts;
            exception
            when no_data_found then return; --Prestador não encontrado
            end;
            --
        elsif v_cod_tipo_usuario = 20 then
            --
            ------------------
            -- GRUPO PRESTADOR
            ------------------
            begin
                select ps.nome_prestador        , ps.cod_prestador_ts       , cod_prestador
                     , ps.ind_vinculacao        , ps.ind_tipo_pessoa
                into   p_nome_prestador         , p_cod_prestador_ts        , p_cod_prestador
                     , p_ind_vinculacao         , p_ind_tipo_pessoa
                from   prestador_servico        ps
                where  ps.cod_prestador         = p_cod_prestador
                and    exists                   ( select null
                                                  from   prestador_grupo pg
                                                  where  pg.cod_prestador_ts    = ps.cod_prestador_ts
                                                  and    pg.cod_grupo_prestador = v_cod_identificacao_ts
                                                );
                --
            exception
            when no_data_found then
                --
                begin
                    select ps.nome_prestador        , ps.cod_prestador_ts       , ps.cod_prestador
                         , ps.ind_vinculacao        , ps.ind_tipo_pessoa
                    into   p_nome_prestador         , p_cod_prestador_ts        , p_cod_prestador
                         , p_ind_vinculacao         , p_ind_tipo_pessoa
                    from   prestador_servico        ps
                    where  ps.cod_prestador_editado = p_cod_prestador
                    and    exists                   ( select null
                                                      from   prestador_grupo pg
                                                      where  pg.cod_prestador_ts    = ps.cod_prestador_ts
                                                      and    pg.cod_grupo_prestador = v_cod_identificacao_ts
                                                    );
                    --
                exception
                when no_data_found then
                    --
                    null;
                end;
                --
            end;
        else
            ---------------
            -- NORMAL
            ---------------
            begin
                select nome_prestador           , cod_prestador
                     , ind_vinculacao           , ind_tipo_pessoa
                     , cod_prestador_ts
                into   p_nome_prestador         , p_cod_prestador
                     , p_ind_vinculacao         , p_ind_tipo_pessoa
                     , p_cod_prestador_ts
                from   prestador_servico
                where  cod_prestador            = p_cod_prestador;
            exception
            when no_data_found then
                begin
                    select nome_prestador           , cod_prestador
                         , ind_vinculacao           , ind_tipo_pessoa
                         , cod_prestador_ts
                    into   p_nome_prestador         , p_cod_prestador
                         , p_ind_vinculacao         , p_ind_tipo_pessoa
                         , p_cod_prestador_ts
                    from   prestador_servico
                    where  cod_prestador_editado    = p_cod_prestador;
                exception
                when no_data_found then return; --Prestador não encontrado
                end;
            end;
            --
        end if;
        --
        return;
        --
    exception
        when others then
            ts_log_execucao ( 'rbm_rcs_previa_ped_reemb', 99, 'Erro não previsto', 'Erro:' || chr(13) || sqlerrm || chr(13) || 'Parametros:' || chr(13) || v_parametro || chr(13), 'get_dados_prestador' );
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar String com o order by de acordo com os valores informados
    ----------------------------------------------------------------------------
    function get_order_by ( p_ind_ordenacao    in varchar2
                          , p_tipo_ordenacao   in varchar2
                          )
    return varchar
    is
    begin
        --



        return case upper(p_ind_ordenacao)



                    when 'DIAS_LIMITE_TERM_C'       then ' dias_limite_termino '                          || ' ASC '
                    when 'DIAS_LIMITE_TERM_D'       then ' dias_limite_termino '                          || ' DESC '
                    when 'FILIAL_UNIDADE'           then ' nome_sucursal_benef '                          || p_tipo_ordenacao
                    when 'OPERADORA'                then ' nom_operadora_benef '                          || p_tipo_ordenacao
                    when 'IND_PRAZO'                then ' prazo_ordenacao '                              || p_tipo_ordenacao
                    when 'IND_MODALIDADE'           then ' modalidade_ordenacao '                         || p_tipo_ordenacao
                    when 'GRUPO_PRODUTO'            then ' grupo_produto_ordenacao '                      || p_tipo_ordenacao
                    when 'DATA_PGTO'                then ' dt_pgto_ordenacao '                            || p_tipo_ordenacao
                    when 'VALOR_SOLIC'              then ' val_calculado     '                            || p_tipo_ordenacao
                    when 'NOME_ASSOCIADO'           then ' valor_previa_ordenacao '                       || p_tipo_ordenacao
                    when 'NOME_PLANO'               then ' plano_ordenacao '                              || p_tipo_ordenacao
                                                    else ' dias_limite_termino '                          || ' DESC '

               end;
        --
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar String com a clausua IN para os valores passados
    ----------------------------------------------------------------------------
    function get_str_where_in ( p_codigo in varchar2 , p_nome_campo in varchar2)
    return clob
    is
        v_retorno       clob        := '';
        v_qtd           pls_integer := 0;
        --
    begin
        --
        for TC in (select /*+cardinality(x,10)*/
                          x.column_value codigo
                   from   table( SPLIT_VARCHAR2(p_codigo , ',')) x )
        loop
            --
            if v_qtd > 0 then v_retorno := v_retorno || ' union all ';
            end if;
            v_qtd := v_qtd + 1;
            --
            v_retorno := v_retorno || ' select ' || TC.codigo || ' ' || p_nome_campo || ' from dual';
        end loop;
        --
        v_retorno := ' exists ( select null                           ' ||
                     '          from (                                ' ||
                     v_retorno                                          ||
                     '               ) x                              ' ||
                     '          where x.' || p_nome_campo || ' = a.' || p_nome_campo || ' ' ||
                     '        )                                       ';
        --
        return v_retorno;
        --
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar Str do SQL que será montado de acordo com os parametros informados
    ----------------------------------------------------------------------------
    function monta_sql ( p_ind_situacao      in varchar2
                       , p_data_ini          in varchar2
                       , p_data_fim          in varchar2
                       , p_ind_order         in varchar2     default 'S'
                       , p_ind_max_linha     in varchar2     default 'S'    --Indica se deve ser limitado a qtd do parametro AT_QTD_MAX_SITUACAO
                       , p_somar_max_linha   in varchar2     default 'N'    --Indica se deve retornar o MAX + 1
                       )
    return varchar2
    is
        --
        v_qtd_max               pls_integer       := 0;
        str_Sql                 varchar2(32000)   := '';
        str_Sql_assoc           varchar2(500)     := '';
        str_Sql_assoc_destino   varchar2(32000)   := '';
        ind_ordem_vip           varchar2(1)       := 'N';
        --
        v_tipo_order_by         controle_sistema.val_parametro%type;
        v_ind_paciente_cronico  controle_sistema.val_parametro%type;
        --
        v_cod_tipo_usuario      usuario.cod_tipo_usuario%type := 0;
        v_cod_identificacao_ts  usuario.cod_identificacao_ts%type;
        --
    begin
        --
        get_controle_sistema ( p_val_parametro => v_tipo_order_by        , p_cod_parametro => 'AT_ORDEM_SITUACAO'   , p_val_default   => '0' );
        get_controle_sistema ( p_val_parametro => v_ind_paciente_cronico , p_cod_parametro => 'TS_PACIENTE_CRONICO' , p_val_default   => 'N' );
        --
        if tab_filtro( 'COD_TIPO_USUARIO_LOGADO' ).valor(1) is not null then
            v_cod_tipo_usuario := tab_filtro( 'COD_TIPO_USUARIO_LOGADO' ).valor(1);
            --
            if v_cod_tipo_usuario in (1,20) and tab_filtro( 'COD_IDENTIFICACAO_TS' ).valor(1) is not null then
                v_cod_identificacao_ts := tab_filtro( 'COD_IDENTIFICACAO_TS' ).valor(1);
            end if;
        end if;
        --
        v_tipo_order_by := case when v_tipo_order_by = '0' then 'ASC' else 'DESC' end;
        --
        --
        if    tab_filtro( 'IND_ORDENACAO_1' ).valor(1) = 'VIP'
           or tab_filtro( 'IND_ORDENACAO_2' ).valor(1) = 'VIP'
           or tab_filtro( 'IND_ORDENACAO_3' ).valor(1) = 'VIP'
           or tab_filtro( 'IND_ORDENACAO_4' ).valor(1) = 'VIP'
           or tab_filtro( 'IND_ORDENACAO_5' ).valor(1) = 'VIP' then
            --
            ind_ordem_vip := 'S';
            --
        end if;
        --
        str_Sql := str_Sql || 'select /*rbm_rcs_previa_ped_reemb.monta_sql*/ xxx.* from ( select ';
        --
        if tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'S' then
            str_Sql := str_Sql ||' count(*) QTD';
        else
            str_Sql := str_Sql
                    ||' '||trim( '   /*USE_HASH(a tt ps ps_local a_sit u_inc u_ana o_b s_b i_b s_p i_p)*/ count(*) over() QTD                                                                                  ' )
                    ||' '||trim( ' , s_p.cod_sucursal    cod_sucursal_prestador    , s_p.nome_sucursal   nome_sucursal_prestador          ' )
                    ||' '||trim( ' , i_p.cod_inspetoria  cod_inspetoria_prestador  , i_p.nome_inspetoria nome_inspetoria_prestador        ' )
                    ||' '||trim( ' , s_b.cod_sucursal    cod_sucursal_benef        , s_b.nome_sucursal   nome_sucursal_benef              ' )
                    ||' '||trim( ' , i_b.cod_inspetoria  cod_inspetoria_benef      , i_b.nome_inspetoria nome_inspetoria_benef            ' )
                    ||' '||trim( ' , o_b.cod_operadora   cod_operadora_benef       , o_b.nom_operadora   nom_operadora_benef              ' )
                    ||' '||trim( ' , a.num_pedido                                  , a.cod_situacao                                       ' )
                    ||' '||trim( ' , a_sit.nom_situacao                            , a.cod_cid_principal                                  ' )
                    ||' '||trim( ' , a.ind_carater                                 , a.cod_origem_aut                                     ' )
                    ||' '||trim( ' , a.cod_usuario_analise                         , u_ana.nom_usuario nome_usuario_analise               ' )
                    ||' '||trim( ' , a.cod_tratamento                              , tt.ind_internado                                     ' )
                    ||' '||trim( ' , tt.ind_tipo                                   , tt.nome_tratamento                                   ' )
                    ||' '||trim( ' , a.cod_ts                                      , a.num_associado                                      ' )
                    ||' '||trim( ' , a.nome_associado                              , a.cod_prestador_exec                                 ' )
                    ||' '||trim( ' , a_sit.ind_operadora_cancela                   , a_sit.ind_operadora_altera                           ' )
                    ||' '||trim( ' , a_sit.ind_operadora_recurso                   , a_sit.ind_outros_cancela                             ' )
                    ||' '||trim( ' , a_sit.ind_outros_altera                       , a_sit.ind_outros_recurso                             ' )
                    ||' '||trim( ' , a_sit.ind_revalidacao                         , a_sit.ind_pendente                                   ' )
                    ||' '||trim( ' , a.cod_usuario_inclusao                        , u_inc.nom_usuario nome_usuario_inclusao              ' )
                    ||' '||trim( ' , a.ind_resp_custo                              , a_sit.nom_situacao_externo                           ' )
                    ||' '||trim( ' , a.ind_tipo_opme                                                                                      ' )
                    ||' '||trim( ' , ps_local.cod_prestador cod_local_internacao   ,ps_local.nome_prestador nome_local_internacao         ' )
                    ||' '||trim( ' , nvl(ps.cod_prestador_editado,ps.cod_prestador) cod_prestador                                         ' )
                    ||' '||trim( ' , ps.nome_prestador                             , a.num_transacao_origem                               ' )
                    ||' '||trim( ' , to_char(sysdate,''dd/mm/yyyy'')               data_atual                                             ' )
                    ||' '||trim( ' , to_char(a.data_solicitacao,''dd/mm/yyyy'')    data_solicitacao                                       ' )
                    ||' '||trim( ' , to_char(a.data_validade,''dd/mm/yyyy'')       data_validade                                          ' )
                    ||' '||trim( ' , to_char(a.data_situacao,''dd/mm/yyyy'')       data_situacao                                          ' )
                    ||' '||trim( ' , to_char(a.data_internacao,''dd/mm/yyyy'')     data_internacao                                        ' )
                    ||' '||trim( ' , to_char(a.data_provavel_internacao,''dd/mm/yyyy'')    data_provavel_internacao                       ' )
                    ||' '||trim( ' , to_char(a.dt_inicio_analise,''dd/mm/yyyy hh24:mi'')   dt_inicio_analise                              ' )
                    ||' '||trim( ' , a.data_autorizacao         data_autorizacao_ordenacao                                                ' )
                    ||' '||trim( ' , a.data_solicitacao         data_solicitacao_ordenacao                                                ' )
                    ||' '||trim( ' , a.data_validade            data_validade_ordenacao                                                   ' )
                    ||' '||trim( ' , a.data_situacao            data_situacao_ordenacao                                                   ' )
                    ||' '||trim( ' , a.data_internacao          data_internacao_ordenacao                                                 ' )
                    ||' '||trim( ' , a.data_provavel_internacao data_provavel_internacao_ord                                              ' )
                    ||' '||trim( ' , a.dt_inicio_analise        dt_inicio_analise_ordenacao                                               ' )
                    ;
            --
            if  v_ind_paciente_cronico = 'S' then
                str_Sql := str_Sql
                        ||' '||trim( ' , gpc.cod_grupo_paciente_cronico                                                                ' )
                        ||' '||trim( ' , gpc.ender_icon_grpo_pac_cronico                                                               ' )
                        ||' '||trim( ' , gpc.nome_grupo_paciente_cronico                                                               ' ) ;
            end if;
            --
            --Se alguma ordenação é VIP, será preciso incluir a situação especial do assoc.
            if  ind_ordem_vip = 'S' then
                --
                str_Sql := str_Sql
                        ||' '||trim( ' , ass.cod_situacao_esp                                                                          ' )
                        ||' '||trim( ' , uae.nm_compl_benef nome_associado_eventual                                                    ' )
                        ||' '||trim( ' , uae.cod_sit_esp                                                                               ' ) ;
                --
            end if;
            --
            if  ind_ordem_vip = 'S' or v_ind_paciente_cronico = 'S' then
                --
                str_Sql := str_Sql
                        ||' '||trim( ' , ass.num_associado  num_associado_ass                                                          ' )
                        ||' '||trim( ' , ass.nome_associado nome_associado_ass                                                         ' ) ;
            end if;
            --
            --Colocar ordenação de LIMINAR
            --
            str_Sql := str_Sql || ' , (case when ind_resp_custo=''L'' then 0 else 1 end) ordem_custo';
            --
        end if;
        --
        str_Sql := str_Sql
                ||' '||trim( '  from   tipo_tratamento              tt                                                                 ' )
                ||' '||trim( '       , prestador_servico            ps                                                                 ' )
                ||' '||trim( '       , prestador_servico            ps_local                                                           ' )
                ||' '||trim( '       , autorizacao_situacao         a_sit                                                              ' )
                ||' '||trim( '       , usuario                      u_inc                                                              ' )
                ||' '||trim( '       , usuario                      u_ana                                                              ' )
                ||' '||trim( '       , operadora                    o_b                                                                ' )
                ||' '||trim( '       , sucursal                     s_b                                                                ' )
                ||' '||trim( '       , inspetoria                   i_b                                                                ' )
                ||' '||trim( '       , sucursal                     s_p                                                                ' )
                ||' '||trim( '       , inspetoria                   i_p                                                                ' );
        --
        --Se alguma ordenação é VIP, será preciso incluir a situação especial do assoc.
        --Senão se paciente cronico informado, incluir associado
        --
        if ind_ordem_vip = 'S' then
            --
            str_Sql := str_Sql
                    ||' '||trim( '  , associado                     ass                                                                ' )
                    ||' '||trim( '  , un_associado_eventual         uae                                                                ' );
            --
            if  v_ind_paciente_cronico = 'S' then
                --
                str_Sql := str_Sql || '  , grupo_paciente_cronico   gpc ';
                --
            end if;
        elsif v_ind_paciente_cronico = 'S' then
            --
            str_Sql := str_Sql
                    ||' '||trim( '  , associado                    ass                                                                           ' )
                    ||' '||trim( '  , grupo_paciente_cronico       gpc                                                                           ' ) ;
            --
        end if;
        --
        str_Sql := str_Sql  || ' ,( select a.* from autorizacao a        ' ;
        --
        --------------------
        --Criterio Especial
        --------------------
        if nvl(tab_filtro( 'IND_LIBERACAO' ).valor(1),'X') = 'S' then
            ---------------------------------------------------
            -- Apenas os que necessitam liberação do supervisor
            ---------------------------------------------------
            --
            str_Sql := str_Sql
                    ||' '||trim( ' , ( select distinct am.num_pedido                                                                   ' )
                    ||' '||trim( '    from   autorizacao_msg am                                                                        ' )
                    ||' '||trim( '         , motivo_glosa mg                                                                           ' )
                    ||' '||trim( '    where  am.cod_motivo_glosa      = mg.cod_motivo_glosa                                            ' )
                    ||' '||trim( '    and    mg.ind_liberacao         = ''2''                                                          ' )
                    ||' '||trim( '    and    am.ind_analise           = ''N''                                                          ' )
                    ||' '||trim( '  ) al                                                                                               ' )
                    ||' '||trim( ' where a.num_pedido = al.num_pedido                                                                  ' ) ;
            --
        elsif nvl(tab_filtro( 'IND_LIBERACAO' ).valor(1),'X') = 'P' then
            ---------------------------------------------------
            -- Análise Especial -> Apenas dos quais participo
            ---------------------------------------------------
            --
            str_Sql := str_Sql
                    ||' '||trim( ' , ( select distinct al.num_pedido                                                                    ' )
                    ||' '||trim( '    from   usuario_analise               ua                                                          ' )
                    ||' '||trim( '          , autorizacao_liberacao        al                                                          ' )
                    ||' '||trim( '    where  al.ind_situacao              = 1                                                          ' )
                    ||' '||trim( '    and    upper(ua.cod_usuario)        = :cod_usuario                                               ' )
                    ||' '||trim( '    and    ua.cod_grupo_encaminhamento  = al.cod_grupo_encaminhamento                                ' )
                    ||' '||trim( '  ) al                                                                                               ' )
                    ||' '||trim( ' where a.num_pedido = al.num_pedido                                                                  ' ) ;
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_usuario' , p_valor_parametro => tab_filtro( 'COD_USUARIO_LOGADO' ).valor(1) );
            --
        elsif nvl(tab_filtro( 'IND_LIBERACAO' ).valor(1),'X') = 'E' then
            ---------------------------------------------------
            -- Análise Especial -> Específico do grupo
            ---------------------------------------------------
            --
            str_Sql := str_Sql
                    ||' '||trim( ' , ( select distinct al.num_pedido                                                                   ' )
                    ||' '||trim( '    from   autorizacao_liberacao          al                                                         ' )
                    ||' '||trim( '    where  al.cod_grupo_encaminhamento  = :cod_grupo_encaminhamento                                  ' )
                    ||' '||trim( '    and    al.ind_situacao              = 1                                                          ' )
                    ||' '||trim( '  ) al                                                                                               ' )
                    ||' '||trim( ' where a.num_pedido = al.num_pedido                                                                  ' ) ;
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_grupo_encaminhamento' , p_valor_parametro => tab_filtro( 'COD_GRUPO_ENCAMINHAMENTO' ).valor(1) );
            --
        else
            str_Sql := str_Sql || ' where 1 = 1 ';
        end if;
        --
        if nvl(tab_filtro( 'IND_LIBERACAO' ).valor(1),'X') = 'T' then
            ---------------------------------------------------
            -- Análise Especial -> Todos
            ---------------------------------------------------
            --
            str_Sql := str_Sql
                    ||' '||trim( ' and exists (                                                                                        ' )
                    ||' '||trim( '             select null                                                                             ' )
                    ||' '||trim( '             from   autorizacao_liberacao    al                                                      ' )
                    ||' '||trim( '             where  al.num_pedido            = a.num_pedido                                          ' )
                    ||' '||trim( '            )                                                                                        ' ) ;
            --
        elsif nvl(tab_filtro( 'IND_LIBERACAO' ).valor(1),'X') = 'A' then
            ---------------------------------------------------
            -- Análise Especial -> Pendências Analisadas
            ---------------------------------------------------
            --
            str_Sql := str_Sql
                    ||' '||trim( ' and exists (                                                                                        ' )
                    ||' '||trim( '             select null                                                                             ' )
                    ||' '||trim( '             from   autorizacao_liberacao        al                                                  ' )
                    ||' '||trim( '             where  al.num_pedido                = a.num_pedido                                      ' )
                    ||' '||trim( '             and    al.ind_situacao              = 2                                                 ' ) ;
            --
        end if;
        --
        if  tab_filtro( 'NUM_AUTORIZACAO' ).valor(1) is not null then
            --
            str_Sql := str_Sql
                    || ' ' || trim( ' and exists( select  null                                                                         ' )
                    || ' ' || trim( '             from    autorizacao_item                                                             ' )
                    || ' ' || trim( '             where   num_pedido              = a.num_pedido                                       ' )
                    || ' ' || trim( '             and     nvl(ind_situacao,''A'') in (''I'',''A'')                                     ' )
                    || ' ' || trim( '             and     num_autorizacao         = :num_autorizacao                                   ' )
                    || ' ' || trim( '           )                                                                                      ' )  ;
            --
            AdicionarParametroSQL ( p_nome_parametro => 'num_autorizacao' , p_valor_parametro => tab_filtro( 'NUM_AUTORIZACAO' ).valor(1) );
            --
        end if;
        --
        if instr(p_ind_situacao,',') > 0 then
            --
            str_Sql := str_Sql || ' and   a.cod_situacao in ( select /*+cardinality(x 1)*/ to_number(column_value) from table( top_utl_padrao.split(:cod_situacao,'','')) x ) '; --Este não funcionou no XML
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_situacao' , p_valor_parametro => nvl(p_ind_situacao,'6')  );
            --
            -- str_Sql := str_Sql || ' where ' || get_str_where_in(p_ind_situacao, 'cod_situacao');
            --
        else
            str_Sql := str_Sql || ' and    a.cod_situacao = :cod_situacao ';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_situacao' , p_valor_parametro => nvl(p_ind_situacao,'6') , p_tipo_parametro => 'N' );
            --
        end if;
        --
        if v_cod_tipo_usuario != 1 then
            --
            -- FILIAL
            --
            if  nvl(tab_filtro( 'IND_ABRANGENCIA' ).valor(1),'N') != 'N' and tab_filtro( 'COD_INSPETORIA_TS' ).valor(1) is not null then
                --
                if  tab_filtro( 'IND_ORIGEM' ).valor(1) = 'B' then
                    --
                    str_Sql := str_Sql || ' and a.cod_inspetoria_ts_exec in ( select /*+cardinality(x 1)*/ to_number(column_value) from table( top_utl_padrao.split(:cod_inspetoria_ts_exec,'','')) x ) ';
                    --
                    AdicionarParametroSQL ( p_nome_parametro  => 'cod_inspetoria_ts_exec' , p_valor_parametro => nvl(tab_filtro( 'COD_INSPETORIA_TS' ).valor(1), 0) , p_tipo_parametro => 'C');
                else
                    str_Sql := str_Sql || ' and a.cod_inspetoria_ts_ass  in ( select /*+cardinality(x 1)*/ to_number(column_value) from table( top_utl_padrao.split(:cod_inspetoria_ts_ass ,'','')) x ) ';
                    --
                    AdicionarParametroSQL ( p_nome_parametro  => 'cod_inspetoria_ts_ass'  , p_valor_parametro => nvl(tab_filtro( 'COD_INSPETORIA_TS' ).valor(1), 0) , p_tipo_parametro => 'C');
                end if;
            else
                if  tab_filtro( 'IND_ORIGEM' ).valor(1) = 'B' then
                    --
                    str_Sql := str_Sql || ' and a.cod_inspetoria_ts_exec in ( select /*+cardinality(x 1)*/ to_number(column_value) from table( top_utl_padrao.split(:cod_inspetoria_ts_exec,'','')) x ) ';
                    --
                    AdicionarParametroSQL ( p_nome_parametro  => 'cod_inspetoria_ts_exec' , p_valor_parametro => aut_rcs_pedido_autorizacao .get_in_unidade_usuario  (tab_filtro('COD_USUARIO_LOGADO').valor(1)) , p_tipo_parametro => 'C');
                else
                    str_Sql := str_Sql || ' and a.cod_inspetoria_ts_ass  in ( select /*+cardinality(x 1)*/ to_number(column_value) from table( top_utl_padrao.split(:cod_inspetoria_ts_ass,'','')) x ) ';
                    --
                    AdicionarParametroSQL ( p_nome_parametro  => 'cod_inspetoria_ts_ass'  , p_valor_parametro => aut_rcs_pedido_autorizacao .get_in_unidade_usuario  (tab_filtro('COD_USUARIO_LOGADO').valor(1)) , p_tipo_parametro => 'C');
                end if;
            end if;
            --
            str_Sql := str_Sql || ' and a.cod_operadora  in ( select /*+cardinality(x 1)*/ column_value from table( top_utl_padrao.split(:cod_operadora,'','')) x ) ';
            --
            if  nvl(tab_filtro( 'COD_OPERADORA' ).valor(1),'X') <> 'X' then
                --
                AdicionarParametroSQL ( p_nome_parametro  => 'cod_operadora'  , p_valor_parametro => nvl(tab_filtro( 'COD_OPERADORA' ).valor(1), '0') , p_tipo_parametro => 'C');
            else
                AdicionarParametroSQL ( p_nome_parametro  => 'cod_operadora'  , p_valor_parametro => aut_rcs_pedido_autorizacao.get_in_operadora_usuario(tab_filtro('COD_USUARIO_LOGADO').valor(1)) , p_tipo_parametro => 'C');
            end if;
        end if;
        --
        if  isDate(p_data_ini) and isDate(p_data_fim) then
            str_Sql := str_Sql || ' and trunc(a.data_solicitacao) between :data_ini and :data_fim';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_ini' , p_valor_parametro => p_data_ini , p_tipo_parametro => 'D');
            AdicionarParametroSQL ( p_nome_parametro  => 'data_fim' , p_valor_parametro => p_data_fim , p_tipo_parametro => 'D');
            --
        elsif  isDate(p_data_ini) then
            str_Sql := str_Sql || ' and trunc(a.data_solicitacao) >= :data_ini';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_ini' , p_valor_parametro => p_data_ini , p_tipo_parametro => 'D');
            --
        elsif  isDate(p_data_fim) then
            str_Sql := str_Sql || ' and trunc(a.data_solicitacao) <= :data_fim';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_fim' , p_valor_parametro => p_data_fim , p_tipo_parametro => 'D');
            --
        end if;
        --
        if  isDate(tab_filtro( 'DT_INI_PREVISAO' ).valor(1)) and isDate(tab_filtro( 'DT_FIM_PREVISAO' ).valor(1)) then
            str_Sql := str_Sql || ' and trunc(a.data_provavel_internacao) between :data_ini_previsao and :data_fim_previsao';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_ini_previsao' , p_valor_parametro => tab_filtro( 'DT_INI_PREVISAO' ).valor(1) , p_tipo_parametro => 'D');
            AdicionarParametroSQL ( p_nome_parametro  => 'data_fim_previsao' , p_valor_parametro => tab_filtro( 'DT_FIM_PREVISAO' ).valor(1) , p_tipo_parametro => 'D');
            --
        elsif  isDate(tab_filtro( 'DT_INI_PREVISAO' ).valor(1)) then
            str_Sql := str_Sql || ' and trunc(a.data_provavel_internacao) >= :data_ini_previsao';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_ini_previsao' , p_valor_parametro => tab_filtro( 'DT_INI_PREVISAO' ).valor(1) , p_tipo_parametro => 'D');
            --
        elsif  isDate(tab_filtro( 'DT_FIM_PREVISAO' ).valor(1)) then
            str_Sql := str_Sql || ' and trunc(a.data_provavel_internacao) <= :data_fim_previsao';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_fim_previsao' , p_valor_parametro => tab_filtro( 'DT_FIM_PREVISAO' ).valor(1) , p_tipo_parametro => 'D');
            --
        end if;
        --
        if  tab_filtro( 'COD_USUARIO_ANALISE' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.cod_usuario_analise = :cod_usuario_analise';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_usuario_analise' , p_valor_parametro => tab_filtro( 'COD_USUARIO_ANALISE' ).valor(1) );
            --
        end if;
        --
        if  tab_filtro( 'COD_TRATAMENTO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.cod_tratamento = :cod_tratamento';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'cod_tratamento'
                                  , p_valor_parametro => tab_filtro( 'COD_TRATAMENTO' ).valor(1)
                                  , p_tipo_parametro  => 'N'
                                  ) ;
            --
        end if;
        --
        if  tab_filtro( 'NUM_AUTORIZACAO_OPERADORA' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.num_autorizacao_operadora = :num_autorizacao_operadora';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'num_autorizacao_operadora' , p_valor_parametro => tab_filtro( 'NUM_AUTORIZACAO_OPERADORA' ).valor(1) );
            --
        end if;
        --
        if  nvl(tab_filtro( 'IND_URGENCIA' ).valor(1),'N') = 'S' then
            str_Sql := str_Sql || ' and nvl(a.ind_carater,''E'') = ''U''';
        end if;
        --
        if  tab_filtro( 'COD_LOCAL_INTERNACAO' ).valor(1) is not null then
            --
            str_Sql := str_Sql || ' and a.cod_local_internacao = :cod_local_internacao';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_local_internacao' , p_valor_parametro => tab_filtro( 'COD_LOCAL_INTERNACAO' ).valor(1)  , p_tipo_parametro => 'N' );
            --
        end if;
        --
        if  nvl(tab_filtro( 'IND_NAO_REALIZACAO' ).valor(1),'N') = 'S' then
            str_Sql := str_Sql || ' and nvl(a.ind_realizacao,''N'') = ''N''';
        end if;
        --
        if  tab_filtro( 'COD_USUARIO_INCLUSAO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.cod_usuario_inclusao = :cod_usuario_inclusao';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_usuario_inclusao' , p_valor_parametro => tab_filtro( 'COD_USUARIO_INCLUSAO' ).valor(1) );
            --
        end if;
        --
        if  tab_filtro( 'IND_RESP_CUSTO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.ind_resp_custo = :ind_resp_custo';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'ind_resp_custo' , p_valor_parametro => tab_filtro( 'IND_RESP_CUSTO' ).valor(1) );
            --
        end if;
        --
        if  tab_filtro( 'IND_TIPO_OPME' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.ind_tipo_opme = :ind_tipo_opme';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'ind_tipo_opme' , p_valor_parametro => tab_filtro( 'IND_TIPO_OPME' ).valor(1) );
            --
        end if;
        --
        if  tab_filtro( 'IND_TIPO_REDE' ).valor(1) is not null and tab_filtro( 'IND_TIPO_REDE' ).valor(1) = 'C' then
               str_Sql := str_Sql || ' and a.cod_origem_aut  <> 6';
        elsif tab_filtro( 'IND_TIPO_REDE' ).valor(1) is not null and tab_filtro( 'IND_TIPO_REDE' ).valor(1) = 'P' then
               str_Sql := str_Sql || ' and a.cod_origem_aut  = 6';
        end if;
        --
        if  tab_filtro( 'NUM_CONTRATO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.num_contrato = :num_contrato';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'num_contrato' , p_valor_parametro => tab_filtro( 'NUM_CONTRATO' ).valor(1) );
            --
        end if;
        --
        if  tab_filtro( 'COD_ORIGEM_AUT' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.cod_origem_aut = :cod_origem_aut';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_origem_aut' , p_valor_parametro => lpad(tab_filtro( 'COD_ORIGEM_AUT' ).valor(1),17,'0')  , p_tipo_parametro => 'N'  );
            --
        end if;
        --
        if nvl(tab_filtro( 'NUM_ASSOCIADO' ).valor(1),'X') <> 'X' and nvl(tab_filtro( 'COD_TS' ).valor(1),0) <> 0 then
            --
            -- Quando ambos são informados, realziar um union por cada um
            --
            str_Sql_assoc := ' and a.num_associado = :num_associado';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'num_associado' , p_valor_parametro => tab_filtro( 'NUM_ASSOCIADO' ).valor(1) );
            --
            str_Sql := str_Sql || str_Sql_assoc || ' union ' || str_Sql;
            --
            str_Sql_assoc := ' and a.cod_ts = :cod_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_ts' , p_valor_parametro => tab_filtro( 'COD_TS' ).valor(1)  , p_tipo_parametro => 'N');
            --
            str_Sql := str_Sql || str_Sql_assoc;
            --
        elsif nvl(tab_filtro( 'NUM_ASSOCIADO' ).valor(1),'X') <> 'X' then
            str_Sql := str_Sql || ' and a.num_associado = :num_associado';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'num_associado' , p_valor_parametro => tab_filtro( 'NUM_ASSOCIADO' ).valor(1) );
            --
        elsif nvl(tab_filtro( 'COD_TS' ).valor(1),0) <> 0 then
            str_Sql := str_Sql || ' and a.cod_ts     = :cod_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_ts' , p_valor_parametro => nvl(tab_filtro( 'COD_TS' ).valor(1),0) , p_tipo_parametro => 'N' );
            --
        end if;
        --
        str_Sql := str_Sql || str_Sql_assoc_destino;
        --
        if  tab_filtro( 'COD_PRESTADOR_TS' ).valor(1) is not null then
            --
            str_Sql := str_Sql || ' and a.cod_prestador_exec = :cod_prestador_exec';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_prestador_exec' , p_valor_parametro => tab_filtro( 'COD_PRESTADOR_TS' ).valor(1)  , p_tipo_parametro => 'N'  );
            --
        end if;
        --
        str_Sql := str_Sql  || '     ) a ';
        --
        -- Operadora
        --
        str_Sql := str_Sql
                || ' where  a.cod_operadora          = o_b.cod_operadora(+) '
                || ' and    a.cod_inspetoria_ts_ass  = i_b.cod_inspetoria_ts(+) '
                || ' and    i_b.cod_sucursal         = s_b.cod_sucursal(+) '
                || ' and    a.cod_inspetoria_ts_exec = i_p.cod_inspetoria_ts(+) '
                || ' and    i_p.cod_sucursal         = s_p.cod_sucursal(+) '
                || ' and    a.cod_tratamento         = tt.cod_tratamento(+)'
                || ' and    a.cod_situacao           = a_sit.cod_situacao(+)'
                || ' and    a.cod_prestador_exec     = ps.cod_prestador_ts(+)'
                || ' and    a.cod_local_internacao   = ps_local.cod_prestador_ts(+)'
                || ' and    a.cod_usuario_inclusao   = u_inc.cod_usuario(+)'
                || ' and    a.cod_usuario_analise    = u_ana.cod_usuario(+)'
                ;
        --
        if ind_ordem_vip = 'S' then
            --
            str_Sql := str_Sql
                    || ' and a.cod_ts        = ass.cod_ts(+)'
                    || ' and a.num_associado = uae.num_associado(+)'
                    ;
            --
        elsif v_ind_paciente_cronico = 'S' then
            --
            str_Sql := str_Sql || ' and a.cod_ts        = ass.cod_ts(+)';
            --
        end if;
        --
        if  v_ind_paciente_cronico = 'S' then
            str_Sql := str_Sql || ' and ass.cod_grupo_pac_cronico = gpc.cod_grupo_paciente_cronico(+)';
            --
            if  tab_filtro( 'COD_GRUPO_PACIENTE_CRONICO' ).valor(1) is not null then
                str_Sql := str_Sql || ' and ass.cod_grupo_pac_cronico = :cod_grupo_pac_cronico';
                --
                AdicionarParametroSQL ( p_nome_parametro => 'cod_grupo_pac_cronico' , p_valor_parametro => tab_filtro( 'COD_GRUPO_PACIENTE_CRONICO' ).valor(1) );
                --
            end if;
            --
        end if;
        --
        if  v_cod_tipo_usuario = 20 then -- Grupo Prestador
            --
            str_Sql := str_Sql
            || ' ' || trim( ' and exists ( select null                                                                                                         ' )
            || ' ' || trim( '              from   prestador_grupo pg                                                                                           ' )
            || ' ' || trim( '              where  pg.cod_grupo_prestador  = :cod_grupo_prestador                                                               ' )
            || ' ' || trim( '              and    pg.cod_prestador_ts     = ps.cod_prestador_ts )                                                              ' ) ;
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_grupo_prestador' , p_valor_parametro => v_cod_identificacao_ts  , p_tipo_parametro => 'N'  );
            --
        end if;
        --
        if p_ind_order = 'S' and tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then
            --
            str_Sql := str_Sql || ' order by ordem_custo'; --Sempre vir com LIMINAR na início
            --
            -- Montar Order by de acordo com os parametros informados
            --
            if  tab_filtro( 'IND_ORDENACAO_1' ).valor(1) is null then
                --
                str_Sql := str_Sql || ',' || get_order_by ( p_ind_ordenacao  => '' , p_tipo_ordenacao => v_tipo_order_by );
                --
            else
                --
                str_Sql := str_Sql || ',' || get_order_by ( p_ind_ordenacao  => tab_filtro( 'IND_ORDENACAO_1' ).valor(1) , p_tipo_ordenacao => v_tipo_order_by );
                --
                if  tab_filtro( 'IND_ORDENACAO_2' ).valor(1) is not null and tab_filtro( 'IND_ORDENACAO_2' ).valor(1) is not null then
                    str_Sql := str_Sql || ',' || get_order_by ( p_ind_ordenacao  => tab_filtro( 'IND_ORDENACAO_2' ).valor(1) , p_tipo_ordenacao => v_tipo_order_by );
                end if;
                --
                if  tab_filtro( 'IND_ORDENACAO_3' ).valor(1) is not null and tab_filtro( 'IND_ORDENACAO_3' ).valor(1) is not null then
                    str_Sql := str_Sql || ',' || get_order_by ( p_ind_ordenacao  => tab_filtro( 'IND_ORDENACAO_3' ).valor(1) , p_tipo_ordenacao => v_tipo_order_by );
                end if;
                --
                if  tab_filtro( 'IND_ORDENACAO_4' ).valor(1) is not null and tab_filtro( 'IND_ORDENACAO_4' ).valor(1) is not null then
                    str_Sql := str_Sql || ',' || get_order_by ( p_ind_ordenacao  => tab_filtro( 'IND_ORDENACAO_4' ).valor(1) , p_tipo_ordenacao => v_tipo_order_by );
                end if;
                --
                if  tab_filtro( 'IND_ORDENACAO_5' ).valor(1) is not null and tab_filtro( 'IND_ORDENACAO_5' ).valor(1) is not null  then
                    str_Sql := str_Sql || ',' || get_order_by ( p_ind_ordenacao  => tab_filtro( 'IND_ORDENACAO_5' ).valor(1) , p_tipo_ordenacao => v_tipo_order_by );
                end if;
                --
            end if;
            --
        end if;
        --
        str_Sql := str_Sql || ' ) xxx ' ;
        --
        if  p_ind_max_linha = 'S' then
            get_controle_sistema ( p_val_parametro => v_qtd_max
                                 , p_cod_parametro => 'AT_QTD_MAX_SITUACAO'
                                 , p_val_default   => '100'
                                 );
            --
            if p_somar_max_linha = 'S' then v_qtd_max := v_qtd_max + 1;
            end if;
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'qtd_max' , p_valor_parametro => v_qtd_max  , p_tipo_parametro => 'N'  );
            --
            str_Sql := str_Sql || ' where rownum <= :qtd_max ';
            --
        end if;
        --
        return str_Sql;
        --
    exception
    when others then
          --
          ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                          , 9
                          , 'Erro não previsto'
                          , 'Erro:' || chr(13) || ts.ts_util.msgerro
                                    || chr(13) || 'SQL:' || str_Sql
                          , 'monta_sql'
                          );
          return '';
    end;
    --
    ----------------------------------------------------------------------------
    -- Retornar XML com total por tratamento ou geral para os parametros
    ----------------------------------------------------------------------------
    procedure get_xml_qtd_total  ( p_xml_retorno      out clob
                                 , p_cod_retorno      out number
                                 , p_msg_retorno      out varchar2
                                 , p_xml_parametro    in  clob )
    is
        str_Sql                 Varchar2(32000) := '';
        str_Sql_assoc           varchar2(500);
        str_Xml                 clob;
    begin
        --Passar o XML informado para uma coleção
        tab_filtro := ts.top_utl_xml.toCollection(p_xml_parametro);
        --
        if tab_filtro( 'TIPO' ).valor(1) = 'TRATAMENTO' then
            str_Sql := str_Sql || ' select distinct tt.nome_tratamento';
            str_Sql := str_Sql || '      , sum(nvl(ai.qtd_liberada,0)) ';
            str_Sql := str_Sql || '             over (partition by tt.nome_tratamento) total';
        else
            str_Sql := str_Sql || ' select sum(nvl(ai.qtd_liberada,0)) total';
        end if;
        --
        str_Sql := str_Sql || ' from   ts.autorizacao               a';
        str_Sql := str_Sql || ' join   ts.autorizacao_item          ai  using (num_pedido)';
        --
        if tab_filtro( 'TIPO' ).valor(1) = 'TRATAMENTO' then
            str_Sql := str_Sql || ' join   ts.tipo_tratamento       tt  using (cod_tratamento)';
        end if;
        --
        str_Sql := str_Sql || ' where  a.cod_situacao               = 1';
        str_Sql := str_Sql || ' and    nvl(ai.ind_situacao,''A'')   in (''A'',''I'')';
        --
        str_Sql := str_Sql || ' and    a.data_solicitacao           between :data_ini and :data_fim';
        --
        AdicionarParametroSQL ( p_nome_parametro      => 'data_ini'

                              , p_valor_parametro     => tab_filtro( 'DATA_INI' ).valor(1)
                              , p_tipo_parametro      => 'D'
                              );
        --
        AdicionarParametroSQL ( p_nome_parametro      => 'data_fim'
                              , p_valor_parametro     => tab_filtro( 'DATA_FIM' ).valor(1)
                              , p_tipo_parametro      => 'D'
                              );
        --
        --
        if tab_filtro( 'COD_COBERTURA_TS' ).valor(1) is not null then
            --
            str_Sql := str_Sql || ' and    ai.cod_cobertura_ts      = :cod_cobertura_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_cobertura_ts'
                                  , p_valor_parametro     => tab_filtro( 'COD_COBERTURA_TS' ).valor(1)
                                  );
            --
        end if;
        if tab_filtro( 'ITEM_MEDICO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and    ai.item_medico           = :item_medico';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'item_medico'
                                  , p_valor_parametro     => tab_filtro( 'ITEM_MEDICO' ).valor(1)
                                  );
            --
        end if;
        --
        --
        if tab_filtro( 'NUM_ASSOCIADO' ).valor(1) is not null and nvl(tab_filtro( 'COD_TS' ).valor(1),0) > 0 then
            --
            -- Quando ambos são informados, realziar um union por cada um
            --
            str_Sql_assoc := ' and a.num_associado = :num_associado';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'num_associado'
                                  , p_valor_parametro     => tab_filtro( 'NUM_ASSOCIADO' ).valor(1)
                                  );
            --
            str_Sql := str_Sql || str_Sql_assoc || ' union ' || str_Sql;
            --
            str_Sql_assoc := ' and a.cod_ts = :cod_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_ts'
                                  , p_valor_parametro     => tab_filtro( 'COD_TS' ).valor(1)
                                  );
            --
            str_Sql := str_Sql || str_Sql_assoc;
            --
        elsif nvl(tab_filtro( 'COD_TS' ).valor(1),0) > 0 then
            --
            str_Sql := str_Sql || ' and a.cod_ts = :cod_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_ts'
                                  , p_valor_parametro     => tab_filtro( 'COD_TS' ).valor(1)
                                  );
            --
        elsif tab_filtro( 'NUM_ASSOCIADO' ).valor(1) is not null then
            --
            str_Sql := str_Sql || ' and a.num_associado = :num_associado';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'num_associado'
                                  , p_valor_parametro     => tab_filtro( 'NUM_ASSOCIADO' ).valor(1)
                                  );
            --
        else
            --Trava para o caso de não ter sido informado associado o TS não realizar query
            str_Sql := str_Sql || ' and a.cod_ts = :cod_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_ts'
                                  , p_valor_parametro     => 0
                                  );
            --
        end if;
        --
        if tab_filtro( 'TIPO' ).valor(1) = 'TRATAMENTO' then
            str_Sql := str_Sql || ' order by 2 desc';
        else
            str_Sql := str_Sql || ' order by 1 desc';
        end if;
        --
        if tab_filtro( 'TIPO' ).valor(1) = 'TRATAMENTO' then
            str_Sql := 'select nome_tratamento, sum(nvl(total,0)) total from (' || str_Sql || ') group by nome_tratamento';
        else
            str_Sql := 'select sum(nvl(total,0)) total from (' || str_Sql || ')';
        end if;
        --
        --Montar XML com resultado da pesquisa
        str_Xml := gerar_xml ( p_cod_retorno    => p_cod_retorno
                             , p_msg_retorno    => p_msg_retorno
                             , p_sql            => str_Sql
                             , p_nome_cabecalho => 'TOTALIZADOR'
                             , p_nome_coluna    => 'DADOS'
                             );
        --
        --if p_cod_retorno = 0 then p_xml_retorno := str_Xml;
        --end if;
        --
        return;
        --
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um XML com o resultado da pesquisa da tela de situação
    ----------------------------------------------------------------------------
    procedure get_xml_pesquisa   ( p_xml_resultado  out clob
                                 , p_cod_retorno    out number
                                 , p_msg_retorno    out varchar2
                                 , p_xml_filtro     in clob
                                 )
    is
        str_Sql               Varchar2(32000) := '';
        str_Xml               clob;
        v_posicao             pls_integer := 0;
        v_frm_geracao_xml     varchar2(03);
    begin
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
        --Passar o XML informado para uma coleção
        tab_filtro := ts.top_utl_xml.toCollection(p_xml_filtro);
        --
        --Validação do XML de parametros
        --
        if not tab_filtro.exists('IND_ABRANGENCIA'              ) then tab_filtro( 'IND_ABRANGENCIA'            ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_ORIGEM'                   ) then tab_filtro( 'IND_ORIGEM'                 ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_ORDENACAO_1'              ) then tab_filtro( 'IND_ORDENACAO_1'            ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_ORDENACAO_2'              ) then tab_filtro( 'IND_ORDENACAO_2'            ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_ORDENACAO_3'              ) then tab_filtro( 'IND_ORDENACAO_3'            ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_ORDENACAO_4'              ) then tab_filtro( 'IND_ORDENACAO_4'            ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_ORDENACAO_5'              ) then tab_filtro( 'IND_ORDENACAO_5'            ).valor(1) := null; end if;
        if not tab_filtro.exists('DT_INI_PREVISAO'              ) then tab_filtro( 'DT_INI_PREVISAO'            ).valor(1) := null; end if;
        if not tab_filtro.exists('DT_FIM_PREVISAO'              ) then tab_filtro( 'DT_FIM_PREVISAO'            ).valor(1) := null; end if;
        if not tab_filtro.exists('NUM_ASSOCIADO'                ) then tab_filtro( 'NUM_ASSOCIADO'              ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_TS'                       ) then tab_filtro( 'COD_TS'                     ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_TRATAMENTO'               ) then tab_filtro( 'COD_TRATAMENTO'             ).valor(1) := null; end if;
        if not tab_filtro.exists('NUM_AUTORIZACAO'              ) then tab_filtro( 'NUM_AUTORIZACAO'            ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_URGENCIA'                 ) then tab_filtro( 'IND_URGENCIA'               ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_PRESTADOR_TS'             ) then tab_filtro( 'COD_PRESTADOR_TS'           ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_NAO_REALIZACAO'           ) then tab_filtro( 'IND_NAO_REALIZACAO'         ).valor(1) := null; end if;
        if not tab_filtro.exists('NUM_CONTRATO'                 ) then tab_filtro( 'NUM_CONTRATO'               ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_ORIGEM_AUT'               ) then tab_filtro( 'COD_ORIGEM_AUT'             ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_OPERADORA'                ) then tab_filtro( 'COD_OPERADORA'              ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_USUARIO_LOGADO'           ) then tab_filtro( 'COD_USUARIO_LOGADO'         ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_INSPETORIA_TS'            ) then tab_filtro( 'COD_INSPETORIA_TS'          ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_LIBERACAO'                ) then tab_filtro( 'IND_LIBERACAO'              ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_USUARIO_INCLUSAO'         ) then tab_filtro( 'COD_USUARIO_INCLUSAO'       ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_IDENTIFICACAO_TS'         ) then tab_filtro( 'COD_IDENTIFICACAO_TS'       ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_TIPO_USUARIO_LOGADO'      ) then tab_filtro( 'COD_TIPO_USUARIO_LOGADO'    ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_GRUPO_ENCAMINHAMENTO'     ) then tab_filtro( 'COD_GRUPO_ENCAMINHAMENTO'   ).valor(1) := null; end if;
        if not tab_filtro.exists('NUM_AUTORIZACAO_OPERADORA'    ) then tab_filtro( 'NUM_AUTORIZACAO_OPERADORA'  ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_GRUPO_PACIENTE_CRONICO'   ) then tab_filtro( 'COD_GRUPO_PACIENTE_CRONICO' ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_USUARIO_ANALISE'          ) then tab_filtro( 'COD_USUARIO_ANALISE'        ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_RESP_CUSTO'               ) then tab_filtro( 'IND_RESP_CUSTO'             ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_TIPO_OPME'                ) then tab_filtro( 'IND_TIPO_OPME'              ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_TIPO_REDE'                ) then tab_filtro( 'IND_TIPO_REDE'              ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_RETORNAR_COUNT'           ) then tab_filtro( 'IND_RETORNAR_COUNT'         ).valor(1) := 'N';  end if;
        if not tab_filtro.exists('IND_PENDENTES'                ) then tab_filtro( 'IND_PENDENTES'              ).valor(1) := 'N';  end if;
        if not tab_filtro.exists('DT_INI_PENDENTE'              ) then tab_filtro( 'DT_INI_PENDENTE'            ).valor(1) := null; end if;
        if not tab_filtro.exists('DT_FIM_PENDENTE'              ) then tab_filtro( 'DT_FIM_PENDENTE'            ).valor(1) := null; end if;
        if not tab_filtro.exists('DT_INI_ANALISADO'             ) then tab_filtro( 'DT_INI_ANALISADO'           ).valor(1) := null; end if;
        if not tab_filtro.exists('DT_FIM_ANALISADO'             ) then tab_filtro( 'DT_FIM_ANALISADO'           ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_LOCAL_INTERNACAO'         ) then tab_filtro( 'COD_LOCAL_INTERNACAO'       ).valor(1) := null; end if;
        --
        --Montar SQL
        --
        if  tab_filtro( 'IND_PENDENTES' ).valor(1) = 'S' and tab_filtro( 'IND_ANALISADOS' ).valor(1) = 'S' THEN
            --
            --Pendentes
            str_Sql := str_Sql
                    || monta_sql ( p_ind_situacao    =>     tab_filtro( 'SITUACAO_PENDENTES').valor(1)
                                 , p_data_ini        => nvl(tab_filtro( 'DT_INI_PENDENTE'   ).valor(1),'01/01/2011')--Usuário não informou então deixar default uma data antes da implantação
                                 , p_data_fim        => nvl(tab_filtro( 'DT_FIM_PENDENTE'   ).valor(1),to_char(sysdate,'dd/mm/yyyy'))--Usuário não informou, colocar hoje como default
                                 , p_ind_order       => 'N'
                                 , p_ind_max_linha  => case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end
                                 , p_somar_max_linha=> case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end --Indica se deve retornar o MAX + 1
                                 );
        --
            str_Sql := str_Sql || ' union '
                    || monta_sql ( p_ind_situacao    => tab_filtro( 'SITUACAO_ANALISADOS' ).valor(1)
                                 , p_data_ini        => tab_filtro( 'DT_INI_ANALISADO'    ).valor(1)
                                 , p_data_fim        => tab_filtro( 'DT_FIM_ANALISADO'    ).valor(1)
                                 , p_ind_max_linha  => case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end
                                 , p_somar_max_linha=> case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end --Indica se deve retornar o MAX + 1
                                 );
            --
        elsif  tab_filtro( 'IND_PENDENTES' ).valor(1) = 'S' then
            --Pendentes
            str_Sql := str_Sql
                    || monta_sql ( p_ind_situacao    =>     tab_filtro( 'SITUACAO_PENDENTES').valor(1)
                                 , p_data_ini        => nvl(tab_filtro( 'DT_INI_PENDENTE'   ).valor(1),'01/01/2011')--Usuário não informou então deixar default uma data antes da implantação
                                 , p_data_fim        => nvl(tab_filtro( 'DT_FIM_PENDENTE'   ).valor(1),to_char(sysdate,'dd/mm/yyyy'))--Usuário não informou, colocar hoje como default
                                 , p_ind_max_linha  => case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end
                                 , p_somar_max_linha=> case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end --Indica se deve retornar o MAX + 1
                                 );
            --
        elsif  tab_filtro( 'IND_ANALISADOS' ).valor(1) = 'S' then
            --Analisados
            str_Sql := str_Sql
                    || monta_sql ( p_ind_situacao    => tab_filtro( 'SITUACAO_ANALISADOS' ).valor(1)
                                 , p_data_ini        => tab_filtro( 'DT_INI_ANALISADO'    ).valor(1)
                                 , p_data_fim        => tab_filtro( 'DT_FIM_ANALISADO'    ).valor(1)
                                 , p_ind_max_linha  => case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end
                                 , p_somar_max_linha=> case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end --Indica se deve retornar o MAX + 1
                                 );
            --
        end if;
        --
        begin
            --Montar XML com resultado da pesquisa
            --
            str_Xml := gerar_xml ( p_cod_retorno    => p_cod_retorno
                                 , p_msg_retorno    => p_msg_retorno
                                 , p_sql            => str_Sql
                                 , p_nome_cabecalho => 'SITUACAO_PEDIDO'
                                 , p_nome_coluna    => 'DADOS'
                                 , p_ind_max_linha  => case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end
                                 , p_somar_max_linha=> case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end --Indica se deve retornar o MAX + 1
                                 ) ;
            --
            if  p_cod_retorno = 0 then p_xml_resultado := str_Xml;
            end if;
            --
            if  p_cod_retorno != 0 then
                --
                ts_log_execucao ( p_txt_nom_rotina   => 'rbm_rcs_previa_ped_reemb.get_xml_pesquisa'
                                , p_cod_posicao      => 999
                                , p_txt_erro_oracle  => p_msg_retorno
                                , p_txt_parametros   => 'XML Retorno:' || str_Xml || chr(13) || 'SQL        :' || str_Sql
                                , p_txt_mensagem     => p_xml_filtro
                                ) ;
            end if;
            --
        exception
        when no_data_found then
             p_cod_retorno := 9;
             p_msg_retorno := 'Nenhum pedido foi encontrado';
        end;
        --
    exception
    when others then
         --
         p_cod_retorno := 9;
         p_msg_retorno := 'Erro ao executar rbm_rcs_previa_ped_reemb.get_xml_pesquisa : Ocorreu o seguinte erro: ' || sqlerrm || ' ( ' || ts.ts_util.msgerro  || ' )';
         --
         ts_log_execucao ( 'rbm_rcs_previa_ped_reemb.get_xml_pesquisa'
                         , v_posicao
                         , ts.ts_util.msgerro
                         , 'Erro:' || chr(13) || 'XML Retorno:' || str_Xml
                                   || chr(13) || 'SQL        :' || str_Sql
                         , p_xml_filtro
                         );
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um XML com o resultado da pesquisa da tela de situação WPD
    ----------------------------------------------------------------------------
    procedure get_xml_pesquisa_wpd  ( p_xml_resultado  out clob
                                    , p_cod_retorno    out number
                                    , p_msg_retorno    out varchar2
                                    , p_xml_filtro     in clob
                                    )
    is
      v_doc                     dbms_xmldom.DOMDocument;
      v_cod_retorno             varchar2(1);
      v_msg_retorno             varchar2(1000);
      --
      str_Sql                   Varchar2(32000) := '';
      str_Xml                   clob;
      v_posicao                 pls_integer := 0;
      --
      v_data_ini                date;
      v_data_fim                date;
      --
      v_cod_tipo_usuario        usuario.cod_tipo_usuario%type := 0;
      v_cod_identificacao_ts    usuario.cod_identificacao_ts%type;
    begin
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
        --Passar o XML informado para uma coleção
        tab_filtro := ts.top_utl_xml.toCollection(p_xml_filtro);
        --
        --Validação do XML de parametros
        --
        if not tab_filtro.exists('IND_TODOS_STATUS'         ) then tab_filtro( 'IND_TODOS_STATUS'       ).valor(1) := null; end if;
        if not tab_filtro.exists('TXT_SITUACOES'            ) then tab_filtro( 'TXT_SITUACOES'          ).valor(1) := null; end if;
        if not tab_filtro.exists('DT_INI_SOLICITACAO'       ) then tab_filtro( 'DT_INI_SOLICITACAO'     ).valor(1) := null; end if;
        if not tab_filtro.exists('DT_FIM_SOLICITACAO'       ) then tab_filtro( 'DT_FIM_SOLICITACAO'     ).valor(1) := null; end if;
        if not tab_filtro.exists('DT_INI_PREVISAO'          ) then tab_filtro( 'DT_INI_PREVISAO'        ).valor(1) := null; end if;
        if not tab_filtro.exists('DT_FIM_PREVISAO'          ) then tab_filtro( 'DT_FIM_PREVISAO'        ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_PRESTADOR_TS'         ) then tab_filtro( 'COD_PRESTADOR_TS'       ).valor(1) := null; end if;
        if not tab_filtro.exists('COD_TS'                   ) then tab_filtro( 'COD_TS'                 ).valor(1) := null; end if;
        if not tab_filtro.exists('NUM_ASSOCIADO'            ) then tab_filtro( 'NUM_ASSOCIADO'          ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_LIMINAR'              ) then tab_filtro( 'IND_LIMINAR'            ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_OPME'                 ) then tab_filtro( 'IND_OPME'               ).valor(1) := null; end if;
        if not tab_filtro.exists('IND_RETORNAR_COUNT'       ) then tab_filtro( 'IND_RETORNAR_COUNT'     ).valor(1) := null; end if;
        --
        str_Sql := str_Sql || 'select /*rbm_rcs_previa_ped_reemb.consulta_pedido_opme*/';
        --
        if tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'S' then
            str_Sql := str_Sql || '   count(*) QTD';
        else
            str_Sql := str_Sql || '      count(*) over() QTD';
            str_Sql := str_Sql || '      , a.num_pedido                                  , a.cod_situacao';
            str_Sql := str_Sql || '      , a_sit.nom_situacao                            , a.cod_usuario_analise ';
            str_Sql := str_Sql || '      , u_ana.nom_usuario nome_usuario_analise        , a.cod_ts';
            str_Sql := str_Sql || '      , a.num_associado                               , a.nome_associado';
            str_Sql := str_Sql || '      , a.cod_prestador_exec                          , a.ind_resp_custo';
            str_Sql := str_Sql || '      , a_sit.nom_situacao_externo';
            str_Sql := str_Sql || '      , ps_local.cod_prestador cod_local_internacao   ,ps_local.nome_prestador nome_local_internacao';
            str_Sql := str_Sql || '      , nvl(ps.cod_prestador_editado,ps.cod_prestador) cod_prestador';
            str_Sql := str_Sql || '      , ps.nome_prestador';
            str_Sql := str_Sql || '      , to_char(sysdate,''dd/mm/yyyy'')               data_atual';
            str_Sql := str_Sql || '      , to_char(a.data_solicitacao,''dd/mm/yyyy'')    data_solicitacao';
            str_Sql := str_Sql || '      , to_char(a.data_provavel_internacao,''dd/mm/yyyy'')    data_provavel_internacao';
            str_Sql := str_Sql || '      , floor(sysdate - a.data_provavel_internacao)    num_prioridade';
        end if;

        str_Sql := str_Sql || ' from   prestador_servico            ps      ';
        str_Sql := str_Sql || '      , prestador_servico            ps_local';
        str_Sql := str_Sql || '      , autorizacao_situacao         a_sit   ';
        str_Sql := str_Sql || '      , usuario                      u_ana   ';
        str_Sql := str_Sql || '      ,( select a.* from autorizacao a       ';
        str_Sql := str_Sql || '      where 1 = 1 ';
        --
        if  isDate(tab_filtro( 'DT_INI_SOLICITACAO').valor(1)) and isDate(tab_filtro( 'DT_FIM_SOLICITACAO' ).valor(1)) then
            str_Sql := str_Sql || ' and trunc(a.data_solicitacao) between :data_ini and :data_fim';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_ini' , p_valor_parametro => tab_filtro( 'DT_INI_SOLICITACAO' ).valor(1) , p_tipo_parametro => 'D');
            AdicionarParametroSQL ( p_nome_parametro  => 'data_fim' , p_valor_parametro => tab_filtro( 'DT_FIM_SOLICITACAO' ).valor(1) , p_tipo_parametro => 'D');
            --
        elsif  isDate(tab_filtro( 'DT_INI_SOLICITACAO' ).valor(1)) then
            str_Sql := str_Sql || ' and trunc(a.data_solicitacao) >= :data_ini';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_ini' , p_valor_parametro => tab_filtro( 'DT_INI_SOLICITACAO' ).valor(1) , p_tipo_parametro => 'D');
            --
        elsif  isDate(tab_filtro( 'DT_FIM_SOLICITACAO' ).valor(1)) then
            str_Sql := str_Sql || ' and trunc(a.data_solicitacao) <= :data_fim';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_fim' , p_valor_parametro => tab_filtro( 'DT_FIM_SOLICITACAO' ).valor(1) , p_tipo_parametro => 'D');
            --
        end if;
        --
        if  isDate(tab_filtro( 'DT_INI_PREVISAO' ).valor(1)) and isDate(tab_filtro( 'DT_FIM_PREVISAO' ).valor(1)) then
            str_Sql := str_Sql || ' and trunc(a.data_provavel_internacao) between :data_ini_previsao and :data_fim_previsao';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_ini_previsao' , p_valor_parametro => tab_filtro( 'DT_INI_PREVISAO' ).valor(1) , p_tipo_parametro => 'D');
            AdicionarParametroSQL ( p_nome_parametro  => 'data_fim_previsao' , p_valor_parametro => tab_filtro( 'DT_FIM_PREVISAO' ).valor(1) , p_tipo_parametro => 'D');
            --
        elsif  isDate(tab_filtro( 'DT_INI_PREVISAO' ).valor(1)) then
            str_Sql := str_Sql || ' and trunc(a.data_provavel_internacao) >= :data_ini_previsao';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_ini_previsao' , p_valor_parametro => tab_filtro( 'DT_INI_PREVISAO' ).valor(1) , p_tipo_parametro => 'D');
            --
        elsif  isDate(tab_filtro( 'DT_FIM_PREVISAO' ).valor(1)) then
            str_Sql := str_Sql || ' and trunc(a.data_provavel_internacao) <= :data_fim_previsao';
            --
            AdicionarParametroSQL ( p_nome_parametro  => 'data_fim_previsao' , p_valor_parametro => tab_filtro( 'DT_FIM_PREVISAO' ).valor(1) , p_tipo_parametro => 'D');
            --
        end if;
        --
        if  tab_filtro( 'IND_LIMINAR' ).valor(1) = 'S' then
            str_Sql := str_Sql || ' and a.ind_resp_custo = ''L''';
            --
        end if;
        --
        if  nvl(tab_filtro( 'NUM_ASSOCIADO' ).valor(1),'X') <> 'X' then
            str_Sql := str_Sql || ' and a.num_associado = :num_associado';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'num_associado' , p_valor_parametro => tab_filtro( 'NUM_ASSOCIADO' ).valor(1) );
            --
        elsif nvl(tab_filtro( 'COD_TS' ).valor(1),0) <> 0 then
            str_Sql := str_Sql || ' and a.cod_ts     = :cod_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_ts' , p_valor_parametro => nvl(tab_filtro( 'COD_TS' ).valor(1),0) , p_tipo_parametro => 'N' );
            --
        end if;
        --
        if  tab_filtro( 'COD_PRESTADOR_TS' ).valor(1) is not null then
            --
            str_Sql := str_Sql || ' and a.cod_prestador_exec = :cod_prestador_exec';
            --
            AdicionarParametroSQL ( p_nome_parametro => 'cod_prestador_exec' , p_valor_parametro => tab_filtro( 'COD_PRESTADOR_TS' ).valor(1)  , p_tipo_parametro => 'N'  );
            --
        end if;
        --
        if tab_filtro( 'IND_TODOS_STATUS' ).valor(1) = 'N' then
            if instr(tab_filtro( 'TXT_SITUACOES' ).valor(1),',') > 0 then
                --
                str_Sql := str_Sql || ' and   a.cod_situacao in ( select /*+cardinality(x 1)*/ to_number(column_value) from table( top_utl_padrao.split(:cod_situacao,'','')) x ) '; --Este não funcionou no XML
                --
                AdicionarParametroSQL ( p_nome_parametro => 'cod_situacao' , p_valor_parametro => nvl(tab_filtro( 'TXT_SITUACOES' ).valor(1),'6')  );
                --
            else
                str_Sql := str_Sql || ' and    a.cod_situacao = :cod_situacao ';
                --
                AdicionarParametroSQL ( p_nome_parametro => 'cod_situacao' , p_valor_parametro => nvl(tab_filtro( 'TXT_SITUACOES' ).valor(1),'6') , p_tipo_parametro => 'N' );
                --
            end if;
        end if;
        --
        str_Sql := str_Sql  || '     ) a ';
        --
        str_Sql := str_Sql || ' where  a.cod_situacao           = a_sit.cod_situacao(+)';
        str_Sql := str_Sql || ' and    a.cod_prestador_exec     = ps.cod_prestador_ts(+)';
        str_Sql := str_Sql || ' and    a.cod_local_internacao   = ps_local.cod_prestador_ts(+)';
        str_Sql := str_Sql || ' and    a.cod_usuario_analise    = u_ana.cod_usuario(+)';
        str_Sql := str_Sql || ' order by a.data_solicitacao desc';
        --
        --
        begin
            --Montar XML com resultado da pesquisa
            str_Xml := gerar_xml ( p_cod_retorno    => p_cod_retorno
                                 , p_msg_retorno    => p_msg_retorno
                                 , p_sql            => str_Sql
                                 , p_nome_cabecalho => 'SITUACAO_PEDIDO_OPME'
                                 , p_nome_coluna    => 'DADOS'
                                 , p_ind_max_linha  => case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end
                                 , p_somar_max_linha=> case when tab_filtro( 'IND_RETORNAR_COUNT' ).valor(1) = 'N' then 'S' else 'N' end --Indica se deve retornar o MAX + 1
                                 );
            --
            if p_cod_retorno = 0 then p_xml_resultado := str_Xml;
            end if;
        exception
        when no_data_found then
             p_cod_retorno := 9;
             p_msg_retorno := 'Nenhum pedido foi encontrado';
        end;
        --
    exception
    when others then
         --
         p_cod_retorno := 9;
         p_msg_retorno := 'Erro ao executar rbm_rcs_previa_ped_reemb.get_xml_pesquisa_wpd : Ocorreu o seguinte erro: ' || sqlerrm || ' ( ' || ts.ts_util.msgerro  || ' )';
         --
         ts_log_execucao ( 'rbm_rcs_previa_ped_reemb.get_xml_pesquisa_wpd'
                         , v_posicao
                         , ts.ts_util.msgerro
                         , 'Erro:' || chr(13) || 'XML Retorno:' || str_Xml
                                   || chr(13) || 'SQL        :' || str_Sql
                         , p_xml_filtro
                         );
    end;
    --
    --
    ---------------------------------------------------------------------------------
    -- Retornar um XML com o resultado da pesquisa da tela de situação x beneficiario
    ---------------------------------------------------------------------------------
    procedure get_xml_benef_situacao  ( p_xml_retorno    out clob
                                      , p_cod_retorno    out number
                                      , p_msg_retorno    out varchar2
                                      , p_cod_ts         in number
                                      , p_num_associado  in varchar2
                                      , p_data_ini       in varchar2
                                      , p_data_fim       in varchar2
                                      )
    is
        str_Sql               varchar2(32000) := '';
        str_Sql_assoc         varchar2(500);
        str_Sql_assoc_destino varchar2(4000)  := '';
        str_Xml               clob;
    begin
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
        --
        str_Sql := 'select a.data_solicitacao dtordem
                         , to_char(a.data_solicitacao, ''dd/mm/yyyy'') data_solicitacao
                         , a.cod_tratamento
                         , a.num_pedido
                         , t.nome_tratamento
                         , a.cod_ts
                         , a.num_associado
                         , a.nome_associado
                         , a.cod_situacao
                         , asit.nom_situacao
                         , to_char(a.data_situacao, ''dd/mm/yyyy'') data_situacao
                         , asit.ind_operadora_cancela
                         , asit.ind_operadora_altera
                         , asit.ind_operadora_recurso
                         , asit.ind_outros_cancela
                         , asit.ind_outros_altera
                         , asit.ind_outros_recurso
                         , asit.ind_revalidacao
                         , asit.ind_pendente
                         , t.ind_internado
                         , a.cod_meio_aut
                         , a.cod_origem_aut
                         , a.num_transacao_origem
                         , to_char(a.data_validade, ''dd/mm/yyyy'') data_validade
                         , a.cod_usuario_analise
                         , to_char(a.dt_inicio_analise, ''dd/mm/yyyy'') dt_inicio_analise
                    from   autorizacao              a
                         , tipo_tratamento          t
                         , autorizacao_situacao     asit
                    where  a.cod_tratamento         = t.cod_tratamento  (+)
                    and    a.cod_situacao           = asit.cod_situacao (+)
                    and    a.cod_meio_aut           not in (10,11)';
        --
        if isDate(p_data_ini) and isDate(p_data_fim) then
            str_Sql := str_Sql || ' and trunc(a.data_solicitacao) between :data_ini and :data_fim';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'data_ini'
                                  , p_valor_parametro     => p_data_ini
                                  , p_tipo_parametro      => 'D'
                                  );
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'data_fim'
                                  , p_valor_parametro     => p_data_fim
                                  , p_tipo_parametro      => 'D'
                                  );
            --
        elsif isDate(p_data_ini) then
            str_Sql := str_Sql || ' and a.data_solicitacao >= :data_ini';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'data_ini'
                                  , p_valor_parametro     => p_data_ini
                                  , p_tipo_parametro      => 'D'
                                  );
            --
        elsif isDate(p_data_fim) then
            str_Sql := str_Sql || ' and a.data_solicitacao <= :data_fim';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'data_fim'
                                  , p_valor_parametro     => p_data_fim
                                  , p_tipo_parametro      => 'D'
                                  );
            --
        end if;
        --
        -- Beneficiário
        if nvl(p_num_associado,'X') <> 'X' and nvl(p_cod_ts,0) <> 0 then
            --
            --
            -- Quando ambos são informados, realziar um union por cada um
            --
            str_Sql_assoc := ' and a.num_associado = :num_associado';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'num_associado'
                                  , p_valor_parametro     => p_num_associado
                                  );
            --
            str_Sql := str_Sql || str_Sql_assoc || ' union ' || str_Sql;
            --
            str_Sql_assoc := ' and a.cod_ts = :cod_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_ts'
                                  , p_valor_parametro     => p_cod_ts
                                  );
            --
            str_Sql := str_Sql || str_Sql_assoc;
            --
        elsif nvl(p_num_associado,'X') <> 'X' then
            str_Sql := str_Sql || ' and a.num_associado = :num_associado';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'num_associado'
                                  , p_valor_parametro     => p_num_associado
                                  );
        else
            str_Sql := str_Sql || ' and a.cod_ts     = :cod_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_ts'
                                  , p_valor_parametro     => nvl(p_cod_ts,0)
                                  );
        end if;
        --
        str_Sql := str_Sql || str_Sql_assoc_destino || ' order by dtordem desc, num_pedido desc';
        --
        --Montar XML com resultado da pesquisa
        str_Xml := gerar_xml ( p_cod_retorno    => p_cod_retorno
                            , p_msg_retorno    => p_msg_retorno
                            , p_sql            => str_Sql
                            , p_nome_cabecalho => 'BENEFICIARIO_SITUACAO'
                            , p_nome_coluna    => 'DADOS'
                            );
        --
        if p_cod_retorno = 0 then p_xml_retorno := str_Xml;
        end if;
        --
        return;
        --
    exception
        when others then
            --
            p_cod_retorno := 9;
            p_msg_retorno := 'Ocorreu o seguinte erro: ' || sqlerrm || ' ( ' || ts.ts_util.msgerro  || ' )';
            --
            ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                            , 999
                            , 'Erro não previsto'
                            , 'Erro:' || chr(13) || ts.ts_util.msgerro
                            , 'get_xml_benef_situacao'
                            );
            --
    end;
    --
    --
    ---------------------------------------------------------------------------------
    -- Retornar um cursor com o resultado da pesquisa da tela de Pedidos Pendentes
    ---------------------------------------------------------------------------------
    function RetornaRsPedidoPendente ( p_ind_tipo_rel     in varchar2
                                     , p_data_ini         in varchar2
                                     , p_data_fim         in varchar2
                                     , p_ordenacao        in varchar2 default ''
                                     )
    return sys_refcursor
    is
        c                       sys_refcursor;
        str_Sql                 varchar2(32000) := '';
    begin
        --
        if p_ind_tipo_rel = 'A' then --Analitico
            --
            str_Sql := 'select a.num_pedido
                             , to_char(a.data_solicitacao, ''dd/mm/yyyy'') data_solicitacao
                             , to_char(a.data_inclusao, ''dd/mm/yyyy'')    data_inclusao
                             , nvl(trunc(sysdate) - trunc(data_solicitacao), 0) dias_pendentes
                             , a.cod_ts
                             , a.num_associado
                             , a.nome_associado
                             , a.cod_situacao
                             , asit.nom_situacao
                             , exec.cod_prestador
                             , exec.nome_prestador
                             , ( select count(*)
                                 from   autorizacao_liberacao al1
                                 where  al1.num_pedido       = a.num_pedido
                                 and    al1.ind_situacao     = 1
                                 and    rownum               < 2
                               ) qtd_nao_liberado
                             , ( select count(*)
                                 from   autorizacao_liberacao al2
                                 where  al2.num_pedido       = a.num_pedido
                                 and    al2.ind_situacao     = 2
                                 and    rownum               < 2
                               ) qtd_liberado
                        from   autorizacao          a
                             , autorizacao_situacao asit
                             , prestador_servico    exec
                        where  a.cod_situacao       <> 99
                        and    a.data_solicitacao   between :data_ini
                                                    and     :data_fim
                        and    a.cod_prestador_exec = exec.cod_prestador_ts (+)
                        and    a.cod_situacao       = asit.cod_situacao
                        and    asit.ind_pendente    = ''S''';
            --
            str_Sql := str_Sql || case when p_ordenacao = 'N' then 'order by a.nome_associado'
                                       when p_ordenacao = 'D' then 'order by a.data_solicitacao'
                                       when p_ordenacao = 'S' then 'order by asit.nom_situacao'
                                       when p_ordenacao = 'P' then 'order by a.num_pedido'
                                       when p_ordenacao = 'E' then 'order by exec.nome_prestador'
                                       else                        'order by a.num_pedido'
                                  end;
            --
         else --Sintetico
            --
            str_Sql := 'select cod_situacao
                             , nom_situacao
                             , qtd_pedidos
                             , dias_pendentes
                        from ( select a.cod_situacao
                                    , asit.nom_situacao
                                    , count(*) qtd_pedidos
                                    , nvl(trunc(sysdate) - trunc(data_solicitacao), 0) dias_pendentes
                               from   autorizacao a
                                    , autorizacao_situacao asit
                               where  a.cod_situacao <> 99
                               and    a.data_solicitacao between :data_ini
                                                            and  :data_fim
                               and    a.cod_situacao    = asit.cod_situacao
                               and    asit.ind_pendente = ''S''
                               group by a.cod_situacao
                                      , asit.nom_situacao
                                      ,  nvl(trunc(sysdate) - trunc(data_solicitacao), 0)
                            )
                        order by upper(nom_situacao)';
            --
        end if;

        open  c
        for   str_Sql
        using to_date(p_data_ini,'dd/mm/yyyy')
            , to_date(p_data_fim,'dd/mm/yyyy');
        --
        return c;
        --
    exception
        when others then
            --
            ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                            , 999
                            , 'Erro não previsto'
                            , 'Erro:' || chr(13) || ts.ts_util.msgerro
                            , 'RetornaRsPedidoPendente'
                            );
            --
            return null;
    end;
    --
    --
    ---------------------------------------------------------------------------------
    -- Retornar um cursor com o resultado da pesquisa da tela de Confirmação
    ---------------------------------------------------------------------------------
    procedure RetornaXMLConfirmacaoPedido ( p_xml_retorno    out clob
                                          , p_xml_filtro     in clob
                                          )
    is
        str_Sql                 varchar2(32000) := '';
        v_cod_retorno           pls_integer;
        v_msg_retorno           varchar2(4000);
    begin
        --
        --Passar o XML informado para uma coleção
        tab_filtro := ts.top_utl_xml.toCollection(p_xml_filtro);
        --
        --/* rbm_rcs_previa_ped_reemb.RetornaXMLConfirmacaoPedido */ distinct
        str_Sql := 'select distinct
                           a.num_pedido
                         , ps.cod_prestador
                         , a.cod_prestador_exec
                         , ps.nome_prestador
                         , ps.ind_vinculacao
                         , a.mes_ano_ref
                         , a.cod_ts
                         , a.num_associado
                         , a.nome_associado
                         , tt.nome_tratamento
                         , to_char (a.data_autorizacao, ''dd/mm/yyyy'') data_autorizacao
                         , ( select ''S''
                             from   autorizacao_item               ai2
                             where  ai2.num_pedido                 = a.num_pedido
                             and    nvl (ai2.ind_situacao, ''A'')  in (''A'', ''I'')
                             and    ai2.cod_usuario_conf           is null
                             and    rownum                            < 2
                           ) ind_nao_confirmado
                         , ( select ''S''
                             from   autorizacao_dados_tiss         adt
                             where  adt.num_pedido                 = a.num_pedido
                           ) ind_dados_tiss
                    from   autorizacao                  a
                         , prestador_servico            ps
                         , tipo_tratamento              tt
                         , autorizacao_item             ai
                    where  a.num_pedido                 = ai.num_pedido
                    and    a.cod_prestador_exec         = ps.cod_prestador_ts
                    and    a.cod_tratamento             = tt.cod_tratamento
                    and    a.cod_situacao               = 1
                    and    nvl(ai.ind_situacao,''A'')   in (''A'',''I'')
                    and    a.cod_meio_aut               not in (8, 9, 10, 11, 99)
                    and    trunc(a.data_autorizacao)    between :data_ini and :data_fim';
        --
        AdicionarParametroSQL ( p_nome_parametro      => 'data_ini'
                              , p_valor_parametro     => tab_filtro( 'DATA_INI' ).valor(1)
                              , p_tipo_parametro      => 'D'
                              );
        --
        AdicionarParametroSQL ( p_nome_parametro      => 'data_fim'
                              , p_valor_parametro     => tab_filtro( 'DATA_FIM' ).valor(1)
                              , p_tipo_parametro      => 'D'
                              );
        --
        if tab_filtro( 'COD_PRESTADOR_TS_IN' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.cod_prestador_exec in (' || tab_filtro( 'COD_PRESTADOR_TS_IN' ).valor(1) || ') ';
        elsIf tab_filtro( 'COD_PRESTADOR_TS' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.cod_prestador_exec = :cod_prestador_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_prestador_ts'
                                  , p_valor_parametro     => tab_filtro( 'COD_PRESTADOR_TS' ).valor(1)
                                  );
            --
        end if;
        --
        if tab_filtro( 'NUM_PEDIDO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.num_pedido = :num_pedido';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'num_pedido'
                                  , p_valor_parametro     => tab_filtro( 'NUM_PEDIDO' ).valor(1)
                                  );
            --
        end if;
        --
        if tab_filtro( 'COD_TS' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.cod_ts = :cod_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_ts'
                                  , p_valor_parametro     => tab_filtro( 'COD_TS' ).valor(1)
                                  );
            --
        elsif tab_filtro( 'NUM_ASSOCIADO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.num_associado = :num_associado';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'num_associado'
                                  , p_valor_parametro     => tab_filtro( 'NUM_ASSOCIADO' ).valor(1)
                                  );
            --
        end if;
        --
        if tab_filtro( 'COD_TRATAMENTO' ).valor(1) is not null then
            str_sql := str_sql || ' and  tt.cod_tratamento = :cod_tratamento';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_tratamento'
                                  , p_valor_parametro     => tab_filtro( 'COD_TRATAMENTO' ).valor(1)
                                  );
            --
        end if;
        --
        str_Sql := str_Sql || ' order by ps.cod_prestador  , a.num_pedido';
        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_cod_retorno    => v_cod_retorno
                                  , p_msg_retorno    => v_msg_retorno
                                  , p_sql            => str_Sql
                                  , p_nome_cabecalho => 'CONFIRMACAO'
                                  , p_nome_coluna    => 'DADOS'
                                  );
        return;
        --
    exception
        when others then
            --
            ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                            , 999
                            , 'Erro não previsto'
                            , 'Erro:' || chr(13) || ts.ts_util.msgerro
                            , 'RetornaXMLConfirmacaoPedido'
                            );
            --
            return;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um XML com o resultado da pesquisa da tela de situação
    ----------------------------------------------------------------------------
    procedure get_xml_benef_procedimento  ( p_xml_retorno    out clob
                                          , p_cod_retorno    out number
                                          , p_msg_retorno    out varchar2
                                          , p_xml_filtro     in clob
                                          )
    is
        str_Sql                 varchar2(32000) := '';
        str_Sql_assoc           varchar2(500) := '';
        str_Xml                 clob;
        str_Sql_assoc_destino   varchar2(4000)  := '';
        --
    begin
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
        --Passar o XML informado para uma coleção
        tab_filtro := ts.top_utl_xml.toCollection(p_xml_filtro);
        --
        --
        --Montar SQL
        --
        str_Sql := 'select /*rbm_rcs_previa_ped_reemb.get_xml_benef_procedimento*/ a.num_pedido
                         , a.cod_situacao
                         , a.cod_tratamento
                         , asit.nom_situacao
                         , a.cod_cid_principal cod_cid
                         , c.nome_cid
                         , a.num_associado
                         , a.nome_associado
                         , ai.item_medico
                         , vp.nome_item
                         , nvl(ai.qtd_solicitada, 0) qtd_solicitada
                         , nvl(ai.qtd_liberada, 0) qtd_liberada
                         , ai.ind_situacao
                         , ai.num_autorizacao
                         , a.num_transacao_origem
                         , ai.sigla_moeda
                         , ai.val_previsto_pgto
                         , ai.ind_resp_custo
                         , asit.ind_operadora_altera
                         , asit.ind_outros_altera
                         , asit.ind_operadora_cancela
                         , asit.ind_outros_cancela
                         , asit.ind_revalidacao
                         , asit.ind_operadora_recurso
                         , asit.ind_outros_recurso
                         , asit.ind_pendente
                         , a.data_solicitacao                           data_solicitacao_ordem
                         , to_char(a.data_solicitacao,  ''dd/mm/yyyy'') data_solicitacao
                         , to_char(ai.dt_solicitacao,   ''dd/mm/yyyy'') data_solicitacao_item
                         , to_char(a.data_autorizacao,  ''dd/mm/yyyy'') data_autorizacao
                         , to_char(a.data_inclusao,     ''dd/mm/yyyy'') data_inclusao
                         , to_char(a.data_validade,     ''dd/mm/yyyy'') data_validade
                         , to_char(A.dt_inicio_analise, ''dd/mm/yyyy'') dt_inicio_analise
                         , a.cod_prestador_exec
                         , ps.cod_prestador_editado
                         , ps.nome_prestador
                         , t.ind_internado
                         , t.nome_tratamento
                         , a.num_fax
                         , ai.num_seq_item
                         , ai.num_seq_pedido
                         , a.txt_email
                         , ai.cod_regiao
                         , ai.cod_face
                         , a.cod_usuario_analise
                         ,(case when ai.ind_situacao = ''T'' then ''Trocado''
                                when ai.ind_situacao = ''I'' then ''Indicado''
                                when ai.ind_situacao = ''A'' then ''Aprovado''
                                when ai.ind_situacao = ''C'' then ''Cancelado''
                                when ai.ind_situacao = ''N'' then ''Negado''
                            end) situacao
                    from   autorizacao a
                         , autorizacao_situacao asit
                         , cid c
                         , autorizacao_item ai
                         , vwm_procedimento vp
                         , tipo_tratamento t
                         , prestador_servico ps
                    where  a.num_pedido         = ai.num_pedido (+)
                    and    a.cod_situacao       = asit.cod_situacao
                    and    ai.item_medico       = vp.item_medico (+)
                    and    a.cod_tratamento     = t.cod_tratamento (+)
                    and    a.cod_prestador_exec = ps.cod_prestador_ts (+)
                    and    a.cod_cid_principal  = c.cod_cid (+)';
        --
        str_Sql := str_Sql || ' and trunc(a.data_solicitacao) between :data_ini and :data_fim';
        --
        AdicionarParametroSQL ( p_nome_parametro      => 'data_ini'
                              , p_valor_parametro     => tab_filtro( 'DATA_INI' ).valor(1)
                              , p_tipo_parametro      => 'D'
                              );
        --
        AdicionarParametroSQL ( p_nome_parametro      => 'data_fim'
                              , p_valor_parametro     => tab_filtro( 'DATA_FIM' ).valor(1)
                              , p_tipo_parametro      => 'D'
                              );
        --
        --
        if tab_filtro( 'COD_TRATAMENTO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.cod_tratamento = :cod_tratamento';
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_tratamento'
                                  , p_valor_parametro     => tab_filtro( 'COD_TRATAMENTO' ).valor(1)
                                  );
        end if;
        --
        if tab_filtro( 'COD_SITUACAO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.cod_situacao = :cod_situacao';
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_situacao'
                                  , p_valor_parametro     => tab_filtro( 'COD_SITUACAO' ).valor(1)
                                  );
        end if;
        --
        if tab_filtro( 'ITEM_MEDICO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and ai.item_medico = :item_medico';
            AdicionarParametroSQL ( p_nome_parametro      => 'item_medico'
                                  , p_valor_parametro     => tab_filtro( 'ITEM_MEDICO' ).valor(1)
                                  );
        end if;
        --
        if tab_filtro( 'COD_TS_CONTRATO' ).valor(1) is not null then
            str_Sql := str_Sql || ' and a.cod_ts_contrato = :cod_ts_contrato';
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_ts_contrato'
                                  , p_valor_parametro     => tab_filtro( 'COD_TS_CONTRATO' ).valor(1)
                                  );
        end if;
        --
        if tab_filtro( 'COD_COBERTURA_TS' ).valor(1) is not null then
            str_Sql := str_Sql || ' and (ai.cod_cobertura_ts = :cod_cobertura_ts or ai.cod_cobertura_ts_sec = :cod_cobertura_ts )';
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_cobertura_ts'
                                  , p_valor_parametro     => tab_filtro( 'COD_COBERTURA_TS' ).valor(1)
                                  );

        end if;
        --
        --
        if tab_filtro( 'NUM_ASSOCIADO' ).valor(1) is not null and tab_filtro( 'COD_TS' ).valor(1) is not null then
            --
            -- Quando ambos são informados, realziar um union por cada um
            --
            str_Sql_assoc := ' and a.num_associado = :num_associado';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'num_associado'
                                  , p_valor_parametro     => tab_filtro( 'NUM_ASSOCIADO' ).valor(1)
                                  );
            --
            str_Sql := str_Sql || str_Sql_assoc || ' union ' || str_Sql;
            --
            str_Sql_assoc := ' and a.cod_ts = :cod_ts';
            --
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_ts'
                                  , p_valor_parametro     => tab_filtro( 'COD_TS' ).valor(1)
                                  );
            --
            str_Sql := str_Sql || str_Sql_assoc;
        elsif tab_filtro( 'COD_TS' ).valor(1) is not null then
            --
            str_Sql := str_Sql || ' and a.cod_ts = :cod_ts';
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_ts'
                                  , p_valor_parametro     => tab_filtro( 'COD_TS' ).valor(1)
                                  );
            --
        elsif tab_filtro( 'NUM_ASSOCIADO' ).valor(1) is not null then
            --
            str_Sql := str_Sql || ' and a.num_associado = :num_associado';
            AdicionarParametroSQL ( p_nome_parametro      => 'num_associado'
                                  , p_valor_parametro     => tab_filtro( 'NUM_ASSOCIADO' ).valor(1)
                                  );
            --
        else
            --Trava para o caso de não ter sido informado associado o TS não realizar query
            str_Sql := str_Sql || ' and a.cod_ts = :cod_ts';
            AdicionarParametroSQL ( p_nome_parametro      => 'cod_ts'
                                  , p_valor_parametro     => 0
                                  );
            --
        end if;
        --
        --
        str_Sql := str_Sql || str_Sql_assoc_destino || ' order by data_solicitacao_ordem desc, num_pedido desc, num_seq_pedido, num_seq_item ';
        --
        --
        --Montar XML com resultado da pesquisa
        str_Xml := gerar_xml ( p_cod_retorno    => p_cod_retorno
                             , p_msg_retorno    => p_msg_retorno
                             , p_sql            => str_Sql
                             , p_nome_cabecalho => 'BENEFICIARIO_PROCEDIMENTO'
                             , p_nome_coluna    => 'DADOS'
                             , p_ind_max_linha  => 'S'
                             );
        --
        if p_cod_retorno = 0 then p_xml_retorno := str_Xml;
        end if;
        --
        --
        /*
        ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                        , 999
                        , 'Debug'
                        ,    chr(13) || 'XML Filtro:' || p_xml_filtro
                          || chr(13) || 'SQL:'        || str_Sql
                          || chr(13) || 'NUM:'        || tab_filtro( 'NUM_ASSOCIADO' ).valor(1)
                          || chr(13) || 'COD:'        || tab_filtro( 'COD_TS' ).valor(1)
                        , 'get_xml_benef_procedimento'
                        );
        */
        return;
        --
    exception
        when others then
            --
            p_cod_retorno := 9;
            p_msg_retorno := 'Ocorreu o seguinte erro: ' || sqlerrm || ' ( ' || ts.ts_util.msgerro  || ' )';
            --
            ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                            , 999
                            , 'Erro não previsto'
                            , 'Erro:' || chr(13) || ts.ts_util.msgerro
                                      || chr(13) || 'XML Filtro:' || p_xml_filtro
                            , 'get_xml_benef_procedimento'
                            );
            --
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um XML com as funções de autorização que o usuario possui permissão
    ----------------------------------------------------------------------------
    procedure get_xml_funcao   ( p_xml_retorno      out clob
                               , p_cod_retorno      out number
                               , p_msg_retorno      out varchar2
                               , p_cod_usuario      in varchar2
                               , p_cod_tipo_usuario in varchar2
                               )
    is
        str_Sql                 Varchar2(32000) := '';
        str_Xml                 clob;
        v_cod_mod_autorizacao   varchar2(2) := '11';
        v_cod_mod_pedido        varchar2(2) := '11';
    begin
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
        --Montar SQL
        --
        str_Sql := '';
        str_Sql := str_Sql || ' select u.cod_usuario        , upper (ap.cod_funcao) cod_funcao';
        str_Sql := str_Sql || ' from   usuario              u';
        str_Sql := str_Sql || '      , perfil_tipo_usuario  ptu';
        str_Sql := str_Sql || '      , autorizacao_perfil   ap';
        str_Sql := str_Sql || ' where  u.cod_usuario        = :cod_usuario';
        str_Sql := str_Sql || ' and    u.cod_tipo_usuario   = ptu.cod_tipo_usuario';
        str_Sql := str_Sql || ' and    ptu.cod_perfil       = ap.cod_perfil';
        str_Sql := str_Sql || ' and    exists (select null';
        str_Sql := str_Sql || '                from   ts.funcao f';
        str_Sql := str_Sql || '                where  f.cod_funcao = ap.cod_funcao';
        str_Sql := str_Sql || '                and    f.cod_modulo = :cod_modulo)';
        str_Sql := str_Sql || ' union ';
        str_Sql := str_Sql || ' select u.cod_usuario        , upper (ap.cod_funcao) cod_funcao';
        str_Sql := str_Sql || ' from   usuario              u';
        str_Sql := str_Sql || '      , perfil_usuario       pu';
        str_Sql := str_Sql || '      , autorizacao_perfil   ap';
        str_Sql := str_Sql || ' where  u.cod_usuario        = :cod_usuario';
        str_Sql := str_Sql || ' and    u.cod_usuario        = pu.cod_usuario';
        str_Sql := str_Sql || ' and    pu.cod_perfil        = ap.cod_perfil';
        str_Sql := str_Sql || ' and    exists (select null';
        str_Sql := str_Sql || '                from   ts.funcao f';
        str_Sql := str_Sql || '                where  f.cod_funcao = ap.cod_funcao';
        str_Sql := str_Sql || '                and    f.cod_modulo = :cod_modulo)';
        --
        AdicionarParametroSQL ( p_nome_parametro      => 'cod_usuario'
                              , p_valor_parametro     => p_cod_usuario
                              );
        --
        AdicionarParametroSQL ( p_nome_parametro      => 'cod_modulo'
                              , p_valor_parametro     => case when p_cod_tipo_usuario in ('3','4') then v_cod_mod_autorizacao
                                                                                                   else v_cod_mod_pedido
                                                         end
                              );

        --
        --Montar XML com resultado da pesquisa
        str_Xml := gerar_xml ( p_cod_retorno    => p_cod_retorno
                            , p_msg_retorno    => p_msg_retorno
                            , p_sql            => str_Sql
                            , p_nome_cabecalho => 'USUARIO_FUNCAO'
                            , p_nome_coluna    => 'DADOS'
                            );
        --
        if p_cod_retorno = 0 then p_xml_retorno := str_Xml;
        end if;
        --
        return;
        --
    exception
    when others then
        --
        p_cod_retorno := 9;
        p_msg_retorno := 'Ocorreu o seguinte erro: ' || sqlerrm || ' ( ' || ts.ts_util.msgerro  || ' )';
        --
        ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                        , 999
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || ts.ts_util.msgerro
                        , 'get_xml_funcao'
                        );
        --
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um XML com os prestador para os filtros informados
    ----------------------------------------------------------------------------
    procedure get_xml_nome_executante   ( p_xml_retorno      out clob
                                        , p_xml_filtro       in  clob
                                        )
    is
        cur_sql                 Varchar2(32000) := '';
        v_cod_retorno           pls_integer;
        v_msg_retorno           varchar2(4000);
    begin
        --
        --
        tab_filtro := ts.top_utl_xml.toCollection(p_xml_filtro, 'parametros');
        --
        --
        --Montar SQL
        cur_sql := trim(' select /*rbm_rcs_previa_ped_reemb.get_xml_nome_executante*/ distinct                       ')
                ||rtrim('          ps.cod_prestador                                                                 ')
                ||rtrim('        , ps.cod_prestador_ts                                                              ')
                ||rtrim('        , ps.nome_prestador                                                                ')
                ||rtrim('        , (case when po.ind_direcionamento = ''S'' then 0 else 1 end) val_direcionamento   ')
                ||rtrim('        , po.ind_divulgacao                                                                ')
                ||rtrim('        , ps.cod_inspetoria_ts                                                             ')
                ||rtrim(' from     prestador_servico          ps                                                    ')
                ||rtrim('        , prestador_operadora        po                                                    ')
                ||rtrim('        , inspetoria                 i                                                     ')
                ||rtrim('        ,( select endp.cod_prestador_ts                                                    ')
                ||rtrim('                , m.sgl_uf                                                                 ')
                ||rtrim('                , endp.cod_municipio                                                       ')
                ||rtrim('                , m.nom_municipio                                                          ')
                ||rtrim('                , endp.seq_endereco                                                        ')
                ||rtrim('                , endp.num_cnes                                                            ')
                ||rtrim('                , endp.end_prestador                                                       ')
                ||rtrim('           from   endereco_prestador endp                                                  ')
                ||rtrim('                , prestador_servico  ps                                                    ')
                ||rtrim('                , municipio          m                                                     ')
                ||rtrim('           where  ps.cod_prestador_ts = endp.cod_prestador_ts                              ')
                ||rtrim('           and    endp.cod_municipio  = m.cod_municipio                                    ')
                ||rtrim('         )ep                                                                               ')
                ||rtrim(' where    ps.cod_prestador_ts     = po.cod_prestador_ts                                    ')
                ||rtrim(' and      ps.cod_prestador_ts     = ep.cod_prestador_ts                                    ')
                ||rtrim(' and      ps.cod_prestador_ts     = ep.cod_prestador_ts                                    ')
                ||rtrim(' and      ps.cod_inspetoria_ts    = i.cod_inspetoria_ts                                    ')
                ||rtrim(' and  (   po.ind_situacao         = ''A''                                                  ')
                ||rtrim('       or po.ind_situacao         = ''E'' and  po.dat_exclusao > trunc(sysdate)            ')
                ||rtrim('      )                                                                                    ')
                ||rtrim(' and      po.cod_operadora        = :codOperadora                                          ')
                ||rtrim(' and      ps.cod_inspetoria_ts    = :codUnidade                                            ')
                || case when tab_filtro.exists( 'codTipoPrestador' ) and tab_filtro( 'codTipoPrestador' ).valor(1) is not null then
                  rtrim(' and      exists                  ( select  null                                           ')
                ||rtrim('                                    from    prestador_tipo           pt                    ')
                ||rtrim('                                    where   pt.cod_prestador_ts      = ps.cod_prestador_ts ')
                ||rtrim('                                    and     pt.cod_operadora         = po.cod_operadora    ')
                ||rtrim('                                    and     pt.cod_tipo_prestador    in ( select /*+cardinality(x,10)*/ x.column_value from table( top_utl_padrao.split(:codTipoPrestador,'','')) x ) ')
                ||rtrim('                                  )                                                        ')
                   else ''
                   end
                || case when tab_filtro.exists( 'nomePrestador' ) and tab_filtro( 'nomePrestador' ).valor(1) is not null then
                  rtrim(' and (   upper(ps.nome_prestador)    like upper(:nomePrestador)  )                         ')
--              ||rtrim('       OR upper(es.nome_razao_social) like upper(:nomePrestador) )                         ')
                   else ''
                   end
                || case when tab_filtro.exists( 'sglUF' ) and tab_filtro( 'sglUF' ).valor(1) is not null then
                  rtrim('  and   ep.sgl_uf               = :sglUF                                                   ')
                   else ''
                   end
                || case when tab_filtro.exists( 'codMunicipio' ) and tab_filtro( 'codMunicipio' ).valor(1) is not null then
                  rtrim('  and   ep.cod_municipio        = :codMunicipio                                            ')
                   else ''
                   end
                || case when tab_filtro.exists( 'codUsuario' ) and tab_filtro( 'codUsuario' ).valor(1) is not null then
                  rtrim(' and i.cod_sucursal in (                                                                             ')
                ||rtrim('                        select apn.val_permitido                                                     ')
                ||rtrim('                        from autorizacao_perfil_nivel apn, perfil_usuario up                         ')
                ||rtrim('                        where cod_tipo_nivel = 10                                                    ')
                ||rtrim('                          and apn.cod_perfil = up.cod_perfil                                         ')
                ||rtrim('                          and up.cod_usuario = ''' || tab_filtro( 'codUsuario' ).valor(1) || '''     ')
                ||rtrim(' )                                                                                                   ')
                  else ''
                end
                ||rtrim(' order by val_direcionamento, ps.nome_prestador                                            ');
        --
        AdicionarParametroSQL ( p_nome_parametro      => 'codOperadora'
                              , p_valor_parametro     => tab_filtro( 'codOperadora' ).valor(1)
                              );
        --
        AdicionarParametroSQL ( p_nome_parametro      => 'codUnidade'
                              , p_valor_parametro     => tab_filtro( 'codUnidade' ).valor(1)
                              );
        --
        if tab_filtro.exists( 'codTipoPrestador' ) and tab_filtro( 'codTipoPrestador' ).valor(1) is not null then
            AdicionarParametroSQL ( p_nome_parametro      => 'codTipoPrestador'
                                  , p_valor_parametro     => tab_filtro( 'codTipoPrestador' ).valor(1)
                                  );
        end if;
        --
        if tab_filtro.exists( 'nomePrestador' ) and tab_filtro( 'nomePrestador' ).valor(1) is not null then
            AdicionarParametroSQL ( p_nome_parametro      => 'nomePrestador'
                                  , p_valor_parametro     => '%' || tab_filtro( 'nomePrestador' ).valor(1) || '%'
                                  );
        end if;
        --
        if tab_filtro.exists( 'sglUF' ) and tab_filtro( 'sglUF' ).valor(1) is not null then
            AdicionarParametroSQL ( p_nome_parametro      => 'sglUF'
                                  , p_valor_parametro     => tab_filtro( 'sglUF' ).valor(1)
                                  );
        end if;
        --
        if tab_filtro.exists( 'codMunicipio' ) and tab_filtro( 'codMunicipio' ).valor(1) is not null then
            AdicionarParametroSQL ( p_nome_parametro      => 'codMunicipio'
                                  , p_valor_parametro     => tab_filtro( 'codMunicipio' ).valor(1)
                                  );
        end if;


        --
        --Montar XML com resultado da pesquisa
        p_xml_retorno := gerar_xml ( p_cod_retorno    => v_cod_retorno
                                   , p_msg_retorno    => v_msg_retorno
                                   , p_sql            => cur_sql
                                   , p_nome_cabecalho => 'prestador'
                                   , p_nome_coluna    => 'dados'
                                   );
        --
        return;
        --
    exception
    when others then
        --
        ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                        , 999
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || ts.ts_util.msgerro || chr(13) || cur_sql  || chr(13) || p_xml_filtro
                        , 'get_xml_nome_executante'
                        );
        --
        p_xml_retorno := '<prestador>'
                      || '<dados>'
                      || '<msg_erro>' || ts.ts_util.msgerro || '</msg_erro>'
                      || '</dados>'
                      || '</prestador>';
        return;
    end;
    --
    --
    ----------------------------------------------------------------------------
    -- Retornar um XML com os usuários do TS
    ----------------------------------------------------------------------------
    procedure RetornaXMLTabela  ( p_xml_retorno      out clob
                                , p_cod_retorno      out number
                                , p_msg_retorno      out varchar2
                                , p_nome_tabela      in  varchar2
                                , p_campo_01         in  varchar2
                                , p_campo_02         in  varchar2
                                )
    is
        str_Sql                 Varchar2(4000) := '';
        str_Xml                 clob;
    begin
        --
        p_cod_retorno := 0;
        p_msg_retorno := '';
        --
        --Montar SQL
        --
        str_Sql := '';
        str_Sql := str_Sql || ' select ' || p_campo_01 || ',' || p_campo_02;
        str_Sql := str_Sql || ' from   ' || p_nome_tabela;
        str_Sql := str_Sql || ' where rownum < 2000';
        --
        --Montar XML com resultado da pesquisa
        str_Xml := gerar_xml ( p_cod_retorno    => p_cod_retorno
                            , p_msg_retorno    => p_msg_retorno
                            , p_sql            => str_Sql
                            , p_nome_cabecalho => upper(p_nome_tabela)
                            , p_nome_coluna    => 'DADOS'
                            );
        --
        if p_cod_retorno = 0 then p_xml_retorno := str_Xml;
        end if;
        --
        return;
        --
    exception
    when others then
        --
        p_cod_retorno := 9;
        p_msg_retorno := 'Ocorreu o seguinte erro: ' || sqlerrm || ' ( ' || ts.ts_util.msgerro  || ' )';
        --
        ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                        , 999
                        , 'Erro não previsto'
                        , 'Erro:' || chr(13) || ts.ts_util.msgerro
                        , 'RetornaXMLTabela'
                        );
        --
    end;
    --
    --
    --------------------------------------------------------------------------------
    -- Retornar um cursor com a situação de Pedidos
    --------------------------------------------------------------------------------
    function get_pedidos  ( p_ind_alterar   in varchar2
                          , p_cod_usuario   in varchar2
                          )
    return sys_refcursor
    is
        cur                         sys_refcursor;
    begin
      --
        open cur
            for
              select ind_situacao, nome_situacao, sgl_situacao
              from ts.reembolso_previa_situacao
              where ind_alterar = p_ind_alterar;


      return cur;
      --
    exception
    when others then
        --
        ts_log_execucao ('rbm_rcs_previa_ped_reemb'
                        , 'get_pedidos'
                        , sqlerrm
                        , 'p_cod_usuario = ' || p_cod_usuario || chr(13)
                        , 'Erro'
                        );
        --
        return get_cursor_vazio;
    end;
    --
    --
  ----------------------------------------------------------------------------
  -- Retornar um XML com o resultado da pesquisa da tela de situação
  ----------------------------------------------------------------------------
  procedure get_xml_pesquisa_situacao ( p_xml_resultado  out clob
                                      , p_cod_retorno    out number
                                      , p_msg_retorno    out varchar2
                                      , p_xml_filtro     in clob
                                      )
      is
          str_Sql               Varchar2(32000) := '';
          str_Xml               clob;
          tab_filtro            top_utl_xml.tbl_fields;
          v_qtd_max_linha       number;
      begin
          --
          p_cod_retorno := 0;
          p_msg_retorno := '';
          --
          v_qtd_max_linha := to_number(get_controle_sistema( 'AT_QTD_MAX_SITUACAO', '500'));
          --
          --Passar o XML informado para uma coleção
          tab_filtro := top_utl_xml.toCollection(p_xml_filtro);
          --
          if not tab_filtro.exists('COD_SUCURSAL'            ) then tab_filtro( 'COD_SUCURSAL'              ).valor(1) := null; end if;
          if not tab_filtro.exists('COD_INSPETORIA_TS'       ) then tab_filtro( 'COD_INSPETORIA_TS'         ).valor(1) := null; end if;
          if not tab_filtro.exists('COD_OPERADORA'           ) then tab_filtro( 'COD_OPERADORA'             ).valor(1) := null; end if;
          if not tab_filtro.exists('COD_USUARIO_LOGADO'      ) then tab_filtro( 'COD_USUARIO_LOGADO'        ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_ORDENACAO_1'         ) then tab_filtro( 'IND_ORDENACAO_1'           ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_ORDENACAO_2'         ) then tab_filtro( 'IND_ORDENACAO_2'           ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_ORDENACAO_3'         ) then tab_filtro( 'IND_ORDENACAO_3'           ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_ORDENACAO_4'         ) then tab_filtro( 'IND_ORDENACAO_4'           ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_ORDENACAO_5'         ) then tab_filtro( 'IND_ORDENACAO_5'           ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_SITUACAO_S'          ) then tab_filtro( 'IND_SITUACAO_S'            ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_SITUACAO_N'          ) then tab_filtro( 'IND_SITUACAO_N'            ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_ABRANGENCIA'         ) then tab_filtro( 'IND_ABRANGENCIA'           ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_ORIGEM'              ) then tab_filtro( 'IND_ORIGEM'                ).valor(1) := null; end if;
          if not tab_filtro.exists('DT_INI_PENDENTE'         ) then tab_filtro( 'DT_INI_PENDENTE'           ).valor(1) := null; end if;
          if not tab_filtro.exists('DT_FIM_PENDENTE'         ) then tab_filtro( 'DT_FIM_PENDENTE'           ).valor(1) := null; end if;
          if not tab_filtro.exists('NUM_CONTRATO'            ) then tab_filtro( 'NUM_CONTRATO'              ).valor(1) := null; end if;
          if not tab_filtro.exists('COD_TS_CONTRATO'         ) then tab_filtro( 'COD_TS_CONTRATO'           ).valor(1) := null; end if;
          if not tab_filtro.exists('COD_USUARIO_INCLUSAO'    ) then tab_filtro( 'COD_USUARIO_INCLUSAO'      ).valor(1) := null; end if;
          if not tab_filtro.exists('NUM_ASSOCIADO'           ) then tab_filtro( 'NUM_ASSOCIADO'             ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_TIPO_REEMBOLSO'      ) then tab_filtro( 'IND_TIPO_REEMBOLSO'        ).valor(1) := null; end if;
          if not tab_filtro.exists('NUM_INSC_FISCAL'         ) then tab_filtro( 'NUM_INSC_FISCAL'           ).valor(1) := null; end if;
          if not tab_filtro.exists('SIGLA_CONSELHO'          ) then tab_filtro( 'SIGLA_CONSELHO'            ).valor(1) := null; end if;
          if not tab_filtro.exists('NUM_CRO'                 ) then tab_filtro( 'NUM_CRO'                   ).valor(1) := null; end if;
          if not tab_filtro.exists('SGL_UF_CONSELHO'         ) then tab_filtro( 'SGL_UF_CONSELHO'           ).valor(1) := null; end if;
          if not tab_filtro.exists('COD_TRATAMENTO'          ) then tab_filtro( 'COD_TRATAMENTO'            ).valor(1) := null; end if;
          if not tab_filtro.exists('DT_INI_PREVISAO'         ) then tab_filtro( 'DT_INI_PREVISAO'           ).valor(1) := null; end if;
          if not tab_filtro.exists('DT_FIM_PREVISAO'         ) then tab_filtro( 'DT_FIM_PREVISAO'           ).valor(1) := null; end if;
          if not tab_filtro.exists('DT_INI_ANALISADO'        ) then tab_filtro( 'DT_INI_ANALISADO'          ).valor(1) := null; end if;
          if not tab_filtro.exists('DT_FIM_ANALISADO'        ) then tab_filtro( 'DT_FIM_ANALISADO'          ).valor(1) := null; end if;
          if not tab_filtro.exists('COD_GRUPO_ENCAMINHAMENTO') then tab_filtro( 'COD_GRUPO_ENCAMINHAMENTO'  ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_TIPO_PESQ_GRUPO'     ) then tab_filtro( 'IND_TIPO_PESQ_GRUPO'       ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_PENDENTES'           ) then tab_filtro( 'IND_PENDENTES'             ).valor(1) := null; end if;
          if not tab_filtro.exists('IND_ANALISADOS'          ) then tab_filtro( 'IND_ANALISADOS'            ).valor(1) := null; end if;
          if not tab_filtro.exists('COD_ORIGEM'              ) then tab_filtro( 'COD_ORIGEM'                ).valor(1) := null; end if;
          if not tab_filtro.exists('COD_MOTIVO_REEMBOLSO'    ) then tab_filtro( 'COD_MOTIVO_REEMBOLSO'      ).valor(1) := null; end if;
          if not tab_filtro.exists('QTD_PRAZO_AB'            ) then tab_filtro( 'QTD_PRAZO_AB'              ).valor(1) := null; end if;
          if not tab_filtro.exists('DIAS_QTD_PRAZO_AB'       ) then tab_filtro( 'DIAS_QTD_PRAZO_AB'         ).valor(1) := null; end if;
          if not tab_filtro.exists('QTD_PRAZO_AN'            ) then tab_filtro( 'QTD_PRAZO_AN'              ).valor(1) := null; end if;
          if not tab_filtro.exists('DIAS_QTD_PRAZO_AN'       ) then tab_filtro( 'DIAS_QTD_PRAZO_AN'         ).valor(1) := null; end if;

          --
          --Montar SQL

          str_Sql := str_Sql || '        select                                                                                                         ';

          str_Sql := str_Sql || '           s_p.cod_sucursal    cod_sucursal_prestador    , s_p.nome_sucursal   nome_sucursal_prestador                 ';
          str_Sql := str_Sql || '           ,trunc(a.dt_inclusao) -  (trunc(sysdate)- nvl(a.qtd_dias_reembolso,0)) dias_limite_termino ';
          str_Sql := str_Sql || '           , i_p.cod_inspetoria  cod_inspetoria_prestador  , i_p.nome_inspetoria nome_inspetoria_prestador             ';
          str_Sql := str_Sql || '           , s_b.cod_sucursal    cod_sucursal_benef        , s_b.nome_sucursal   nome_sucursal_benef                   ';
          str_Sql := str_Sql || '           , i_b.cod_inspetoria  cod_inspetoria_benef      , i_b.nome_inspetoria nome_inspetoria_benef                 ';
          str_Sql := str_Sql || '           , o_b.cod_operadora   cod_operadora_benef       , o_b.nom_operadora   nom_operadora_benef                   ';
          str_Sql := str_Sql || '           , nvl(a.num_reembolso_ans,a.num_reembolso) num_reembolso      , t_r.nome_tipo_reembolso                                   ';
          str_Sql := str_Sql || '           , a.ind_situacao                                , a.cod_origem                                              ';
          str_Sql := str_Sql || '           , a.cod_ts                                      , a.num_associado                                           ';
          str_Sql := str_Sql || '           , a.nome_associado                              , p.nome_produto                                            ';
          str_Sql := str_Sql || '           , a_sit.ind_alterar                             , a.cod_usuario_inclusao                                    ';
          str_Sql := str_Sql || '           , a_sit.ind_cancelar IND_OUTROS_CANCELA                                                                     ';
          str_Sql := str_Sql || '           , u_inc.nom_usuario nome_usuario_inclusao       , a_sit.nome_situacao, a_sit.sgl_situacao                   ';
          str_Sql := str_Sql || '           , to_char(sysdate,''dd/mm/yyyy'')               data_atual                                                  ';
          str_Sql := str_Sql || '           , to_char(a.dt_inclusao,''dd/mm/yyyy'')    data_solicitacao                                                 ';
          str_Sql := str_Sql || '           , to_char(a.dt_sit,''dd/mm/yyyy'')       data_situacao                                                      ';
          str_Sql := str_Sql || '           , to_char(a.dt_analise,''dd/mm/yyyy hh24:mi'')   dt_inicio_analise                                          ';
          str_Sql := str_Sql || '           , a.dt_inclusao                  data_solicitacao_ordenacao                                                 ';
          str_Sql := str_Sql || '           , a.dt_sit            data_situacao_ordenacao                                                               ';
          str_Sql := str_Sql || '           , a.dt_devolucao                                                                                            ';
          str_Sql := str_Sql || '           , to_char(a.val_calculado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_calculado       ';
          str_Sql := str_Sql || '           , to_char(a.val_aprovado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'')   val_aprovado         ';
          str_Sql := str_Sql || '           , to_char(a.val_reembolsado,''FM999G999G999G990D00'',''nls_numeric_characters='''',.'') val_reembolsado     ';
          str_Sql := str_Sql || '           ,a.qtd_dias_reembolso prazo_ordenacao                                                                       ';
          str_Sql := str_Sql || '           ,t_r.nome_tipo_reembolso modalidade_ordenacao                                                               ';
          str_Sql := str_Sql || '           ,p.nome_produto        grupo_produto_ordenacao                                                              ';
          str_Sql := str_Sql || '           ,a.dt_devolucao        dt_pgto_ordenacao                                                                    ';
          str_Sql := str_Sql || '           ,a.val_calculado   valor_solicitado_ordenacao                                                               ';
          str_Sql := str_Sql || '           ,a.cod_plano          plano_ordenacao                                                                       ';
          str_Sql := str_Sql || '           ,a.cod_plano,         a.qtd_dias_reembolso, a.dt_devolucao                                                  ';
          str_Sql := str_Sql || '           ,pm.nome_plano,       m_r.desc_motivo_reembolso                                                             ';
          str_Sql := str_Sql || '           ,(select aut.num_pedido from ts.autorizacao aut where aut.num_pedido = a.num_internacao) as num_pedido                                                                                            ';
          str_Sql := str_Sql || '           ,(select aut_sit.nom_situacao from ts.autorizacao aut, ts.autorizacao_situacao aut_sit where aut.num_pedido = a.num_internacao and aut.cod_situacao = aut_sit.cod_situacao) as nom_situacao ';
          str_Sql := str_Sql || ' ,(SELECT CASE ';
          str_Sql := str_Sql || '           WHEN EXISTS ( ';
          str_Sql := str_Sql || '               SELECT 1 ';
          str_Sql := str_Sql || '               FROM PEDIDO_REEMBOLSO_PREVIA pr ';
          str_Sql := str_Sql || '               WHERE pr.IND_SITUACAO IN (2, 3, 4) AND pr.num_reembolso = a.num_reembolso ';
          str_Sql := str_Sql || '           ) THEN NULL ';
          str_Sql := str_Sql || '           ELSE ( ';
          str_Sql := str_Sql || '               SELECT CASE ';
          str_Sql := str_Sql || '                         WHEN COUNT(*) = SUM(CASE WHEN ai.IND_SITUACAO IN (''A'' , ''N'' , ''C'') THEN 1 ELSE 0 END) ';
          str_Sql := str_Sql || '                         THEN ''SIM'' ';
          str_Sql := str_Sql || '                         ELSE ''NÃO'' ';
          str_Sql := str_Sql || '                       END ';
          str_Sql := str_Sql || '               FROM AUTORIZACAO_ITEM ai ';
          str_Sql := str_Sql || '               WHERE ai.NUM_PEDIDO = a.NUM_INTERNACAO ';
          str_Sql := str_Sql || '           ) ';
          str_Sql := str_Sql || '       END ';
          str_Sql := str_Sql || ' FROM DUAL) AS PROCEDIMENTO_APROVADO ';

          str_Sql := str_Sql || '       from   tipo_tratamento              tt                                                                          ';
          str_Sql := str_Sql || '           , reembolso_previa_situacao    a_sit                                                                        ';
          str_Sql := str_Sql || '           , usuario                      u_inc                                                                        ';
          str_Sql := str_Sql || '           , usuario                      u_ana                                                                        ';
          str_Sql := str_Sql || '           , operadora                    o_b                                                                          ';
          str_Sql := str_Sql || '           , sucursal                     s_b                                                                          ';
          str_Sql := str_Sql || '           , inspetoria                   i_b                                                                          ';
          str_Sql := str_Sql || '           , sucursal                     s_p                                                                          ';
          str_Sql := str_Sql || '           , inspetoria                   i_p                                                                          ';
          str_Sql := str_Sql || '           , tipo_reembolso               t_r                                                                          ';
          str_Sql := str_Sql || '           , produto                      p                                                                            ';
          str_Sql := str_Sql || '           , plano_medico                 pm                                                                           ';
          str_Sql := str_Sql || '           , motivo_reembolso             m_r                                                                          ';
          str_Sql := str_Sql || '           ,( select a.* from pedido_reembolso_previa a) a                                                             ';
          str_Sql := str_Sql || '       where   a.cod_operadora_contrato          = o_b.cod_operadora(+)                                                ';
          str_Sql := str_Sql || '           and   a.cod_inspetoria_ts_contrato = i_b.cod_inspetoria_ts(+)                                              ';
          str_Sql := str_Sql || '           and   i_b.cod_sucursal         = s_b.cod_sucursal(+)                                                        ';
          str_Sql := str_Sql || '           and    a.cod_inspetoria_ts_abertura = i_p.cod_inspetoria_ts(+)                                              ';
          str_Sql := str_Sql || '           and   i_p.cod_sucursal         = s_p.cod_sucursal(+)                                                        ';
          str_Sql := str_Sql || '           and    a.cod_tratamento         = tt.cod_tratamento(+)                                                      ';
          str_Sql := str_Sql || '           and     a.ind_situacao           = a_sit.ind_situacao(+)                                                    ';
          str_Sql := str_Sql || '           and     a.cod_usuario_inclusao   = u_inc.cod_usuario(+)                                                     ';
          str_Sql := str_Sql || '           and     a.cod_usuario_analise    = u_ana.cod_usuario(+)                                                     ';
          str_Sql := str_Sql || '           and     a.ind_tipo_reembolso     = t_r.ind_tipo_reembolso(+)                                                ';
          str_Sql := str_Sql || '           and     a.cod_plano              = pm.cod_plano (+)                                                         ';
          str_Sql := str_Sql || '           and     pm.cod_produto           = p.cod_produto (+)                                                        ';
          str_Sql := str_Sql || '           and     a.cod_motivo_reembolso       =  m_r.cod_motivo_reembolso   (+)                                      ';

          --
          if (tab_filtro( 'IND_PENDENTES' ).valor(1)) <> 'N' then
            if instr(tab_filtro( 'IND_SITUACAO_S' ).valor(1),',') > 0 then
                str_Sql := str_Sql || ' and   a.ind_situacao in (' ||tab_filtro( 'IND_SITUACAO_S' ).valor(1) || ')';


            else
                str_Sql := str_Sql || ' and   a.ind_situacao = :ind_situacao ';

                add_parametro_sql ( p_nome_parametro => 'ind_situacao' , p_valor_parametro => tab_filtro( 'IND_SITUACAO_S' ).valor(1));

            end if;
            --
            if  isDate(tab_filtro( 'DT_INI_PENDENTE' ).valor(1)) and isDate(tab_filtro( 'DT_FIM_PENDENTE' ).valor(1)) then
                --
                str_Sql := str_Sql || ' and trunc(a.dt_inclusao) between :data_ini and :data_fim';
                --
                add_parametro_sql ( p_nome_parametro  => 'data_ini' , p_valor_parametro => tab_filtro( 'DT_INI_PENDENTE' ).valor(1) , p_tipo_parametro => 'D');
                add_parametro_sql ( p_nome_parametro  => 'data_fim' , p_valor_parametro => tab_filtro( 'DT_FIM_PENDENTE' ).valor(1) , p_tipo_parametro => 'D');
                --
            elsif  isDate(tab_filtro( 'DT_INI_PENDENTE' ).valor(1)) then
                --
                str_Sql := str_Sql || ' and a.dt_inclusao >= :data_ini';
                add_parametro_sql ( p_nome_parametro  => 'data_ini' , p_valor_parametro => tab_filtro( 'DT_INI_PENDENTE' ).valor(1) , p_tipo_parametro => 'D');
                --
            elsif  isDate(tab_filtro( 'DT_FIM_PENDENTE' ).valor(1)) then
                --
                str_Sql := str_Sql || ' and a.dt_inclusao <= :data_fim';
                add_parametro_sql ( p_nome_parametro  => 'data_fim' , p_valor_parametro => tab_filtro( 'DT_FIM_PENDENTE' ).valor(1) , p_tipo_parametro => 'D');
                --
            end if;
            --
            if tab_filtro( 'QTD_PRAZO_AB' ).valor(1) is not null then
                if tab_filtro( 'QTD_PRAZO_AB' ).valor(1) = '2' then
                   str_Sql := str_Sql || ' and a.qtd_dias_reembolso <= 2';
                elsif tab_filtro( 'QTD_PRAZO_AB' ).valor(1) = '3'  then
                   str_Sql := str_Sql || ' and a.qtd_dias_reembolso <= :dias_qtd_prazo_ab';
                   add_parametro_sql ( p_nome_parametro => 'dias_qtd_prazo_ab' , p_valor_parametro => tab_filtro( 'DIAS_QTD_PRAZO_AB' ).valor(1) );
                end if;
            end if;
            --
          end if;
          --
          if (tab_filtro( 'IND_ANALISADOS' ).valor(1)) <> 'N' then


            if instr(tab_filtro( 'IND_SITUACAO_N' ).valor(1),',') > 0 then
                   str_Sql := str_Sql || ' and   a.ind_situacao in (' ||tab_filtro( 'IND_SITUACAO_N' ).valor(1) || ')';
                 --
            else
                str_Sql := str_Sql || ' and   a.ind_situacao = :ind_situacao ';

                add_parametro_sql ( p_nome_parametro => 'ind_situacao' , p_valor_parametro => tab_filtro( 'IND_SITUACAO_N' ).valor(1));
                --
            end if;
            --
            if  isDate(tab_filtro( 'DT_INI_ANALISADO' ).valor(1)) and isDate(tab_filtro( 'DT_FIM_ANALISADO' ).valor(1)) then
                --
                str_Sql := str_Sql || ' and trunc(a.dt_sit) between :data_ini and :data_fim';
                --
                add_parametro_sql ( p_nome_parametro  => 'data_ini' , p_valor_parametro => tab_filtro( 'DT_INI_ANALISADO' ).valor(1) , p_tipo_parametro => 'D');
                add_parametro_sql ( p_nome_parametro  => 'data_fim' , p_valor_parametro => tab_filtro( 'DT_FIM_ANALISADO' ).valor(1) , p_tipo_parametro => 'D');
                --
            elsif  isDate(tab_filtro( 'DT_INI_ANALISADO' ).valor(1)) then
                --
                str_Sql := str_Sql || ' and a.dt_sit >= :data_ini';
                add_parametro_sql ( p_nome_parametro  => 'data_ini' , p_valor_parametro => tab_filtro( 'DT_INI_ANALISADO' ).valor(1) , p_tipo_parametro => 'D');
                --
            elsif  isDate(tab_filtro( 'DT_FIM_ANALISADO' ).valor(1)) then
                --
                str_Sql := str_Sql || ' and a.dt_sit <= :data_fim';
                add_parametro_sql ( p_nome_parametro  => 'data_fim' , p_valor_parametro => tab_filtro( 'DT_FIM_ANALISADO' ).valor(1) , p_tipo_parametro => 'D');
                --
            end if;
            --
            if tab_filtro( 'QTD_PRAZO_AN' ).valor(1) is not null then
                if tab_filtro( 'QTD_PRAZO_AN' ).valor(1) = '2' then
                   str_Sql := str_Sql || ' and a.qtd_dias_reembolso <= 2';
                elsif tab_filtro( 'QTD_PRAZO_AN' ).valor(1) = '3'  then
                   str_Sql := str_Sql || ' and a.qtd_dias_reembolso <= :dias_qtd_prazo_an';
                   add_parametro_sql ( p_nome_parametro => 'dias_qtd_prazo_an' , p_valor_parametro => tab_filtro( 'DIAS_QTD_PRAZO_AN' ).valor(1) );
                end if;
            end if;
            --
          end if;
          --

          if instr(tab_filtro( 'COD_GRUPO_ENCAMINHAMENTO' ).valor(1),',') is not null then
--              str_Sql := str_Sql || ' and p_r_p_g.cod_grupo_previa in ( select column_value from table( top_utl_padrao.split(:cod_grupo_encaminhamento,'',''))) '; --Este não funcionou no XML
            if  nvl(tab_filtro( 'IND_TIPO_PESQ_GRUPO' ).valor(1),1) = 1 then
                str_Sql := str_Sql || ' and a.num_reembolso in (select num_reembolso from pedido_reembolso_previa_grupo x  where  a.num_reembolso = x.num_reembolso and nvl(ind_situacao,1) = 1 and cod_grupo_previa in ( select column_value from table( top_utl_padrao.split(:cod_grupo_encaminhamento,'',''))) )  ';
            else
                str_Sql := str_Sql || ' and a.num_reembolso in (select num_reembolso from pedido_reembolso_previa_grupo x  where  a.num_reembolso = x.num_reembolso and nvl(ind_situacao,1) = 2 and cod_grupo_previa in ( select column_value from table( top_utl_padrao.split(:cod_grupo_encaminhamento,'',''))) )  ';
            end if;
            --
            add_parametro_sql ( p_nome_parametro => 'cod_grupo_encaminhamento' , p_valor_parametro => tab_filtro( 'COD_GRUPO_ENCAMINHAMENTO' ).valor(1) );
            --
          end if;
           if  tab_filtro( 'COD_USUARIO_INCLUSAO' ).valor(1) is not null then
              str_Sql := str_Sql || ' and a.cod_usuario_inclusao = :cod_usuario_inclusao';
              add_parametro_sql ( p_nome_parametro => 'cod_usuario_inclusao' , p_valor_parametro => tab_filtro( 'COD_USUARIO_INCLUSAO' ).valor(1) );
              --
          end if;
          --
          --
          if  tab_filtro( 'COD_TS_CONTRATO' ).valor(1) is not null then
              str_Sql := str_Sql || ' and a.cod_ts_contrato = :cod_ts_contrato';
              add_parametro_sql ( p_nome_parametro => 'cod_ts_contrato' , p_valor_parametro => tab_filtro( 'COD_TS_CONTRATO' ).valor(1) );
              --
          end if;
          --
          --
          if  tab_filtro( 'NUM_CONTRATO' ).valor(1) is not null then
              str_Sql := str_Sql || ' and a.num_contrato = :cod_ts_contrato';
              add_parametro_sql ( p_nome_parametro => 'num_contrato' , p_valor_parametro => tab_filtro( 'NUM_CONTRATO' ).valor(1) );
              --
          end if;
          --
          --
          -- Associado
          if tab_filtro( 'NUM_ASSOCIADO' ).valor(1) is not null then
              str_Sql := str_Sql || ' and a.num_associado = :num_associado';
              add_parametro_sql ( p_nome_parametro => 'num_associado' , p_valor_parametro => tab_filtro( 'NUM_ASSOCIADO' ).valor(1) );
          end if;
          --
          if tab_filtro( 'IND_TIPO_REEMBOLSO' ).valor(1) is not null then
              str_Sql := str_Sql || ' and a.ind_tipo_reembolso = :ind_tipo_reembolso';
              add_parametro_sql ( p_nome_parametro => 'ind_tipo_reembolso' , p_valor_parametro => tab_filtro( 'IND_TIPO_REEMBOLSO' ).valor(1) );
          end if;
          if tab_filtro( 'COD_MOTIVO_REEMBOLSO' ).valor(1) is not null then
              str_Sql := str_Sql || ' and a.cod_motivo_reembolso = :cod_motivo_reembolso';
              add_parametro_sql ( p_nome_parametro => 'cod_motivo_reembolso' , p_valor_parametro => tab_filtro( 'COD_MOTIVO_REEMBOLSO' ).valor(1) );
          end if;
          if tab_filtro( 'COD_ORIGEM' ).valor(1) is not null then
              str_Sql := str_Sql || ' and a.cod_origem = :cod_origem';
              add_parametro_sql ( p_nome_parametro => 'cod_origem' , p_valor_parametro => tab_filtro( 'COD_ORIGEM' ).valor(1) );
          end if;
          --
          -- FILIAL

          if nvl(tab_filtro( 'IND_ABRANGENCIA' ).valor(1),'N') != 'N' then
              if tab_filtro( 'IND_ORIGEM' ).valor(1) = 'A' then

                  if tab_filtro( 'COD_SUCURSAL' ).valor(1) is not null  then

                        if instr(tab_filtro( 'COD_SUCURSAL' ).valor(1),',') > 0 then
                            str_Sql := str_Sql || ' and   s_p.cod_sucursal in (' ||tab_filtro( 'COD_SUCURSAL' ).valor(1) || ')';
                        else
                            str_Sql := str_Sql || ' and   s_p.cod_sucursal = :cod_sucursal ';

                            add_parametro_sql ( p_nome_parametro => 'cod_sucursal' , p_valor_parametro => tab_filtro( 'COD_SUCURSAL' ).valor(1));

                        end if;

                  end if;

                  str_Sql := str_Sql || ' and ' || get_str_where_in( case when tab_filtro( 'COD_INSPETORIA_TS' ).valor(1) is not null then nvl(tab_filtro( 'COD_INSPETORIA_TS' ).valor(1), 0)
                                                                      else     get_in_unidade_usuario  (tab_filtro('COD_USUARIO_LOGADO').valor(1))
                                                                 end
                                                               , 'cod_inspetoria_ts_abertura');
              else

                  if tab_filtro( 'COD_SUCURSAL' ).valor(1) is not null  then

                        if instr(tab_filtro( 'COD_SUCURSAL' ).valor(1),',') > 0 then
                            str_Sql := str_Sql || ' and   s_b.cod_sucursal in (' ||tab_filtro( 'COD_SUCURSAL' ).valor(1) || ')';
                        else
                            str_Sql := str_Sql || ' and   s_b.cod_sucursal = :cod_sucursal ';

                            add_parametro_sql ( p_nome_parametro => 'cod_sucursal' , p_valor_parametro => tab_filtro( 'COD_SUCURSAL' ).valor(1));

                        end if;

                 end if;
                 str_Sql := str_Sql || ' and ' || get_str_where_in( case when tab_filtro( 'COD_INSPETORIA_TS' ).valor(1) is not null then nvl(tab_filtro( 'COD_INSPETORIA_TS' ).valor(1), 0)
                                                                      else                                                                                                                          get_in_unidade_usuario  (tab_filtro('COD_USUARIO_LOGADO').valor(1))
                                                                 end
                                                               , 'cod_inspetoria_ts_contrato');
              end if;

          end if;
          --
          -- OPERADORA
          --
          --
          str_Sql := str_Sql || ' and ' || get_str_where_in( case when nvl(tab_filtro( 'COD_OPERADORA' ).valor(1),'X') <> 'X' then nvl(tab_filtro( 'COD_OPERADORA' ).valor(1), '0')
                                                                  else                                                             get_in_operadora_usuario(tab_filtro('COD_USUARIO_LOGADO').valor(1))
                                                             end
                                                             , 'cod_operadora_contrato');


          str_Sql := str_Sql || ' order by ';
          --
          --Montar Order by de acordo com os parametros informados
          if  tab_filtro( 'IND_ORDENACAO_1' ).valor(1) = '' then
              --
              str_Sql := str_Sql || get_order_by ( p_ind_ordenacao  => '' , p_tipo_ordenacao => 'DESC' );
              --
          else


              str_Sql := str_Sql || get_order_by ( p_ind_ordenacao  => tab_filtro( 'IND_ORDENACAO_1' ).valor(1) , p_tipo_ordenacao => 'ASC' );
              --
              if tab_filtro( 'IND_ORDENACAO_2' ).valor(1) is not null and tab_filtro( 'IND_ORDENACAO_2' ).valor(1) <> '' then
                  str_Sql := str_Sql || ',' || get_order_by ( p_ind_ordenacao  => tab_filtro( 'IND_ORDENACAO_2' ).valor(1) , p_tipo_ordenacao => 'DESC' );
              end if;
              --
              if tab_filtro( 'IND_ORDENACAO_3' ).valor(1) is not null and tab_filtro( 'IND_ORDENACAO_3' ).valor(1) <> '' then
                  str_Sql := str_Sql || ',' || get_order_by ( p_ind_ordenacao  => tab_filtro( 'IND_ORDENACAO_3' ).valor(1) , p_tipo_ordenacao => 'DESC' );
              end if;
              --
              if tab_filtro( 'IND_ORDENACAO_4' ).valor(1) is not null and tab_filtro( 'IND_ORDENACAO_4' ).valor(1) <> '' then
                  str_Sql := str_Sql || ',' || get_order_by ( p_ind_ordenacao  => tab_filtro( 'IND_ORDENACAO_4' ).valor(1) , p_tipo_ordenacao => 'DESC' );
              end if;
              --
              if tab_filtro( 'IND_ORDENACAO_5' ).valor(1) is not null and tab_filtro( 'IND_ORDENACAO_5' ).valor(1) <> '' then
                  str_Sql := str_Sql || ',' || get_order_by ( p_ind_ordenacao  => tab_filtro( 'IND_ORDENACAO_5' ).valor(1) , p_tipo_ordenacao => 'DESC' );
              end if;
              --
          end if;
          --
          /*
          ts_log_execucao ( 'rbm_rcs_previa_ped_reemb'
                              , 9
                              , 'Erro não previsto'
                              , str_Sql || chr(13) || p_xml_filtro
                              , 'get_xml_pesquisa_situacao'
                              );
          */
          --Montar XML com resultado da pesquisa
          str_Xml := gerar_xml ( p_cod_retorno    => p_cod_retorno
                             , p_msg_retorno    => p_msg_retorno
                             , p_sql            => str_Sql
                             , p_nome_cabecalho => 'TOTALIZADOR'
                             , p_nome_coluna    => 'DADOS'
                             );
          --

          p_xml_resultado := str_Xml;
          --
          return;
          --
      exception
          when no_data_found then
              --
              p_cod_retorno := 9;
              p_msg_retorno := 'Nenhum pedido foi encontrado';

          when others then
              --
              p_cod_retorno := 9;
              p_msg_retorno := 'Erro ao executar odo_rbo_rcs_pedido_reembolso.get_xml_pesquisa_situacao : Ocorreu o seguinte erro: ' || sqlerrm || ' ( ' || top_utl_padrao.msgerro || ' )';
              --
              ts_log_execucao ( 'rbm_rcs_previa_ped_reemb' --'odo_rbo_rcs_pedido_reembolso'
                              , 9
                              , 'Erro não previsto'
                              , 'Erro:' || chr(13) || top_utl_padrao.msgerro
                                        || chr(13) || 'XML Filtro:' || p_xml_filtro
                                        || chr(13) || 'SQL       :' || str_Sql
                              , 'get_xml_pesquisa_situacao'
                              );
              --
      end;
  --
  --
  ---------------------------------------------------------------------------
  -- Retorar um cursor usuário informado
  ------------------------------------------------------------------------------
  function get_rs_grupo_usuario ( p_cod_usuario   in varchar2 , p_num_pedido  in varchar2 default null) return sys_refcursor
  is
      result              sys_refcursor;
      str_sql             varchar2(32000);
      v_cod_tipo_usuario  pls_integer;
  begin
      --
      if  p_cod_usuario is null then
          raise_application_error( -20001 , 'Código não informado' );
      end if;
      --
      begin
          select cod_tipo_usuario
          into   v_cod_tipo_usuario
          from   usuario
          where  cod_usuario            = upper(p_cod_usuario);
      exception
      when others then
          null;
      end;
      --
      str_sql :=  rtrim (' select  a.cod_grupo_encaminhamento                                                                                                 ')
              ||  rtrim ('       , a.nom_grupo                                                                                                                ')
              ||  rtrim ('       , b.cod_usuario                                                                                                              ')
              ||  rtrim ('       , decode(b.cod_usuario,null,'''',''CHECKED'') ind_usuario                                                                    ')
              ||  rtrim ('       , a.ind_inativo                                                                                                              ')
              ||  rtrim (' from   grupo_analise    a                                                                                                          ')
              ||  rtrim ('      , usuario_analise  b                                                                                                          ')
              ||  rtrim (' where  a.cod_grupo_encaminhamento   = b.cod_grupo_encaminhamento (+)                                                               ')
              ||  rtrim (' and    b.cod_usuario(+)             = :cod_usuario                                                                                 ')
              ||  rtrim (' and    exists (select null                                                                                                         ')
              ||  rtrim ('                from   grupo_analise_filial                                                                                         ')
              ||  rtrim ('                where  cod_grupo_encaminhamento = a.cod_grupo_encaminhamento                                                        ')
              ||  rtrim ('                and  ( cod_sucursal        in ( select apn.val_permitido                                                            ')
              ||  rtrim ('                                                from   autorizacao_perfil_nivel  apn                                                ')
              ||  rtrim ('                                                where  apn.cod_tipo_nivel        =  ''10''                                          ')
              ||  rtrim ('                                                and (  exists                   (select null                                        ')
              ||  rtrim ('                                                                                 from   perfil_usuario      pu                      ')
              ||  rtrim ('                                                                                 where  pu.cod_usuario      = :cod_usuario          ')
              ||  rtrim ('                                                                                 and    pu.cod_perfil       = apn.cod_perfil        ')
              ||  rtrim ('                                                                                )                                                   ')
              ||  rtrim ('                                                    or exists                   (select null                                        ')
              ||  rtrim ('                                                                                 from   perfil_tipo_usuario pu                      ')
              ||  rtrim ('                                                                                 where  pu.cod_tipo_usuario = :cod_tipo_usuario     ')
              ||  rtrim ('                                                                                 and    pu.cod_perfil       = apn.cod_perfil        ')
              ||  rtrim ('                                                                                )                                                   ')
              ||  rtrim ('                                                    )                                                                               ')
              ||  rtrim ('                                              )                                                                                     ')
              ||  rtrim ('                or        not exists             (select null                                                                       ')
              ||  rtrim ('                                                  from   autorizacao_perfil_nivel apn2                                              ')
              ||  rtrim ('                                                  where  apn2.cod_tipo_nivel      = ''10''                                          ')
              ||  rtrim ('                                                  and (  exists                   (select null                                      ')
              ||  rtrim ('                                                                                   from   perfil_usuario      pu                    ')
              ||  rtrim ('                                                                                   where  pu.cod_usuario      = :cod_usuario        ')
              ||  rtrim ('                                                                                   and    pu.cod_perfil       = apn2.cod_perfil     ')
              ||  rtrim ('                                                                                  )                                                 ')
              ||  rtrim ('                                                      or exists                   (select null                                      ')
              ||  rtrim ('                                                                                   from   perfil_tipo_usuario pu                    ')
              ||  rtrim ('                                                                                   where  pu.cod_tipo_usuario = :cod_tipo_usuario   ')
              ||  rtrim ('                                                                                   and    pu.cod_perfil       = apn2.cod_perfil     ')
              ||  rtrim ('                                                                                  )                                                 ')
              ||  rtrim ('                                                      )                                                                             ')
              ||  rtrim ('                                                 )                                                                                  ')
              ||  rtrim ('                    )                                                                                                               ')
              ||  rtrim ('           )                                                                                                                        ')
              || case when p_num_pedido is not null then
                  rtrim (' and not exists ( select null                                                                                                       ')
              ||  rtrim ('                  from   autorizacao_liberacao                                                                                      ')
              ||  rtrim ('                  where  num_pedido               = :num_pedido                                                                     ')
              ||  rtrim ('                  and    cod_grupo_encaminhamento = a.cod_grupo_encaminhamento                                                      ')
              ||  rtrim ('                  and    ind_situacao             = 1                                                                               ')
              ||  rtrim ('                )                                                                                                                   ')
                else
                  rtrim (' and ''X'' = :num_pedido                                                                                                            ')
                end
              ||  rtrim (' order by a.nom_grupo                                                                                                               ');

      open result
      for  str_sql
      using upper(p_cod_usuario)
          , upper(p_cod_usuario)
          , v_cod_tipo_usuario
          , upper(p_cod_usuario)
          , v_cod_tipo_usuario
          , case when p_num_pedido is not null then p_num_pedido else 'X' end
          ;
      --
      return result;
      --
  exception
  when others then
      --
      ts_log_execucao ('aut_rcs_grupo_analise'
                      , NULL
                      , sqlerrm
                      , p_cod_usuario || chr(13) || str_sql
                      , 'Erro: get_rs_grupo_usuario'
                      ) ;
      raise;
  end;
  --
  --

   function get_in_unidade_usuario ( p_cod_usuario           in varchar2 )
    return varchar2
    is
        v_cod_tipo_usuario          usuario.cod_tipo_usuario%type;
        v_cod_identificacao_ts      usuario.cod_identificacao_ts%type;
        v_retorno                   varchar2(4000);
    begin
        begin
            select cod_tipo_usuario         , cod_identificacao_ts
            into   v_cod_tipo_usuario       , v_cod_identificacao_ts
            from   ts_sec.usuario
            where  cod_usuario              = p_cod_usuario;
        exception
        when no_data_found then
            return '0';
        end;
        --
        begin
            --
            if v_cod_tipo_usuario = 1 then
                -- Pegar do prestador
                select to_char(cod_inspetoria_ts)
                into   v_retorno
                from   prestador_servico
                where  cod_prestador_ts = v_cod_identificacao_ts;
            else
                --Pegar do perfil
                select top_utl_padrao.aggvarchar (cast (collect (to_char (val_permitido)) as lst_varchar_4k),',')
                into   v_retorno
                from ( select distinct apn.val_permitido
                       from   autorizacao_perfil_nivel apn
                       where  apn.cod_tipo_nivel       =  '12'
                       and  (    exists ( select null
                                          from   perfil_usuario      pu
                                          where  pu.cod_usuario      = p_cod_usuario
                                          and    pu.cod_perfil       = apn.cod_perfil
                                        )
                              or exists ( select null
                                          from   perfil_tipo_usuario pu
                                          where  pu.cod_tipo_usuario = v_cod_tipo_usuario
                                          and    pu.cod_perfil       = apn.cod_perfil
                                        )
                            )
                     );
                --
            end if;
        exception
        when no_data_found then
            return '0';
        end;
        --
        return nvl(v_retorno,'0');
        --
    end;
function get_in_operadora_usuario ( p_cod_usuario           in varchar2 )
    return varchar2
    is
        v_cod_tipo_usuario          usuario.cod_tipo_usuario%type;
        v_cod_identificacao_ts      usuario.cod_identificacao_ts%type;
        v_retorno                   varchar2(4000);
    begin
        begin
            select cod_tipo_usuario         , cod_identificacao_ts
            into   v_cod_tipo_usuario       , v_cod_identificacao_ts
            from   usuario
            where  cod_usuario              = p_cod_usuario;
        exception
        when no_data_found then
            return '0';
        end;
        --
        begin
            --
            if v_cod_tipo_usuario = 1 then
                --Usuário prestador
                select top_utl_padrao.aggvarchar (cast (collect (to_char (cod_operadora)) as lst_varchar_4k),',')
                into   v_retorno
                from   prestador_operadora
                where  cod_prestador_ts     = v_cod_identificacao_ts
                and    ind_situacao         in ('A','I');
            else
                -- Pegar do perfil
                select top_utl_padrao.aggvarchar (cast (collect (to_char (val_permitido)) as lst_varchar_4k),',')
                into   v_retorno
                from ( select distinct apn.val_permitido
                       from   autorizacao_perfil_nivel apn
                       where  apn.cod_tipo_nivel       =  '11'
                       and  (    exists ( select null
                                          from   perfil_usuario      pu
                                          where  pu.cod_usuario      = p_cod_usuario
                                          and    pu.cod_perfil       = apn.cod_perfil
                                        )
                              or exists ( select null
                                          from   perfil_tipo_usuario pu
                                          where  pu.cod_tipo_usuario = v_cod_tipo_usuario
                                          and    pu.cod_perfil       = apn.cod_perfil
                                        )
                            )
                     );
                --
            end if;
            --
        exception
        when no_data_found then
            return '0';
        end;
        --
        return nvl(v_retorno,'0');
        --
    end;

      function get_cursor_tab_auxiliar ( p_ind_tipo      in varchar2
                                   , p_cod_filtro    in varchar2     default null
                                   , p_cod_filtro_ts in varchar2     default null
                                   , p_ctr_logs      in varchar2     default 'N'
                                   )
  return sys_refcursor
  is
     result                        sys_refcursor;
     v_cod_ts                      varchar2(50);
     v_cod_tipo_usuario            usuario.cod_tipo_usuario%type;

  begin
     --
    if p_ind_tipo in ('FILIAL','UNIDADE') then
        begin
            select cod_tipo_usuario
            into   v_cod_tipo_usuario
            from   usuario
            where  cod_usuario            = upper(p_cod_filtro);
        exception
        when others then
            null;
        end;
    end if;
    --
    if p_ind_tipo = 'FILIAL' then                --Filial
        --
        open result
        for   select    cod_sucursal            , nome_sucursal
              from      sucursal
              -- Está marcado em dos perfis do usuário
              where     cod_sucursal        in (select apn.val_permitido
                                                from   autorizacao_perfil_nivel  apn
                                                where  apn.cod_tipo_nivel        =  '10'
                                                and (  exists                   (select null
                                                                                 from   perfil_usuario      pu
                                                                                 where  pu.cod_usuario      = p_cod_filtro
                                                                                 and    pu.cod_perfil       = apn.cod_perfil
                                                                                )
                                                    or exists                   (select null
                                                                                 from   perfil_tipo_usuario pu
                                                                                 where  pu.cod_tipo_usuario = v_cod_tipo_usuario
                                                                                 and    pu.cod_perfil       = apn.cod_perfil
                                                                                )
                                                    )
                                               )
              -- Ou não existe marcação para nenhum perfil do usuário
              or        not exists             (select null
                                                from   autorizacao_perfil_nivel apn2
                                                where  apn2.cod_tipo_nivel      = '10'
                                                and (  exists                   (select null
                                                                                 from   perfil_usuario      pu
                                                                                 where  pu.cod_usuario      = p_cod_filtro
                                                                                 and    pu.cod_perfil       = apn2.cod_perfil
                                                                                )
                                                    or exists                   (select null
                                                                                 from   perfil_tipo_usuario pu
                                                                                 where  pu.cod_tipo_usuario = v_cod_tipo_usuario
                                                                                 and    pu.cod_perfil       = apn2.cod_perfil
                                                                                )
                                                    )
                                               )
              order by nome_sucursal;
        --
    elsif p_ind_tipo = 'UNIDADE' then              --Unidade
        --
        open  result
        for   select    cod_inspetoria_ts   , nome_inspetoria
              from      inspetoria
              where     cod_sucursal        = to_number(nvl(p_cod_filtro_ts,0))
              -- Está marcado em um dos perfis do usuário
              and   (   cod_inspetoria_ts   in (select apn.val_permitido
                                                from   autorizacao_perfil_nivel apn
                                                where  apn.cod_tipo_nivel       =  '12'
                                                and (  exists                   (select null
                                                                                 from   perfil_usuario      pu
                                                                                 where  pu.cod_usuario      = p_cod_filtro
                                                                                 and    pu.cod_perfil       = apn.cod_perfil
                                                                                )
                                                    or exists                   (select null
                                                                                 from   perfil_tipo_usuario pu
                                                                                 where  pu.cod_tipo_usuario = v_cod_tipo_usuario
                                                                                 and    pu.cod_perfil       = apn.cod_perfil
                                                                                )
                                                    )
                                                )
              -- Ou não existe marcação para nenhum perfil do usuário, porém existe para o PAI então recuperar todos do pai
                     or  not exists             (select null
                                                 from   autorizacao_perfil_nivel apn2
                                                 where  apn2.cod_tipo_nivel      = '12'
                                                 and    apn2.val_permitido       in (select cod_inspetoria_ts
                                                                                     from   inspetoria
                                                                                     where  cod_sucursal = to_number(nvl(p_cod_filtro_ts,0)))
                                                 and (  exists                   (select null
                                                                                  from   perfil_usuario      pu
                                                                                  where  pu.cod_usuario      = p_cod_filtro
                                                                                  and    pu.cod_perfil       = apn2.cod_perfil
                                                                                 )
                                                     or exists                   (select null
                                                                                  from   perfil_tipo_usuario pu
                                                                                  where  pu.cod_tipo_usuario = v_cod_tipo_usuario
                                                                                  and    pu.cod_perfil       = apn2.cod_perfil
                                                                                 )
                                                     )
                                                )
                 )
              order by nome_inspetoria;
    else
        open result
        for  select * from dual where 1 = 2;        --Retornar um cursor vazio
        --
    end if;
    --
    return result;
    --
  exception
  when others then
       ts_log_execucao( p_txt_nom_rotina  => 'AUT_RCS_REGRA_AUTORIZACAO'
                             , p_cod_posicao     => 9
                             , p_txt_erro_oracle => 'Erro'
                             , p_txt_parametros  => 'p_ind_tipo      = ' || p_ind_tipo      || chr(13) ||
                                                    'p_cod_filtro    = ' || p_cod_filtro    || chr(13) ||
                                                    'p_cod_filtro_ts = ' || p_cod_filtro_ts || chr(13) ||
                                                    'Erro            = ' || sqlerrm || '(' || ts.top_utl_padrao.msgerro || ')'
                             , p_txt_mensagem    => 'get_cursor_tab_auxiliar'
                             ) ;
       --
       return get_cursor_vazio;
  end;
end rbm_rcs_previa_ped_reemb;
/
